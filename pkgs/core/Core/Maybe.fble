@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

# Maybe@ --
#   Type representing an optional value.
#
# Type Parameters:
#   T@ - The type of value that is optional.
#
# Fields: 
#   just - The value is present.
#   nothing - The value is not present.
<@>@ Maybe@ = <@ T@> { +(T@ just, Unit@ nothing); };

# Just --
#   Construct a Maybe@ with a value that is present.
#
# Type Parameters:
#   T@ - The type of the value that is present.
#
# Arguments:
#   x - The value that is present.
#
# Returns:
#   A Maybe@ with the given present value.
#
# Example Use:
#   Maybe@<Foo@> = Just<Foo@>(MyFoo);
<@ T@>(T@){ Maybe@<T@>; } Just = <@ T@>(T@ x) { Maybe@(just: x); };

# Nothing --
#   A Maybe@ that does not have a value present.
#
# Type Parameters:
#   T@ - The type of value that the Maybe holds.
#
# Example Use:
#   Maybe@<Foo@> = Nothing<Foo@>;
Maybe@ Nothing = <@ T@> { Maybe@<T@>(nothing: Unit); };

# Map --
#   Apply a function to the value of a Maybe.
#
# Type Parameters:
#   A@ - The type of element of the input maybe.
#   B@ - The type of element of the output maybe.
#
# Arguments:
#   m - The input maybe
#   f - the function to apply
#
# Result:
#   A maybe with f(m.just) as the value if m is has a present value.
<@ A@, @ B@>(Maybe@<A@>, (A@) { B@; }) { Maybe@<B@>; }
Map = <@ A@, @ B@>(Maybe@<A@> m, (A@) { B@; } f) {
  m.?(nothing: Nothing<B@>);
  Just(f(m.just));
};

# Do - Monadic do operation for Maybe@.
#  Applies the function if the argument is Just.
<@ A@>(Maybe@<A@>)<@ B@>((A@) { Maybe@<B@>; }) { Maybe@<B@>; }
Do = <@ A@>(Maybe@<A@> m)<@ B@>((A@) { Maybe@<B@>; } f) {
  m.?(nothing: Nothing<B@>);
  f(m.just);
};

# For --
#   Repeatedly apply the body of the loop for as long as the index value is
#   not Nothing.
#
# Type Parameters:
#   I@ - The type of the index value.
#   B@ - The type of the result of the for loop.
#
# Arguments:
#   mi - The first index value, or Nothing if no iterations should occur.
#   next - Compute the next index value from the current index value.
#   base - The initial loop state.
#   body - The body of the loop.
<@ I@>(Maybe@<I@>, (I@) { Maybe@<I@>; })<@ B@>(B@, (I@, B@) { B@; }) { B@; }
For = <@ I@>(Maybe@<I@> mi, (I@) { Maybe@<I@>; } next)<@ B@>(B@ base, (I@, B@) { B@; } body) {
  mi.?(nothing: base);
  For(next(mi.just), next, body(mi.just, base), body);
};

# DoWhile --
#   The same as a for loop, except that the first iteration is guaranteed to
#   happen.
#
# Type Parameters:
#   I@ - The type of the index value.
#   B@ - The type of the result of the for loop.
#
# Arguments:
#   i - The first index value.
#   next - Compute the next index value from the current index value.
#   base - The initial loop state.
#   body - The body of the loop.
<@ I@>(I@, (I@) { Maybe@<I@>; })<@ B@>(B@, (I@, B@) { B@; }) { B@; }
DoWhile = <@ I@>(I@ i, (I@) { Maybe@<I@>; } next)<@ B@>(B@ base, (I@, B@) { B@; } body) {
  For(Just(i), next, base, body);
};

@(Maybe@, Just, Nothing, Map, Do, For, DoWhile);
