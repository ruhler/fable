
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;
<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;


% Start = /Fbld/Loc%.Start;
% Unknown = /Fbld/Loc%.Unknown;

@ Markup@ = /Fbld/Markup%.Markup@;

<@>@ Result@ = /Fbld/Result%.Result@;
<@>% Ok = /Fbld/Result%.Ok;
<@>% Error = /Fbld/Result%.Error;
% r = /Fbld/Result%.Monad;
<@>% ShowErrors = /Fbld/Result/Show%.ShowErrors;

@ Text@ = /Fbld/Text%.Text@;
% Text = /Fbld/Text%.Text;


# Main --
#   Main function for fbld program.
Main@ Main = <<@>@ M@>(Stdio@<M@> stdio, Monad@<M@> m) {
  % I = /Core/Stream/IStream%(m);
  % O = /Core/Stream/OStream%(m);

  (List@<String@>) { M@<Result@<List@<Text@>>>; }
  ReadInputs = (List@<String@> filenames) {
    filenames.?(nil: m.return(Ok(Nil<Text@>)));
    Result@<List@<Text@>> tail <- m.do(ReadInputs(filenames.cons.tail));
    tail.failed.?(true: m.return(tail));

    String@ filename = filenames.cons.head;
    Maybe@<IStream@<M@>> fin <- m.do({
      /Core/String/Eq%.Eq(Str|'-', filename).?(true: m.return(Just(stdio.in)));
      stdio.read(filename);
    });

    fin.?(nothing: {
      String@ msg = Strs[Str|'unable to open ', filename];
      m.return(Error<List@<Text@>>(Unknown, msg));
    });

    String@ contents <- m.do(I.GetText(fin.just));
    Text@ text = Text(Start(filename), contents);
    m.return(Ok(Cons(text, tail.value.just)));
  };

  (List@<String@> args) {
    Result@<List@<Text@>> inputs <- m.do(ReadInputs(args));
    inputs.failed.?(true: {
      Unit@ _ <- m.do(O.PutStr(stdio.err, ShowErrors(inputs)));
      m.return(False);
    });

    Result@<String@> result = {
      Markup@ parsed <- r.do(/Fbld/Parse%.Parse(inputs.value.just));
      Markup@ evaled <- r.do(/Fbld/Eval%.Eval(/Fbld/Builtin%.Env, parsed));
      /Fbld/Markup%.ToString(evaled);
    };

    result.failed.?(true: {
      Unit@ _ <- m.do(O.PutStr(stdio.err, ShowErrors(result)));
      m.return(False);
    });

    Unit@ _ <- m.do(O.PutStr(stdio.out, result.value.just));
    m.return(True);
  };
};

@(Main);
