
<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;

<@>@ Pure@ = /Core/Stdio/Pure%.Pure@;
% Monad = /Core/Stdio/Pure%.Monad;
% Stdio = /Core/Stdio/Pure%.Stdio;
<@>% Run = /Core/Stdio/Pure%.Run;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Lines = /Core/String%.Lines;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;

@ Profile@ = /Pprof/Profile%.Profile@;
@ Location@ = /Pprof/Profile%.Location@;
@ Sequence@ = /Pprof/Profile%.Sequence@;

@ Samples@ = /Pprof/Profile/Samples%.Samples@;
% Empty = /Pprof/Profile/Samples%.Empty;
% Insert = /Pprof/Profile/Samples%.Insert;

@ Value@ = /Pprof/Profile/Value%.Value@;

<<@>@>% Parse = /Pprof/Perf%.Parse;

String@ BasicStr = Lines[
  Str|'    97.80%     0.00%  foo     foo              [.] 0x005567307360',
  Str|'10 A',
  Str|'20 A;B',
  Str|'30 A;B;C;C',
  Str|'40 A;B;D',
  Str|'31 A;C',
  Str|'    96.14%     0.00%  foo     foo              [.] 0x005567306ff4',
  Str|'',
  Str|''
];

@ Sample@ = *(Value@ metrics, Sequence@ path);

(List@<Sample@>) { Samples@; }
Inserts = (List@<Sample@> xs) {
  xs.?(nil: Empty);
  Insert(Inserts(xs.cons.tail), xs.cons.head.path,xs.cons.head.metrics);
};


Profile@ BasicProfile = @(
  metrics: List[Str|'samples'],

  samples: Inserts[
    @(metrics: List[Int|31], path: List[Int|0, Int|2]),
    @(metrics: List[Int|40], path: List[Int|0, Int|1, Int|3]),
    @(metrics: List[Int|30], path: List[Int|0, Int|1, Int|2, Int|2]),
    @(metrics: List[Int|20], path: List[Int|0, Int|1]),
    @(metrics: List[Int|10], path: List[Int|0])
  ],

  locations: List[
    Location@(Int|3, Str|'D', Str|'???', Int|0, Int|0),
    Location@(Int|2, Str|'C', Str|'???', Int|0, Int|0),
    Location@(Int|1, Str|'B', Str|'???', Int|0, Int|0),
    Location@(Int|0, Str|'A', Str|'???', Int|0, Int|0)
  ]
);

(String@) { List@<Int@>; } Bytes = (String@ str) {
  /Core/List%.Map(str, /Core/Char/Ascii%.Ord);
};

Test@ Tests = TestSuite(Str|Perf, List[
  Test(Str|Parse, (Unit@ _) {
    List@<Int@> inputs = Bytes(BasicStr);
    Maybe@<Profile@> wnt = Just(BasicProfile);
    Maybe@<Profile@> got = Run(Parse<Pure@>(Monad, Stdio.in), inputs).x;
    AssertEquals(
      /Core/Maybe/Eq%.Eq(/Pprof/Profile/Eq%.Profile),
      /Core/Maybe/Show%.Show(/Pprof/Profile/Show%.Profile),
      wnt, got);
  })
]);

@(Tests);
