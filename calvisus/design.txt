Calvisus Design 1
-----------------
* Implement in C (not C++)
* The expr type will use strings for references. This is geared for describing
  a calvisus expression, not for efficient execution.
* Don't worry about performance for the first version of the evaluator.
  Things will be slow! Lots of string compares. Doesn't matter.
* Handle GC using Boehm collector.
* Handle native stack tail call issue using an interpreter loop to track state
  instead of the native stack. We have the following microinstructions:
    eval <expr> <target>
    access <value> <index>
    cond <value> <expr[]>
    var <name> <value>
    devar
    scope <scope>
* Handle managed stack tail call issue by not pushing 'scope' on the command
  list right on top of another 'scope' command.
