
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;

@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;

<@>@ Pure@ = /Core/Stdio/Pure%.Pure@;
<@>@ PureResult@ = /Core/Stdio/Pure%.PureResult@;
@ PureState@ = /Core/Stdio/Pure%.PureState@;
% Monad = /Core/Stdio/Pure%.Monad;
% Stdio = /Core/Stdio/Pure%.Stdio;
<@>% Run = /Core/Stdio/Pure%.Run;
<@>% PureResultEq = /Core/Stdio/Pure/Eq%.PureResultEq;
<@>% PureResultShow = /Core/Stdio/Pure/Show%.PureResultShow;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

# Import to test compilation.
% _ = /Core/Stdio/Cat%;
% _ = /Core/Stdio/Test%;

% S = /Core/Stdio/Stdio%<Pure@>(Monad, Stdio);

(String@) { List@<Int@>; } Bytes = (String@ str) {
  /Core/List%.Map(str, /Core/Char/Ascii%.Ord);
};

List@<Int@> HelloWorld = Bytes|'Hello
World';

# Tests --
#  A test suite to test the /Stdio% module and friends.
Test@ Tests = TestSuite(Str|Stdio, List[
  Test(Str|Return, (Unit@ _) {
    List@<Int@> inputs = HelloWorld;
    PureResult@<Bool@> wnt = PureResult@<Bool@>(
      PureState@(inputs, Nil<Int@>, Nil<Int@>), True);
    PureResult@<Bool@> got = Run(Monad.return(True), inputs);
    AssertEquals(
      PureResultEq(/Core/Bool/Eq%.Eq),
      PureResultShow(/Core/Bool/Show%.Show),
      wnt, got);
  }),

  Test(Str|GetLine, (Unit@ _) {
    List@<Int@> inputs = HelloWorld;
    PureResult@<String@> wnt = PureResult@<String@>(
      PureState@(Bytes(Str|World), Nil<Int@>, Nil<Int@>), Str|'Hello
');
    PureResult@<String@> got = Run(S.GetLine(S.Stdin), inputs);
    AssertEquals(
      PureResultEq(/Core/String/Eq%.Eq),
      PureResultShow(/Core/String/Show%.Show),
      wnt, got);
  }),

  Test(Str|GetLineEnd, (Unit@ _) {
    List@<Int@> inputs = Nil<Int@>;
    PureResult@<String@> wnt = PureResult@<String@>(
      PureState@(Nil<Int@>, Nil<Int@>, Nil<Int@>), Str|'');
    PureResult@<String@> got = Run(S.GetLine(S.Stdin), inputs);
    AssertEquals(
      PureResultEq(/Core/String/Eq%.Eq),
      PureResultShow(/Core/String/Show%.Show),
      wnt, got);
  }),

  Test(Str|Stdout, (Unit@ _) {
    List@<Int@> inputs = HelloWorld;
    PureResult@<Unit@> wnt = PureResult@<Unit@>(
      PureState@(inputs, Bytes(Str|There), Nil<Int@>), Unit);
    PureResult@<Unit@> got = Run(S.PutStr(S.Stdout, Str|There), inputs);
    AssertEquals(
      PureResultEq(/Core/Unit/Eq%.Eq),
      PureResultShow(/Core/Unit/Show%.Show),
      wnt, got);
  }),

  Test(Str|Stderr, (Unit@ _) {
    List@<Int@> inputs = HelloWorld;
    PureResult@<Unit@> wnt = PureResult@<Unit@>(
      PureState@(inputs, Nil<Int@>, Bytes(Str|There)), Unit);
    PureResult@<Unit@> got = Run(S.PutStr(S.Stderr, Str|There), inputs);
    AssertEquals(
      PureResultEq(/Core/Unit/Eq%.Eq),
      PureResultShow(/Core/Unit/Show%.Show),
      wnt, got);
  }),

  Test(Str|DoOuts, (Unit@ _) {
    List@<Int@> inputs = HelloWorld;

    PureResult@<Unit@> wnt = PureResult@<Unit@>(
      PureState@(inputs, Bytes(Str|AB), Nil<Int@>), Unit);

    PureResult@<Unit@> got = Run({
      Unit@ _ <- Monad.do(S.PutStr(S.Stdout, Str|A));
      Unit@ _ <- Monad.do(S.PutStr(S.Stdout, Str|B));
      Monad.return(Unit);
    }, inputs);

    AssertEquals(
      PureResultEq(/Core/Unit/Eq%.Eq),
      PureResultShow(/Core/Unit/Show%.Show),
      wnt, got);
  }),

  Test(Str|DoErrs, (Unit@ _) {
    List@<Int@> inputs = HelloWorld;

    PureResult@<Unit@> wnt = PureResult@<Unit@>(
      PureState@(inputs, Nil<Int@>, Bytes(Str|AB)), Unit);

    PureResult@<Unit@> got = Run({
      Unit@ _ <- Monad.do(S.PutStr(S.Stderr, Str|A));
      Unit@ _ <- Monad.do(S.PutStr(S.Stderr, Str|B));
      Monad.return(Unit);
    }, inputs);

    AssertEquals(
      PureResultEq(/Core/Unit/Eq%.Eq),
      PureResultShow(/Core/Unit/Show%.Show),
      wnt, got);
  })
]);

@(Tests);
