@(Unit_, Bool_, Char_, List_, String_) {
  Unit_ { @(Unit@, Unit); };
  Bool_ { @(Bool@, True, False, AndMonoid); };
  Char_ { @(Char@, Chars); };
  List_ { @(S@, P@, S0, S, Append, Concat, MapS, SeqS, AndS); };
  String_ { @(Str@, Str); };

  @ TestResult@ = +(Unit@ pass, Str@ fail);
  @ Test@ = *(Str@ name, TestResult@! test);

  Str@ failed = { Chars; Str([F, A, I, L, E, D]); };

  # Print a string to the given output stream.
  (Str@+, Str@){ Unit@!; } Print = (Str@+ out, Str@ str) {
    Str@ _ := out(str);
    $(Unit);
  };

  # Print a string and newline to the given output stream.
  (Str@+, Str@){ Unit@!; } PrintLn = (Str@+ out, Str@ str) {
    Str@ _ := out(Append<Char@>(str, Str([Chars.nl])));
    $(Unit);
  };

  # Returns True if the tests all pass, false otherwise.
  (Str@+, S@<Test@>){Bool@!;} RunTests = (Str@+ out, S@<Test@> tests) {
    SeqS<Bool@>(AndMonoid, {
      Test@ test <- MapS<Test@, Bool@!>(tests);
      Unit@ _ := Print(out, test.name);
      TestResult@ tr := test.test;
      ?(tr; pass: {
              Unit@ _ := PrintLn(out, S0<Char@>);
              $(True);
            },
            fail: {
              Unit@ _ := PrintLn(out, Concat<Char@>(S<Str@>([
                Str([Chars.colon, Chars.space]),
                failed,
                Str([Chars.colon, Chars.space]),
                tr.fail])));
              $(False);
            });
    });
  };

  S@<Test@> Tests = {
    Str@ prefix = { Chars; Str([T, e, s, t, period]); };
    (Str@){Str@;} name = (Str@ nm) {
      Append<Char@>(prefix, nm);
    };

    Test@ pass = Test@(
      name({ Chars; Str([p, a, s, s]); }),
      $(TestResult@(pass: Unit)));

    Test@ fail = Test@(
      name({ Chars; Str([f, a, i, l]); }),
      $(TestResult@(fail: failed)));

    S<Test@>([pass]);
  };

  @(Str@, TestResult@, Test@, RunTests, Tests);
};
