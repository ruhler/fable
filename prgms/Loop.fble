
<@>@ Maybe@ = /Maybe%.Maybe@;
<@>% Just = /Maybe%.Just;

# For --
#   Repeatedly apply the body of the loop for as long as the index value is
#   not Nothing.
#
# Type Parameters:
#   I@ - The type of the index value.
#   B@ - The type of the result of the for loop.
#
# Arguments:
#   mi - The first index value, or Nothing if no iterations should occur.
#   next - Compute the next index value from the current index value.
#   base - The initial loop state.
#   body - The body of the loop.
<@ I@, @ B@>(Maybe@<I@>, (I@) { Maybe@<I@>; }, B@, (I@, B@) { B@; }) { B@; }
For = <@ I@, @ B@>(Maybe@<I@> mi, (I@) { Maybe@<I@>; } next, B@ base, (I@, B@) { B@; } body) {
  mi.?(
    just: For<I@, B@>(next(mi.just), next, body(mi.just, base), body),
    nothing: base);
};

# DoWhile --
#   The same as a for loop, except that the first iteration is guaranteed to
#   happen.
#
# Type Parameters:
#   I@ - The type of the index value.
#   B@ - The type of the result of the for loop.
#
# Arguments:
#   i - The first index value.
#   next - Compute the next index value from the current index value.
#   base - The initial loop state.
#   body - The body of the loop.
<@ I@, @ B@>(I@, (I@) { Maybe@<I@>; }, B@, (I@, B@) { B@; }) { B@; }
DoWhile = <@ I@, @ B@>(I@ i, (I@) { Maybe@<I@>; } next, B@ base, (I@, B@) { B@; } body) {
  For<I@, B@>(Just<I@>(i), next, base, body);
};

@(For, DoWhile);

