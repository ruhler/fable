
@ Bool@ = /Bool%.Bool@;
% True = /Bool%.True;
% False = /Bool%.False;

@ Char@ = /Char%.Char@;
% Chars = /Char%.Chars;

@ Int@ = /Int/Int%.Int@;
% 0 = /Int/Int%.0;
% Inc = /Int/Int%.Inc;
% Sub = /Int/Int%.Sub;

<@>@ List@ = /List%.List@;
<@>% Nil = /List%.Nil;
<@>% List = /List%.List;
<@>% Append = /List%.Append;
<@>% Concat = /List%.Concat;
<@>% Cons = /List%.Cons;
<@,@>% ProcessEach = /List%.ProcessEach;
<@>% Length = /List/Length%.Length;

<@,@>@ Lit@ = /Literal%.Lit@;

<@>@ Put@ = /Process%.Put@;

@ String@ = /String%.String@;
<@>@ CharLit@ = /String%.CharLit@;
% Str = /String%.Str;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

@ TestResult@ = +(Unit@ pass, String@ fail);
@ TestCase@ = *(String@ name, TestResult@! test);
@ TestSuite@ = *(String@ name, List@<Test@> tests),
@ Test@ = +(TestCase@ case, TestSuite@ suite);

# Test --
#   Creates a test.
#
# In particular, this is more convenient to use than Test@(...) if you want to
# specify the name of the test using a CharLit@ instead of a String@.
#
# Inputs:
#   name - the name of the test
#   test - a process that returns the result of the test
(CharLit@, TestResult@!) { Test@; } Test = (CharLit@ name, TestResult@! test) {
  Test@(case: TestCase@(Str(name), test));
};

# TestSuite --
#   Creates a suite of tests.
#
# Inputs:
#   name - the name of the test suite.
#   tests - the list of tests in the test suite.
(CharLit@, Lit@<Test@>) { Test@; }
TestSuite = (CharLit@ name, Lit@<Test@> tests) {
  Test@(suite: TestSuite@(Str(name), List<Test@>(tests)));
};

<@ T@>((T@, T@) { Bool@; }, (T@) { String@; }, T@, T@) { TestResult@; }
AssertEquals = <@ T@>(/Eq%.Eq@<T@> eq, /Show%.Show@<T@> show, T@ expected, T@ actual) {
  eq(expected, actual).?(
    true: TestResult@(pass: Unit),
    false: TestResult@(fail: Concat<Char@>(List<String@>([
          Str(Chars|'expected: '),
          show(expected),
          Str(Chars|', but got: '),
          show(actual)]))));
};

# Print a string to the given output stream.
(Put@<String@>, String@) { Unit@!; } Print = (Put@<String@> out, String@ str) {
  out(str);
};

# Print a string and newline to the given output stream.
(Put@<String@>, String@) { Unit@!; } PrintLn = (Put@<String@> out, String@ str) {
  out(Append<Char@>(str, Str([Chars.nl])));
};

# Returns True if the test passes, false otherwise.
(Put@<String@>, Test@) { Bool@!; } RunTests = (Put@<String@> out, Test@ test) {
  @ Failure@ = *(String@ name, String@ msg);

  # Run all the tests, given a list of tests that failed so far.
  # Returns the number of total tests executed and the list of failing tests.
  @ Status@ = *(Int@ total, List@<Failure@> failures);
  (Test@, String@, Status@) { Status@!; }
  Run = (Test@ test, String@ prefix, Status@ status) {
    test.?(
      case: {
        TestCase@ t = test.case;
        TestResult@ tr := t.test;
        String@ short = Str(tr.?(pass: Chars|'.', fail: Chars|'F'));
        Unit@ _ := out(short);
        List@<Failure@> nfailed = tr.?(
          pass: status.failures,
          fail: Cons<Failure@>(Failure@(Append<Char@>(prefix, t.name), tr.fail), status.failures));
        !(Status@(Inc(status.total), nfailed));
      },
      suite: {
        String@ nprefix = Concat<Char@>(List<String@>([
            prefix, Str(Chars|'.'), test.suite.name]));
        ProcessEach<Test@, Status@>(test.suite.tests, status,
          (Test@ t, Status@ s) {
            Run(t, nprefix, s);
          });
      });
  };

  Status@ status := Run(test, Nil<Char@>, Status@(0, Nil<Failure@>));
  List@<Failure@> failures = status.failures;

  Unit@ _ := PrintLn(out, Nil<Char@>);
  Unit@ _ := ProcessEach<Failure@, Unit@>(failures, Unit, (Failure@ f, Unit@ _) {
    PrintLn(out, Concat<Char@>(List<String@>([f.name, Str(Chars|': FAILED: '), f.msg])));
  });
  Unit@ _ := PrintLn(out, Nil<Char@>);

  Int@ num_total = status.total;
  Int@ num_failed = Length<Failure@>(failures);
  Int@ num_passed = Sub(num_total, num_failed);
  Unit@ _ := PrintLn(out, Concat<Char@>(List<String@>([
    Str(Chars|'Test Summary: '),
    /Int/Int/Show%.Show(num_passed),
    Str(Chars|' passed, '),
    /Int/Int/Show%.Show(num_failed),
    Str(Chars|' failed, '),
    /Int/Int/Show%.Show(num_total),
    Str(Chars|' total')
  ])));

  # TODO: Why do we need this extra output?
  Unit@ _ := PrintLn(out, Nil<Char@>);

  !(failures.?(cons: False, nil: True));
};

# Returns True if the tests all pass, false otherwise.
(Put@<String@>, Test@) { Bool@!; } RunTestsVerbose = (Put@<String@> out, Test@ test) {

  (Test@, String@, Bool@) { Bool@!; }
  Run = (Test@ test, String@ prefix, Bool@ passing) {
    test.?(
      case: {
        Unit@ _ := Print(out, Append<Char@>(prefix, test.case.name));
        TestResult@ tr := test.case.test;
        tr.?(
          pass: {
            Unit@ _ := PrintLn(out, Nil<Char@>);
            !(passing);
          },
          fail: {
            Unit@ _ := PrintLn(
              out,
              Concat<Char@>(List<String@>([
                Str(Chars|': FAILED: '),
                tr.fail])));
            !(False);
          });
      },
      suite: {
        String@ nprefix = Concat<Char@>(List<String@>([
            prefix, Str(Chars|'.'), test.suite.name]));
        ProcessEach<Test@, Bool@>(test.suite.tests, passing,
          (Test@ test, Bool@ passing) {
            Run(test, nprefix, passing);
          });
      });
  };

  Run(test, Nil<Char@>, True);
};

@(
  String@, TestResult@, Test@,
  AssertEquals, Test, TestSuite, RunTests, RunTestsVerbose);
