
@ Bool@ = /Core/Bool%.Bool@;

@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;
<@>% List = /Core/List%.List;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

@ BlockId@ = /Pprof/Profile%.BlockId@;
@ Profile@ = /Pprof/Profile%.Profile@;
@ Sequence@ = /Pprof/Profile%.Sequence@;
@ Sample@ = /Pprof/Profile%.Sample@;

@ Entry@ = /Pprof/Query%.Entry@;
@ Query@ = /Pprof/Query%.Query@;

% MetricOf = /Pprof/Query/Util%.MetricOf;
% Sort = /Pprof/Query/Util%.Sort;

% M = /Core/Int/Map%.Map;

(List@<BlockId@>, BlockId@) { Bool@; }
ContainsBlock = /Core/List/Eq%.Contains(/Pprof/Profile/Eq%.BlockId);

(List@<BlockId@>) { List@<BlockId@>; }
DeDup = (List@<BlockId@> xs) {
  xs.?(nil: xs);

  ContainsBlock(xs.cons.tail, xs.cons.head).?(true: DeDup(xs.cons.tail));
  Cons(xs.cons.head, DeDup(xs.cons.tail));
};

# @func[Query] Helper function for common form of by-frame query.
#  For queries where a subset of frames should be counted for each sample as
#  all or nothing on the sample. Parameterized by the subset of frames to
#  count the sample against. The provided list of frames can have duplicate
#  entries, which will be eliminated before counting.
#
#  @arg[(Sequence@) { List@<BlockId@>; }][frames]
#   The frames to count against for a given sequence.
#  @arg[Profile@][profile] The profile to query.
#  @returns[Table@] The time of each frame in descending order.
((Sequence@) { List@<BlockId@>; }) { Query@; }
Query = ((Sequence@) { List@<BlockId@>; } frames, Profile@ profile) {
  (Sample@, M.Map@<Int@>) { M.Map@<Int@>; }
  Sample = (Sample@ sample, M.Map@<Int@> map) {
    sample.sequence.?(nil: map);

    List@<BlockId@> set = DeDup(frames(sample.sequence));
    Int@ count = MetricOf(sample.values);

    /Core/List%.ForEach(set, map, (BlockId@ block, M.Map@<Int@> m) {
      M.InsertWith(m, block, (Maybe@<Int@> mx) {
        mx.?(just: Add(mx.just, count));
        count;
      });
    });
  };

  (List@<Sample@>, M.Map@<Int@>) { M.Map@<Int@>; }
  Samples = (List@<Sample@> samples, M.Map@<Int@> map) {
    samples.?(nil: map);
    Samples(samples.cons.tail, Sample(samples.cons.head, map));
  };

  M.Map@<Int@> counts = Samples(profile.samples, M.Empty<Int@>);

  Sort(M.ForEach(counts, Nil<Entry@>,
    (BlockId@ block, Int@ value, List@<Entry@> l) {
      Cons(Entry@(List[block], value), l);
    }));
};

@(Query);
