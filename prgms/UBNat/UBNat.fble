@(StdLib) {
  StdLib { @(Unit@, Bool); };
  Bool { @(Bool@, True, False, Eq); };

  @ Nat@ = +(
    Unit@ 0,
    Unit@ 1,
    Nat@ 2p0,  # 2 * x + 0, where x != 0
    Nat@ 2p1   # 2 * x + 1, where x != 0
  );

  Nat@ 0 = Nat@(0: Unit@());
  Nat@ 1 = Nat@(1: Unit@());

  # Compute 2 * x.
  # This is like Nat@(2p0: x), but properly handles the case when x is 0.
  \(Nat@; Nat@) 2p0 = \(Nat@ x) {
    Nat@ z = Nat@(2p0: x);
    ?(x; 0: 0, 1: z, 2p0: z, 2p1: z);
  };

  # Compute 2 * x + 1.
  # This is like Nat@(2p1: x), but properly handles the case when x is 0.
  \(Nat@; Nat@) 2p1 = \(Nat@ x) {
    Nat@ z = Nat@(2p1: x);
    ?(x; 0: 1, 1: z, 2p0: z, 2p1: z);
  };

  # Compute 4 * x.
  \(Nat@; Nat@) 4p0 = \(Nat@ x) {
    Nat@ z = Nat@(2p0: Nat@(2p0: x));
    ?(x; 0: 0, 1: z, 2p0: z, 2p1: z);
  };

  Nat@ 2 = Nat@(2p0: 1);
  Nat@ 3 = Nat@(2p1: 1);
  Nat@ 4 = Nat@(2p0: 2);
  Nat@ 5 = Nat@(2p1: 2);
  Nat@ 6 = Nat@(2p0: 3);
  Nat@ 7 = Nat@(2p1: 3);
  Nat@ 8 = Nat@(2p0: 4);
  Nat@ 9 = Nat@(2p1: 4);
  Nat@ 10 = Nat@(2p0: 5);

  \(Nat@; Nat@) Inc = \(Nat@ a) {
    ?(a; 0: 1, 1: 2, 2p0: Nat@(2p1: a.2p0), 2p1: Nat@(2p0: Inc[a.2p1])); 
  };

  \(Nat@; Nat@) Dec = \(Nat@ a) {
    ?(a; 0: 0,                    # 0 - 1 ==> 0
         1: 0,                    # 1 - 1 = 0
         2p0: 2p1[Dec[a.2p0]],    # 2a - 1 = 2(a-1)+1
         2p1: Nat@(2p0: a.2p1));  # 2a+1 - 1 = 2a
  };

  \(Nat@, Nat@; Nat@) Add = \(Nat@ a, Nat@ b) {
    ?(a; 0: b,
         1: Inc[b],
         2p0:
         ?(b; 0: a,
              1: Nat@(2p1: a.2p0),
              2p0: Nat@(2p0: Add[a.2p0][b.2p0]),        # 2a + 2b = 2(a+b)
              2p1: Nat@(2p1: Add[a.2p0][b.2p1])),       # 2a + 2b+1 = 2(a+b)+1
         2p1:
         ?(b; 0: a, 
              1: Nat@(2p0: Inc[a.2p1]),                 # 2a+1 + 1 = 2(a+1)
              2p0: Nat@(2p1: Add[a.2p1][b.2p0]),        # 2a+1 + 2b = 2(a+b)+1
              2p1: Nat@(2p0: Inc[Add[a.2p1][b.2p1]]))); # 2a+1 + 2b+1 = 2(a+b+1)
  };

  \(Nat@, Nat@; Nat@) Sub = \(Nat@ a, Nat@ b) {
    ?(b; 0: a,                                    # a - 0 = a
         1: Dec[a],                               # a - 1 = a - 1
         2p0:
         ?(a; 0: 0,                               # 0 - 2b ==> 0
              1: 0,                               # 1 - 2b ==> 0
              2p0: 2p0[Sub[a.2p0][b.2p0]],        # 2a - 2b = 2(a-b)
              2p1: 2p1[Sub[a.2p1][b.2p0]]),       # 2a+1 - 2b = 2(a-b) + 1
         2p1:
         ?(a; 0: 0,                               # 0 - (2b+1) ==> 0
              1: 0,                               # 1 - (2b+1) ==> 0
              2p0: Dec[2p0[Sub[a.2p0][b.2p1]]],   # 2a - (2b+1) = 2(a-b) - 1
              2p1: 2p0[Sub[a.2p1][b.2p1]]));      # 2a+1 - (2b+1) = 2(a-b)
  };

  \(Nat@, Nat@; Nat@) Mul = \(Nat@ a, Nat@ b) {
    ?(a; 0: 0,                                      # 0 * b = 0
         1: b,                                      # 1 * b = b
         2p0:
         ?(b; 0: 0,                                 # 2a * 0 = 0
              1: a,                                 # 2a * 1 = 2a
              2p0: 4p0[Mul[a.2p0][b.2p0]],          # 2a * 2b = 4ab
              2p1: Add[4p0[Mul[a.2p0][b.2p1]]][a]), # 2a * (2b+1) = 4ab + 2a
         2p1:
         ?(b; 0: 0,                                 # (2a+1) * 0 = 0
              1: a,                                 # (2a+1) * 1 = 2a+1
              2p0: Add[4p0[Mul[a.2p1][b.2p0]]][b],  # (2a+1) * 2b = 4ab + 2b
                                                    # (2a+1) * (2b+1) = 2(2ab + a + b) + 1
              2p1: Nat@(2p1: Add[Nat@(2p0: Mul[a.2p1][b.2p1])][Add[a.2p1][b.2p1]])));
  };

  \(Nat@, Nat@; Bool@) Lt = \(Nat@ a, Nat@ b) {
    ?(a;
       0:   ?(b; 0: False, 1: True, 2p0: True, 2p1: True),
       1:   ?(b; 0: False, 1: False, 2p0: True, 2p1: True),
       2p0: ?(b; 0: False, 1: False, 2p0: Lt[a.2p0][b.2p0], 2p1: Le[a.2p0][b.2p1]),
       2p1: ?(b; 0: False, 1: False, 2p0: Lt[a.2p1][b.2p0], 2p1: Lt[a.2p1][b.2p1]));
  },
  \(Nat@, Nat@; Bool@) Le = \(Nat@ a, Nat@ b) {
    ?(a;
       0: ?(b; 0: True, 1: True, 2p0: True, 2p1: True),
       1: ?(b; 0: False, 1: True, 2p0: True, 2p1: True),
       2p0: ?(b; 0: False, 1: False, 2p0: Le[a.2p0][b.2p0], 2p1: Le[a.2p0][b.2p1]),
       2p1: ?(b; 0: False, 1: False, 2p0: Lt[a.2p1][b.2p0], 2p1: Le[a.2p1][b.2p1]));
  };

  @ DivModResult@ = *(Nat@ quotient, Nat@ remainder);

  # DivMod assuming b > 1
  \(Nat@, Nat@; DivModResult@) DivModAux = \(Nat@ a, Nat@ b) {
    ?(a; 0: DivModResult@(0, 0),
         1: DivModResult@(0, 1),
         2p0: { 
            DivModResult@ qr = DivModAux[a.2p0][b];
            Nat@ 2r = 2p0[qr.remainder];
            ?(Lt[2r][b];
                true: DivModResult@(2p0[qr.quotient], 2r),
                false: DivModResult@(2p1[qr.quotient], Sub[2r][b]));
         },
         2p1: {
            DivModResult@ qr = DivModAux[a.2p1][b];
            Nat@ 2rp1 = Inc[2p0[qr.remainder]];
            ?(Lt[2rp1][b];
                true: DivModResult@(2p0[qr.quotient], 2rp1),
                false: DivModResult@(2p1[qr.quotient], Sub[2rp1][b]));
         });
  };

  \(Nat@, Nat@; DivModResult@) DivMod = \(Nat@ a, Nat@ b) {
    ?(b; 0: DivModResult@(0, 0),    
         1: DivModResult@(a, 0),
         2p0: DivModAux[a][b],
         2p1: DivModAux[a][b]);
  };

  \(Nat@, Nat@; Nat@) Div = \(Nat@ a, Nat@ b) {
    DivMod[a][b].quotient;
  };

  \(Nat@, Nat@; Nat@) Mod = \(Nat@ a, Nat@ b) {
    DivMod[a][b].remainder;
  };

  \(Nat@; Bool@) IsZero = \(Nat@ a) {
    ?(a; 0: True, 1: False, 2p0: False, 2p1: False);
  };

  \(Nat@, Nat@; Bool@) EqNat = \(Nat@ a, Nat@ b) {
    ?(a;
       0:   ?(b; 0: True,  1: False, 2p0: False, 2p1: False),
       1:   ?(b; 0: False, 1: True,  2p0: False, 2p1: False),
       2p0: ?(b; 0: False, 1: False, 2p0: EqNat[a.2p0][b.2p0], 2p1: False),
       2p1: ?(b; 0: False, 1: False, 2p0: False, 2p1: EqNat[a.2p1][b.2p1]));
  };

  \(Nat@, Nat@; Bool@) Gt = \(Nat@ a, Nat@ b) {
    ?(a; 0: False,
       1: ?(b; 0: True, 1: False, 2p0: False, 2p1: False),
       2p0: ?(b; 0: True, 1: True, 2p0: Gt[a.2p0][b.2p0], 2p1: Gt[a.2p0][b.2p1]),
       2p1: ?(b; 0: True, 1: True, 2p0: Ge[a.2p1][b.2p0], 2p1: Gt[a.2p1][b.2p1]));
  },
  \(Nat@, Nat@; Bool@) Ge = \(Nat@ a, Nat@ b) {
    ?(a;
       0: ?(b; 0: True, 1: False, 2p0: False, 2p1: False),
       1: ?(b; 0: True, 1: True, 2p0: False, 2p1: False),
       2p0: ?(b; 0: True, 1: True, 2p0: Ge[a.2p0][b.2p0], 2p1: Gt[a.2p0][b.2p1]),
       2p1: ?(b; 0: True, 1: True, 2p0: Ge[a.2p1][b.2p0], 2p1: Ge[a.2p1][b.2p1]));
  };

  Nat@ 100 = Mul[10][10];

  \(Nat@, Nat@; Nat@) Lit2 = \(Nat@ a, Nat@ b) {
    Add[Mul[10][a]][b];
  };

  \(Nat@, Nat@, Nat@; Nat@) Lit3 = \(Nat@ a, Nat@ b, Nat@ c) {
    Add[Mul[100][a]][Lit2[b][c]];
  };

  @(Nat@, DivModResult@, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, Lit2, Lit3,
    Inc, Dec, Add, Sub, Mul, Div, Mod, DivMod,
    IsZero, EqNat, Lt, Le, Gt, Ge);
};
