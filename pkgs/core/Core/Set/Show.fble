
<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Cons = /Core/List%.Cons;
<@>% Reverse = /Core/List%.Reverse;

<<@>@,@>@ Map@ = /Core/Map%.Map@;

<@>@ Show@ = /Core/Show%.Show@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

# Show --
#   Implementation of Show@ for Set@<T@>. See documentation of
#   /Core/Show%.Show@.
#
#   { }
#   { a; }
#   { a; b; }
#
<<@>@, @>% Show = <<@>@ M@, @ K@>(Map@<M@, K@> m, Show@<K@> show_key) {
  % S = /Core/Set%(m);

  Show@<S.Set@> show = (S.Set@ s) {
    List@<String@> elems = S.ForEach(s, List[Str|'{ '],
      (K@ x, List@<String@> es) {
        Cons(Strs[show_key(x), Str|'; '], es);
      });
    Strs(Reverse(Cons(Str|'}', elems)));
  };

  show;
};

@(Show);
