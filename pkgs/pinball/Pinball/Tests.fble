
<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;

@ Num@ = /Pinball/Num%.Num@;
% Neg = /Pinball/Num%.Neg;
% Int = /Pinball/Num%.Int;
% Sub = /Pinball/Num%.Sub;
% Div = /Pinball/Num%.Div;

@ Ball@ = /Pinball/Ball%.Ball@;

@ Edge@ = /Pinball/Edge%.Edge@;
% Edge = /Pinball/Edge%.Edge;

@ Paddle@ = /Pinball/Paddle%.Paddle@;
% Paddle = /Pinball/Paddle%.Paddle;

@ World@ = /Pinball/World%.World@;
% Tick = /Pinball/World%.Tick;

@ Vec@ = /Pinball/Vec%.Vec@;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;

# Import to test compilation.
% _ = /Pinball/App%;
% _ = /Pinball/Bench%;
% _ = /Pinball/Circle%;

Test@ Tests = TestSuite(Str|'Pinball', List<Test@>[
  /Pinball/Rotate/Tests%.Tests,
  /Pinball/Quadratic/Tests%.Tests,

  Test(Str|'Move Ball No Collision', (Unit@ _) {
    # The ball moves freely to the right 10 units per tick.
    World@ start = @(
      gravity: Vec@(Int|0, Int|0),
      ball: Ball@(Vec@(Int|0, Int|0), Vec@(Int|10, Int|0), Int|1),
      edges: Nil<Edge@>,
      paddles: Nil<Paddle@>);
    World@ end = Tick(start);
    Ball@ want = @(
      pos: Vec@(Int|10, Int|0),
      vel: Vec@(Int|10, Int|0),
      radius: Int|1);
    Ball@ got = end.ball;
    AssertEquals<Ball@>(/Pinball/Ball%.Eq, /Pinball/Ball%.Show, want, got);
  }),
  
  Test(Str|'Move Ball Collision', (Unit@ _) {
    # The ball moves to the right, hits a wall, then bounces back.
    World@ start = @(
      gravity: Vec@(Int|0, Int|0),
      ball: Ball@(Vec@(Int|0, Int|0), Vec@(Int|10, Int|0), Int|1),
      edges: List<Edge@>[
        Edge(Vec@(Int|6, Neg(Int|4)), Vec@(Int|6, Int|4), Int|1)
      ],
      paddles: Nil<Paddle@>);
    World@ end = Tick(start);

    Ball@ want = @(
      pos: Vec@(Int|0, Int|0),
      vel: Vec@(Neg(Int|10), Int|0),
      radius: Int|1);
    Ball@ got = end.ball;
    AssertEquals<Ball@>(/Pinball/Ball%.Eq, /Pinball/Ball%.Show, want, got);
  }),

  Test(Str|'Move Ball Avoid Collision', (Unit@ _) {
    # The ball moves to the right, passing beneath a wall.
    # Regression test for when we failed to check collision happens within the
    # bounds of a wall.
    World@ start = @(
      gravity: Vec@(Int|0, Int|0),
      ball: Ball@(Vec@(Int|0, Int|0), Vec@(Int|10, Int|0), Int|1),
      edges: List<Edge@>[
        Edge(Vec@(Int|5, Int|3), Vec@(Int|5, Int|11), Int|1)
      ],
      paddles: Nil<Paddle@>);
    World@ end = Tick(start);
    Ball@ want = @(
      pos: Vec@(Int|10, Int|0),
      vel: Vec@(Int|10, Int|0),
      radius: Int|1);
    Ball@ got = end.ball;
    AssertEquals<Ball@>(/Pinball/Ball%.Eq, /Pinball/Ball%.Show, want, got);
  }),

  Test(Str|'Stationary Paddle Collision', (Unit@ _) {
    # The ball moves down at constant velocity onto a stationary paddle.
    World@ start = @(
      gravity: Vec@(Int|0, Int|0),
      ball: @(
        pos: Vec@(Int|2, Int|2),
        vel: Vec@(Int|0, Neg(Int|2)),
        radius: Int|1),
      edges: Nil<Edge@>,
      paddles: List<Paddle@>[
        Paddle(
          Vec@(Int|0, Int|0),
          Vec@(Int|0, Int|0),
          Vec@(Int|4, Int|0),
          Int|0, Int|0,
          Neg(Int|1), Int|1, Int|1)
      ]);
    World@ end = Tick(start);
    Ball@ want = @(
      pos: Vec@(Int|2, Int|2),
      vel: Vec@(Int|0, Int|2),
      radius: Int|1);
    Ball@ got = end.ball;
    AssertEquals<Ball@>(/Pinball/Ball%.Eq, /Pinball/Ball%.Show, want, got);
  }),

  Test(Str|'Stationary Paddle Collision Restitution', (Unit@ _) {
    # Test that restitution of the paddle is taken into account during
    # collision.
    World@ start = @(
      gravity: Vec@(Int|0, Int|0),
      ball: @(
        pos: Vec@(Int|2, Int|2),
        vel: Vec@(Int|0, Neg(Int|2)),
        radius: Int|1),
      edges: Nil<Edge@>,
      paddles: List<Paddle@>[
        Paddle(
          Vec@(Int|0, Int|0),
          Vec@(Int|0, Int|0),
          Vec@(Int|4, Int|0), Int|0, Int|0,
          Neg(Int|1), Int|1, Div(Int|1, Int|2))
      ]);
    World@ end = Tick(start);
    Ball@ want = @(
      pos: Vec@(Int|2, Div(Int|3, Int|2)),
      vel: Vec@(Int|0, Int|1),
      radius: Int|1);
    Ball@ got = end.ball;
    AssertEquals<Ball@>(/Pinball/Ball%.Eq, /Pinball/Ball%.Show, want, got);
  }),

  Test(Str|'Stationary Ball With Paddle', (Unit@ _) {
    # Regression test for a divide by zero that happens if the ball is
    # stationary relative to the paddle.
    World@ start = @(
      gravity: Vec@(Int|0, Int|0),
      ball: @(
        pos: Vec@(Int|2, Int|2),
        vel: Vec@(Int|0, Int|0),
        radius: Int|1),
      edges: Nil<Edge@>,
      paddles: List<Paddle@>[
        Paddle(
          Vec@(Int|0, Int|0),
          Vec@(Int|0, Int|0),
          Vec@(Int|4, Int|0), Int|0, Int|0,
          Neg(Int|1), Int|1, Int|1)
      ]);
    World@ end = Tick(start);
    Ball@ want = start.ball;
    Ball@ got = end.ball;
    AssertEquals<Ball@>(/Pinball/Ball%.Eq, /Pinball/Ball%.Show, want, got);
  }),

  Test(Str|'End-Stationary Paddle Collision', (Unit@ _) {
    # The ball moves down at constant velocity onto a paddle that becomes
    # stationary before the ball hits it.
    # This is a regression test for a case where velocity of the paddle was
    # being treated as non-zero in this case.
    World@ start = @(
      gravity: Vec@(Int|0, Int|0),
      ball: @(
        pos: Vec@(Int|2, Int|2),
        vel: Vec@(Int|0, Neg(Int|2)),
        radius: Int|1),
      edges: Nil<Edge@>,
      paddles: List<Paddle@>[
        Paddle(
          Vec@(Int|0, Int|0),
          Vec@(Int|0, Int|0),
          Vec@(Int|4, Int|0), Int|1,
          Neg(Div(Int|1, Int|4)),
          Neg(Int|1), Int|0, Int|1)
      ]);
    World@ end = Tick(start);
    Ball@ want = @(
      pos: Vec@(Int|2, Int|2),
      vel: Vec@(Int|0, Int|2),
      radius: Int|1);
    Ball@ got = end.ball;
    AssertEquals<Ball@>(/Pinball/Ball%.Eq, /Pinball/Ball%.Show, want, got);
  }),

  Test(Str|'Stationary Paddle Non-Collision', (Unit@ _) {
    # The ball moves up at constant velocity away from a stationary paddle.
    # The ball starts just within range of the paddle, but that should not be
    # considered a collision because the ball is moving away from the
    # paddle.
    Num@ e = Div(Int|1, Int|64);
    World@ start = @(
      gravity: Vec@(Int|0, Int|0),
      ball: @(
        pos: Vec@(Int|2, Sub(Int|1, e)),
        vel: Vec@(Int|0, Int|2),
        radius: Int|1),
      edges: Nil<Edge@>,
      paddles: List<Paddle@>[
        Paddle(
          Vec@(Int|0, Int|0),
          Vec@(Int|0, Int|0),
          Vec@(Int|4, Int|0), Int|0, Int|0,
          Neg(Int|1), Int|1, Int|1)
      ]);
    World@ end = Tick(start);
    Ball@ want = @(
      pos: Vec@(Int|2, Sub(Int|3, e)),
      vel: Vec@(Int|0, Int|2),
      radius: Int|1);
    Ball@ got = end.ball;
    AssertEquals<Ball@>(/Pinball/Ball%.Eq, /Pinball/Ball%.Show, want, got);
  }),

  Test(Str|'Moving Paddle Stationary Ball Collision', (Unit@ _) {
    # The paddle moves into a stationary ball.
    World@ start = @(
      gravity: Vec@(Int|0, Int|0),
      ball: @(
        pos: Vec@(Int|2, Int|1),
        vel: Vec@(Int|0, Int|0),
        radius: Int|1),
      edges: Nil<Edge@>,
      paddles: List<Paddle@>[
        Paddle(
          Vec@(Int|0, Int|0),
          Vec@(Int|0, Int|0),
          Vec@(Int|4, Int|0),
          Div(Int|1, Int|2),      # w = 1/2, v = 2w = 1
          Neg(Div(Int|1, Int|4)), # pos = -1/4, so it gets to 0 at time t=1/2
          Neg(Int|1), Int|1, Int|1)
      ]);
    World@ end = Tick(start);
    Ball@ want = @(
      pos: Vec@(Int|2, Int|2),
      vel: Vec@(Int|0, Int|2),
      radius: Int|1);
    Ball@ got = end.ball;

    # TODO: Test fails due to loss of precision. How should we handle this?
    /Core/Test%.ExpectFails(
      AssertEquals<Ball@>(/Pinball/Ball%.Eq, /Pinball/Ball%.Show, want, got),
      Str|'got: Ball@(pos=(257/128, 262/128), vel=(2/128, 254/128)');
  }),

  Test(Str|'Non-centered Paddle Ball Collision', (Unit@ _) {
    # The paddle moves into a moving ball. The start of the paddle
    # position is different from the center.
    # In this case the center of the paddle is directly below the point of
    # collision, so it's as if the ball bounced against a stationary edge in
    # terms of effects on the ball.
    World@ start = @(
      gravity: Vec@(Int|0, Int|0),
      ball: @(
        pos: Vec@(Int|2, Int|2),
        vel: Vec@(Int|0, Neg(Int|2)),
        radius: Int|1),
      edges: Nil<Edge@>,
      paddles: List<Paddle@>[
        Paddle(
          Vec@(Int|2, Neg(Int|2)),
          Vec@(Int|0, Int|0),
          Vec@(Int|4, Int|0),
          Div(Int|1, Int|2),      # w = 1/2
          Neg(Div(Int|1, Int|4)), # pos = -1/4, so it gets to 0 at time t=1/2
          Neg(Int|1), Int|1, Int|1)
      ]);
    World@ end = Tick(start);
    Ball@ want = @(
      pos: Vec@(Int|2, Int|2),
      vel: Vec@(Int|0, Int|2),
      radius: Int|1);
    Ball@ got = end.ball;

    AssertEquals<Ball@>(/Pinball/Ball%.Eq, /Pinball/Ball%.Show, want, got);
  }),

  Test(Str|'Non-centered Paddle Ball Collision Away From Origin', (Unit@ _) {
    # This is the same as the previous test case, except with everything moved
    # away from the origin. Regression test for a case where we were doing
    # things relative to the origin instead of relative to the edge of
    # collision.
    World@ start = @(
      gravity: Vec@(Int|0, Int|0),
      ball: @(
        pos: Vec@(Int|2, Int|22),
        vel: Vec@(Int|0, Neg(Int|2)),
        radius: Int|1),
      edges: Nil<Edge@>,
      paddles: List<Paddle@>[
        Paddle(
          Vec@(Int|2, Int|18),
          Vec@(Int|0, Int|20),
          Vec@(Int|4, Int|20),
          Div(Int|1, Int|2),      # w = 1/2
          Neg(Div(Int|1, Int|4)), # pos = -1/4, so it gets to 0 at time t=1/2
          Neg(Int|1), Int|1, Int|1)
      ]);
    World@ end = Tick(start);
    Ball@ want = @(
      pos: Vec@(Int|2, Int|22),
      vel: Vec@(Int|0, Int|2),
      radius: Int|1);
    Ball@ got = end.ball;

    AssertEquals<Ball@>(/Pinball/Ball%.Eq, /Pinball/Ball%.Show, want, got);
  })
]);

/Core/Test/Run%.Run(Tests);
