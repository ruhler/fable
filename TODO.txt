Primary Arc:
* Separate rest of fblct Expr and Actn fields into SDecl info.
* Change Env to be FblcProgram + Symbol information.
* Clean up interface for loading and checking fblc text code.
* Rewrite testfblc as fblc-test in top of fblc library.
* Modify testfblc to exercise {Read,Write}{Program,Value} functions
  - even though they aren't otherwise necessary to run.
* Remove expect_result_b tests.
* Replace expect_result and expect_proc_result with fblc-test
* Port tictactoe.c to use fblc interface
* Implement fbld front end to fblcbi.
* Port calc Integer to an fbld module.
* Implement space invaders game in fbld.

Miscellanous:
* Rename test/expect-malformed to test/fblc-check-error?
* Use consistent naming in spec tests to distinguish between:
  - Something with the wrong syntax, such as ???. "malformed"
  - Something that cannot be typed, such as x, when x is not defined.  "maltyped"
  - Something with the wrong type, such as Donut(), when Unit() is expected. "mistyped"

* Test that tail recursive functions and procedures don't smash the stack.
* Test that a link's type is valid.
* Test that a link action's ports can't shadow ports already in scope.
* Test that a link can't use the same name for the get and put ports.
* Test that a proc can't have multiple ports of the same name, with or without
  the same polarity.
* Test what happens when we try to access the wrong field of a union.

* Better document that for binary encodings of values, the top level value is
  guarenteed to take at least one bytes, regardless of whether or not it is
  part of a stream.

* Change fblc-check-error and friends to take the program last, and switch to
  a style where an anonymous program is passed rather than setting a $prg
  variable?

* Test writing a stream of Units
 - which requires some alignment be done.

* Test that error messages don't contain garbled characters.

* Write man pages for fblc and friends?
