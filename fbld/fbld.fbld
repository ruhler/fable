@doc Fbld
 @section Introduction
  Fbld is a lightweight markup language for structured text. It aims to
  balance the readibilty of markup languages like asciidoc and markdown with
  the extensibility and clarity of structure of markup languages like xml.
 
  Note: Fbld should not be confused with the predecessor to fble, which was
  also called fbld. We reuse the name @l[fbld] in this case to suggest the
  term "Fable Doc Language".
 
  @subsection Goals
   The primary design goals of fbld are:
 
   @item
    It should be easy to parse, by both human and computer. There should not
    be weird corner cases, ambiguity, or complex resolution rules for parsing
    like there are for markdown, for example.
 
   @item
    The main textural content should be easy to read from source by a human.
    It should not include excessive clutter from tags that overly distract
    from the contents of the text, as is the case with roff and xml, for
    example.
 
   @item
    It should be easy to provide custom processing of the document. For
    example, conversion to html, latex, roff, or anything you might like.
 
   @item
    It should support custom structure, allowing a user to define their own
    new kinds of structures and use those structures in their documents.
 
  @subsection Use Cases
   The original use cases motivating development of the fbld language are:
 
   @item
    Document functions in code and automatically generate man pages from it.
 
   @item
    Document command line usage and automatically generate both man page and
    help usage text from it.
 
   @item
    Mark up README files, tutorials, and language specifications to add
    clarity to structure and make it possible to generate books, webpages,
    etc. with that information.
 
  @subsection Alternatives
   There are many alternatives for document markup. Each of the ones I tried
   had their own issues. Some of the issues are subtle and quite subjective.
   Here are a list of alternatives I considered before deciding to develop my
   own markup language.
 
   @definition Markdown
    @item Subtleties in how to parse correctly.
    @item No support for custom structure components.
 
   @definition Asciidoc
    @item Complex to parse and provide custom processing of the document.
    @item Vim syntax highlighting doesn't work well, if at all.
    @item
     You have to know what particular symbols mean to understand the structure
     of a document. For example, @l[......] versus @l[////////].
 
   @definition XML
    @item Tags clutter the doc too much.
 
   @definition roff
    @item Tags clutter the doc too much.
 
   @definition doxygen
   Â @item Not generally extensible to things beyond code documentation.
 
   @definition tcl
    @item Too tedious to have nested inlined structure.
 
 @section Inline Structure
  Fbld interprets text as a sequence of commands to execute. The way fbld
  converts text into a sequence of commands depends on whether the text is
  treated as inline structure or as block structure. This section introduces
  the main concepts of fbld from the point of view of parsing inline
  structure.
 
  For example, consider the following paragraph of text annotated with fbld
  inline structure:
 
  @code[fbld]
   It's @emph[really] important to check the result of the @code[malloc]
   function in C, in case it returns @NULL. See @link[the malloc man
   page][https://manpages.org/malloc] for more details.
 
  Explicit commands are introduced with the @l[@] character. In this example
  we use commands @l[@emph], @l[@code], @l[@NULL], and @l[@link]. The meaning
  of these commands is entirely user defined. There are no commands built in
  to fbld.
 
  Arguments to commands are passed within square brackets. For example,
  @l[really] is an argument passed to the @l[@emph] command, @l[malloc] is the
  argument passed to the @l[@code] command. The @l[@NULL] command is given no
  arguments and the @l[@link] command is given two arguments.
 
  Any text not explicitly part of a command or its arguments is grouped
  together into a single argument and passed to an implicit default inline
  command. For example, let's say the default command was called @l[@default].
  The first, implicit command from the above text is then @l[@default[It's ]].
 
  In summary, the above text is parsed into the following sequence of nine
  commands, using tcl syntax for clarity:
 
  @code[tcl]
   default "It's "
   emph "really"
   default " important to check the result of the "
   code "malloc"
   default "\nfunction\nin C, in case it returns "
   NULL
   default ". See"
   link "the malloc man\npage" "https://manpages.org/malloc" 
   default " for more details."
 
  And that's it. The core of how fbld works. Once in the form of a sequence of
  commands, users can provide whatever implementation they like for the
  commands to process the structure of the document the way they desire.
 
  @subsection Lexical Details
   When parsing inline structure, all whitespace is preserved.
 
   Command names are a sequence of one or more alphanumeric or underscore
   characters. No other characters are allowed in command names.
 
   The following are special characters in fbld:
 
   @item @par @l[@], @l[\[], @l[\]], @l[\\]
 
   To use these characters without special processing, prefix them with a
   backslash character. For example:
 
   @code[fbld]
    My email is ruhler\@degralder.com \[I think\].
 
   Would be converted into the single command:
 
   @code[tcl]
    default {My email is ruhler\@degralder.com \[I think\].}
 
   It is illegal to specify @l[@] without a valid command name immediately
   following. It is illegal to use @l[\[] or @l[\]] outside of specifying
   arguments, and braces must be properly closed.
 
   The fbld parser has no knowledge of how many arguments a command expects.
   It is up to the command to report any misuse in the number of arguments
   when it is executed. It is possible for multiple invocations of the same
   command to be supplied a different number of arguments.
 
  @subsection Nested Commands
   It is possible to use inline structure in arguments to commands. For
   example:
 
   @code[fbld]
    Go @link[@bold[here]][www.degralder.com] for cool stuff.
 
   When parsing the first argument to the @l[@link] command, the text from
   opening @l[\[] to matching @l[\]] is used. This is just like how braces
   work in tcl. In this case, the sequence of commands would be:
 
   @code[tcl]
    default "Go "
    link "@bold[here]" "www.degralder.com"
    default " for cool stuff."
 
   It's up to the @l[@link] command to parse its first argument as inline
   structured text if it so desires.
 
 @section Block Structure
  Fbld parses block structured text into a sequence of commands using the same
  concepts as inline structure, with a few syntactic differences.
 
  The idea behind block structure is that we expect it to span across multiple
  lines of text. A block command starts on a new line and can accept two
  additional arguments separated implicitly by whitespace instead of
  explicitly with brackets. The two possible implicit arguments are:
 
  @item Text following the block command on the same line.
  @item Indented text starting on the next line from the block command.
 
  For example, consider a command, @l[@block] that takes two arguments: a
  title for the block and text to use in the block.
 
  The block command could be invoked using explicit brackets for arguments as
  follows:
 
  @code[fbld]
   @block[Example 1][First line of the first example.
 
   Last line of the first example.]
   @block[Example 2][This is the second example.]
 
  Using the implicit argument form:
 
  @code[fbld]
   @block Example 1
    First line of the first example.
   
    Last line of the first example.
   @block Example 2
    This is the second example.
 
  We could pass the first arguments explicitly and the second arguments
  implicitly if we wanted:
 
  @code[fbld]
   @block[Example 1]
    First line of the first example.
   
    Last line of the first example.
   @block[Example 2] This is the second example.
 
  Typically you would use the same-line argument for short text, such as
  section titles or small list items. You would use the next-line argument
  when the argument multi-line arguments.
 
  @subsection A Bigger Example
   Here's an example demonstrating use of the various approaches to the last
   argument:
 
   @code[fbld]
    @doc A Bigger Example
    
     Some introductory text here.
    
     @section[First Section]
      @paragraph
      Here is a paragraph in the first
      section of the doc.
    
      @list
       @item First item of a list.
       @item Second item of a list.
 
   This would be parsed into the following command:
 
   @code[tcl]
    title "A Bigger Example"
    default "Some introductory text here."
    section "First Section" {
    @paragraph
    Here is a paragraph in the first
    section of the doc.
    
    @list
    @item First item of a list.
    @item Second item of a list.
    }
 
   The second argument to the @l[@section] command can then be parsed into its
   own sequence of commands:
 
   @code[tcl]
    paragraph "Here is a paragraph in the first\nsection of the doc."
    list "@item First item of a list.\n@item Second item of a list."
 
   And the argument to the @l[@list] command can be parsed into its own sequence:
 
   @code[tcl]
    item "First item of a list."
    item "Second item of a list."
 
  @subsection Lexical Details
   @item
    Block commands start at the beginning of a line. Theoretically this is in
    column zero, but there may be extra whitespace before it in the case of
    nested block commands where that extra whitespace is stripped away before
    processing the nested block command.
 
   @item Default block commands take lines of text up until the next blank line.
 
   @item
    If there is any text on the same line after the last explicit argument to
    a block command, that text up to but not including the next newline or end
    of file is added as an additional argument to the block command.
 
   @item
    Lines following the block command, up until there is a line with a
    non-whitespace character not indented from the block command itself, are
    grouped together into a single additional argument to the block command,
    with the first space on each line removed.
 
  @subsection Escaping Inline Commands
   Imagine you want to emphasize the first word of a paragraph:
 
   @code[fbld]
    @section A Sample Section
   
    @emph[Yes!] The first word is emphasized
 
   In this case, the intention was to use @l[@emph] as an inline structure
   command, but it will end up being parsed as a block structure command:
 
   @code[tcl]
    section "A Sample Section"
    emph "Yes!" "The first word is emphasized"
 
   To work around this, you can explicitly pass the paragraph as an argument
   that's expected to be inlined structured text. For example:
 
   @code[fbld]
    @section A Sample Section
   
    @default
     @emph[Yes!] The first word is emphasized
 
   Which will be parsed as desired:
 
   @code[tcl]
    section "A Sample Section"
    default "@emph[Yes!] The first word is emphasized"
 
 @section Handling of Escape Characters
  The characters @l[@], @l[\[], @l[\]], and @l[\\] are special and need to be
  escaped using @l[\\] to avoid being processed specially. At the end of the
  day, users will need to manually remove the escapes.
 
  For example, imagine we want to put an email address in a document that we
  convert to markdown:
 
  @code[fbld]
   @block[Example]
    My email address is @bold[ruhler\@degralder.com].
 
  This gets parsed via block structured text as:
 
  @code[tcl]
   block "Example" {My email address is @bold[ruhler\@degralder.com].}
 
  The second argument gets parsed as inline structured text as:
 
  @code[tcl]
   default "My email address is "
   bold {ruhler\@degralder.com}
   default "."
 
  To actually display the text, the @l[@bold] command should remove the
  backslash before rendering the text.
 
 @section TODO
  @item
   Is the following valid? @l[hello \] \[ @there]. The square brackets are
   supposed to be special, but it's not within a command, so there shouldn't
   be any need to escape them, right? Only need to escape square brackets when
   parsing arguments? This would be a problem if it was within an argument.
   Maybe best to require escaping in all cases for consistency.
 
  @item
   The trailing newline is included in args that go to blank line. The blank
   line is not included.
 
  @item
   Clarify behavior of end of input for block commands, after @l[\]].
