
<@>@ Maybe@ = /Maybe%.Maybe@;

<@>@ Get@ = /Core/Process%.Get@;
<@>@ Put@ = /Core/Process%.Put@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ AI@ = /TicTacToe/AI%.AI@;
<@>% WithAI = /TicTacToe/AI%.WithAI;

@ Board@ = /TicTacToe/Board%.Board@;
@ Position@ = /TicTacToe/Board%.Position@;
@ Player@ = /TicTacToe/Board%.Player@;
% BoardStatus = /TicTacToe/Board%.BoardStatus;
% EmptyBoard = /TicTacToe/Board%.EmptyBoard;
% Move = /TicTacToe/Board%.Move;


@ GameResult@ = +(Player@ win, Unit@ draw);
@ GameStatus@ = +(Player@ playing, GameResult@ ended); 
@ Output@ = *(Board@ board, GameStatus@ status);

# move: Make a move at the given position for the current player. If no
#       position is supplied, have the computer pick a reasonable move instead.
# reset: Reset the game.
# quit: Quit the game.
@ Input@ = +(Maybe@<Position@> move, Unit@ reset, Unit@ quit);

(Get@<Input@>, Put@<Output@>, AI@){Unit@!;}
NewGame = (Input@! input, Put@<Output@> output, AI@ ai) {
  PlayGame(input, output, ai, EmptyBoard, Player@(X: Unit));
},
(Input@!, Put@<Output@>, AI@, Board@, Player@){Unit@!;}
PlayGame = (Input@! input, Put@<Output@> output, AI@ ai, Board@ board, Player@ x) {
  GameStatus@ status := !(BoardStatus(board).?(
                          X: GameStatus@(ended: GameResult@(win: Player@(X: Unit))),
                          O: GameStatus@(ended: GameResult@(win: Player@(O: Unit))),
                          D: GameStatus@(ended: GameResult@(draw: Unit)),
                          E: GameStatus@(playing: x)));
  Unit@ _ := output(Output@(board, status));
  Input@ in := input;
  in.?(
     move:
       status.?(
          playing: {
            Position@ position := in.move.?(
              just: !(in.move.just),
              nothing: ai(board, x));

            Maybe@<Board@> nboard := !(Move(board, position, x));
            nboard.?(
                just: PlayGame(input, output, ai, nboard.just, x.?(X: Player@(O: Unit), O: Player@(X: Unit))),
                nothing: PlayGame(input, output, ai, board, x));

          },
          ended:
            # The user tried to make a move after the game has ended.
            # Ignore the move and let the user pick again.
            PlayGame(input, output, ai, board, x)),
     reset: NewGame(input, output, ai),
     quit: !(Unit));
};

(Get@<Input@>, Put@<Output@>){Unit@!;} TicTacToe = (Get@<Input@> input, Put@<Output@> output) {
  WithAI<Unit@>((AI@ ai) {
    NewGame(input, output, ai);
  });
};

@(GameStatus@, Input@, Output@, TicTacToe);
