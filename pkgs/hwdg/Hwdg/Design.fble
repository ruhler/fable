
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% Not = /Core/Bool%.Not;

@ Char@ = /Core/Char%.Char@;

@ Coord@ = /Hwdg/Coord%.Coord@; 

@ Data@ = /Hwdg/Data%.Data@;
% Data = /Hwdg/Data%;

@ Memory@ = /Hwdg/Memory%.Memory@;

@ Int@ = /Core/Int%.Int@;
% Incr = /Core/Int%.Incr;
% 0 = /Core/Int%.0;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

% Map = /Core/Map/Tree%.Map(/Hwdg/Coord%.Ord);
% Set = /Core/Set%<Map.Map@, Coord@>(Map);
@ Set@ = Set.Set@;

@ String@ = /Core/String%.String@;

# Ports@ --
#   Convenience type for capturing information about each of the 4 adjacent
#   ports in a rule: upper left, upper right, lower left, lower right.
<@>@ Ports@ = <@ T@> { *(T@ ul, T@ ur, T@ ll, T@ lr); };

# PortSpec@ --
#   Used in the description of a rule. If data is provided, the given value is
#   read from the port or written to the port. Otherwise the port is unused.
@ PortSpec@ = Maybe@<Data@>;

# Inputs@ --
#   Specification for the inputs of a rule.
@ Inputs@ = Ports@<PortSpec@>;

# Outputs@ --
#   Specification for the outputs of a rule.
@ Outputs@ = Ports@<PortSpec@>;

# Rule@ --
#   A guarded atomic action that can take place at a particular 2x2 area of
#   memory.
#
# A rule consumes the expected inputs from its ports and produces the
# specified outputs on its ports. A rule is only enabled if the input ports
# contain their expected values and there is space on the output ports (after
# input port values have been consumed).
#
# For example, the following rule moves a value '1' from the upper left port
# to the upper right port. The lower left and lower right ports are unused.
#   1... => .1..
@ Rule@ = *(Inputs@ inputs, Outputs@ outputs);

# Rule -- 
#   Convenience literal for describing a rule.
#
# The input string is assumed to be of the format:
#   'IIII => OOOO'
# Where I and O are one of '1', '0', or '.' for 1, 0, and Nothing respectively.
#
# For example:
#   Rule@ r = Rule|'10.. => ..0.';
(String@) { Rule@; } Rule = {
  (Char@) { PortSpec@; } FromChar = (Char@ c) {
    c.?('0': Just<Data@>(Data.0));
    c.?('1': Just<Data@>(Data.1));
    c.?('.': Nothing<Data@>);
    Nothing<Maybe@<Data@>>.just;  # Invalid PortSpec character.
  };

  (String@ s) {
    Char@ i0 = s.cons.head; String@ s1 = s.cons.tail;
    Char@ i1 = s1.cons.head; String@ s2 = s1.cons.tail;
    Char@ i2 = s2.cons.head; String@ s3 = s2.cons.tail;
    Char@ i3 = s3.cons.head; String@ s4 = s3.cons.tail;
    Char@ _ = s4.cons.head; String@ s5 = s4.cons.tail;
    Char@ _ = s5.cons.head; String@ s6 = s5.cons.tail;
    Char@ _ = s6.cons.head; String@ s7 = s6.cons.tail;
    Char@ _ = s7.cons.head; String@ s8 = s7.cons.tail;
    Char@ o0 = s8.cons.head; String@ s9 = s8.cons.tail;
    Char@ o1 = s9.cons.head; String@ s10 = s9.cons.tail;
    Char@ o2 = s10.cons.head; String@ s11 = s10.cons.tail;
    Char@ o3 = s11.cons.head;
    Rule@(
      Inputs@(FromChar(i0), FromChar(i1), FromChar(i2), FromChar(i3)),
      Outputs@(FromChar(o0), FromChar(o1), FromChar(o2), FromChar(o3)));
  };
};

# Design@ --
#   Either a single rule, or a collection of designs placed at various
#   locations relative to the upper left corner of the overall design.
@ Design@ = +(Rule@ rule, List@<Placed@> designs),
@ Placed@ = *(Coord@ coord, Design@ design);

# Designs --
#   Construct a Design from a collection of placed designs.
(List@<Placed@>) { Design@; } Designs = (List@<Placed@> designs) {
  Design@(designs: designs);
};

# PlacedRule -- 
#   Convenience function for constructing a Placed design with a single rule.
(Int@, Int@, Rule@) { Placed@; } PlacedRule = (Int@ x, Int@ y, Rule@ r) {
  Placed@(Coord@(x, y), Design@(rule: r));
};

# ForEachRulePlaced --
#   Iterate over the set of rules in a Placed@ design.
#
# Conceptually:
#   B@ b = base
#   foreach (coord, rule) in placed:
#     b = body(coord, rule, b)
#   return b
(Placed@)<@ B@>(B@, (Coord@, Rule@, B@) { B@; }) { B@; }
ForEachRulePlaced = (Placed@ placed)<@ B@>(B@ base, (Coord@, Rule@, B@) { B@; } body) {
  placed.design.?(
    rule: body(placed.coord, placed.design.rule, base),
    designs: {
      /Core/List%.ForEach(placed.design.designs, base,
        (Placed@ p, B@ b) {
          Placed@ np = @(
            coord: /Hwdg/Coord%.Add(placed.coord, p.coord),
            design: p.design);
          ForEachRulePlaced(np, b, body);
          });
      });
};

# ForEachRule --
#   Iterate over the set of rules in a Design@.
#
# Conceptually:
#   B@ b = base
#   foreach (coord, rule) in design:
#     b = body(coord, rule, b)
#   return b
<@ B@>(Design@, B@, (Coord@, Rule@, B@) { B@; }) { B@; }
ForEachRule = <@ B@> (Design@ design, B@ base, (Coord@, Rule@, B@) { B@; } body) {
  ForEachRulePlaced(Placed@(Coord@(0, 0), design), base, body);
};

# StepInternal --
#   Run a single step of the given design.
#
# This means executing all currently enabled rules in the design, excluding
# those that are disabled due to conflicts with other rules executed in the
# same step.
#
# Inputs:
#   design - the design to execute.
#   memory - the memory to modify.
#   modified - the set of coordinates modified so far.
#
# Returns:
#   The updated memory. Nothing if no changes were made to memory.
(Design@, Memory@, Set@) { Maybe@<Memory@>; } StepInternal = {
  @ B@ = *(Memory@ memory, Set@ updated);

  # Check if a port is blocked because its memory location has already been
  # updated.
  (B@, Coord@, PortSpec@, PortSpec@) { Bool@; } Blocked = (B@ b, Coord@ c, PortSpec@ pi, PortSpec@ po) {
    pi.?(just: Set.Contains(b.updated, c));
    po.?(just: Set.Contains(b.updated, c));
    False;
  };

  # Check if a port is blocked because the input value is unvailable or does
  # not match the specification.
  (B@, Coord@, PortSpec@) { Bool@; } InputBlocked = (B@ b, Coord@ c, PortSpec@ pi) {
    pi.?(nothing: False);

    Maybe@<Data@> data = /Hwdg/Memory%.Get(b.memory, c);
    data.?(nothing: True);
    Not(/Hwdg/Data%.Eq(pi.just, data.just));
  };

  # Return true if output to the given port is blocked because there's
  # something in the way.
  (B@, Coord@, PortSpec@, PortSpec@) { Bool@; } OutputBlocked = (B@ b, Coord@ c, PortSpec@ pi, PortSpec@ po) {
    pi.?(just: False);
    po.?(nothing: False);
    /Hwdg/Memory%.Get(b.memory, c).?(just: True, nothing: False);
  };

  # Update the state based on the specification.
  (B@, Coord@, PortSpec@, PortSpec@) { B@; } Update = (B@ b, Coord@ c, PortSpec@ pi, PortSpec@ po) {
    po.?(just: @(
      memory: /Hwdg/Memory%.Set(b.memory, c, po.just),
      updated: Set.Insert(b.updated, c)));
    pi.?(just: @(
      memory: /Hwdg/Memory%.Clear(b.memory, c),
      updated: Set.Insert(b.updated, c)));
    b;
  };

  (Design@ design, Memory@ memory, Set@ updated) {
    B@ b = ForEachRule<B@>(design, B@(memory, updated), (Coord@ c, Rule@ r, B@ b) {
      # The coordinates of each port.
      Ports@<Coord@> cs = Ports@(
        Coord@(c.x, c.y),
        Coord@(Incr(c.x), c.y),
        Coord@(c.x, Incr(c.y)),
        Coord@(Incr(c.x), Incr(c.y)));

      # Don't do anything if the data needed for this port has been modified
      # since the start of the cycle.
      Blocked(b, cs.ul, r.inputs.ul, r.outputs.ul).?(true: b);
      Blocked(b, cs.ur, r.inputs.ur, r.outputs.ur).?(true: b);
      Blocked(b, cs.ll, r.inputs.ll, r.outputs.ll).?(true: b);
      Blocked(b, cs.lr, r.inputs.lr, r.outputs.lr).?(true: b);

      # Don't do anything if the inputs are blocked.
      InputBlocked(b, cs.ul, r.inputs.ul).?(true: b);
      InputBlocked(b, cs.ur, r.inputs.ur).?(true: b);
      InputBlocked(b, cs.ll, r.inputs.ll).?(true: b);
      InputBlocked(b, cs.lr, r.inputs.lr).?(true: b);

      # Don't do anything if the outputs are blocked.
      OutputBlocked(b, cs.ul, r.inputs.ul, r.outputs.ul).?(true: b);
      OutputBlocked(b, cs.ur, r.inputs.ur, r.outputs.ur).?(true: b);
      OutputBlocked(b, cs.ll, r.inputs.ll, r.outputs.ll).?(true: b);
      OutputBlocked(b, cs.lr, r.inputs.lr, r.outputs.lr).?(true: b);

      # Update the state based on execution of the rule.
      B@ b_ul = Update(b   , cs.ul, r.inputs.ul, r.outputs.ul);
      B@ b_ur = Update(b_ul, cs.ur, r.inputs.ur, r.outputs.ur);
      B@ b_ll = Update(b_ur, cs.ll, r.inputs.ll, r.outputs.ll);
      B@ b_lr = Update(b_ll, cs.lr, r.inputs.lr, r.outputs.lr);
      b_lr;
    });

    Set.IsEmpty(b.updated).?(true: Nothing<Memory@>);
    Just(b.memory);
  };
};

# Step --
#   Run a single step of the given design.
#
# This means executing all currently enabled gates in the design, except those
# that are disabled due to conflicts with other gates executed in the same
# step.
#
# Inputs:
#   design - the design to execute.
#   memory - the memory to modify.
#
# Returns:
#   The updated memory.
(Design@, Memory@) { Memory@; } Step = (Design@ design, Memory@ memory) {
  Maybe@<Memory@> m = StepInternal(design, memory, Set.Empty);
  m.?(just: m.just, nothing: memory);
};

# Run --
#   Run the design for as long as any gates are enabled.
#
# It is the responsibility of the caller to make sure the design terminates.
(Design@, Memory@) { Memory@; } Run = (Design@ design, Memory@ memory) {
  Maybe@<Memory@> m = StepInternal(design, memory, Set.Empty);
  m.?(just: Run(design, m.just), nothing: memory);
};

@(
  Ports@, PortSpec@, Inputs@, Outputs@, Rule@, Rule,
  Design@, Placed@, Designs, PlacedRule,
  ForEachRule,
  Step, Run
);
