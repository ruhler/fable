
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Char@ = /Core/Char%.Char@;
% Chars = /Core/Char%.Chars;

@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;
% Mul = /Core/Int%.Mul;

@ QR@ = /Core/Int/Div%.QR@;
% Div = /Core/Int/Div%.Div;

% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Concat = /Core/List%.Concat;
<@>% Split = /Core/List/Eq%.Split;
<@>% Get = /Core/List/Length%.Get;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ IOStream@ = /Core/Stream%.IOStream@;
<<@>@>@ OStream@ = /Core/Stream%.OStream@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;

@ String@ = /Core/String%.String@;
% Lines = /Core/String%.Lines;
% Str = /Core/String%.Str;
% StrE = /Core/String%.StrE;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<<@>@>@ Main@ = /Network/Sockets%.Main@;
<<@>@>@ Server@ = /Network/Sockets%.Server@;
<<@>@>@ Sockets@ = /Network/Sockets%.Sockets@;

<<@>@>% Parse = /Pprof/Parser%.Parse;

@ BlockId@ = /Pprof/Profile%.BlockId@;
@ Sequence@ = /Pprof/Profile%.Sequence@;
@ Profile@ = /Pprof/Profile%.Profile@;
% Blocks = /Pprof/Profile%.Blocks;

<@>@ Result@ = /Pprof/Result%.Result@;

@ Entry@ = /Pprof/Query%.Entry@;
@ Table@ = /Pprof/Query%.Table@;

% Self = /Pprof/Query/Self%;

@ Args@ = *(
  Bool@ help,
  String@ error,
  String@ hostname,
  Int@ port,
  String@ file
);

Args@ DefaultArgs = @(
  help: False,
  error: Str|'',
  hostname: Str|'localhost',
  port: Int|8123,
  file: Str|''
);

(List@<String@>, Args@) { Args@; }
GetArgs = (List@<String@> args, Args@ default) {
  args.?(nil: default);

  String@ arg = args.cons.head;
  /Core/List/Eq%.Contains(/Core/String/Eq%.Eq,
    List[Str|'-h', Str|'--help'], arg).?(true: {
    default.@(help: True);
  });

  /Core/Char/Eq%.Eq(arg.cons.head, Chars.'-').?(false: {
    GetArgs(args.cons.tail, default.@(file: arg));
  });

  args.cons.tail.?(nil: {
    default.@(error: Strs[Str|'missing arg to option ', arg]);
  });

  String@ value = args.cons.tail.cons.head;
  List@<String@> nargv = args.cons.tail.cons.tail;

  Args@ nargs = {
    /Core/List/Eq%.Contains(/Core/String/Eq%.Eq,
      List[Str|'--host'], arg).?(true: {
        default.@(hostname: value);
      });

    /Core/List/Eq%.Contains(/Core/String/Eq%.Eq,
      List[Str|'-p', Str|'--port'], arg).?(true: {
        default.@(port: /Core/Int/Show%.Read(value));
      });

    default.@(error: Strs[Str|'unrecognized option ', arg]);
  };

  nargs.error.?(cons: nargs);
  GetArgs(nargv, nargs);
};

(Int@, Int@) { String@; }
Percent = (Int@ numerator, Int@ denominator) {
  Int@ s = Div(Mul(Int|10000, numerator), denominator).q;
  QR@ qr = Div(s, Int|100);
  Strs[/Core/Int/Show%.Show(qr.q), Str|'.',
    /Core/Int/Show%.Show(Add(Int|100, qr.r)).cons.tail, Str|'%'];
};

Main@ Main = <<@>@ M@>(Sockets@<M@> sockets, Stdio@<M@> stdio, Monad@<M@> m, List@<String@> argv) {
  % I = /Core/Stream/IStream%(m);
  % O = /Core/Stream/OStream%(m);

  (OStream@<M@>, Profile@, Table@, Int@, (Sequence@) { Sequence@; }) { M@<Unit@>; }
  Table = (OStream@<M@> out, Profile@ profile, Table@ table, Int@ total,
    (Sequence@) { Sequence@; } link) {
    Unit@ _ <- m.do(O.PutLine(out, Str|'<table>'));

    (Sequence@) { String@; }
    SeqNames = (Sequence@ seq) {
      seq.?(nil: Str|'');

      BlockId@ block = seq.cons.head;
      String@ name = Blocks.Lookup(profile.blocks, block).just.name;
      seq.cons.tail.?(nil: name);

      String@ tail = SeqNames(seq.cons.tail);
      Concat[name, Str|';', tail];
    };

    (Sequence@) { String@; }
    SeqBlocks = (Sequence@ seq) {
      seq.?(nil: Str|'');

      BlockId@ block = seq.cons.head;
      String@ name = /Core/Int/Show%.Show(block);
      seq.cons.tail.?(nil: name);

      String@ tail = SeqBlocks(seq.cons.tail);
      Concat[name, Str|',', tail];
    };

    (Entry@) { M@<Unit@>; }
    Row = (Entry@ entry) {
      O.PutLine(out, Strs[
        Str|'<tr><td>', Percent(entry.value, total),
        Str|'</td><td>', /Core/Int/Show%.Show(entry.value),
        Str|'</td><td><a href="/seq/', SeqBlocks(link(entry.seq)),
        Str|'">', SeqNames(entry.seq),
        Str|'</a></td></tr>']);
    };

    (List@<Entry@>) { M@<Unit@>; }
    Rows = (List@<Entry@> entries) {
      entries.?(nil: m.return(Unit));
      Unit@ _ <- m.do(Row(entries.cons.head));
      Rows(entries.cons.tail);
    };

    Unit@ _ <- m.do(Rows(table));
    O.PutLine(out, Str|'</table>');
  };

  (Profile@, IOStream@<M@>) { M@<Unit@>; }
  HandleConnection = (Profile@ profile, IOStream@<M@> ios) {
    # Get the start line
    String@ start <- m.do(I.GetLine(ios.in));
    Unit@ _ <- m.do(O.PutStr(stdio.out, Strs[Str|'start-line: ', start]));

    # Skip past the request headers. We don't care about those.
    M@<Unit@> SkipHeaders = {
      String@ line <- m.do(I.GetLine(ios.in));
      /Core/String/Eq%.Eq(StrE|'\r\n', line).?(true: m.return(Unit));
      SkipHeaders;
    };
    Unit@ _ <- m.do(SkipHeaders);

    List@<String@> start_split = Split(start, (Char@ c) { c.?(' ': True, : False); });
    String@ method = Get(start_split, Int|0);
    String@ uri = Get(start_split, Int|1);
    String@ version = Get(start_split, Int|2);

    List@<String@> uri_split = Split(uri, (Char@ c) { c.?('?': True, : False); });
    String@ path = uri_split.cons.head;
    String@ query = {
      uri_split.cons.tail.?(nil: Str|'');
      uri_split.cons.tail.cons.head;
    };

    Unit@ _ <- m.do(O.PutStr(ios.out, Lines[
      StrE|'HTTP/1.1 200 OK',
      StrE|'Content-Type: text/html\r',
      StrE|'\r']));

    Unit@ _ <- m.do(O.PutStr(ios.out, Lines[/Pprof/Server/Menu%.Menu]));

    /Core/String/Eq%.Eq(Str|'/', path).?(true: {
      m.return(Unit);
    });

    /Core/String/Eq%.Eq(Str|'/self', path).?(true: {
      Unit@ _ <- m.do(O.PutLine(ios.out, Str|'<h1>Frames by self time</h1>'));

      Table@ table = Self.Query(profile);

      Int@ total = /Core/List%.ForEach(table, Int|0,
        (Entry@ e, Int@ b) {
          Add(e.value, b);
        });

      Table(ios.out, profile, table, total, (Sequence@ s) { s; });
    });

    O.PutStr(ios.out, Lines[
      StrE|'<h1>Unsupported Request</h1>',
      StrE|'<h2>Request Info</h2>',
      Strs[StrE|'Method: ', method, StrE|' <br/>'],
      Strs[StrE|'Path: ', path, StrE|' <br/>'],
      Strs[StrE|'Query: ', query, StrE|' <br/>'],
      Strs[StrE|'Version: ', version, StrE|' <br/>']]);
  };

  Args@ args = GetArgs(argv, DefaultArgs);
  args.help.?(true: {
    Unit@ _ <- m.do(O.PutStr(stdio.out, StrE|'<TODO: usage info here>\n'));
    m.return(True);
  });

  args.file.?(nil: {
    Unit@ _ <- m.do(O.PutStr(stdio.err, StrE|'missing input file'));
    Unit@ _ <- m.do(O.PutStr(stdio.err, StrE|'\ntry --help for help\n'));
    m.return(False);
  });

  args.error.?(cons: {
    Unit@ _ <- m.do(O.PutStr(stdio.err, args.error));
    Unit@ _ <- m.do(O.PutStr(stdio.err, StrE|'\ntry --help for help\n'));
    m.return(False);
  });

  Maybe@<Server@<M@>> ms <- m.do(sockets.server(args.hostname, args.port));
  ms.?(nothing: {
    Unit@ _ <- m.do(O.PutLine(stdio.err, Str|'unable to serve'));
    m.return(False);
  });

  Server@<M@> s = ms.just;

  Unit@ _ <- m.do(O.PutLine(stdio.out, Strs[
    Str|'parsing ', args.file, Str|'...'
  ]));

  Maybe@<IStream@<M@>> fin <- m.do(stdio.read(args.file));
  fin.?(nothing: {
    Unit@ _ <- m.do(O.PutLine(stdio.err, Strs[
        Str|'unable to open ''', args.file, Str|''''
    ]));
    m.return(False);
  });

  Result@<Profile@> parsed <- m.do(Parse(fin.just, m));
  parsed.?(error: {
    Unit@ _ <- m.do(O.PutLine(stdio.err, Strs[
        Str|'error:', parsed.error
    ]));
    m.return(False);
  });
  
  Unit@ _ <- m.do(O.PutLine(stdio.out, Strs[
    Str|'serving at http://',
    args.hostname,
    Str|':',
    /Core/Int/Show%.Show(args.port)
  ]));

  M@<Unit@> Serve = {
    IOStream@<M@> ios <- m.do(s);
    Unit@ _ <- m.do(HandleConnection(parsed.ok, ios));
    Serve;
  };

  Unit@ _ <- m.do(Serve);
  m.return(True);
};

/Network/Sockets/IO%.Run(Main);
