
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ Eq@ = /Core/Eq%.Eq@;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Cons = /Core/List%.Cons;

# Eq --
#   Implementation of Eq@ for List@. See documentation of /Eq%.Eq@.
<@ T@>(Eq@<T@>) { Eq@<List@<T@>>; }
Eq = <@ T@>(Eq@<T@> eq)(List@<T@> a, List@<T@> b) {
  a.?(
    cons: b.?(
      cons: {
        eq(a.cons.head, b.cons.head).?(
          true: Eq<T@>(eq)(a.cons.tail, b.cons.tail),
          false: False);
      },
      nil: False),
    nil: b.?(cons: False, nil: True));
};

# Contains --
#   Return true if the list contains the given element, false otherwise.
<@ T@>(Eq@<T@>)(List@<T@>, T@) { Bool@; }
Contains = <@ T@>(Eq@<T@> eq)(List@<T@> l, T@ e) {
  l.?(
    cons: eq(l.cons.head, e).?(
      true: True,
      false: Contains<T@>(eq)(l.cons.tail, e)),
    nil: False);
};

# Split --
#   Split a list into a list of lists, with boundaries determined by the given
#   predicate.
#
# Inputs:
#   T@ - The type of element on the list.
#   list - The list to split.
#   sep - Predicate specifying separate elements.
#
# Occurences of sep elements at the start and back of the list are removed.
# Sequences of sep elements are treated as a single separator.
#
# For example, Split('  hello  there now. ', IsSpace) would result in
#   ['hello', 'there', 'now.']
<@ T@>(List@<T@>, (T@) { Bool@; }) { List@<List@<T@>>; }
Split = <@ T@>(List@<T@> list, (T@) { Bool@; } sep) {
  list.?(nil: List<List@<T@>>[]);

  List@<List@<T@>> tail = Split<T@>(list.cons.tail, sep);
  sep(list.cons.head).?(true: tail);

  T@ head = list.cons.head;
  list.cons.tail.?(nil: List<List@<T@>>[List<T@>[head]]);
  sep(list.cons.tail.cons.head).?(true: Cons<List@<T@>>(List<T@>[head], tail));
  Cons<List@<T@>>(Cons<T@>(head, tail.cons.head), tail.cons.tail);
};

@(Eq, Contains, Split);
