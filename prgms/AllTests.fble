
@(StdLib: &StdLib);
@(StdLibTest: &StdLibTest);
@(UBNat: &UBNat);
@(Primes: &Primes);
@(Bits: &Bits);
@(Md5: &Md5);

StdLib { @(Unit@, List); };
List { @(S@, P@, S4, Concat, MapS); };
StdLibTest.ListTest { @(ListTestFailure@: TestFailure@); };
UBNat.Test { @(UBNatTestFailure@: TestFailure@); };
Primes.Test { @(PrimesTestFailure@: TestFailure@); };
Md5.Test { @(Md5TestFailure@: TestFailure@); };

@ TestFailure@ = +(
    UBNatTestFailure@ UBNatTest,
    PrimesTestFailure@ PrimesTest,
    ListTestFailure@ ListTest,
    Md5TestFailure@ Md5Test);

(UBNatTestFailure@){TestFailure@;} UBNatTestFailureF = (UBNatTestFailure@ a) {
  TestFailure@(UBNatTest: a);
};

(PrimesTestFailure@){TestFailure@;} PrimesTestFailureF = (PrimesTestFailure@ a) {
  TestFailure@(PrimesTest: a);
};

(ListTestFailure@){TestFailure@;} ListTestFailureF = (ListTestFailure@ a) {
  TestFailure@(ListTest: a);
};

(Md5TestFailure@){TestFailure@;} Md5TestFailureF = (Md5TestFailure@ a) {
  TestFailure@(Md5Test: a);
};

S@<TestFailure@>! Test = {
  S@<Md5TestFailure@> md5 := Md5.Test.Test(Unit@());
  $(Concat<TestFailure@>(S4<S@<TestFailure@>>
          (MapS<UBNatTestFailure@><TestFailure@>(UBNatTestFailureF, UBNat.Test.Test(Unit@())))
          (MapS<PrimesTestFailure@><TestFailure@>(PrimesTestFailureF, Primes.Test.Test(Unit@())))
          (MapS<ListTestFailure@><TestFailure@>(ListTestFailureF, StdLibTest.ListTest.Test(Unit@())))
          (MapS<Md5TestFailure@><TestFailure@>(Md5TestFailureF, md5))
          ));
};

S@<TestFailure@> result := Test;
$(result.nil);

