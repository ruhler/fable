
% True = /Bool%.True;
% False = /Bool%.False;

<@>@ Eq@ = /Eq%.Eq@;

@ Num@ = /Pinball/Num%.Num@;
% Add = /Pinball/Num%.Add;
% Sub = /Pinball/Num%.Sub;
% Mul = /Pinball/Num%.Mul;
% Div = /Pinball/Num%.Div;
% Sqrt = /Pinball/Num%.Sqrt;

<@>@ Show@ = /Show%.Show@;

% Strs = /String%.Strs;
% Str = /String%.Str;

# Vec@ -- 
#   A 2D vector.
@ Vec@ = *(Num@ x, Num@ y);

# AddV --
#   Vector addition.
(Vec@, Vec@) { Vec@; } AddV = (Vec@ a, Vec@ b) {
  Vec@(Add(a.x, b.x), Add(a.y, b.y));
};

# SubV --
#   Vector subtraction.
(Vec@, Vec@) { Vec@; } SubV = (Vec@ a, Vec@ b) {
  Vec@(Sub(a.x, b.x), Sub(a.y, b.y));
};

# MulVS --
#   Multiply a vector by a scalar.
(Vec@, Num@) { Vec@; } MulVS = (Vec@ a, Num@ s) {
  Vec@(Mul(a.x, s), Mul(a.y, s));
};

# Magitude --
#   Computes the length of a vector.
(Vec@) { Num@; } Magnitude = (Vec@ a) {
  Sqrt(Add(Mul(a.x, a.x), Mul(a.y, a.y)));
};

# Normalize --
#   Computes a unit vector in the direction of the given vector.
(Vec@) { Vec@; } Normalize = (Vec@ a) {
  Num@ d = Magnitude(a);
  Vec@(Div(a.x, d), Div(a.y, d));
};

# RotateTo --
#   Rotate the vector v to a coordinate system where dir points towards the +x
#   axis.
(Vec@, Vec@) { Vec@; } RotateTo = (Vec@ dir, Vec@ v) {
  Num@ x = Add(Mul(dir.x, v.x), Mul(dir.y, v.y));
  Num@ y = Sub(Mul(dir.x, v.y), Mul(dir.y, v.x));
  Num@ l = Magnitude(dir);
  Vec@(Div(x, l), Div(y, l));
};

# RotateFrom --
#   Rotate the vector v out of a coordinate system where dir points towards
#   the +x axis.
(Vec@, Vec@) { Vec@; } RotateFrom = (Vec@ dir, Vec@ v) {
  Num@ x = Sub(Mul(dir.x, v.x), Mul(dir.y, v.y));
  Num@ y = Add(Mul(dir.x, v.y), Mul(dir.y, v.x));
  Num@ l = Magnitude(dir);
  Vec@(Div(x, l), Div(y, l));
};

Eq@<Vec@> Eq = (Vec@ a, Vec@ b) {
  /Pinball/Num%.Eq(a.x, b.x).?(false: False);
  /Pinball/Num%.Eq(a.y, b.y).?(false: False);
  True;
};

Show@<Vec@> Show = (Vec@ a) {
  Strs[Str|'(',
    /Pinball/Num%.Show(a.x), Str|', ',
    /Pinball/Num%.Show(a.y), Str|')'];
};

@(Vec@, AddV, SubV, MulVS, Magnitude, Normalize, RotateTo, RotateFrom,
  Eq, Show);
