The Fable of Damocrates 
=======================
Richard Uhler <ruhler@degralder.com>

1. Introduction
---------------
Damocrates is a computer programming language from the Fable collection. It
builds on top of the Calvisus language, providing compile-time developer
features for modularity and abstraction geared at reducing the cost of
producing large fblc programs.

A core philosophy of fbld is that it can be statically compiled to fblc.
The abstractions introduced by fbld are zero-cost in the sense that they have
no overhead at runtime after compiling the program down to fblc. The developer
need not have to make a tradeoff between modularity/abstraction and runtime
performance.

Damocrates facilitates development of large scale programs by introducing two
broad features extending the existing fblc language: modules and polymorphism.
Modules allow the same peice of code to be reused in many different programs,
and polymorphism allows the same peice of code to be reused in many different
contexts within a single program. These features allow a developer to easily
leverage the existing work of others to assemble and reuse large scale
programs.

2. Modules
----------
A module is a collection of type, func, and proc entities that can be reused
in different programs. The entities defined in a module exist in their own
namespace to avoid name conflicts when combining modules together to form
programs. Entities defined within a module can be private to that module.
Modules are organized hierarchically, with the option of specifying the
implementation of a module in its own source file.

2.1. Module Declaration
-----------------------
The following shows an example of a module declaring a unary integer type and
operations:

  module Integer {
    struct Unit();
    union Int(Unit 0, Int S);

    func Add(Int a, Int b; Int) {
      ?(a; b, Int:S(Add(a.S, b)));
    };
  };

The module declaration provides the name of the module and the collection of
entities defined by the module: types "Unit" and "Int" and function "Add" in
this case.

2.2. Module Namespaces
----------------------
The braces of a module declaration introduce a new name space. Entities
declared in a different namespace cannot be directly referred to. For example,
the following program is incorrect, because the Unit type is not available
in the namespace where Int is defined, and the Int type is not available in
the namespace where IntPair is defined:

  struct Unit();

  module Integer {
    union Int(Unit 0, Int S);               # ERROR: 'Unit' not defined

    func Add(Int a, Int b; Int) {
      ?(a; b, Int:S(Add(a.S, b)));
    };
  };

  struct IntPair(Int first, Int second);    # ERROR: 'Int' not defined.

There are three ways to refer to entities declared in another name space:
import from parent, qualified references, and import from module.

2.2.1. Import from Parent
-------------------------
A module can explicitly import entities into its own namespace from the
namespace in which the module itself is defined. For example, this can be used
to import the Unit type in the previous example into the Integer namespace so
that it can be referred to when defining the Int type. To import an entity
from a parent module, an "import @" statement is used:

  struct Unit();

  module Integer {
    import @ { Unit; };               # Unit imported from parent namespace.
    union Int(Unit 0, Int S);         # OK: 'Unit' is now in scope.

    func Add(Int a, Int b; Int) {
      ?(a; b, Int:S(Add(a.S, b)));
    };
  };

The basic form of the import @ statement is to list entities in the parent
namespace to import under the same name in the module namespace. Multiple
entities can be imported with a single import @ statement, separated by
semicolons. For example, to import entities Apple, Banana, and Pair from a
parent namespace, you could write:

  import @ { Apple; Banana; Pair; };

More generally, an entity can be imported from the parent namespace to the
module namespace under a different name. This allows a module to have full
control over its own namespace. For example, to import the Unit type under the
name MyParentsUnit:

  struct Unit();

  module Integer {
    import @ { MyParentsUnit=Unit; };
    union Int(MyParentsUnit 0, Int S); # OK: 'MyParentsUnit' is now in scope.

    func Add(Int a, Int b; Int) {
      ?(a; b, Int:S(Add(a.S, b)));
    };
  };

The general syntax for the parent import statement is:

   'import' '@'  '{' [tname ['=' qref]; [tname ['=' qref]; [...]]] '}'

Only entities available in the module's immediate parent namespace may be
imported this way. An entity declared in the parent's parent namespace cannot
be imported unless it has first been imported into the parent namespace.

Entities imported this way must not recursively depend on the definition of
this module.

2.2.2. Qualified References
---------------------------
A second way to reference entities from another namespace is to use qualified
references. Qualified references allow you to access an entity declared within
a module in your current namespace. The syntax is to put the name of the
entity, followed by '@' and the name of the module it belongs to.

For example, we can use the qualified reference Int@Integer to refer to the
Int type from the parent module when defining IntPair:

  struct Unit();

  module Integer {
    import @ { Unit; };
    union Int(Unit 0, Int S);

    func Add(Int a, Int b; Int) {
      ?(a; b, Int:S(Add(a.S, b)));
    };
  };

  struct IntPair(Int@Integer first, Int@Integer second);

The entity after the '@' symbol must refer to a module. It may not refer to an
interface or any other kind of entity.

Qualified references can be used in the source part of an import statement.
For example:

  import @ { Apple@Fruit; B=Banana@Fruit; };

This imports the entity Apple@Fruit under the name Apple and Banana@Fruit
under the name B in the local namespace.

2.2.3. Import from Module
-------------------------
Because it can be tedious to always be using qualified references to access
entities from other modules, we also provide a way to import those entities
directly into your namespace using an import statement. The import statement
behaves the same as an import '@' statement, but in place of the '@' specifies
a module currently in scope to import entities from. Using this approach, our
example becomes:


  struct Unit();

  module Integer {
    import @ { Unit; };
    union Int(Unit 0, Int S);

    func Add(Int a, Int b; Int) {
      ?(a; b, Int:S(Add(a.S, b)));
    };
  };

  import Integer { Int; };
  struct IntPair(Int first, Int second);

As with the import '@' statement, entities can be renamed upon import:

  import Integer { MyInt=Int; };
  struct IntPair(MyInt first, MyInt second);

2.3. Private Entities
---------------------
By default, entities defined in a module are publicly available to other
modules. The keyword 'priv' can be used before an entity to declare the entity
is a private to a module. A private entity cannot be referenced using a
qualified reference or import from module, though it can be imported into a
child module using import from parent.

For example, the following code defines a private 'Incr' function within the
Integer module that cannot be accessed externally:

  struct Unit();

  module Integer {
    import @ { Unit; };
    union Int(Unit 0, Int S);

    priv func Incr(Int a; Int) {
      Int:S(a);
    };

    func Add(Int a, Int b; Int) {
      ?(a; b, Incr(Add(a.S, b)));
    };
  };

  import Integer { Int; Add; Incr; };        # ERROR: 'Incr' not defined
  struct IntPair(Int first, Int second);

Struct and union types have an additional visibility option. By default they
are public, with the 'priv' keyword they are private, but they can also be
labeled as an abstract type using the keyword 'abst'. The name of an abstract
type is visible externally, but the fields of the type are not. This means
external users cannot construct instances of the type, access fields, or
perform conditional operations. For example, it makes sense to mark 'Int' as
an abstract type:

  struct Unit();

  module Integer {
    import @ { Unit; };
    abst union Int(Unit 0, Int S);

    priv func Incr(Int a; Int) {
      Int:S(a);
    };

    func Add(Int a, Int b; Int) {
      ?(a; b, Incr(Add(a.S, b)));
    };
  };

  import Integer { Int; };
  struct IntPair(Int first, Int second);
  func Decr(Int a ; Int) {
    a.S;              # ERROR: field access not allowed on abstract type 'Int'
  };

2.4. Module Dependencies
------------------------
To maintain the integrity and meaning of a module, a module declaration
must not depend on itself recursively through external entities. It is not
allowed to import @ into a module an entity that comes from or depends on an
entity defined within the module.

2.5. Module Hierarchy File Organization
---------------------------------------
Modules are defined hierarchically. To facilitate reuse of modules in
different programs, different modules can be implemented in different files
rather than require an entire program to be implemented in a single large
file.

When implementing modules in different files, the program is specified using a
directory name rather than a file name. When the program is specified this
way, modules may be defined in different files. To indicate that a module is
defined in a different file, the body of the module should be omitted in the
parent module. For example, assuming our example program was described in
Main.fbld, the Integer module can be described in a file Main/Integer.fbld as
follows:

Main.fbld:
  struct Unit();

  module Integer;   # body of module read from Main/Integer.fbld

  import Integer { Int; };

  struct IntPair(Int first, Int second);

Main/Integer.fbld:
  import @ { Unit; };
  abst union Int(Unit 0, Int S);

  func Add(Int a, Int b; Int) {
    ?(a; b, Incr(Add(a.S, b)));
  };

Note that this is only allowed when the top level program is specified as a
directory, to make it clear that only the file or directory provided for the
top level program is accessed, and not additional files outside of what was
explicitly provided.

When specifying the top level program using a directory, the top level program
contains public child modules for each fbld file found within that directory.
For example, consider the following directory and file organization:

foo/StdLib.fbld:
  struct Unit();

foo/Main.fbld:
  import @ { Unit@StdLib; };

  module Integer;

  import Integer { Int; };

  struct IntPair(Int first, Int second);

foo/Main/Integer.fbld:
  import @ { Unit; };
  abst union Int(Unit 0, Int S);

  func Add(Int a, Int b; Int) {
    ?(a; b, Incr(Add(a.S, b)));
  };

Referring to foo as a top level program is implicitly taken as equivalent to
the complete program:

  module StdLib {
    struct Unit();
  };

  module Main {
    import @ { Unit@StdLib; };

    module Integer {
      import @ { Unit; };
      abst union Int(Unit 0, Int S);

      func Add(Int a, Int b; Int) {
        ?(a; b, Incr(Add(a.S, b)));
      };
    };

    import Integer { Int; };

    struct IntPair(Int first, Int second);
  }

In this case, implementations are encouraged to provide options for loading
and checking only those modules needed for the task. For example, if the
directory contained another file foo/Main2.fbld, and Main2 was not referenced
as part of running the program Main, then running the program Main should not
require foo/Main2.fbld to be loaded.

3. Polymorphism
---------------
Polymorphism makes it possible to reuse the same code in multiple different
contexts in the same program. For example, with polymorphism it is possible to
provide one implementation of a list type and associated functions that work
for lists of any arbitrary type of element. Polymorphism is introduced in
Damocrates by allowing entity declarations to be parameterized by other
entities.

A generic list type and 'Last' function could be defined by introducing a type
parameter T as follows:

  struct ListP<type T>(T head, ListS<T> tail);
  union ListS<type T>(Unit nil, ListP<T> cons);

  func Last<type T>(ListP<T> list ; T) {
    ?(list.tail; list.head, Last<T>(list.tail.cons));
  };

We could also define a generic 'Contains' function to check if a list contains
a specific element, but only if we also provide a func parameter to define
what it means for two elements to be equal:
  
  func Contains<type T, func Eq(T a, T b; Bool)>(ListS<T> list, T elem; Bool) {
    ?(list;
        False(),                                    # The list is empty.
        ?(Eq(elem, list.cons.head);
          True(),                                   # head matches.
          Contains<T, Eq>(list.cons.tail, elem)));  # check the tail.
  };

3.1. Prototypes
---------------
Prototypes are used to describe what kind of entity is required for an entity
parameter. The prototypes provide enough information to use an entity without
any other implementation details. The following forms of prototypes can be
used in static parameter lists.

3.1.1. Abstract Type
--------------------
The prototype for an abstract type is declared using the 'type' keyword. For
example:

  type T

This prototype matches any type, without indiciating whether the type is a
union or struct type, or what the fields of the type are. The user of the type
can refer to the type under the name T, but cannot directly construct values
of the type, access any fields of the type, or condition based on objects of
the type.

3.1.2. Struct Type
------------------
The prototype for a struct type is a struct type definition, with fields
included because the fields of the struct type are part of its interface.

  struct T(Int first, Int second)

This prototype matches any struct type that has the same field types and
names. The user of the type can refer to the type under the name T, can
use T as a constructor to construct values of the type, and can use field
access to access members of the type.

3.1.3. Union Type
-----------------
The prototype for a union type is a union type definition, with fields
included because the fields of the union type are part of its interface.

  union T(Unit Apple, Unit Banana, Unit Pair)

This prototype matches any union type that has the same field types and names.
The user of the type can refer to the type under the name T, can construct
values of the type, access fields, and use conditions that select based on the
tag of the type.

3.1.4. Function
---------------
The prototype for a function is a function defininition without the body
of the function.

  func F(Int a, Int b; Int);

This prototype matches any function that has the same argument and return
types; the argument names need not match. The user of the function can call
the function under the name F.

3.1.5. Process
--------------
The prototype for a process is a process definition without the body of the
process.

  proc P(Data+ out; Data value; Unit);

This prototype matches any process that has the same port polarity and types,
argument types and return type; the port and argument names need not match.
The user of the process can call the process under the name P.

3.1.6. Module
-------------
To specify a prototype for a module, we introduce a new kind of entity called
an interface. An interface describes everything a user of a module needs to
know to use the interface.

An interface is defined like a module, except that entity declarations are
replaced with prototypes for those entities. For example, an interface for the
Integer module used as an example previously could be:

  interf IntegerI {
    import @ { Unit; };

    type Int;
    func Add(Int a, Int b; Int);
  };

As with modules, interfaces introduce new namespaces. All prototypes in the
interface must be public. A 'type' prototype is used in place of an 'abst'
type in a module.

To use the Integer module as a polymorphic parameter under the IntegerI
interface, we must explicitly specify in the implementation of the Integer
module that it has interface IntegerI:

    module Integer(IntegerI) {
      import @ { Unit; };
      abst union Int(Unit 0, Int S);

      func Add(Int a, Int b; Int) {
        ?(a; b, Incr(Add(a.S, b)));
      };
    };

A module can only implement an interface if there is a one-to-one
correspondence between prototypes in the interface and public entities in the
module. The prototypes must match exactly, including entity names, argument
names, and port names.

An explicit interface is only needed for a module if that module will be
passed as a polymorphic parameter. If there will only ever be a single
implementation of a module's interface, there is no need to introduce an
explicit interface to describe it.

A module prototype is the module definition for a module with an explicit
interface, without the body of the module:

  module M(IntegerI)

This prototype matches any module that explicitly implements the interface
IntegerI.

3.1.7. Interface
----------------
The prototype for an interface declaration is a full interface declaration.

  interf I {
    type Int;
    func Add(Int a, Int b; Int);
  };

A user can implement a module with the interface or access entities in a
module through the interface.

3.2. Declaring Polymorphic Entities
-----------------------------------
  params ::= ['<' [proto [',' proto [...]]] '>'] ;

To declare a polymorphic entity, supply a list of zero or more static
parameters after the entity name surrounded by angle brackets. A static
parameter is described using a prototype, as defined above.
All kinds of prototypes are allowed, including abstract type,
struct, union, func, proc, interf, and module.

The prototype introduces an entity into scope, visible to all later static
parameter prototypes and the body of the entity declaration. Parameter
entities must be explicitly imported into module and interface name spaces.
For example:

  module MaybeEq<type T>(Eq(Maybe<T>)) {
    import @ { Maybe; T; };
    ...
  };

Note that the prototypes of arguments can themselves be polymorphic.

3.3. Supplying Static Parameter Values
--------------------------------------
['<' [qref [',' qref [...]]] '>']

To use a parameterized entity, static parameter values must be provided. These
are provided as a list of qualified references in angle brackets. Each qref
must have a prototype matching that of the prototype specified when the entity
was declared.

The number of qref's supplied may be less than the number of static parameters
required by the entity, in which case we say partial application of static
parameters has occured. This is useful for supplying parameterized arguments
to another entity. For example, consider a monadic function:

  bind<type A, type B, type M<type T>, func F(A x; M<B>)>(M<A> x; M<B>);

  This could be used with an Either monad by supplying a partial application of
  the Either type constructor:

    struct Either<type A, type B>(A left, B right);

    ... bind<Int, Bool, Either<String>, IsZero>(x) ...

3.4. Entity Aliases
-------------------
Reuse of parameterized entities provides another way to define an entity: by
static application of parameters to some other polymorphic entity. To support
this, we introduce another form of entity definition:

  proto '=' qref ';' ;

This form can be used in place of a standard entity declaration. For example,
we could provide a generic BitXY type for composing bit types together, then
define a Bit8 type in terms of that generic type:

  struct BitXY<type A, type B>(A hi, B lo);

  type Bit8 = BitXY<Bit4, Bit4>;

Within the namespaces context where the alias occurs, use of the entity will
be treated as equivalent to use of its value. For example, Bit8 will be
considered the same type as BitXY<Bit4, Bit4>. Outside the namespace context
where the alias occurs, the entity will be treated as if it was a new
declaration.

4. Syntax Reference
-------------------
  type_proto ::= 'type' tname params ;
  struct_proto ::= 'struct' tname params '(' [qref fname [',' qref fname [...]]] ')' ;
  union_proto ::= 'union' tname params '(' qref fname [',' qref fname [...]] ')' ;
  func_proto ::= 'func' tname params '(' [qref vname [',' qref vname [...]]] ';' qref ')' ;
  proc_proto ::= 'proc' tname params '('
                     [qref polarity pname [',' qref polarity pname [...]]] ';'
                     [qref vname [',' qref vname [...]]] ';' qref ')' ;
  interf_proto ::= 'interf' tname params '{' [idecl [idecl [...]]] '}' ;
  module_proto ::= 'module' tname params ['(' qref ')'] ;

  proto ::= type_proto
         | struct_proto
         | union_proto
         | func_proto
         | proc_proto
         | interf_proto
         | module_proto
         ;

  import ::= 
     'import' '@'  '{' [tname ['=' qref]; [tname ['=' qref]; [...]]] '}'
   | 'import' qref '{' [tname ['=' qref]; [tname ['=' qref]; [...]]] '}'
   ;

  idecl ::=
     proto ';'
   | import ';'
   ;

  decl ::= ['priv' | 'abst'] struct_proto ';'
        |  ['priv' | 'abst'] union_proto ';'
        |  ['priv'] func_proto expr ';'
        |  ['priv'] proc_proto proc ';'
        |  ['priv'] interf_proto ';'
        |  ['priv'] module_proto ['{' [decl [decl [...]]] '}'] ';'
        |  proto '=' qref ';'
        |  import ';'
        ;
  
  prgm ::= decl [decl [...]] ;
 
  params ::= ['<' [proto [',' proto [...]]] '>'] ;

  qref ::= tname
        |  qref '<' [qref [',' qref [...]]] '>'
        |  qref '@' qref
        ;

  expr ::= ... (* as in fblc, with qref in place of tname *)
  proc ::= ... (* as in fblc, with qref in place of tname *)

  polarity ::= ... (* as in fblc *)
  pname ::= ... (* as in fblc *)
  tname ::= ... (* as in fblc *)
  vname ::= ... (* as in fblc *)

A.1 Style Suggestions
---------------------
* Capitalize entities, including types, functions, procs, interfaces, and
  modules.
* Lowercase field names, including for structs, unions, function and proc
  arguments.
* Lowercase variable names.
* "true/something/cons" before "false/nothing/empty/error" when ordering
  fields of that kind of union declaration, so that ?(x; a, b) is
  consistent with (x ? a : b) behavior.

  But "0" before "1" for bit, decimal, byte, hex, etc?

A.2. Changes from Fbld 3
------------------------
* Instead of <[type...] ; [module...]> for params, we have <[proto...]>.
Which is surely an improvement in simplicity and generality.

* Kinds can themselves be parameterized.
Which avoids an artificial arbitrary limitation by allowing full generality.

* Partial application of qrefs.
Needed once protos are parameterized.
Also generalizes import statements, which implicitly import parameterized
things, not fully applied things.

* protos = 'qref'
Which really is needed for full generality.

* Allow modules to be specified in different files.

* An fblc program is a valid fbld program.

I approve these changes as improving the overall simplicity and generality of
the language. Parameterized protos, partial application, and protos = 'qref'
do add complexity, but they do so in a simple way and provide important
capabilities.

A.3. TODO
---------
* Importing entities Foo@Foo and Bar@Foo from a parent requires name
  shuffling:
  import @ { FooM = Foo; };
  import FooM { Foo; Bar; };

  You can't have both the module and entity Foo in the scope under the same
  name. This seems to happen pretty often. Is it okay to require the rename,
  or should we find a better solution to this?

* Have some way to put interfaces in separate files, not just modules.
  But now it is more awkward that we don't see parameter types in the file
  with the body of the interface.
