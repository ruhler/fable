
@ Char@ = /Char%.Char@;
% Chars = /Char%.Chars;

<@>@ List@ = /List%.List@;
<@>% Append = /List%.Append;

<@>@ Put@ = /Process%.Put@;

@ String@ = /String%.String@;
% Str = /String%.Str;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

# Output@ -- 
#   Abstract data type for outputting a sequence of lines of text from
#   compilation.
@ Output@ = (Put@<String@>) { Unit@!; };

# Line --
#   Output the given line of text.
(String@) { Output@; } Line = (String@ line)(Put@<String@> put) {
  put(Append<Char@>(line, Str[Chars.nl]));
};

# Lines --
#   Output multiple lines of text in order.
(List@<Output@>) { Output@; } Lines = (List@<Output@> lines)(Put@<String@> put) {
  lines.?(
    cons: {
      Unit@ _ := lines.cons.head(put);
      Lines(lines.cons.tail)(put);
    },
    nil: !(Unit));
};

# NoOutput --
#   Empty output.
Output@ NoOutput = (Put@<String@> _) { !(Unit); };

# Output --
#   Output the output to the given port.
(Put@<String@>, Output@) { Unit@!; } Output = (Put@<String@> put, Output@ output) {
  output(put);
};

@(Output@, Line, Lines, NoOutput, Output);
