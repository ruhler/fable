@tutorial Abstract Types
 This tutorial does a deep dive into abstract types in fble. By the end of
 this tutorial, you'll be fully versed in section 9 of the fble language spec
 on abstract types.
 
 @section Motivation
  The way types work in fble, anyone can describe any type. You don't need to
  have access to a type declaration to refer to a type. One of the downsides
  of this approach to types is it makes it harder to protect internal data
  structures.
  
  For example, imagine you want to define an auto-balancing tree structure for
  use as a map data type. The internal structure of the tree may be
  complicated and rely on invariants about how the tree is balanced. As long
  as users only interact with the tree through provided functions like
  @l[Empty], @l[Lookup], @l[Insert], and @l[Delete], those invariants can be
  maintained. But technically there is nothing stopping a user from
  constructing their own tree value directly and in a way that violates the
  expected invariants.
  
  Abstract types are a way to restrict access to types to a set of modules.
  This way, for example, you can say only the @l[/Core/Map%] module is allowed
  to construct a map directly; everyone else has to use the functions provided
  by @l[/Core/Map%] to construct maps.
 
 @section Basics
  An abstract type is a guarded wrapper around a normal type that can only be
  accessed by modules in a specified subtree of the module hierarchy.
  
  For example, the normal type @l[Bool@] is accessible to everyone. Anyone can
  test if a boolean value is true or false or construct their own boolean
  value using @l[Bool@(true: Unit)] and @l[Bool@(false: Unit)].
  
  We can define an abstract type @l[MyBool@] that wraps the @l[Bool@] type,
  and make it so only modules in the @l[/Mine/] part of the module hierarchy
  can unwrap it:
  
  @code[fble]
   @ MyPackage@ = %(/Mine%);
   @ MyBool@ = MyPackage@<Bool@>;
  
  The syntax @l[%(...)] is used to describe a package type. Package types
  represent sets of modules. In this case, because it's given @l[/Mine%] as an
  argument to the package type, it includes modules like @l[/Mine%],
  @l[/Mine/A%], @l[/Mine/A/B%], and @l[/Mine/C%], but excludes modules like
  @l[/Yours%].
  
  One you have the package type @l[MyPackage@], you can create
  package-specific wrappers around other types. In this case, the type
  @l[MyBool@] is created which is considered a different type from @l[Bool@].
  The only thing you can do with values of the @l[MyBool@] type is convert
  them to and from values of @l[Bool@] type, but you can only do that from
  modules included in the @l[MyPackage@] package type.
  
  To create a value of @l[MyBool@]:
  
  @code[fble]
   MyBool@ MyTrue = MyBool@(True);
  
  This succeeds only from modules in the set described by the @l[MyPackage@]
  type.
  
  To extract a value from @l[MyBool@] you use an abstract access:
  
  @code[fble]
   Bool@ OriginalTrue = MyTrue.%;
  
  Again, this succeeds only from modules in the set described by the
  @l[MyPackage@] type. If you write this in a different module, you'll get a
  type error.
  
  More generally, you can use an abstract cast to convert between two types
  that are equivalent except for some parts of one type being abstract. For
  example, imagine you have a list of @l[MyBool@]. Rather than have to iterate
  over all the elements of the list converting them one at a time to
  @l[Bool@], you can do a direct cast:
  
  @code[fble]
   List@<Bool@> original = List[True, False, False, True];
   List@<MyBool@> wrapped = MyPackage@.<List@<MyBool@>>(original);
   List@<Bool@> unwrapped = MyPackage@.<List@<Bool@>>(wrapped);
 
 @section Example
  The general approach for using abstract values is to use abstract types in
  the user interface, and cast to the underly values internally. For example,
  here is how you could define a three element enum type that can only be
  accessed externally using the provided methods:
 
  @code[fble]
   @ Impl@ = +(Unit@ a, Unit@ b, Unit@ c);
   
   @ Pkg@ = %(/MyPackage%);
   @ Enum@ = Pkg@<Impl@>;
   
   Enum@ A = Pkg@.<Enum@>(Impl@(a: Unit));
   Enum@ B = Pkg@.<Enum@>(Impl@(b: Unit));
   Enum@ C = Pkg@.<Enum@>(Impl@(c: Unit));
   
   (Enum@) { Bool@; } IsA = Pkg@.<@<IsA>>((Impl@ e) { e.?(a: True, : False); });
   (Enum@) { Bool@; } IsB = Pkg@.<@<IsB>>((Impl@ e) { e.?(b: True, : False); });
   (Enum@) { Bool@; } IsC = Pkg@.<@<IsC>>((Impl@ e) { e.?(c: True, : False); });
   
   @(Enum@, A, B, C, IsA, IsB, IsC);
 
  The @l[Impl@] type is the internal type used to implement the enum. The
  @l[Enum@] type is the abstract type used in the external interface. Values
  @l[A], @l[B], and @l[C] are defined using the internal @l[Impl@] type, but
  immediately wrapped to convert them to the external @l[Enum@] type.
 
  The functions @l[IsA], @l[IsB], and @l[IsC] are similarly created as
  functions operating on the @l[Impl@], then cast and exported as functions
  operating on the external type @l[Enum@]. In this example we take advantage
  of the typeof operator to more easily refer to the types of functions
  @l[IsA], @l[IsB], and @l[IsC] being defined.
 
 @section Abstract Types in the Language Specification
  Abstract types are described in @fbld[../spec/fble.fbld#abstract][section 9
  of the fble language specification].
 
 @section Next Steps
  You've now learned about all of the fble language features.
