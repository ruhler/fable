
<<@>@>@ Monad@ = /Core/Monad%.Monad@;

% Str = /Core/String%.Str;

@ Unit@ = /Core/Unit%.Unit@;

@ Loc@ = /Fbld/Loc%.Loc@;
@ StringL@ = /Fbld/StringL%.StringL@;

<<@>@ M@>(Monad@<M@> m) {

  % ResultM = /Fbld/ResultM%<M@>;
  <@>@ MR@ = ResultM.MR@;
  Monad@<MR@> mr = ResultM.Monad(m);
  @ MRU@ = MR@<Unit@>;

  @ Core@ = /Fbld/Core%(m).Core@;
  @ Usage@ = /Fbld/Usage%(m).Usage@;

  (Core@ core) {
    Usage@ Usage = @(
      usage:
        (Loc@ loc, MRU@ name, MRU@ brief, MRU@ contents) {
          core.doc(name, {
            Unit@ _ <- mr.do(core.par({
              Unit@ _ <- mr.do(name);
              Unit@ _ <- mr.do(core.text(StringL@(Str|' - ', loc)));
              brief;
            }));
            contents;
          });
        },

      synopsis:
        (Loc@ loc, MRU@ text) {
          core.par({
            Unit@ _ <- mr.do(core.text(StringL@(Str|'Usage: ', loc)));
            text;
          });
        },

      description:
        (Loc@ loc, MRU@ body) {
          body;
        },

      options:
        (Loc@ loc, MRU@ body) {
          body;
        },

      opt:
        (Loc@ loc, MRU@ opt, MRU@ desc) {
          core.def(opt, desc);
        },

      exitstatus:
        (Loc@ loc, MRU@ body) {
          core.section(core.text(StringL@(Str|'Exit Status', loc)), body);
        },

      examples:
        (Loc@ loc, MRU@ body) {
          core.section(core.text(StringL@(Str|'Examples', loc)), body);
        },

      ex:
        (Loc@ loc, StringL@ text, MRU@ desc) {
          Unit@ _ <- mr.do(core.par(core.l(text)));
          desc;
        }
    );

    @(Usage);
  };
};
