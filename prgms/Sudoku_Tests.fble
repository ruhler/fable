{ Bool%; @(Bool@, True, False, And); };
{ Char%; @(Char@, newline); };
{ List%; @(S@, S0, S, ConsS, Append, Concat, List@); };
{ Maybe%; @(Maybe@, Just, Nothing, For); };
{ String%; @(Str@, Str); };
{ Test%; @(Test@, TestResult@); };
{ Unit%; @(Unit@, Unit); };

{ Sudoku%; @(
    Symbol@, 1, 2, 3, 4, 5, 6, 7, 8, 9, IterateSymbol,
    Input@, Solved@, Solve
  );
};

(Symbol@, Symbol@) { Bool@; } EqSymbol = (Symbol@ a, Symbol@ b) {
  ?(a; 1: ?(b; 1: True, : False),
       2: ?(b; 2: True, : False),
       3: ?(b; 3: True, : False),
       4: ?(b; 4: True, : False),
       5: ?(b; 5: True, : False),
       6: ?(b; 6: True, : False),
       7: ?(b; 7: True, : False),
       8: ?(b; 8: True, : False),
       9: ?(b; 9: True, : False));
};

# An array of elements of type T@, indexed by symbol.
<@>@ Array@ = <@ T@>(Symbol@){ T@; };

<@ T@>((T@, T@) { Bool@; }, Array@<T@>, Array@<T@>) { Bool@; }
EqArray = <@ T@>((T@, T@) { Bool@; } eq, Array@<T@> a, Array@<T@> b) {
  For<Symbol@, Bool@>(1, True, IterateSymbol,
    (Symbol@ s, Bool@ p) {
      And(p, eq(a(s), b(s)));
  });
};

# Print a solved board.
# If spaced is true, insert whitespace to make it more legible.
# Otherwise, don't include any whitespace in the output.
(Bool@, Solved@) { Str@; } ShowBoard = (Bool@ spaced) {
  (Symbol@) { Str@; } ShowCell = (Symbol@ s) {
    ?(s; 1: Str(Char@|1), 2: Str(Char@|2), 3: Str(Char@|3),
         4: Str(Char@|4), 5: Str(Char@|5), 6: Str(Char@|6),
         7: Str(Char@|7), 8: Str(Char@|8), 9: Str(Char@|9));
  };

  Str@ space = ?(spaced; true: Str(Char@|' '), false: S0<Char@>);
  Str@ nl = ?(spaced; true: S<Char@>([newline]), false: S0<Char@>);

  (Array@<Symbol@>) { Str@; } ShowRow = (Array@<Symbol@> row) {
    Concat<Char@>(S<Str@>([
      ShowCell(row(1)), ShowCell(row(2)), ShowCell(row(3)), space,
      ShowCell(row(4)), ShowCell(row(5)), ShowCell(row(6)), space,
      ShowCell(row(7)), ShowCell(row(8)), ShowCell(row(9)), nl
    ]));
  };

  (Solved@ board) {
    Concat<Char@>(S<Str@>([
      ShowRow(board(1)), ShowRow(board(2)), ShowRow(board(3)), nl,
      ShowRow(board(4)), ShowRow(board(5)), ShowRow(board(6)), nl,
      ShowRow(board(7)), ShowRow(board(8)), ShowRow(board(9))
    ]));
  };
};

@(MaybeSymbols: {
  (Symbol@){ Maybe@<Symbol@>; } J = Just<Symbol@>;
  @(1: J(1), 2: J(2), 3: J(3),
    4: J(4), 5: J(5), 6: J(6),
    7: J(7), 8: J(8), 9: J(9),
    _: Nothing<Symbol@>);
});

<@ T@>(T@, T@, T@, T@, T@, T@, T@, T@, T@){ Array@<T@>; }
Array = <@ T@>(T@ 1, T@ 2, T@ 3, T@ 4, T@ 5, T@ 6, T@ 7, T@ 8, T@ 9) {
  (Symbol@ i) {
    ?(i; 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9);
  };
};

Input@ SampleInput = {
  @ S@ = Maybe@<Symbol@>;
  MaybeSymbols;
  Array<Array@<S@>>(
    Array<S@>(8,_,_,  _,9,_,  _,_,2),
    Array<S@>(7,2,_,  _,_,_,  _,4,9),
    Array<S@>(_,_,_,  3,_,6,  _,_,_),

    Array<S@>(_,5,_,  _,8,_,  _,1,6),
    Array<S@>(_,_,9,  _,_,_,  3,_,_),
    Array<S@>(6,7,_,  _,5,_,  _,9,_),

    Array<S@>(_,_,_,  9,_,1,  _,_,_),
    Array<S@>(9,6,_,  _,_,_,  _,5,4),
    Array<S@>(1,_,_,  _,4,_,  _,_,7));
};

Solved@ SampleSolved = {
  @ S@ = Symbol@;
  Array<Array@<S@>>(
    Array<S@>(8,1,6,  4,9,7,  5,3,2),
    Array<S@>(7,2,3,  5,1,8,  6,4,9),
    Array<S@>(4,9,5,  3,2,6,  7,8,1),
                                   
    Array<S@>(3,5,4,  7,8,9,  2,1,6),
    Array<S@>(2,8,9,  1,6,4,  3,7,5),
    Array<S@>(6,7,1,  2,5,3,  4,9,8),
                                   
    Array<S@>(5,4,2,  9,7,1,  8,6,3),
    Array<S@>(9,6,7,  8,3,2,  1,5,4),
    Array<S@>(1,3,8,  6,4,5,  9,2,7));
};

Input@ EasyInput = {
  @ S@ = Maybe@<Symbol@>;
  MaybeSymbols;
  Array<Array@<S@>>(
    Array<S@>(5,3,6,  _,_,_,  4,_,7),
    Array<S@>(_,_,8,  _,_,5,  _,_,_),
    Array<S@>(_,_,_,  _,8,7,  9,_,6),

    Array<S@>(9,_,2,  5,7,_,  _,_,_),
    Array<S@>(_,_,_,  4,_,_,  7,_,_),
    Array<S@>(6,_,7,  _,_,_,  3,2,5),

    Array<S@>(_,6,_,  _,_,4,  8,_,_),
    Array<S@>(_,_,4,  2,_,_,  _,7,_),
    Array<S@>(2,7,5,  8,_,1,  6,4,3));
};

Input@ MediumInput = {
  @ S@ = Maybe@<Symbol@>;
  MaybeSymbols;
  Array<Array@<S@>>(
    Array<S@>(8,_,_,  _,_,_,  _,_,9),
    Array<S@>(9,_,2,  _,6,3,  _,_,_),
    Array<S@>(_,_,_,  5,_,_,  3,_,_),

    Array<S@>(_,4,9,  _,_,_,  _,8,3),
    Array<S@>(3,_,_,  _,_,2,  _,_,_),
    Array<S@>(_,_,_,  7,_,_,  5,_,_),

    Array<S@>(5,_,_,  _,_,6,  _,_,_),
    Array<S@>(_,_,_,  9,1,_,  8,7,_),
    Array<S@>(_,6,_,  _,_,_,  1,_,_));
};

Input@ HardInput = {
  @ S@ = Maybe@<Symbol@>;
  MaybeSymbols;
  Array<Array@<S@>>(
    Array<S@>(_,_,_,  _,3,1,  _,_,_),
    Array<S@>(_,_,6,  2,4,_,  7,_,_),
    Array<S@>(8,_,_,  _,_,_,  9,_,_),

    Array<S@>(_,5,_,  _,2,6,  _,4,_),
    Array<S@>(_,_,_,  4,1,_,  _,_,_),
    Array<S@>(_,2,_,  _,_,_,  _,_,3),

    Array<S@>(_,9,_,  _,_,_,  2,8,_),
    Array<S@>(_,8,4,  _,_,_,  5,_,_),
    Array<S@>(_,_,_,  5,_,8,  _,_,_));
};

Input@ ExpertInput = {
  @ S@ = Maybe@<Symbol@>;
  MaybeSymbols;
  Array<Array@<S@>>(
    Array<S@>(_,_,_,  _,_,9,  _,2,1),
    Array<S@>(_,8,_,  _,_,_,  _,6,_),
    Array<S@>(_,_,4,  2,_,_,  _,_,_),

    Array<S@>(_,4,2,  _,8,_,  6,_,_),
    Array<S@>(_,_,_,  7,1,_,  _,_,_),
    Array<S@>(6,_,_,  3,_,_,  _,5,7),

    Array<S@>(_,_,_,  _,6,_,  _,_,9),
    Array<S@>(_,5,6,  _,_,1,  _,_,_),
    Array<S@>(_,9,_,  _,_,_,  _,8,_));
};

S@<Test@> Tests = {
  (Str@){Str@;} name = (Str@ nm) {
    Append<Char@>(Str(Char@|'Sudoku.'), nm);
  };

  Test@ sample = Test@(name(Str(Char@|sample)), $({
    Maybe@<Solved@> ms = Solve(SampleInput);
    ?(ms;
       just: {
         ?(EqArray<Array@<Symbol@>>(EqArray<Symbol@>(EqSymbol),
             SampleSolved, ms.just);
            true: TestResult@(pass: Unit),
            false: TestResult@(fail: Concat<Char@>(S<Str@>([
                    Str(Char@|'incorrect solution. expected:'), S<Char@>([newline]),
                    ShowBoard(False, SampleSolved), S<Char@>([newline]),
                    Str(Char@|'but got:'), S<Char@>([newline]),
                    ShowBoard(False, ms.just)]))));
       },
       nothing: TestResult@(fail: Str(Char@|'failed to solve board')));
  }));

  S<Test@>([sample]);
};

Unit@! Bench = $({
  Solved@ sample = Solve(SampleInput).just;
  Solved@ easy = Solve(EasyInput).just;
  Solved@ medium = Solve(MediumInput).just;
  Solved@ hard = Solve(HardInput).just;
  Solved@ expert = Solve(ExpertInput).just;
  Unit;
});

@(Tests, Bench);
