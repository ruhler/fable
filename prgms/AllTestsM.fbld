module AllTestsM(AllTestsI) {
  import @ { UnitM; ListM; UBNatTestM; PrimesTestM; Md5TestM; FunctionI; };

  import UnitM { Unit; };
  import ListM { S; P; Append; MapS; };
  import UBNatTestM { UBNatTestFailure = TestFailure; };
  import PrimesTestM { PrimesTestFailure = TestFailure; };
  import Md5TestM { Md5TestFailure = TestFailure; };

  union TestFailure(
      UBNatTestFailure UBNatTest,
      PrimesTestFailure PrimesTest,
      Md5TestFailure Md5Test
  );
  
  func UBNatTestFailureF(UBNatTestFailure a ; TestFailure) {
    TestFailure:UBNatTest(a);
  };

  func PrimesTestFailureF(PrimesTestFailure a ; TestFailure) {
    TestFailure:PrimesTest(a);
  };

  func Md5TestFailureF(Md5TestFailure a ; TestFailure) {
    TestFailure:Md5Test(a);
  };

  proc Test( ; ; S<TestFailure>) {
    S<Md5TestFailure> md5 = Test@Md5TestM(;);
    $(Append<TestFailure>(
        Append<TestFailure>(
          MapS<UBNatTestFailure, TestFailure; UBNatTestFailureF>(Test@UBNatTestM()),
          MapS<PrimesTestFailure, TestFailure, PrimesTestFailureF>(Test@PrimesTestM())),
        MapS<Md5TestFailure, TestFailure, Md5TestFailureF>(md5)));
  };
};
