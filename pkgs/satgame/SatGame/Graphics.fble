
@ Drawing@ = /App/Drawing%.Drawing@;
@ Color@ = /App/Drawing%.Color@;
% Color = /App/Drawing%.Color;
% Drawings = /App/Drawing%.Drawings;
% Rect = /App/Drawing%.Rect;
% Over = /App/Drawing%.Over;
% Translate = /App/Drawing%.Translate;

@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;
% Mul = /Core/Int%.Mul;
% Int = /Core/Int/Lit%.Int;
% CountUpTo = /Core/Int/Iter%.CountUpTo;

<@>@ List@ = /Core/List%.List@;
<@>% Nil = /Core/List%.Nil;
<@>% Cons = /Core/List%.Cons;
<@>% List = /Core/List%.List;

@ ImagePair@ = *(Drawing@ a, Drawing@ b);

Color@ BackgroundColor = Color@(Int|208, Int|208, Int|208);

Drawing@ TileBackground = Rect(Int|0, Int|0, Int|48, Int|48, BackgroundColor);

(Drawing@) { Drawing@; }
Tile = (Drawing@ image) {
  Drawings[TileBackground, Translate(Int|8, Int|8, image)];
};

Drawing@ box = {
  Drawing@ left = Rect(Int|0, Int|0, Int|2, Int|10, Color.Black);
  Drawing@ right = Rect(Int|8, Int|0, Int|2, Int|10, Color.Black);
  Drawing@ top = Rect(Int|0, Int|8, Int|10, Int|2, Color.Black);
  Drawing@ bottom = Rect(Int|0, Int|0, Int|10, Int|2, Color.Black);
  Drawings[left, right, top, bottom];
};

Drawing@ filled = {
  /Core/Iter%.For(CountUpTo(Int|3), box,
    (Int@ x, Drawing@ d) {
      /Core/Iter%.For(CountUpTo(Int|3), d,
        (Int@ y, Drawing@ e) {
          Drawings[
            e,
            Rect(Add(Mul(Int|2, x), Int|2), Add(Mul(Int|2, y), Int|2), Int|1, Int|1, Color.Black),
            Rect(Add(Mul(Int|2, x), Int|3), Add(Mul(Int|2, y), Int|3), Int|1, Int|1, Color.Black)];
          });
      });
};

Drawing@ 0 = Translate(Int|0, Int|0, box),
Drawing@ 1 = Translate(Int|0, Int|11, box),
Drawing@ 2 = Translate(Int|0, Int|22, box),
Drawing@ 3 = Translate(Int|11, Int|0, box),
Drawing@ 4 = Translate(Int|11, Int|11, filled),
Drawing@ 5 = Translate(Int|11, Int|22, box),
Drawing@ 6 = Translate(Int|22, Int|0, box),
Drawing@ 7 = Translate(Int|22, Int|11, box),
Drawing@ 8 = Translate(Int|22, Int|22, box);

List@<Drawing@> Images = List[
  Drawings[0, 1, 2, 3, 4, 5, 6, 7, 8],

  Drawings[   1, 2, 3, 4, 5, 6, 7, 8],
  Drawings[0,    2, 3, 4, 5, 6, 7, 8],
  Drawings[0, 1,    3, 4, 5, 6, 7, 8],
  Drawings[0, 1, 2,    4, 5, 6, 7, 8],
  Drawings[0, 1, 2, 3,    5, 6, 7, 8],
  Drawings[0, 1, 2, 3, 4,    6, 7, 8],
  Drawings[0, 1, 2, 3, 4, 5,    7, 8],
  Drawings[0, 1, 2, 3, 4, 5, 6,    8],
  Drawings[0, 1, 2, 3, 4, 5, 6, 7   ],

  Drawings[      2, 3, 4, 5, 6, 7, 8],
  Drawings[   1,    3, 4, 5, 6, 7, 8],
  Drawings[   1, 2,    4, 5, 6, 7, 8],
  Drawings[   1, 2, 3,    5, 6, 7, 8],
  Drawings[   1, 2, 3, 4,    6, 7, 8],
  Drawings[   1, 2, 3, 4, 5,    7, 8],
  Drawings[   1, 2, 3, 4, 5, 6,    8],
  Drawings[   1, 2, 3, 4, 5, 6, 7   ]
];

List@<ImagePair@> ImagePairs = /Core/List%.Map(Images,
  (Drawing@ d) {
    ImagePair@(d, d);
  });

Drawing@ Background = Rect(Int|0, Int|0, Int|640, Int|480, Color.Black);

# Splits a list of image pairs into a list of 6 element drawing lists.
# For the purposes of displaying all the drawings in a single screenshot.
(List@<ImagePair@>) { List@<List@<Drawing@>>; }
Split12 = (List@<ImagePair@> pairs) {
  pairs.?(nil: Nil<List@<Drawing@>>);

  List@<Drawing@> head = /Core/List%.ForEach(
    /Core/List/Length%.Take(Int|6, pairs), Nil<Drawing@>,
    (ImagePair@ p, List@<Drawing@> l) {
      Cons(p.a, Cons(p.b, l));
    });
    
  List@<List@<Drawing@>> tail = Split12(/Core/List/Length%.Drop(Int|6, pairs));
  Cons(head, tail);
};
      
Drawing@ Screenshot = {
  List@<List@<Drawing@>> images = Split12(ImagePairs);

  @ S@ = *(Int@ x, Drawing@ d);
  /Core/List%.ForEach(images, S@(Int|4, Background),
    (List@<Drawing@> drawings, S@ s) {
      Int@ y = s.x;
      S@(Add(Int|48, y), /Core/List%.ForEach(drawings, s.@(x: Int|4),
          (Drawing@ i, S@ r) {
            S@(Add(Int|48, r.x), Over(r.d, Translate(r.x, y, Tile(i))));
          }).d);
      }).d;
};

@(Screenshot);
