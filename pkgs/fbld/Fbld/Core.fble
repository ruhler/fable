
<<@>@>@ Monad@ = /Core/Monad%.Monad@;

@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>% Length = /Core/List/Length%.Length;

% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;

@ Command@ = /Fbld/Types%.Command@;
@ String@ = /Fbld/Types%.String@;
<@>% Err = /Fbld/Types%.Err;

(String@) { String@; } Unescape = (String@ s) {
  String@(/Fbld/Unescape%.Unescape(s.str), s.loc);
};

<<@>@ M@>(Monad@<M@> m) {
  % Invoke = /Fbld/Invoke%(m);

  @ MRU@ = M@</Fbld/Types%.Result@<Unit@>>;
  @ Invoke@ = /Fbld/Types%.Invoke@<M@>;

  % MarkupModule = /Fbld/Markup%(m);
  @ Markup@ = MarkupModule.Markup@;
  % Markup = MarkupModule.Markup;
  % Entry = MarkupModule.Entry;

  # Core document interface.
  @ Core@ = *(
    # @text[ESCAPED text]
    # An explicit tag for default inline text.
    # @param text  The text to unescape.
    (String@) { MRU@; } text,

    # @l[ESCAPED text]
    # A literal string.
    # The text is highlighted as bold or monospace font, for example.
    # @param text  The text to highlith.
    (String@) { MRU@; } l,

    # @a[ESCAPED text]
    # An argument.
    # The text is highlighted using italics, for example.
    # @param text  The text to highlight.
    (String@) { MRU@; } a,

    # @par[INLINE text]
    # A paragraph of text.
    # @param text  The body of the paragraph.
    (MRU@) { MRU@; } par,

    # @item[BLOCK text]
    # A list item.
    # @param text  The text of the item.
    (MRU@) { MRU@; } item,

    # @code[ESCAPED language][ESCAPED text]
    # A source code listing.
    # @param language  The lanuage, e.g. c, python, sh, fble, vim, etc.
    # @param text  The source code text.
    (String@, String@) { MRU@; } code,

    # @def[INLINE name][INLINE value]
    # A short form definition of a term.
    # @param name  The term to define.
    # @param value  The definition of the term.
    (MRU@, MRU@) { MRU@; } def,

    # @definition[INLINE name][BLOCK value]
    # A long form definition of a term.
    # @param name  The term to define.
    # @param value  The definition of the term.
    (MRU@, MRU@) { MRU@; } definition,

    # @section[INLINE title][BLOCK body]
    #  A top level section.
    #  @arg[title] The tile of the section.
    #  @arg[body] The contents of the section.
    (MRU@, MRU@) { MRU@; } section,

    # @subsection[INLINE title][BLOCK body]
    # A second level section.
    # @param title  The tile of the section.
    # @param body  The contents of the section.
    (MRU@, MRU@) { MRU@; } subsection,

    # @subsubsection[INLINE title][BLOCK body]
    # A third level section.
    # @param title  The tile of the section.
    # @param body  The contents of the section.
    (MRU@, MRU@) { MRU@; } subsubsection,

    # @doc[INLINE title][BLOCK body]
    # Top level entry point for a generic document.
    # @param title  The title of the document.
    # @param body  The contents of the document.
    (MRU@, MRU@) { MRU@; } doc
  );

  # @<tag>[ESCAPED] helper function
  ((String@) { MRU@; }) { Invoke@; } E = ((String@) { MRU@; } f) {
    (Invoke@ inline, Invoke@ block, Command@ command) {
      Int@ num_args = Length(command.args);
      /Core/Int/Eq%.Eq(Int|1, num_args ).?(false: {
        m.return(Err<Unit@>(String@(Strs[
              Str|'expected 1 arg, but got ',
              /Core/Int/Show%.Show(num_args)], command.name.loc)));
      });

      String@ arg = command.args.cons.head;
      f(Unescape(arg));
    };
  };

  # @<tag>[BLOCK] helper function
  ((MRU@) { MRU@; }) { Invoke@; } B = ((MRU@) { MRU@; } f) {
    (Invoke@ inline, Invoke@ block, Command@ command) {
      Int@ num_args = Length(command.args);
      /Core/Int/Eq%.Eq(Int|1, num_args ).?(false: {
        m.return(Err<Unit@>(String@(Strs[
              Str|'expected 1 arg, but got ',
              /Core/Int/Show%.Show(num_args)], command.name.loc)));
      });

      String@ arg = command.args.cons.head;
      f(Invoke.Block(inline, block, arg));
    };
  };

  # @<tag>[INLINE][BLOCK] helper function
  ((MRU@, MRU@) { MRU@; }) { Invoke@; } IB = ((MRU@, MRU@) { MRU@; } f) {
    (Invoke@ inline, Invoke@ block, Command@ command) {
      Int@ num_args = Length(command.args);
      /Core/Int/Eq%.Eq(Int|2, num_args ).?(false: {
        m.return(Err<Unit@>(String@(Strs[
              Str|'expected 2 args, but got ',
              /Core/Int/Show%.Show(num_args)], command.name.loc)));
      });

      String@ i = command.args.cons.head;
      String@ b = command.args.cons.tail.cons.head;
      f(Invoke.Inline(inline, block, i), Invoke.Block(inline, block, b));
    };
  };

  # @<tag>[ESCAPED][ESCAPED] helper function
  ((String@, String@) { MRU@; }) { Invoke@; } EE = ((String@, String@) { MRU@; } f) {
    (Invoke@ inline, Invoke@ block, Command@ command) {
      Int@ num_args = Length(command.args);
      /Core/Int/Eq%.Eq(Int|2, num_args ).?(false: {
        m.return(Err<Unit@>(String@(Strs[
              Str|'expected 2 args, but got ',
              /Core/Int/Show%.Show(num_args)], command.name.loc)));
      });

      String@ a = command.args.cons.head;
      String@ b = command.args.cons.tail.cons.head;
      f(Unescape(a), Unescape(b));
    };
  };

  # @<tag>[INLINE] helper function
  ((MRU@) { MRU@; }) { Invoke@; } I = ((MRU@) { MRU@; } f) {
    (Invoke@ inline, Invoke@ block, Command@ command) {
      Int@ num_args = Length(command.args);
      /Core/Int/Eq%.Eq(Int|1, num_args ).?(false: {
        m.return(Err<Unit@>(String@(Strs[
              Str|'expected 1 arg, but got ',
              /Core/Int/Show%.Show(num_args)], command.name.loc)));
      });

      String@ arg = command.args.cons.head;
      f(Invoke.Inline(inline, block, arg));
    };
  };

  (Core@) { Markup@; } InlineMarkup = (Core@ core) {
    Markup[
      Entry(Str|'', E(core.text)),
      Entry(Str|'text', E(core.text)),
      Entry(Str|'l', E(core.l)),
      Entry(Str|'a', E(core.a))
    ];
  };

  (Core@) { Markup@; } BlockMarkup = (Core@ core) {
    Markup[
      Entry(Str|'', I(core.par)),
      Entry(Str|'par', I(core.par)),
      Entry(Str|'item', B(core.item)),
      Entry(Str|'code', EE(core.code)),
      Entry(Str|'def', IB(core.def)),
      Entry(Str|'definition', IB(core.definition)),
      Entry(Str|'section', IB(core.section)),
      Entry(Str|'subsection', IB(core.subsection)),
      Entry(Str|'subsubsection', IB(core.subsubsection)),
      Entry(Str|'doc', IB(core.doc))
    ];
  };

  @(Core@, InlineMarkup, BlockMarkup);
};
