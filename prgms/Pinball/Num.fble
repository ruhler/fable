
@ Bool@ = /Bool%.Bool@;

@ Decimal@ = /Digits%.Decimal@;

@ Int@ = /Int/Int%.Int@;

<@>@ List@ = /List%.List@;

@ Rat@ = /Rat%.Rat@;
% AddR = /Rat%.Add;
% SubR = /Rat%.Sub;
% NegR = /Rat%.Neg;
% MulR = /Rat%.Mul;
% DivR = /Rat%.Div;
% ApproxR = /Rat%.Approx;
% GtR = /Rat/Eq%.Gt;
% LtR = /Rat/Eq%.Lt;
% LeR = /Rat/Eq%.Le;
% EqR = /Rat/Eq%.Eq;
% IntR = /Rat/Lit%.Int;
% ShowR = /Rat/Show%.Show;

<@>@ Show@ = /Show%.Show@;

# _@ -- Token type to prevent internal access to Num@ abstract type.
@? _@;

# Num@ -- 
#   A number with sufficient precision for the pinball game.
@ Num@ = _@<Rat@>;

(Rat@) { Num@; } Num = {
  Rat@ P = DivR(IntR|1, IntR|128);
  (Rat@ a) {
    _@(ApproxR(a, P));
  };
};

(Num@, Num@) { Num@; } Add = (Num@ a, Num@ b) {
  Num(AddR(a<_@>, b<_@>));
};

(Num@, Num@) { Num@; } Sub = (Num@ a, Num@ b) {
  Num(SubR(a<_@>, b<_@>));
};

(Num@) { Num@; } Neg = (Num@ a) {
  Num(NegR(a<_@>));
};

(Num@, Num@) { Num@; } Mul = (Num@ a, Num@ b) {
  Num(MulR(a<_@>, b<_@>));
};

(Num@, Num@) { Num@; } Div = (Num@ a, Num@ b) {
  Num(DivR(a<_@>, b<_@>));
};

(Num@, Num@) { Bool@; } Eq = (Num@ a, Num@ b) {
  EqR(a<_@>, b<_@>);
};

(Num@, Num@) { Bool@; } Gt = (Num@ a, Num@ b) {
  GtR(a<_@>, b<_@>);
};

(Num@, Num@) { Bool@; } Lt = (Num@ a, Num@ b) {
  LtR(a<_@>, b<_@>);
};

(Num@, Num@) { Bool@; } Le = (Num@ a, Num@ b) {
  LeR(a<_@>, b<_@>);
};

Show@<Num@> Show = (Num@ a) {
  ShowR(a<_@>);
};

# Int --
#   Integer literal.
(List@<Decimal@>) { Num@; } Int = (List@<Decimal@> ds) {
  Num(IntR(ds));
};

(Num@) { Int@; } Floor = (Num@ a) {
  Rat@ ar = a<_@>;
  /Int/Int/Div%.Div(ar.n, ar.d).q;
};

@(Num@, Add, Sub, Neg, Mul, Div, Eq, Gt, Lt, Le, Show, Int, Floor);
