
<@>% List = /Core/List%.List;
<@>% Concat = /Core/List%.Concat;
<@>% ForEach = /Core/List%.ForEach;

@ Location@ = /Pprof/Profile%.Location@;
@ Profile@ = /Pprof/Profile%.Profile@;
@ Sequence@ = /Pprof/Profile%.Sequence@;

@ Samples@ = /Pprof/Profile/Samples%.Samples@;
% CountSelf = /Pprof/Profile/Samples%.CountSelf;
% CountTotal = /Pprof/Profile/Samples%.CountTotal;

@ Value@ = /Pprof/Profile/Value%.Value@;

% LM = /Pprof/Profile/LocationMap%;

# @struct[Result@] Result of a profile count.
#  @field[List@<Int@>][self]
#   The count of metric values for samples where the sequence in question is a
#   suffix.
#  @field[List@<Int@>][total]
#   The count of metric values for samples where the sequence in question
#   appears anywhere in the sample.
@ Count@ = *(
  Value@ self,
  Value@ total
);

(Sequence@, Samples@) { Count@; }
CountSamples = (Sequence@ seq, Samples@ samples) {
  Value@ self = CountSelf(samples, seq);
  Value@ total = CountTotal(samples, seq);
  @(self, total);
};

(Sequence@, Profile@) { Count@; }
Count = (Sequence@ s, Profile@ p) {
  CountSamples(s, p.samples);
};

# Returns a count for every location L for the sequence prefix, L, suffix.
(Sequence@, Sequence@, Profile@) { LM.Map@<Count@>; }
Counts = (Sequence@ prefix, Sequence@ suffix, Profile@ profile) {
  ForEach(profile.locations, LM.Empty<Count@>,
    (Location@ loc, LM.Map@<Count@> m) {
      LM.Insert(m, loc.id, Count(Concat[prefix, List[loc.id], suffix], profile));
    });
};

@(Count@, Count, Counts);
