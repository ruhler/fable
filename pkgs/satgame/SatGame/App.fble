
% True = /Core/Bool%.True;

@ Int@ = /Core/Int%.Int@;
% Incr = /Core/Int%.Incr;
% Sub = /Core/Int%.Sub;
% Mul = /Core/Int%.Mul;
% Div = /Core/Int/Div%.Div;
% Max = /Core/Int/Eq%.Max;
% Min = /Core/Int/Eq%.Min;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;
<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ IStream@ = /Core/Stream%.IStream@;
<<@>@>@ OStream@ = /Core/Stream%.OStream@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<<@>@>@ App@ = /App/App%.App@;
<<@>@>@ Main@ = /App/App%.Main@;
@ Event@ = /App/App%.Event@;
@ Effect@ = /App/App%.Effect@;

@ Color@ = /App/Drawing%.Color@;
@ Drawing@ = /App/Drawing%.Drawing@;
@ Point@ = /App/Drawing%.Point@;
% Color = /App/Drawing%.Color;
% Rect = /App/Drawing%.Rect;
% Affine = /App/Drawing%.Affine;
% Drawings = /App/Drawing%.Drawings;

@ Params@ = /SatGame/Puzzle%.Params@;
@ Puzzle@ = /SatGame/Puzzle%.Puzzle@;

@ Game@ = /SatGame/Game%.Game@;
@ Toggle@ = /SatGame/Game%.Toggle@;
% Cycle = /SatGame/Game%.Cycle;
% ToggleDismissed = /SatGame/Game%.ToggleDismissed;
% Toggle = /SatGame/Game%.Toggle;

@ Layout@ = /SatGame/Game/Draw%.Layout@;
@ TileIndex@ = /SatGame/Game/Draw%.TileIndex@;
% Layout = /SatGame/Game/Draw%.Layout;
% TileOf = /SatGame/Game/Draw%.TileOf;

% PureLFSR = /SatGame/Random/PureLFSR%;
% Generate = /SatGame/Generate%<PureLFSR.M@>(PureLFSR.Monad, PureLFSR.Random);

@ Args@ = *(
  Int@ num_vars,
  Int@ num_clauses,
  Int@ num_literals_per_clause,
  Int@ seed
);

Args@ DefaultArgs = @(
  num_vars: Int|12,
  num_clauses: Int|18,
  num_literals_per_clause: Int|3,
  seed: Int|1
);

(List@<String@>, Args@) { Args@; }
GetArgs = (List@<String@> args, Args@ default) {
  args.?(nil: default);
  args.cons.tail.?(nil: default);

  String@ arg = args.cons.head;
  Int@ value = /Core/Int/Show%.Read(args.cons.tail.cons.head);

  Args@ nargs = {
    /Core/String/Eq%.Eq(arg, Str|'--vars').?(true: {
      default.@(num_vars: value);
    });

    /Core/String/Eq%.Eq(arg, Str|'--clauses').?(true: {
      default.@(num_clauses: value);
    });

    /Core/String/Eq%.Eq(arg, Str|'--lits-per-clause').?(true: {
      default.@(num_literals_per_clause: value);
    });

    /Core/String/Eq%.Eq(arg, Str|'--seed').?(true: {
      default.@(seed: value);
    });

    default;
  };
  GetArgs(args.cons.tail.cons.tail, nargs);
};

@ Transform@ = *(Int@ x, Int@ y, Int@ s);

@ State@ = *(
  Game@ game,
  Int@ mouse_x,
  Int@ mouse_y,
  Drawing@ board,  # Cached drawing of the game board.

  Int@ width,      # width of the window.
  Int@ height,     # height of the window.
  Transform@ transform  # Transformation to apply to the board.
);

Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio, App@<M@> app, Int@ width, Int@ height, List@<String@> argv) {
  % I = /Core/Stream/IStream%(m);
  % O = /Core/Stream/OStream%(m);

  # Read and update the default seed value.
  Int@ seed <- m.do({
    Maybe@<String@> home <- m.do(stdio.getenv(Str|HOME));
    home.?(nothing: m.return(Int|0));

    String@ filename = Strs[home.just, Str|'/.fble-satgame'];
    Maybe@<IStream@<M@>> istream <- m.do(stdio.read(filename, /Core/Stdio%.Text));

    Int@ seed <- m.do({
      istream.?(nothing: m.return(Int|0));
      String@ text <- m.do(I.GetText(istream.just));
      m.return(/Core/Int/Show%.Read(text));
    });

    Maybe@<OStream@<M@>> ostream <- m.do(stdio.write(filename, /Core/Stdio%.Text));
    Unit@ _ <- m.do({
      ostream.?(nothing: m.return(Unit));
      O.PutStr(ostream.just, /Core/Int/Show%.Show(Incr(seed)));
    });

    m.return(seed);
  });

  Args@ args = GetArgs(argv, DefaultArgs.@(seed));
  Params@ params = Params@(args.num_vars, args.num_clauses, args.num_literals_per_clause);
  Layout@ layout = Layout(params);

  # @func[Fit] Fit the game board in the window.
  #  @arg[Int@][w] The width of the window
  #  @arg[Int@][h] The height of the window
  (Int@, Int@) { Transform@; } Fit = (Int@ w, Int@ h) {
    Int@ sx = Div(w, layout.width).q;
    Int@ sy = Div(h, layout.height).q;
    Int@ s = Max(Int|1, Min(sx, sy));

    Int@ swidth = Mul(s, layout.width);
    Int@ sheight = Mul(s, layout.height);

    Int@ x = Div(Sub(w, swidth), Int|2).q;
    Int@ y = Div(Sub(h, sheight), Int|2).q;
    @(x, y, s);
  };

  (State@) { M@<Unit@>; } Draw = (State@ state) {
    Color@ bg_color = Color@(Int|64, Int|64, Int|64);
    Drawing@ background = Rect(Int|0, Int|0, state.width, state.height, bg_color);
    Drawing@ cursor = Rect(
      Sub(state.mouse_x, Int|4),
      Sub(state.mouse_y, Int|4),
      Int|8, Int|8, Color.Yellow);
    Point@ a = Point@(state.transform.s, state.transform.s);
    Point@ b = Point@(state.transform.x, state.transform.y);
    Drawing@ screen = Drawings[background, Affine(a, b, state.board), cursor];
    app.effect(Effect@(draw: screen));
  };

  (State@) { M@<Unit@>; } EventLoop = (State@ state) {
    Event@ e <- m.do(app.event);
    e.?(
      tick: EventLoop(state),
      key_down: m.return(Unit),
      key_up: m.return(Unit),
      mouse_down: {
        Int@ x = Div(Sub(e.mouse_down.x, state.transform.x), state.transform.s).q;
        Int@ y = Div(Sub(e.mouse_down.y, state.transform.y), state.transform.s).q;
        Maybe@<TileIndex@> ti = TileOf(layout, x, y);
        ti.?(nothing: EventLoop(state));

        Toggle@ toggle = e.mouse_down.button.?(
          left: Cycle,
          right: ToggleDismissed);
        Game@ ngame = Toggle(toggle, ti.just.group, ti.just.tile, state.game);
        Drawing@ board = /SatGame/Game/Draw%.Draw(layout, ngame);
        State@ nstate = state.@(game: ngame, board: board);
        Unit@ _ <- m.do(Draw(nstate));
        EventLoop(nstate);
      },
      mouse_up: EventLoop(state),
      resize: {
        State@ nstate = state.@(
          width: e.resize.width,
          height: e.resize.height,
          transform: Fit(e.resize.width, e.resize.height)
        );
        Unit@ _ <- m.do(Draw(nstate));
        EventLoop(nstate);
      },
      mouse_motion: {
        State@ ns = state.@(
          mouse_x: e.mouse_motion.x,
          mouse_y: e.mouse_motion.y
        );
        Unit@ _ <- m.do(Draw(ns));
        EventLoop(ns);
      });
  };

  Unit@ _ <- m.do(O.PutLine(stdio.out, Strs[
      Str|'Generating puzzle with params: ',
      /SatGame/Puzzle/Show%.Params(params),
      Str|' (seed ', /Core/Int/Show%.Show(args.seed), Str|')'
  ]));

  Puzzle@ puzzle = PureLFSR.Run(Generate(params), args.seed);
  Unit@ _ <- m.do(O.PutLine(stdio.out, /SatGame/Puzzle/Show%.Puzzle(puzzle)));

  Game@ game = /SatGame/Game%.Game(puzzle);

  State@ state = @(
    game,
    mouse_x: Int|0,
    mouse_y: Int|0,
    board: /SatGame/Game/Draw%.Draw(layout, game),
    width,
    height,
    transform: Fit(width, height)
  );

  Unit@ _ <- m.do(Draw(state));
  Unit@ _ <- m.do(EventLoop(state));
  m.return(True);
};

Main;
