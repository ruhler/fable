
@ Decimal@ = /Core/Digits%.Decimal@;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% StrE = /Core/String%.StrE;
% Strs = /Core/String%.Strs;
% Lines = /Core/String%.Lines;

@ Test@ = /Core/Test%.Test@;
@ TestResult@ = /Core/Test%.TestResult@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;

@ Loc@ = /Fbld/Loc%.Loc@;

@ Markup@ = /Fbld/Markup%.Markup@;
@ Element@ = /Fbld/Markup%.Element@;
% Command = /Fbld/Markup%.Command;
% Plain = /Fbld/Markup%.Plain;
% M = /Fbld/Markup%.Markup;

<@>@ Result@ = /Fbld/Result%.Result@;
<@>% Ok = /Fbld/Result%.Ok;

% Parse = /Fbld/Parse%.Parse;

@ Text@ = /Fbld/Text%.Text@;

(List@<Decimal@>)(List@<Decimal@>) { Loc@; }
L = (List@<Decimal@> line)(List@<Decimal@> col) {
  Loc@(Str|'foo.fbld', /Core/Int/Lit%.Int(line), /Core/Int/Lit%.Int(col));
};

(List@<Decimal@>)(List@<Decimal@>)(String@)(List@<Markup@>) { Element@; }
C = (List@<Decimal@> line)(List@<Decimal@> col)(String@ name)(List@<Markup@> args) {
  Command(L(line)(col), name)(args);
};

(List@<Decimal@>)(List@<Decimal@>)(String@) { Text@; }
T = (List@<Decimal@> line)(List@<Decimal@> col)(String@ text) {
  Text@(L(line)(col), text);
};

(List@<Decimal@>)(List@<Decimal@>)(String@) { Element@; }
P = (List@<Decimal@> line)(List@<Decimal@> col)(String@ text) {
  Plain(L(line)(col), StrE(text));
};

(List@<Decimal@>)(List@<Decimal@>)(String@) { Element@; }
Pr = (List@<Decimal@> line)(List@<Decimal@> col)(String@ text) {
  Plain(L(line)(col), Str(text));
};

(Result@<Markup@>, Result@<Markup@>) { TestResult@; }
AssertResultEquals = (Result@<Markup@> expected, Result@<Markup@> actual) {
  AssertEquals(
    /Fbld/Result/Eq%.Eq(/Fbld/Markup/Eq%.Markup),
    /Fbld/Result/Show%.Show(/Fbld/Markup/Show%.Markup),
    expected, actual);
};

Test@ Tests = TestSuite(Str|Parse, List[
  Test(Str|Unescape, (Unit@ _) {
    String@ text = Str|'a \\ a\[\]b\ncd\@';
    String@ want = StrE|'a \\ a[]b\ncd@';

    Result@<Markup@> got = Parse[T|1|1(text)];
    Result@<Markup@> wnt = Ok(M[C|1|1|'.block'[M[Pr|1|1(want)]]]);
    AssertResultEquals(wnt, got);
  }),

  Test(Str|BasicInline, (Unit@ _) {
    String@ text = Str|'Inline @emph[text] with @SINGLE and @multi[abc][def] arg commands';

    Result@<Markup@> got = Parse[T|1|1(text)];
    Result@<Markup@> wnt = Ok(M[C|1|1|'.block'[M[
      P|1|1|'Inline ',
      C|1|9|'emph'[M[P|1|14|'text']],
      P|1|19|' with ',
      C|1|26|'SINGLE'[],
      P|1|32|' and ',
      C|1|38|'multi'[M[P|1|44|'abc'], M[P|1|49|'def']],
      P|1|53|' arg commands']]]);
    AssertResultEquals(wnt, got);
  }),

  Test(Str|NestedInline, (Unit@ _) {
    String@ text = Str|'Ab @c[de @f[gh] ij] kl';

    Result@<Markup@> got = Parse[T|1|1(text)];
    Result@<Markup@> wnt = Ok(M[C|1|1|'.block'[M[
      P|1|1|'Ab ',
      C|1|5|'c'[M[
        P|1|7|'de ',
        C|1|11|'f'[M[P|1|13|'gh']],
        P|1|16|' ij']],
      P|1|20|' kl']]]);
    AssertResultEquals(wnt, got);
  }),

  Test(Str|BasicBlock, (Unit@ _) {
    String@ text = Lines[
      Str|'',
      Str|'@title A title',
      Str|'',
      Str|'Some intro text.',
      Str|'',
      Str|'@section[First Section]',
      Str|' With some text',
      Str|' spanning over lines.',
      Str|'',
      Str|' multiple lines actually.',
      Str|'',
      Str|'And some final text.'
    ];

    Result@<Markup@> got = Parse[T|1|1(text)];
    Result@<Markup@> wnt = Ok(M[
      C|2|2|'title'[M[P|2|8|'A title']],
      C|4|1|'.block'[M[P|4|1|'Some intro text.\n']],
      C|6|2|'section'[M[P|6|10|'First Section'], M[
        C|7|2|'.block'[M[P|7|2|'With some text\nspanning over lines.\n']],
        C|10|2|'.block'[M[P|10|2|'multiple lines actually.\n']]]],
      C|12|1|'.block'[M[P|12|1|'And some final text.\n']]]);
    AssertResultEquals(wnt, got);
  }),

  Test(Str|NestedBlockLoc, (Unit@ _) {
    String@ text = Lines[
      Str|'@foo',
      Str|' @bar',
      Str|'  @sludge'
    ];

    Result@<Markup@> got = Parse[T|1|1(text)];
    Result@<Markup@> wnt = Ok(M[
      C|1|2|'foo'[M[
        C|2|3|'bar'[M[
          C|3|4|'sludge'[]]]]]]);
    AssertResultEquals(wnt, got);
  }),

  Test(Str|IndentedSequentialPlainBlocks, (Unit@ _) {
    String@ text = Lines[
      Str|'@doc',
      Str|' @section',
      Str|'  With some text',
      Str|'  spanning over lines.',
      Str|' ',
      Str|'  multiple lines actually.'
    ];

    Result@<Markup@> got = Parse[T|1|1(text)];
    Result@<Markup@> wnt = Ok(M[
      C|1|2|'doc'[M[
        C|2|3|'section'[M[
          C|3|3|'.block'[M[P|3|3|'With some text\nspanning over lines.\n']],
          C|6|3|'.block'[M[P|6|3|'multiple lines actually.\n']]]]]]]);
    AssertResultEquals(wnt, got);
  }),

  Test(Str|Continuation, (Unit@ _) {
    String@ text = Lines[
      Str|'@list[first][second]',
      Str|' third',
      Str|'@[fourth] fifth',
      Str|'@ sixth',
      Str|' seventh',
      Str|'@ eigth',
      Str|'@sludge'
    ];

    Result@<Markup@> got = Parse[T|1|1(text)];
    Result@<Markup@> wnt = Ok(M[
      C|1|2|'list'[
        M[P|1|7|'first'],
        M[P|1|14|'second'],
        M[C|2|2|'.block'[M[P|2|2|'third\n']]],
        M[P|3|3|'fourth'],
        M[P|3|11|'fifth'],
        M[P|4|3|'sixth'],
        M[C|5|2|'.block'[M[P|5|2|'seventh\n']]],
        M[P|6|3|'eigth']],
      C|7|2|'sludge'[]]);
    AssertResultEquals(wnt, got);
  }),

  Test(Str|Final, (Unit@ _) {
    String@ text = Lines[
      Str|'@foo',
      Str|' here is some stuff.',
      Str|'@@',
      Str|'@bar here is the end.',
      Str|' Of all the rest.'
    ];

    Result@<Markup@> got = Parse[T|1|1(text)];
    Result@<Markup@> wnt = Ok(M[
      C|1|2|'foo'[
        M[C|2|2|'.block'[M[P|2|2|'here is some stuff.\n']]],
        M[C|4|2|'bar'[
          M[P|4|6|'here is the end.'],
          M[C|5|2|'.block'[M[P|5|2|'Of all the rest.\n']]]]]]]);
    AssertResultEquals(wnt, got);
  }),

  Test(Str|SameLineFinal, (Unit@ _) {
    String@ text = Lines[
      Str|'@foo here is some stuff. @@',
      Str|'@bar here is the end.',
      Str|' Of all the rest.'
    ];

    Result@<Markup@> got = Parse[T|1|1(text)];
    Result@<Markup@> wnt = Ok(M[
      C|1|2|'foo'[
        M[P|1|6|'here is some stuff.'],
        M[C|2|2|'bar'[
          M[P|2|6|'here is the end.'],
          M[C|3|2|'.block'[M[P|3|2|'Of all the rest.\n']]]]]]]);
    AssertResultEquals(wnt, got);
  }),

  Test(Str|NextLineLiteral, (Unit@ _) {
    String@ text = Lines[
      Str|'@foo @',
      Str|' foo@bar \ blah @@ @\@\\@.',
      Str|'@ done'
    ];

    Result@<Markup@> got = Parse[T|1|1(text)];
    Result@<Markup@> wnt = Ok(M[
      C|1|2|'foo'[
        M[Pr|2|2(Strs[Str|'foo@bar \ blah @@ @\@\\@.', StrE|'\n'])],
        M[P|3|3|'done']]]);
    AssertResultEquals(wnt, got);
  }),

  Test(Str|InlineLiteral, (Unit@ _) {
    String@ text = Lines[
      Str|'@foo{foo@bar \ blah @@ @\@\\@.}',
      Str|'@ done'
    ];

    Result@<Markup@> got = Parse[T|1|1(text)];
    Result@<Markup@> wnt = Ok(M[
      C|1|2|'foo'[
        M[Pr|1|6|'foo@bar \ blah @@ @\@\\@.'],
        M[P|2|3|'done']]]);
    AssertResultEquals(wnt, got);
  })
]);

@(Tests);
