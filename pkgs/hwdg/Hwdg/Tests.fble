
% 0 = /Core/Int%.0;
% 1 = /Core/Int%.1;
% 2 = /Core/Int%.2;
% 3 = /Core/Int%.3;

<@>% List = /Core/List%.List;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
<@>% AssertEquals = /Core/Test%.AssertEquals;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;

@ Coord@ = /Hwdg/Coord%.Coord@;

@ Data@ = /Hwdg/Data%.Data@;
% Data = /Hwdg/Data%;

@ Design@ = /Hwdg/Design%.Design@;
% Designs = /Hwdg/Design%.Designs;
% PlacedRule = /Hwdg/Design%.PlacedRule;
% Rule = /Hwdg/Design%.Rule;
% Run = /Hwdg/Design%.Run;

@ Memory@ = /Hwdg/Memory%.Memory@;
@ Cell@ = /Hwdg/Memory%.Cell@;
% Empty = /Hwdg/Memory%.Empty;
% Memory = /Hwdg/Memory%.Memory;
% Clear = /Hwdg/Memory%.Clear;
% Get = /Hwdg/Memory%.Get;
% Set = /Hwdg/Memory%.Set;

# Import to test compilation.
% _ = /Hwdg/App%;

Test@ Tests = TestSuite(Str|Hwdg, List<Test@>[
  Test(Str|'empty no data', (Unit@ _) {
    Memory@ cells = Empty;
    Maybe@<Data@> got = Get(cells, Coord@(3, 2));
    Maybe@<Data@> wnt = Nothing<Data@>;

    AssertEquals<Maybe@<Data@>>(
      /Core/Maybe/Eq%.Eq<Data@>(/Hwdg/Data%.Eq),
      /Core/Maybe/Show%.Show<Data@>(/Hwdg/Data%.Show),
      wnt, got);
  }),

  Test(Str|'set this data to 0', (Unit@ _) {
    Memory@ cells = Set(Empty, Coord@(3, 2), Data.0);
    Maybe@<Data@> got = Get(cells, Coord@(3, 2));
    Maybe@<Data@> wnt = Just<Data@>(Data.0);

    AssertEquals<Maybe@<Data@>>(
      /Core/Maybe/Eq%.Eq<Data@>(/Hwdg/Data%.Eq),
      /Core/Maybe/Show%.Show<Data@>(/Hwdg/Data%.Show),
      wnt, got);
  }),

  Test(Str|'set this data to 1', (Unit@ _) {
    Memory@ cells = Set(Empty, Coord@(3, 2), Data.1);
    Maybe@<Data@> got = Get(cells, Coord@(3, 2));
    Maybe@<Data@> wnt = Just<Data@>(Data.1);

    AssertEquals<Maybe@<Data@>>(
      /Core/Maybe/Eq%.Eq<Data@>(/Hwdg/Data%.Eq),
      /Core/Maybe/Show%.Show<Data@>(/Hwdg/Data%.Show),
      wnt, got);
  }),

  Test(Str|'set other data', (Unit@ _) {
    Memory@ cells = Set(Empty, Coord@(2, 3), Data.1);
    Maybe@<Data@> got = Get(cells, Coord@(3, 2));
    Maybe@<Data@> wnt = Nothing<Data@>;

    AssertEquals<Maybe@<Data@>>(
      /Core/Maybe/Eq%.Eq<Data@>(/Hwdg/Data%.Eq),
      /Core/Maybe/Show%.Show<Data@>(/Hwdg/Data%.Show),
      wnt, got);
  }),

  Test(Str|'clear data', (Unit@ _) {
    Memory@ cells = Clear(Set(Empty, Coord@(3, 2), Data.1), Coord@(3, 2));
    Maybe@<Data@> got = Get(cells, Coord@(3, 2));
    Maybe@<Data@> wnt = Nothing<Data@>;

    AssertEquals<Maybe@<Data@>>(
      /Core/Maybe/Eq%.Eq<Data@>(/Hwdg/Data%.Eq),
      /Core/Maybe/Show%.Show<Data@>(/Hwdg/Data%.Show),
      wnt, got);
  }),

  Test(Str|'clear other data', (Unit@ _) {
    Memory@ cells = Clear(Set(Empty, Coord@(3, 2), Data.1), Coord@(2, 3));
    Maybe@<Data@> got = Get(cells, Coord@(3, 2));
    Maybe@<Data@> wnt = Just<Data@>(Data.1);

    AssertEquals<Maybe@<Data@>>(
      /Core/Maybe/Eq%.Eq<Data@>(/Hwdg/Data%.Eq),
      /Core/Maybe/Show%.Show<Data@>(/Hwdg/Data%.Show),
      wnt, got);
  }),

  Test(Str|'empty gate', (Unit@ _) {
    # Make sure we don't get stuck in an infinite loop if there is an empty
    # gate.
    Design@ design = Designs[
      PlacedRule(0, 0, Rule|'.... => ....')
    ];
    Memory@ cells = Memory[Cell@(0, 0, Data.1)];

    # Nothing changes
    Memory@ wnt = cells;
    Memory@ got = Run(design, cells);
    AssertEquals<Memory@>(/Hwdg/Memory%.Eq, /Hwdg/Memory%.Show, wnt, got);
  }),

  Test(Str|'identity ul to lr', (Unit@ _) {
    Design@ design = Designs[
      PlacedRule(0, 0, Rule|'0... => ...0'),
      PlacedRule(0, 0, Rule|'1... => ...1')
    ];
    Memory@ cells = Memory[Cell@(0, 0, Data.1)];

    Memory@ wnt = Memory[Cell@(1, 1, Data.1)];
    Memory@ got = Run(design, cells);
    AssertEquals<Memory@>(/Hwdg/Memory%.Eq, /Hwdg/Memory%.Show, wnt, got);
  }),

  Test(Str|'identity ul to lr input blocked', (Unit@ _) {
    Design@ design = Designs[
      PlacedRule(0, 0, Rule|'0... => ...0'),
      PlacedRule(0, 0, Rule|'1... => ...1')
    ];
    Memory@ cells = Memory[Cell@(1, 0, Data.1)];

    # The gate doesn't have it's input available, so we don't expect it to
    # trigger.
    Memory@ wnt = cells;
    Memory@ got = Run(design, cells);
    AssertEquals<Memory@>(/Hwdg/Memory%.Eq, /Hwdg/Memory%.Show, wnt, got);
  }),

  Test(Str|'identity ul to lr output blocked', (Unit@ _) {
    Design@ design = Designs[
      PlacedRule(0, 0, Rule|'0... => ...0'),
      PlacedRule(0, 0, Rule|'1... => ...1')
    ];
    Memory@ cells = Memory[
      Cell@(0, 0, Data.1),
      Cell@(1, 1, Data.0)
    ];

    # The gate's output port is blockd, so we don't expect it to trigger.
    Memory@ wnt = cells;
    Memory@ got = Run(design, cells);
    AssertEquals<Memory@>(/Hwdg/Memory%.Eq, /Hwdg/Memory%.Show, wnt, got);
  }),

  Test(Str|'identity chain', (Unit@ _) {
    # Test a chain of identity gates.
    # -> -> -| .
    # .  .   v .
    # <- <- -| .
    # .  .  .  .
    Design@ design = Designs[
      PlacedRule(0, 0, Rule|'0... => .0..'),
      PlacedRule(0, 0, Rule|'1... => .1..'),
      PlacedRule(1, 0, Rule|'0... => .0..'),
      PlacedRule(1, 0, Rule|'1... => .1..'),
      PlacedRule(2, 0, Rule|'0... => ..0.'),
      PlacedRule(2, 0, Rule|'1... => ..1.'),
      PlacedRule(2, 1, Rule|'0... => ..0.'),
      PlacedRule(2, 1, Rule|'1... => ..1.'),
      PlacedRule(1, 2, Rule|'.0.. => 0...'),
      PlacedRule(1, 2, Rule|'.1.. => 1...'),
      PlacedRule(0, 2, Rule|'.0.. => 0...'),
      PlacedRule(0, 2, Rule|'.1.. => 1...')
    ];

    # Send '0' and '1' down the wire together.
    Memory@ cells = Memory[
      Cell@(0, 0, Data.1),
      Cell@(1, 0, Data.0)
    ];

    Memory@ wnt = Memory[
      Cell@(0, 2, Data.0),
      Cell@(1, 2, Data.1)
    ];
    Memory@ got = Run(design, cells);
    AssertEquals<Memory@>(/Hwdg/Memory%.Eq, /Hwdg/Memory%.Show, wnt, got);
  })
]);

/Core/Stdio/IO%.Run(/Core/Test/Stdio%.Run(Tests));
