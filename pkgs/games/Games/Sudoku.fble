
@ Bool@ = /Core/Bool%.Bool@;
% False = /Core/Bool%.False;
% True = /Core/Bool%.True;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing; 
<@>% DoWhile = /Core/Maybe%.DoWhile; 

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

# The 9 symbols used in sudoku: 1 through 9.
@ Symbol@ = +(
  Unit@ 1, Unit@ 2, Unit@ 3,
  Unit@ 4, Unit@ 5, Unit@ 6,
  Unit@ 7, Unit@ 8, Unit@ 9);

Symbol@ 1 = Symbol@(1: Unit);
Symbol@ 2 = Symbol@(2: Unit);
Symbol@ 3 = Symbol@(3: Unit);
Symbol@ 4 = Symbol@(4: Unit);
Symbol@ 5 = Symbol@(5: Unit);
Symbol@ 6 = Symbol@(6: Unit);
Symbol@ 7 = Symbol@(7: Unit);
Symbol@ 8 = Symbol@(8: Unit);
Symbol@ 9 = Symbol@(9: Unit);

# Iterate over the symbols in order.
(Symbol@) { Maybe@<Symbol@>; } IterateSymbol = (Symbol@ s) {
  (Symbol@){ Maybe@<Symbol@>; } J = Just<Symbol@>;
  s.?(
    1: J(2), 2: J(3), 3: J(4),
    4: J(5), 5: J(6), 6: J(7),
    7: J(8), 8: J(9), 9: Nothing<Symbol@>);
};

# An index specifying a row or column of a box group.
@ BoxIndex@ = +(Unit@ 1, Unit@ 2, Unit@ 3);

BoxIndex@ B1 = BoxIndex@(1: Unit);
BoxIndex@ B2 = BoxIndex@(2: Unit);
BoxIndex@ B3 = BoxIndex@(3: Unit);

# s / 3
(Symbol@) { BoxIndex@; } Div3 = (Symbol@ s) {
  s.?(
    1: B1, 2: B1, 3: B1,
    4: B2, 5: B2, 6: B2,
    7: B3, 8: B3, 9: B3);
};

# s % 3
(Symbol@) { BoxIndex@; } Mod3 = (Symbol@ s) {
  s.?(
    1: B1, 2: B2, 3: B3,
    4: B1, 5: B2, 6: B3,
    7: B1, 8: B2, 9: B3);
};

# 3a + b
(BoxIndex@, BoxIndex@) { Symbol@; } Lit3 = (BoxIndex@ a, BoxIndex@ b) {
  a.?(
    1: b.?(1: 1, 2: 2, 3: 3),
    2: b.?(1: 4, 2: 5, 3: 6),
    3: b.?(1: 7, 2: 8, 3: 9));
};

# An array of elements of type T@, indexed by symbol.
<@>@ Array@ = <@ T@>(Symbol@) { T@; };

# Set the value of a single element of an array.
#   a[s] = x
(Symbol@)<@ T@>(T@, Array@<T@>) { Array@<T@>; }
Set = (Symbol@ s)<@ T@>(T@ x, Array@<T@> a) {
  T@ a1 = s.?(1: x, : a(1));
  T@ a2 = s.?(2: x, : a(2));
  T@ a3 = s.?(3: x, : a(3));
  T@ a4 = s.?(4: x, : a(4));
  T@ a5 = s.?(5: x, : a(5));
  T@ a6 = s.?(6: x, : a(6));
  T@ a7 = s.?(7: x, : a(7));
  T@ a8 = s.?(8: x, : a(8));
  T@ a9 = s.?(9: x, : a(9));
  (Symbol@ k) {
    k.?(
      1: a1, 2: a2, 3: a3,
      4: a4, 5: a5, 6: a6,
      7: a7, 8: a8, 9: a9);
  };
};

(Symbol@, Symbol@)<@ T@>(T@, Array@<Array@<T@>>) { Array@<Array@<T@>>; }
Set2D = (Symbol@ a, Symbol@ b)<@ T@>(T@ x, Array@<Array@<T@>> array) {
  Set(a, Set(b, x, array(a)), array);
};

# A cell is identified by its row and column.
@ CellId@ = *(Symbol@ row, Symbol@ col);

# Iterate over cell ids, going left to right and top to bottom.
(CellId@) { Maybe@<CellId@>; } IterateCellId = (CellId@ cell) {
  Maybe@<Symbol@> mncol = IterateSymbol(cell.col);
  mncol.?(just: Just(CellId@(cell.row, mncol.just)));

  Maybe@<Symbol@> mnrow = IterateSymbol(cell.row);
  mnrow.?(nothing: Nothing<CellId@>);

  Just(CellId@(mnrow.just, 1));
};

# Return the id of the box group that this cell belongs to.
(CellId@) { Symbol@; } BoxGroupOf = (CellId@ cell) {
  BoxIndex@ row = Div3(cell.row);
  BoxIndex@ col = Div3(cell.col);
  Lit3(row, col);
};

# Return the position of this cell within its box group.
(CellId@) { Symbol@; } BoxPosOf = (CellId@ cell) {
  BoxIndex@ row = Mod3(cell.row);
  BoxIndex@ col = Mod3(cell.col);
  Lit3(row, col);
};

# Return the id of the cell in the given position of the given box.
(Symbol@, Symbol@) { CellId@; } CellOfPos = (Symbol@ box, Symbol@ pos) {
  Symbol@ row = Lit3(Div3(box), Div3(pos));
  Symbol@ col = Lit3(Mod3(box), Mod3(pos));
  CellId@(row, col);
};

# A set of symbols.
@ Set@ = Array@<Bool@>;

# The set of all possible symbols.
Set@ FullSet = (Symbol@ _s) { True; };

# Return the singleton value of a set, if it is a singleton set. Return
# Nothing if it is not a singleton set.
(Set@) { Maybe@<Symbol@>; } Singleton = (Set@ set) {
  @ State@ = +(Unit@ empty, Symbol@ single, Unit@ multi);

  State@ state = DoWhile(1, IterateSymbol, State@(empty: Unit),
    (Symbol@ symbol, State@ state) {
      set(symbol).?(false: state);
      state.?(
        empty: State@(single: symbol),
        single: State@(multi: Unit),
        multi: state);
    });

  state.?(
    empty: Nothing<Symbol@>,
    single: Just(state.single),
    multi: Nothing<Symbol@>);
};

# For each Cell, we keep track of the set of possible symbols the cell may
# take on.
@ Cell@ = Set@;

# 2D array of cells. The first index is the row, the second index is the
# column.
@ Board@ = Array@<Array@<Cell@>>;
Board@ EmptyBoard = (Symbol@ _r)(Symbol@ _c) { FullSet; };

# A constraint specifying that a cell cannot be the given symbol.
@ X@ = *(CellId@ cell, Symbol@ symbol);

# A set of constraints.
@ XS@ = +(Unit@ empty, X@ single, *(XS@ a, XS@ b) pair);

XS@ EmptyXS = XS@(empty: Unit);

(XS@, XS@) { XS@; } AppendXS = (XS@ a, XS@ b) {
  a.?(empty: b, : b.?(empty: a, : XS@(pair: @(a, b))));
};

(X@, XS@){ XS@; } AddX = (X@ x, XS@ xs) {
  AppendXS(XS@(single: x), xs);
};

# CatXS --
(List@<XS@>) { XS@; } CatXS = (List@<XS@> xs) {
  xs.?(nil: EmptyXS);
  AppendXS(xs.cons.head, CatXS(xs.cons.tail));
};

# Generate the set of constraints that result from setting the value of the
# given cell to s.
(CellId@, Symbol@) { XS@; } Assign = (CellId@ cell, Symbol@ s) {
  # Cell: This cell cannot be any symbol other than s.
  Set@ isS = Set(s, True, (Symbol@ _) { False; });
  XS@ xCell = DoWhile(1, IterateSymbol, EmptyXS,
    (Symbol@ other, XS@ xs) {
      isS(other).?(true: xs);
      AddX(X@(cell, other), xs);
    });

  # Group: No other cell in this group can be the symbol s.
  # This is a helper function we'll reuse for rows, columns, and boxes.
  (Set@, (Symbol@) { CellId@; }) { XS@; }
  Group = (Set@ isThis, (Symbol@) { CellId@; } cellOf) {
    DoWhile(1, IterateSymbol, EmptyXS,
      (Symbol@ i, XS@ xs) {
        isThis(i).?(true: xs);
        AddX(X@(cellOf(i), s), xs);
      });
  };

  # Row: No other cell in this row can be the symbol s.
  Set@ isThisCol = Set(cell.col, True, (Symbol@ _) { False; });
  (Symbol@) { CellId@; } rowCellOf = (Symbol@ col) { CellId@(cell.row, col); };
  XS@ xRow = Group(isThisCol, rowCellOf);

  # Column: No other cell in this column can be the symbol s.
  Set@ isThisRow = Set(cell.row, True, (Symbol@ _) { False; });
  (Symbol@) { CellId@; } colCellOf = (Symbol@ row) { CellId@(row, cell.col); };
  XS@ xCol = Group(isThisRow, colCellOf);

  # Box: No other cell in this box can be the symbol s.
  Symbol@ box = BoxGroupOf(cell);
  Set@ isThisPos = Set(BoxPosOf(cell), True, (Symbol@ _) { False; });
  (Symbol@) { CellId@; } boxCellOf = (Symbol@ pos) { CellOfPos(box, pos); };
  XS@ xBox = Group(isThisPos, boxCellOf);

  CatXS[xCell, xRow, xCol, xBox];
};

# A board and additional constraints.
@ BoardX@ = *(Board@ board, XS@ xs);

# Apply a constraint to the given board.
# Produces an updated board and new constraints learned in the process.
# Does nothing if the constraint was already known.
(Board@, X@) { BoardX@; } ApplyX = (Board@ board, X@ x) {
  Cell@ cell = board(x.cell.row)(x.cell.col);
  cell(x.symbol).?(false: BoardX@(board, EmptyXS));

  Cell@ ncell = Set(x.symbol, False, cell);
  Board@ nboard = Set2D(x.cell.row, x.cell.col, ncell, board);

  # If there is now only one possible symbol value for this cell, we
  # know this cell must take on that single possible symbol value.
  Maybe@<Symbol@> single = Singleton(ncell);
  XS@ xCell = single.?(
    just: Assign(x.cell, single.just),
    nothing: EmptyXS);

  # If board[row].symbol has only one cell, generate the assignment.
  Set@ cells = (Symbol@ col) { nboard(x.cell.row)(col)(x.symbol); };
  Maybe@<Symbol@> single = Singleton(cells);
  XS@ xRow = single.?(
    just: Assign(CellId@(x.cell.row, single.just), x.symbol),
    nothing: EmptyXS);

  # If board[col].symbol has only one cell, generate the assignment.
  Set@ cells = (Symbol@ row) { nboard(row)(x.cell.col)(x.symbol); };
  Maybe@<Symbol@> single = Singleton(cells);
  XS@ xCol = single.?(
    just: Assign(CellId@(single.just, x.cell.col), x.symbol),
    nothing: EmptyXS);

  # If board[box].symbol has only one cell, generate the assignment.
  Symbol@ box = BoxGroupOf(x.cell);
  Set@ cells = (Symbol@ pos) {
    CellId@ cell = CellOfPos(box, pos);
    nboard(cell.row)(cell.col)(x.symbol);
  };
  Maybe@<Symbol@> single = Singleton(cells);
  XS@ xBox = single.?(
    just: Assign(CellOfPos(box, single.just), x.symbol),
    nothing: EmptyXS);

  BoardX@(nboard, CatXS[xCell, xRow, xCol, xBox]);
};

# Apply all constraints to the board, and all resulting constraints, until
# there is nothing left to do.
(Board@, XS@) { Board@; } ApplyXS = (Board@ board, XS@ xs) {
  xs.?(
    empty: board,
    single: {
      BoardX@ bx = ApplyX(board, xs.single);
      ApplyXS(bx.board, bx.xs);
    },
    pair: ApplyXS(ApplyXS(board, xs.pair.a), xs.pair.b));
};

# SolveFrom --
#   Solve a sudoku puzzle assuming the symbol for every cell up to the given
#   cell has been determined.
#
# Inputs:
#   board - the board to solve.
#   mfrom - The symbols for all cells in the board before this cell are assumed
#          to have been determined. Nothing means the symbols for all cells
#          have been determined.
(Board@, Maybe@<CellId@>) { Maybe@<Board@>; }
SolveFrom = (Board@ board, Maybe@<CellId@> mfrom) {
  mfrom.?(nothing: Just(board));

  CellId@ from = mfrom.just;
  Cell@ cell = board(from.row)(from.col);
  Maybe@<CellId@> next = IterateCellId(from);

  Maybe@<Symbol@> single = Singleton(cell);
  single.?(
    just: {
      # We already know the symbol for this cell. As an optimization,
      # move on to the next cell right away.
      SolveFrom(board, next);
    },
    nothing: {
      # We don't know the symbol for this cell yet. Try all possible
      # options until we've found a solution to the puzzle.
      DoWhile(1, IterateSymbol, Nothing<Board@>,
        (Symbol@ s, Maybe@<Board@> solved) {
          # TODO: Can we break out more efficiently in the case when it's
          # solved, rather than have to iterate through and ignore all the
          # rest of the possible symbols?
          solved.?(just: solved);
          cell(s).?(
            true: SolveFrom(ApplyXS(board, Assign(from, s)), next),
            false: Nothing<Board@>);
        });
    });
};

@ Input@ = (Symbol@)(Symbol@) { Maybe@<Symbol@>; };

# Generate constraints based on the given input board.
(Input@) { XS@; } InputXS = (Input@ board) {
  DoWhile(CellId@(1, 1), IterateCellId, EmptyXS,
    (CellId@ cell, XS@ xs) {
      Maybe@<Symbol@> ms = board(cell.row)(cell.col);
      ms.?(nothing: xs);
      AppendXS(Assign(cell, ms.just), xs);
    });
};

@ Solved@ = (Symbol@)(Symbol@) { Symbol@; };

# Solve a board.
(Input@) { Maybe@<Solved@>; } Solve = (Input@ in) {
  Maybe@<Board@> solved = SolveFrom(
    ApplyXS(EmptyBoard, InputXS(in)),
    Just(CellId@(1, 1)));
  solved.?(
    just: Just<Solved@>(
      (Symbol@ row)(Symbol@ col) {
        Singleton(solved.just(row)(col)).just;
      }),
    nothing: Nothing<Solved@>);
};

@(
  Symbol@, 1, 2, 3, 4, 5, 6, 7, 8, 9, IterateSymbol,
  Input@, Solved@, Solve);
