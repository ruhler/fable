
@ IntP@ = /Core/Int/IntP%.IntP@;

@ Int@ = /Core/Int%.Int@;
% Sub = /Core/Int%.Sub;
% 0 = /Core/Int%.0;
% 1 = /Core/Int%.1;

# QR@ --
#   Quotient and remainder.
@ QR@ = *(Int@ q, Int@ r);

(IntP@) { Int@; } IntP = (IntP@ x) {
  Int@(p: x);
};

(Int@) { Int@; } 2P0 = (Int@ x) {
  x.?(0: 0);
  Int@(p: IntP@(2p0: x.p));
};

(Int@) { Int@; } 2P1 = (Int@ x) {
  x.?(0: 1);
  Int@(p: IntP@(2p1: x.p));
};

# a = b*q + r, r < b, where q = floor(a/b)
(IntP@, IntP@) { QR@; } Div = (IntP@ a, IntP@ b) {
  b.?(1: @(q: IntP(a), r: 0),
      2p0: a.?(1: @(q: 0, r: IntP(a)),
               2p0: {
                 # (2a) = (2b)*q + (2r)
                 QR@ qr = Div(a.2p0, b.2p0);
                 @(q: qr.q, r: 2P0(qr.r));
               },
               2p1: {
                 # (2a+1) = (2b)*q + (2r+1)
                 QR@ qr = Div(a.2p1, b.2p0);
                 @(q: qr.q, r: 2P1(qr.r));
               }),
      2p1: a.?(1: @(q: 0, r: IntP(a)),
               2p0: {
                 QR@ qr = Div(a.2p0, b);
                 Int@ 2r = 2P0(qr.r);
                 Int@ 2r_minus_b = Sub(2r, Int@(p: b));
                 2r_minus_b.?(
                    n: @(q: 2P0(qr.q), r: 2r),
                    0: @(q: 2P1(qr.q), r: 0),
                    p: @(q: 2P1(qr.q), r: IntP(2r_minus_b.p)));
               },
               2p1: {
                 QR@ qr = Div(a.2p1, b);
                 Int@ 2rp1 = 2P1(qr.r);
                 Int@ 2rp1_minus_b = Sub(2rp1, Int@(p: b));
                 2rp1_minus_b.?(
                    n: @(q: 2P0(qr.q), r: 2rp1),
                    0: @(q: 2P1(qr.q), r: 0),
                    p: @(q: 2P1(qr.q), r: IntP(2rp1_minus_b.p)));
               }));
};

@(QR@, Div);
