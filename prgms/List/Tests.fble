
@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Char@ = /Char%.Char@;

<@>@ Eq@ = /Eq%.Eq@;

@ Int@ = /Int%.Int@;
% Int = /Int/Lit%.Int;

<@>@ List@ = /List%.List@;
<@>% List = /List%.List;
<@>% Cons = /List%.Cons;
<@>% Nil = /List%.Nil;
<@>% Append = /List%.Append;
<@>% Init = /List%.Init;
<@>% Concat = /List%.Concat;
<@,@>% Map = /List%.Map;
<@,@>% ForEach = /List%.ForEach;
<@>% Length = /List/Length%.Length;
<@>% Sort = /List/Sort%.Sort;

<@>@ Show@ = /Show%.Show@;

@ String@ = /String%.String@;
% Str = /String%.Str;

@ Test@ = /Test%.Test@;
@ TestResult@ = /Test%.TestResult@;
% Test = /Test%.Test;
% TestSuite = /Test%.TestSuite;

@ Elem@ = +(Unit@ A, Unit@ B, Unit@ C, Unit@ D, Unit@ E);

% Elems = @(
  A: Elem@(A: Unit),
  B: Elem@(B: Unit),
  C: Elem@(C: Unit),
  D: Elem@(D: Unit),
  E: Elem@(E: Unit));

(List@<Elem@>) { List@<Elem@>; } EL = List<Elem@>;

(Elem@) { String@; } ElemShow = (Elem@ e) {
  e.?(A: Str|A, B: Str|B, C: Str|C, D: Str|D, E: Str|E);
};

(Elem@, Elem@) { Bool@; } ElemLe = (Elem@ a, Elem@ b) {
  a.?(A: True,
      B: b.?(A: False, : True),
      C: b.?(A: False, B: False, : True),
      D: b.?(A: False, B: False, C: False, : True),
      E: b.?(A: False, B: False, C: False, D: False, E: True));
};

(Elem@, Elem@){Bool@;} ElemEq = (Elem@ a, Elem@ b) {
  a.?(A: b.?(A: True, : False),
      B: b.?(B: True, : False),
      C: b.?(C: True, : False),
      D: b.?(D: True, : False),
      E: b.?(E: True, : False));
};

Eq@<List@<Elem@>> Eq = /List/Eq%.Eq<Elem@>(ElemEq);
Show@<List@<Elem@>> Show = /List/Show%.Show<Elem@>(ElemShow);

(List@<Elem@>, List@<Elem@>) { TestResult@; }
AssertEquals = (List@<Elem@> a, List@<Elem@> b) {
  /Test%.AssertEquals<List@<Elem@>>(Eq, Show, a, b);
};

Test@ Tests = TestSuite(Str|List, List<Test@>[
  Test(Str|'Eq_Same', !({
    List@<Elem@> a = EL|ABCDE;
    List@<Elem@> b = EL|ABCDE;

    Eq(a, b).?(
      true: TestResult@(pass: Unit),
      false: TestResult@(fail: Concat<Char@>(List<String@>[
        Show(a), Str|' != ', Show(b)
      ])));
  })),

  Test(Str|'Eq_DiffElem', !({
    List@<Elem@> a = EL|ABCDE;
    List@<Elem@> b = EL|ABDDE;

    Eq(a, b).?(
      true: TestResult@(fail: Concat<Char@>(List<String@>[
          Show(a), Str|' == ', Show(b)
        ])),
      false: TestResult@(pass: Unit));
  })),

  Test(Str|'Eq_DiffSize', !({
    List@<Elem@> a = EL|ABCDE;
    List@<Elem@> b = EL|ABCD;

    Eq(a, b).?(
      true: TestResult@(fail: Concat<Char@>(List<String@>[
          Show(a), Str|' == ', Show(b)
        ])),
      false: TestResult@(pass: Unit));
  })),

  Test(Str|'Append', !({
    List@<Elem@> a = EL|ABC;
    List@<Elem@> b = EL|DEE;
    List@<Elem@> wnt = EL|ABCDEE;
    List@<Elem@> got = Append<Elem@>(a, b);
    AssertEquals(wnt, got);
  })),

  Test(Str|'Init', !({
    List@<Elem@> l = EL|ABCDE;
    List@<Elem@> wnt = EL|ABCD;
    List@<Elem@> got = Init<Elem@>(l);
    AssertEquals(wnt, got);
  })),

  Test(Str|'Concat', !({
    List@<List@<Elem@>> l = List<List@<Elem@>>[
      EL|ABC,
      EL|DEA,
      EL|BB
    ];

    List@<Elem@> wnt = EL|ABCDEABB;
    List@<Elem@> got = Concat<Elem@>(l);
    AssertEquals(wnt, got);
  })),

  Test(Str|'Map', !({
    List@<Elem@> l = EL|ABCDE;
    (Elem@) { Elem@; } f = (Elem@ e) {
      e.?(A: Elems.B, B: Elems.C, C: Elems.D, D: Elems.E, E: Elems.A);
    };

    List@<Elem@> wnt = EL|BCDEA;
    List@<Elem@> got = Map<Elem@, Elem@>(l, f);
    AssertEquals(wnt, got);
  })),

  Test(Str|'ForEach', !({
    List@<Elem@> l = EL|ABCDE;
    List@<Elem@> wnt = EL|EDCBA;
    List@<Elem@> got =
      ForEach<Elem@, List@<Elem@>>(l, Nil<Elem@>, (Elem@ e, List@<Elem@> b) {
        Cons<Elem@>(e, b);
      });
    AssertEquals(wnt, got);
  })),

  Test(Str|'Sort', !({
    List@<Elem@> unsorted = EL|DABEC;
    List@<Elem@> wnt = EL|ABCDE;
    List@<Elem@> got = Sort<Elem@>(ElemLe, unsorted);
    AssertEquals(wnt, got);
  })),

  Test(Str|'Length', !({
    Int@ wnt = Int|5;
    Int@ got = Length<Elem@>(EL|ABCDE);
    /Test%.AssertEquals<Int@>(/Int/Eq%.Eq, /Int/Show%.Show, wnt, got);
  }))
]);

@(Tests);
