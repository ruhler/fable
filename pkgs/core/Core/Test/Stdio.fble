
<@>@ List@ = /Core/List%.List@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;

# Run --
#   Create a Stdio@ program to run a set of tests.
#
# Inputs:
#   tests - the list of tests to run.
#
# Result:
#   A Stdio@ program to run the tests.
(Test@) { Main@; } Run = (Test@ tests)<<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio, List@<String@> args) {
  % Runners = /Core/Test/Run%(m, stdio.out);

  String@ prefix = {
    args.?(nil: Str|'');
    /Core/String/Eq%.Eq(Str|'--prefix', args.cons.head).?(false: Str|'');
    args.cons.tail.cons.head;
  };

  Runners.RunTests(prefix, tests);
};

@(Run);
