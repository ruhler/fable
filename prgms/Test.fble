{ /Bool%; @(Bool@, True, False, AndMonoid); };
{ /Char%; @(Char@, Chars); };
{ /List%; @(S@, P@, S0, S, Append, Concat, MapS, SeqS, AndS); };
{ /Process%; @(Put@); };
{ /String%; @(Str@, Str); };
{ /Unit%; @(Unit@, Unit); };

@ TestResult@ = +(Unit@ pass, Str@ fail);
@ Test@ = *(Str@ name, TestResult@! test);

# Print a string to the given output stream.
(Put@<Str@>, Str@){ Unit@!; } Print = (Put@<Str@> out, Str@ str) {
  out(str);
};

# Print a string and newline to the given output stream.
(Put@<Str@>, Str@){ Unit@!; } PrintLn = (Put@<Str@> out, Str@ str) {
  out(Append<Char@>(str, Str([Chars.nl])));
};

# Returns True if the tests all pass, false otherwise.
(Put@<Str@>, S@<Test@>){Bool@!;} RunTests = (Put@<Str@> out, S@<Test@> tests) {
  SeqS<Bool@>(AndMonoid, {
    Test@ test <- MapS<Test@, Bool@!>(tests);
    Unit@ _ := Print(out, test.name);
    TestResult@ tr := test.test;
    ?(tr; pass: {
            Unit@ _ := PrintLn(out, S0<Char@>);
            $(True);
          },
          fail: {
            Unit@ _ := PrintLn(out, Concat<Char@>(S<Str@>([
              Str(Chars|': FAILED: '),
              tr.fail])));
            $(False);
          });
  });
};

S@<Test@> Tests = {
  (Str@){Str@;} name = (Str@ nm) {
    Append<Char@>(Str(Chars|'Test.'), nm);
  };

  Test@ pass = Test@(name(Str(Chars|pass)), $(TestResult@(pass: Unit)));
  Test@ fail = Test@(name(Str(Chars|fail)), $(TestResult@(fail: Str(Chars|FAILED))));

  S<Test@>([pass]);
};

@(Str@, TestResult@, Test@, RunTests, Tests);
