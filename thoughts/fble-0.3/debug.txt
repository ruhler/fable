Debug
=====
Thoughts on how to improve the fble debugger situation.

Current problems with debug:
* You can't debug with interpreted code.
* You can't debug with C backend.
* Stepping through fble code requires inlining the FbleCall in aarch64, which
  is a pain to maintain.

Challenges with a dwarf based approach:
* I don't have a way to generate architecture agnostic dwarf info for
  interpreted code or C backend.
* I need a better way than inlining FbleCall in aarch64 to be able to single
  step through code.

Let's start with the second. Any magic in dwarf we can use to label FbleCall
as a trampoline function? Except, we don't want to call it that when debugging
C code directly, so this would have to be a gdb thing, right?

Let's review the dwarf spec anyway, just in case.

Section 3.3.9 has a way to describe a function as a trampoline. It looks like
maybe we could use this to say FbleCall is a trampoline and get gdb stepping
to work?

A few challenges there:
* Where do we put the DW_AT_trampoline entry? With each generated object file?
* Can we reference the gdb generated dwarf info for FbleCall to track down the
  executable run function appropriately?

It just feels hard.

I want to propose an alternative, non dwarf based debug approach. Based on an
approach similar to the current profiling approach.

The profile has block information. We can use that to map current location to
source code.

Imagine we have a little protocol for interacting with the debugger over a
socket. Then anyone can write their own front end. We could start with a
simple command based debugger, and later make a tui enabled one. Regardless,
keep all that logic out of libfble itself.

For stack trace, when debugging is enabled, we can keep a linked list
representing the stack that has, at each point, the func value and args passed
to each function. And maybe locals too.

Now that should give enough info, when we are stopped, to dump the back trace
and access everything you might want everywhere. Any extra debug info we need
for custom executables we could define a standard API for.

Here's what I'm envisioning:
* The process is initialized normally. No need for special debug support. But
  when you start the program, you add a --debug option that says to stop at
  the beginning and wait for a debugger to connect.
* You can set breakpoints at profile block ids.
  We can maintain a table from profile block id to boolean saying if a
  breakpoint is enabled. Whenever we enter a block, quickly check the table to
  know if we should call into the debugger.
* 'next' can determine the breakpoint based on walking through debug info.
* 'step' can be generic 'break at any block enter'. Hmm... Maybe we want to
  distinguish between statement blocks and function blocks? It wouldn't be
  hard. We know the function ones are what we call in FbleCall.

I think this is totally doable. As I said, don't worry about the UI to start.
As long as we can get all the info we need, we could make a fancy text based
UI (which is primarily a source code viewer). I can come up with my own
protocol.

What do I need to be feature compatible to what we have today?

First Round: stepping through code.
* break at file:line
* break at function name
  Tab completion would be really nice.
* step, next, continue
* list backtrace 
  function name, file:line of each entry.

Second Round: viewing data
* Have a way to print an fble value.
* Be able to reference variables in a frame.
* Ideally be able to execute arbitrary fble expressions.
* Any way to print/infer string/char/integer literals?

Advanced features:
* ctrl-c to interrupt running program ???
  Maybe we check on each block enter if there's some new command on the
  socket? Not sure how expensive that would be.
* stop on abort.

Let's focus on the first round to start. What do we need?
* --debug switch to enable debug.
* Profiling operations call into debugger.
* socket commands:
 - list function names matching some pattern.
 - break/clear at function
 - break/clear at file:line
 - break/clear next
 - break/clear step
 - print backtrace.
 - continue
 - notified of breakpoint reached
 - notified of end of program

First proof of concept could be to set breakpoint at file:line and print
backtrace? Certainly its going to take a while before it's built up enough to
be useful. Baby steps. Try to keep the code mostly separate from the rest of
fble.

---

What protocol should we use for communication? Can/should we use the GDB
remote serial protocol? Invent our own? Some other protocol?

I think run our own protocol. We can always write a wrapper if we want to
support something more standard. gdb remote serial protocol at a glance
doesn't look abstract enough to fit nicely with fble I feel like.

---

We could support both aarch64 dwarf based debug and source level fble debug.
That might be useful. We don't necessarily have to get rid of aarch64 dwarf
based debug if/when we add a custom fble debug layer.

---

Revisiting gdb dwarf based member access. See thoughts/fble-0.2/debug.txt for
previous discussion.

Challenges:
* Support for packed vs. unpacked values.
* Distinguishing between different types with the same name.
* Passing type info via debug info.

Ideally we have a way to store the type of each variable in debug info. And a
way to store types in debug info (where does the type get defined though?).
Where the type maps field number to name. And then we let gdb call
FbleStructValueAccess(...) or FbleUnionValueAccess(...) to access the field
value. Then we can handle packed and unpacked just fine.

Worst case we could define a dwarf type for each variable.

It's sad, because this would be so easy to add to a custom debugger if I had
implemented one. It feels convoluted to try adding it into dwarf.

Let's focus on this to start: can we call a function in dwarf to get a
location?

We can define and call a dwarf function, which has its own language for stack
operations. I don't see any way to call a native function. For supporting
packed, there are bit offsets, so maybe it's possible. I don't really want to
re-implement value functions in dwarf though. Especially when you can just
call the runtime APIs.

I'm coming to the same conclusion as last time. It's not worth the effort to
add to dwarf. Especially given the potential benefits of switching to a custom
debugger.

Let's drop this request entirely and refocus on custom debugger in the next
release (or whenever we get around to it).

