@(StdLib) {
  StdLib { @(Unit@, Bool, List); };
  List { @(S@, P@, S0, S1, S5, SortS); };
  Bool { @(Bool@, True, False, And); };

  @ Elem@ = +(Unit@ A, Unit@ B, Unit@ C, Unit@ D, Unit@ E);
  @ TestName@ = +(Unit@ List_Sort_basic);
  @ TestFailure@ = *(TestName@ name, S@<Elem@> wnt, S@<Elem@> got);

  \(Elem@, Elem@; Bool@) ElemLe = \(Elem@ a, Elem@ b) {
    ?(a; A: ?(b; A: True,  B: True,  C: True,  D: True,  E: True),
         B: ?(b; A: False, B: True,  C: True,  D: True,  E: True),
         C: ?(b; A: False, B: False, C: True,  D: True,  E: True),
         D: ?(b; A: False, B: False, C: False, D: True,  E: True),
         E: ?(b; A: False, B: False, C: False, D: False, E: True));
  };

  \(Elem@, Elem@; Bool@) ElemEq = \(Elem@ a, Elem@ b) {
    ?(a; A: ?(b; A: True,  B: False, C: False, D: False, E: False),
         B: ?(b; A: False, B: True,  C: False, D: False, E: False),
         C: ?(b; A: False, B: False, C: True,  D: False, E: False),
         D: ?(b; A: False, B: False, C: False, D: True,  E: False),
         E: ?(b; A: False, B: False, C: False, D: False, E: True));
  };

  # TODO: Move these to StdLib/List and make it public?
  <@ T@> { \(\(T@, T@; Bool@), S@<T@>, S@<T@>; Bool@); } SEq = <@ T@> {
    \(\(T@, T@; Bool@) eq, S@<T@> a, S@<T@> b) {
      ?(a; cons: ?(b; cons: PEq<T@>(eq, a.cons, b.cons), nil: False),
           nil: ?(b; cons: False, nil: True));
    };
  },
  <@ T@> { \(\(T@, T@; Bool@), P@<T@>, P@<T@>; Bool@); } PEq = <@ T@> {
    \(\(T@, T@; Bool@) eq, P@<T@> a, P@<T@> b) {
      And(eq(a.head, b.head), SEq<T@>(eq, a.tail, b.tail));
    };
  };

  \(Unit@ ; S@<TestFailure@>) Test = \(Unit@ _) {
    S@<Elem@> unsorted = S5<Elem@>(
      Elem@(D: Unit@()),
      Elem@(A: Unit@()),
      Elem@(B: Unit@()),
      Elem@(E: Unit@()),
      Elem@(C: Unit@()));

    S@<Elem@> wnt = S5<Elem@>(
      Elem@(A: Unit@()),
      Elem@(B: Unit@()),
      Elem@(C: Unit@()),
      Elem@(D: Unit@()),
      Elem@(E: Unit@()));

    S@<Elem@> got = SortS<Elem@>(ElemLe, unsorted);
    ?(SEq<Elem@>(ElemEq, wnt, got);
      true: S0<TestFailure@>,
      false: S1<TestFailure@>(TestFailure@(TestName@(List_Sort_basic: Unit@()), wnt, got)));
  };

  @(Elem@, TestName@, TestFailure@, Test);
};
