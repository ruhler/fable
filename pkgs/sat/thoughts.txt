Sat Solver
==========

Let's see if we can improve the sat solver and its performance, as a way of
exercising the fble language.

First steps:
1. Implement dimacs cnf parser, make an fble-sat binary that reads dimacs cnf
as input and outputs in the expected format, with a --timeout option or some
such.

2. Download, and if necessary modify, some sample sat problems that fble-sat
can solve in a reasonable amount of time. Say on the order of 1 minute.

3. Optimize the pure literal / unit literal / simplify operation:
 - Substitute multiple variables at once.
 - Track unit literals and pure literals during substitution.
 - Consider making a specialized data structure that tracks each clause a
   variable belongs to positive or negative and the number of variables per
   clause. Jump directly to what we need to when we get new information.

If bored:
- Add support for sat format dimacs.
- Write an algorithm to pack a sat formula into a grid for a sat game.
- Come up with more efficient implementations.

Dimacs Format
-------------
We can start with simplified format described at:
   http://www.satcompetition.org/2009/format-benchmarks2009.html

 c
 c start with comments
 c
 c
 p cnf 5 3        // p cnf <nbvar> <nbclauses>
 1 -5 4 0         // 1 line per clause.
 -1 5 3 4 0       // +x, -x not allowed in same clause
 -3 -4 0

We'll be reading this from stdin, so should I make it process oriented, line
oriented, or string oriented?

Process oriented could save memory overhead from loading the entire string
into memory, but it forces us to use processes in the parser, which means we
couldn't reuse the same parser for string based. That sucks.

---

Parse is in place. Benchmark is in place. Initial performance improvement is
in place.

Looking at the profile now, time is dominated by GetPure function. Most of the
time is the call to InsertWith.

In this example, the GetPure function is called 211 times. I'm thinking perhaps
the best way to improve performance is to track number of clauses a variable
appears positive and negative in, and only update that when we eliminate a
clause containing that variable.

So, eliminate a clause, update just the variables effected, which should be
small (O(1) instead of O(N)).

So, keep a map from variable to # clauses + and # clauses -. Do a single pass
to construct that initially. Then maintain it throughout.

Except, we'll have to remember that state at every decision point, which is a
little unhappy.

Is there a more compact way we could represent the formula?

---

My proposal for next optimization.

Data structure for formula:
* Map from VarId to pair of Set of clause ids, representing the set of clauses
  the variable appears positive in and negative in.
* Map from clause id to map of variable id to whether the variable appears
  positive or negative in that clause.

For operations to support:
* Assign var - an update to the variable map.
* Remove var from clause - an update to the variable map.
* Remove clause for var - an update to the clause map.
* Remove var from clause - an update to the clause map.

Each of these 4 operations generates more of those operations. Continue
processing operations until there are no more left. Record the assignments
somewhere.

It would maybe be good to separate the interface specification of a sat
formula and the internal representation.

The hope is, this approach will be better because each clause has a few number
of vars and each var is in a few number of clauses, and at each step of doing
something, we deal with a small number of things and figure out directly what
the next steps are.

---

Proposal:
* Have a data structure which is a triple of Vars map, Clause map, and
  Operations queue. And if it's useful, collection of assignments discovered.
* Have functions that update the triple given an operation, by updating vars,
  clauses, and the queue.
* Have abstract operations to construct the maps a single clause at a time.
  This can be used by the parser to build the state.
* Have a special function called after all clauses are added to do an initial
  pass to discover pure variables and unit literals.

The rest is pretty straight forward.

For development purposes, it might be nice to rewrite the code mostly from
scratch. Consider putting it into Cnf.fble instead of overwriting Sat.fble.

It might be nice to abstract the parser first to work with some monad that
provides an 'add clause' method that takes a list of literals.

