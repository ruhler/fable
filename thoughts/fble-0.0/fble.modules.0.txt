
Proposal for fble modules.

1. We can already group values hierarchically using struct values.
We also want a way to group types hierarchically. So introduce a new sort of
type or kind which is a collection of named types that you can access and
refer to by name.

Now you can refer to both types and values hierarchically, assuming they are
in scope. For example:
  StdLib@.List@.S@
  StdLib.List.MapS

And you can define and export groups of entities this way.

Candidate Proposals

A. Just use the existing struct and union types for this, by adding a '.' type
operator. For example, you could do:

@ Unit@ = *();
@ Bool@ = +(Unit@ true, Unit@ false);
Bool@.true u = Unit@();

Or, much less contrived:

@ StdLib@ = *(List@ List, Int@ Int, ...);
StdLib@.List l = empty();

But that is admittedly a little strange. Would you have a module be a struct
or a union type? Note that I don't expect you would ever instantiate a value
of this type, because it's non-sensical. It doesn't make sense to have one
sample value of every type that is defined in the module.

B. Introduce the concept of a struct kind.
Note though, we don't have names for kinds, so it would be awkward to work
with.

+<@ List@, @ Bool@, @ Int@, \<@;@> Maybe@> StdLib@ = 
 +<@ List@, @ Int@, \<@;@> Maybe@>(List@, Bool@, Int@, Maybe@);

StdLib@.Bool@ true = StdLib@.Bool@(true: Unit@());

The downside being that the caller would have to know the names of all the
things defined in the kind, which is not at all happy.

C. Cheat a little. Allow Foo@.Bar@ for types, like we allow Foo@(x, y, z) for
types, even though it isn't explicit in the kind @ for the type Foo@.

@ StdLib@ = @(List@ = List@, Bool@ = Bool@, Int@, Maybe@, ...);
StdLib@.Bool@ true = StdLib@.Bool@(true: Unit@());

2. Have a construct to clear the scope aside from explicitly named entities.
This is needed so that if a parent module adds a new entity, it will not
conflict with some private internals of a child module.

In other words, it makes it so a child module has full control over its
scopes.

Using this mechanism, a child module explicitly lists those entities it is
assuming are already available. The list can be in any order. It is up to
whoever instantiates the child module to ensure the entities are available.

This mechanism also implies that a parent module must explicitly import any
external modules required by any of its child modules. Note that the parent
does not need to know about what any of the imported modules depend on.

Candidate Proposal:
  %([name = ] name, [name = ] name, ...) { ... }
  %([name@ = ] name@, [name@ = ] name@, ...) { ... }

For example

%(Unit@, Bool@, Maybe@, Map@ = HashMap@) {
  Bool@ true = Bool@(true: Unit@());
  true;
}

3. No special mechanism is needed for instantiating modules. No automatic
dependency analysis. A parent module instantiates each child module in order
using the same approach as existing let expressions. For instance, the
definition of StdLib might look like:

@@ Unit = [instantiate Unit];
@@ Maybe = [instantiate Maybe];
@@ List = [instantiate List];
...
StdLib(Unit, Maybe, List, ...)

The developer of the parent module is responsible for declaring child modules
in dependency order. Child modules can be defined recursively using
traditional recursive let blocks if needed.

4. We need some mechanism to map from an [instantiate Foo] clause to identify
the source code for the module Foo. For instance, using a directory structure,
look for the definition of module Foo in a subdirectory with the same name as
the parent module. Or, as a special case for top level modules, the compiler
can have a list of search paths.

Each top-level program (as opposed to module) would be responsible for
instantiating all required top level modules in dependency order. This makes
the dependencies of the program clear.

This way a module can be reused in multiple programs, so long as each program
it is used in supplies its required dependencies.

Candidate Proposal:
 %name
 %name@

For example:
  @ StdLib@ = %StdLib@;
  StdLib@.StdLib@ StdLib = %StdLib;
  StdLib@.Bool@ true = StdLib.true;

5. Previous thoughts and how to interpret them now:
 1. How to group types and values into single objects. For values we can just
 use struct values. For types, maybe introduce an analogous concept?

 A. See (1)

 2. Namespace control: Ideally a child module cannot break if its parent
 brings starts using a new name that conflicts with the child's internals. Can
 a child use a named entity that the parent doesn't have in scope?

 A. A child cannot use a named entity that the parent doesn't have in scope.
 Else see (2).
 

 3. Dependency questions: Modules depend on other modules. As a user of a
 module, it's not easy or fair to have to keep track of all the internal
 dependencies of other modules to figure out what order to define the modules.
 So it might be nice for the system to take care of that. Should a parent
 module explicitly report all required dependencies of all child modules, or
 is it okay for dependencies to be explicit?

 A: a module does have to figure out what order to instantiate its
 child modules, but it need not figure out what order to instantiate external
 modules, and it need not know the dependencies of external modules.

 The question that remains is, how hard will it be to figure out the
 dependency order, particularly for top-level programs? Presumably the
 compiler will tell you if you get the order wrong. Maybe libraries can play a
 role in saying: "this is the right order to use for this group of modules,
 I'll take care of it." One possibility would be to pass required modules as
 arguments when you instantiate a module. That should make it clear.

 In that case, a module is like a function definition that does not inherit
 any scope from its parent. Sort of. Not quite. Because remember, modules are
 defined and uniquely identified by their name and no other notion or
 description.

Namespaces Proposal
-------------------
Rather than try to reuse structs, how about we introduce a new concept called
a namespace? A separate syntactic construct. You can do type and value lets in
namespaces. And also...

Namespace Let
-------------
Abstract Syntax:
  Namespace ::= namespace_let_namespace (bindings :: [(Name, Namespace)] (body :: Namespace)
  Type      ::= namespace_let_type      (bindings :: [(Name, Namespace)] (body :: Type)
  Expr      ::= namespace_let_expr      (bindings :: [(Name, Namespace)] (body :: Expr)

Concrete Syntax:
  namespace_stmt ::= '%' namespace_name '=' namespace [',' '%' namespace_name '=' namespace [...]] ';' namespace_stmt
  type_stmt ::= '%' namespace_name '=' namespace [',' '%' namespace_name '=' namespace [...]] ';' type_stmt
  stmt ::= '%' namespace_name '=' namespace [',' '%' namespace_name '=' namespace [...]] ';' stmt

Example:
  % Bool% = %(Bool@, True, False, And, Or, Not);
  And(Bool%.True, Bool%.False)

The namespace let is used to define namespace variables, when describing
namespaces, types, or expressions. For each binding, a new namespace variable
is defined. The value of the namespace variable is the result of evaluating
the namespace for the variable's binding.

The defined namespace variables are visible in the body of the let.

TODO: Are recursive namespace definitions allowed?

The value of the namespace let is the value of its body.

Type and Expression Let
-----------------------
You can use type and normal value lets when defining namespaces.

For example:
  @ Unit@ = *();
  Unit@ Unit = Unit@();
  %(Unit@, Unit);

Namespace Access
----------------
Abstract Syntax:
  Namespace ::= namespace_access_namespace (namespace :: Namespace) (name :: Name);
  Type      ::= namespace_access_type      (namespace :: Namespace) (name :: Name);
  Expr      ::= namespace_access_expr      (namespace :: Namespace) (name :: Name);

Concrete Syntax:
  namespace '.' namespace_name
  namespace '.' type_name
  namespace '.' name

Example:
  Bool%.Bool@

Returns the namespace, type, or value provided for the given name when
creating the namespace.

Current Namespace
-----------------
Abstract Syntax:
  Namespace ::= current_namespace

Concrete Syntax:
  namespace ::= '%'

Example:
  %

Gives the current namespace, including all namespace, type, and value
variables in scope.

Namespace Restriction
---------------------
Abstract Syntax:
  Namespace ::= namespace_restriction (namespace :: Namespace) (names :: [(Name, Thing)])

Concrete Syntax:
  namespace ::= namespace '(' name ['=' name] [',' ...]] ')'

Define a new namespace restricted to the named entities from a given
namespace. If the '=' name is not provided, defaults to '=' name.

Example:
  Bool%(Bool@, true=True, false=False)

Note: Complex expressions are not supported in the namespace restriction. If a
more complex form of renaming is required, then a namespace eval can be used.
For example, instead of
  StdLib%(Bool%.Bool@, BoolList@ = List%.LIst@<Bool@>)

You would write something like:

  StdLib% {
    @ Bool@ = Bool%.Bool@;
    @ BoolList@ = List%.List@<Bool@>;
    %(Bool@, BoolList@);
  }

Namespace Eval
--------------
Abstract Syntax:
  Thing ::= namespace_eval (namespace :: Namespace) (body :: Thing)

Concrete Syntax:
  thing ::= namespace '{' thing '}'

Example:
  %StdLib(Unit%, Bool%) { Bool%.True; }

Evaluate a namespace, type, or value in the given namespace.

Namespace Import
----------------
Abstract Syntax:
  Thing ::= namespace_import (namespace :: Namespace) (body :: Thing)

Concrete Syntax:
  thing_stmt ::= namespace ';' thing_stmt

Example:
  StdLib% ;
  Bool%.True;

Creates a thing in the namespace formed of the union of the current namespace
and the given namespace.

Namespace Variable
------------------
Abstract Syntax:
  Namespace ::= namespace_variable Name

Concrete Syntax:
  namespace ::= namespace_name
  namespace_name = name '%'

Example:
  StdLib%

Refer to a namespace variable in scope.

Include
-------
Abstract Syntax:
  Thing ::= include (name :: Name)

Concrete Syntax:
  thing ::= '&' name

Example:
  &Bool%

Syntactically includes the named module in place of the thing. The definition
of the module is located in a platform dependent way relative to the current
module. This allows an fble program to be split across multiple files that are
reused in multiple programs.

Implementation Note: Dealing with Many Lets
-------------------------------------------
The namespaces proposal introduces many kinds of lets into the language.

We already have:
  let type ; type
  let type ; value
  let value ; value

Now we add the namespace lets:
  let namespace ; namespace
  let namespace ; type
  let namespace ; value

And we update the other lets:
  let type ; namespace
  let value ; namespace

The only one missing at this point is the useless, but probably not
harmful:
  let value ; type

Is there any way we can simplify the abstract syntax, parser, and compiler to
avoid having to implement 8 kinds of lets instead of just 3?

Start by assuming any of the 9 combinations is possible, for the most
simplicity / generality.

Internally we could have a unified type called a 'thing'.

thing ::= namespace | type | value;

And say things are typed, in the sense that we know if a thing is a namespace,
type, or value. Then we could write a syntax such as:

expr ::= ... 
       | let thing ; expr

Hmm... That's an interesting approach. The let is generic. So focus on making
the let generic rather than the body.

let_bindings ::= let_type_bindings | let_value_bindings | let_namespace_bindings

expr ::= ... | let_bindings ';' expr

Implementation wise, it's not exactly what you want, but it keeps the syntax
correct. We don't have to have some notion of a type.

And then, in the compiler, we have some generic function to process let
bindings? Namespace updates the namespace, types updates the namespace. The
only funny one is expr, which needs to generate code to compile.

The opposite approach would be:

let ::= namespace ';' thing
     |  type ';' thing
     |  value ';' thing
     ;

type ::= ...
      | let
      ;

expr ::= ...
      | let
      ;

And rely on a type checking phase in the parser to assert that the body of the
let for an expr is an expr, the body of the let for a type is the type, and so
on.

Maybe?

Problems with this approach: if you define expressions for a namespace, then a
namespace has to take up space at runtime, and that's not clearly explained.
In particular, if you try to define expressions for a namespace used entirely
within a type context, how could we ever evaluate those expressions? It's very
confusing.

The solution:
1. Have a namespace just be a struct, and perhaps be able to augment a struct
type with type definitions. For example:
   *(@ Bool@ = +(Unit@ true, Unit@ false), 
     Bool@ True, Bool@ False, \(Bool@ x; Bool@) Not, ...)

This way we can reuse the existing lets for namespaces by just treating them
as normal types and expressions.

2. Have a 'typeof' operator that allows you to use expressions to define
types. typeof (expr :: Expr) would be the type of the given expression,
without ever evaluating that expression.

Unified Proposal
----------------
If structs could hold types, then namespaces are just structs. If types were
values, then would we get namespaces for free?

This approach is appealing, because it means we don't have 8 different
kinds of let statements. It ties the knot, as it were. Then anything we could
do to describe expressions in complex ways we could use to describe types and
namespaces in complex ways too. The language would be fully general and
simple.

Here are some problems with the unified proposal:

1. The polymorphic list types S@<T@> and P@<T@>, if interpreted as normal
functions an expressions, would be an infinite recursion.

2. Some things would need to be evaluated at compile time. Other things we
would want to defer to evaluation time. How do you decide which?

For example:
  @ MyList@ = List@(Bool@);
  MyList@ x = emptyList(Bool@);

  Foo@ foo = ComputationallyHeavyFunction();

We want to evaluate the List@(Bool@) at compile time, but maybe we don't want
to evaluate the ComputationallyHeavyFunction. How do you distinguish between
them?

3. What does it mean to have something like ?(x ; true: Bool@, false: Int@).

4. How do we prevent infinite recursion during compilation?
  
None of these challenges is insurmountable on their own.

For (1) we can say there are two kinds of evaluation: compile time and run
time.  Compile time evaluation is lazy, run time evaluation is eager. Then it
works. Or we can say that types are lazy. Then it works.

For (2) we can say we eagerly evaluate everything we can at compile time. Or
we do lazy evaluation at compile time and compile only what is needed for type
checking. Or we could augment the syntax for let expressions to distinguish
between those that need to be evaluated at compile time versus run time.

For (3) we can say that is meaningless if x is unknown. Or we can say the
result of ?(...) is always unknown at compile time, and all types have to be
known at compile time.

For (4) we can say that the body of ?(...) is never evaluated at compile time.

A fifth problem, when considering namespaces, is:

5. A struct containing a type requires some form of dependant types support.

Say we want a namespace containing the type Bool@ and the function Not. As a
struct, it's type would be: *(@ Bool@, \(Bool@ x; Bool@) Not). But what's to
keep you from constructing a value of this type as: (Int@, Not)? Something
magical needs to happen to link the value of the type field with the type of
the value fields.

Taken all together, the unified proposal doesn't appear to provide any
benefit. It just hides a bunch of complexity under a deceptively simple
syntax. If there are two ways everything is evaluated, if some things can only
be done at compile time and others only at run time, then it would seem much
better to reflect that real complexity of the language explicitly in the
syntax as well.

Thus I repeat my conclusion to the type/value unification question reached
before: better to keep types and values (and now namespaces) separate
syntactic constructs.

Struct as Namespace
-------------------
Ignoring the question of namespaces for types vs. values for the time being,
how could we make structs act as (value) namespaces in a happy syntactic way?

1. Introduce a new anonymous-type struct constructor:

Abstract Syntax: anon_struct (args :: [(Name, Maybe Expr)])
Concrete Syntax: '@' '(' [name [':' expr] [',' ...]] ')'
Example: @(True, False, Not: NotInternal)

Defines a struct whose type is inferred from the arguments. If no value is
provided for an argument, it is assumed to be the variable expression with the
same name. For example, the argument: "Foo" is equal to writing "Foo: Foo".

This would not replace the existing version of struct constructor with
explicit type provided. That is still useful to have in those cases where you
want type checking of the arguments. We could consider requiring the name:
syntax in the existing struct constructor syntax, but given that you provide
the type explicitly, I don't see too much motivation to change the existing
syntax.

2. Namespace Eval
Abstract Syntax: namespace_eval (namespace :: Expr) (body :: Expr)
Concrete Syntax: expr '{' stmt '}'
Example: @(True, False, And) { And(True, False); }

The namespace argument must be of type struct. The body of the expression is
evaluated in a namespace consisting solely of the fields of the struct. This
construct allows you to hide names in the current namespace when evaluating
the body of an expression.

3. Namespace Import
Abstract Syntax: namespace_import (namespace :: Expr) (body :: Expr)
Concrete Syntax: expr ';' stmt
Example: @(And); And(True, False);

This is like a short hand form of let expression. The namespace must be of
struct type. The fields of the struct are added to scope and are visible in
the execution of the body.

The typical use of namespace import is to import values from an existing
namespace into the current namespace using a combination of namespace
import, namespace eval, and anonymous struct construction. For example:

StdLib { @(Bool, Maybe, List); };
...

Has the effect of importing just Bool, Maybe, and List from StdLib.

Note that you can also make use of this construct for defining a variable
without having to explicitly specify its type. This may be useful for defining
modules without having to provide a separate type. For example:
  @(StdLib: &StdLib); ...

Or, as another example, the following two are equivalent:

 Bool@ True = Bool@(true: Unit@()); ...
 @(True: Bool@(true: Unit@())); ...

But note, this form of let is a non-recursive form of let.

The Final Proposal
------------------
I think we have all the pieces:
* Add the option to define a type as part of a struct type.
* Have some form of 'typeof' operator or type field struct access.
* Add the namespace-struct operations.
* Add the 'include' operation.

We should now be able to come up with a final proposal that is happy happy.
