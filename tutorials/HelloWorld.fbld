@tutorial Hello World
 In this tutorial you'll write and run a traditional hello world program that
 prints out the string "hello, world".
 
 @section The Hello World Program
  In your favorite text editor, start a new file called @l{HelloWorld.fble}.
  The @l{.fble} extension is used for fble programs; it is required for the
  fble interpreter and compiler to be able to locate your code.

  The following is a complete hello world program in fble:

  @code[fble] @
   # Import string type and literal from the core library.
   @ String@ = /Core/String%.String@;
   % Str = /Core/String%.Str;

   # Specify the output string.
   String@ output = Str|'hello, world';

   # Call the helper function for a main function
   # that outputs a single string value.
   /Core/Stdio/StringO%.Run(output);

  We'll break this down piece by piece in the following sections.

  @subsection Comments in Code
   Comments in fble start with the @L{#} character and continue to the end of
   the line. For example:

   @code fble @
    # Import string type and literal from the core library.

  @subsection Module Imports
   The first few lines of code of the hello world program import the
   @L{String@} type and @L{Str} string literal function from the core library.

   @code[fble] @
    @ String@ = /Core/String%.String@;
    % Str = /Core/String%.Str;
   
   Names ending in the @L{@} character are types. Names without @L{@} are
   values. In this case @L{String@} is a type and @L{Str} is a value.

   Names ending in @L{%} are names of modules. @L{/Core/String%} is a module
   from the core library that defines the string type and related functions.

   Modules are located by searching module directories of the package search
   path. The source code for module @L{/Core/String%} will be in a file
   @l{Core/String.fble}. You can see the default package search path
   for your installation by running @l{fble-stdio --help}, or set your own
   package search path using the FBLE_PACKAGE_PATH environment variable and/or
   @l{-I} and @l{-p} options to @l{fble-stdio}.
   
  @subsection Variable Declaration
   Next we declare a variable called @L{output} whose value is the string
   literal for @l{hello, world}.
 
   @code[fble] @
    String@ output = Str|'hello, world';

  @subsection The Module Value
   The last thing we do is specify the @L{/HelloWorld%} module value,
   which will be used as the main function for the program.
 
   @code[fble] @
    /Core/Stdio/StringO%.Run(output);

   This uses a helper function from the @L{/Core/Stdio/StringO%} module which
   defines a main function that outputs a single string when run. The @L{Run}
   function returns a main function that can be run by the @l{fble-stdio}
   program.

 @section Running Hello World
  We use the @l{fble-stdio} program to run our @l{HelloWorld.fble} program:
 
  @code[sh] @
   fble-stdio -p core -I . -m /HelloWorld%
 
  If all goes well, this should output the string @l{hello, world}.
 
  The @l{-p} option to @l{fble-stdio} says our program relies on modules from
  the @l{core} package. The @l{-I} option says to look for your
  @l{HelloWorld.fble} file in the current directory, and the @l{-m} option says
  to execute code from the @L{/HelloWorld%} module you just defined.
 
 @section Printing Different Kinds of Things
  An important motivation for the hello world program is to show you how to
  print things to the output, so you can see the results of trying
  different things in subsequent tutorials. Fble doesn't have a printf
  function or format strings. Instead, many of the types defined in
  the core library define a @L{Show} function to convert them to strings. You
  can concatenate strings directly together using the @L{/Core/String%.Strs}
  function or join them as separate lines using the @L{/Core/String%.Lines}
  function.
 
  For example, try updating your hello world program to print some of the
  following different types of values.

  @subsection Booleans
   @code[fble] @
    @ Bool@ = /Core/Bool%.Bool@;
    Bool@ True = /Core/Bool%.True;
    Bool@ False = /Core/Bool%.False;

    String@ output = Strs[Str|'A boolean: ', /Core/Bool/Show%.Show(True)];

  @subsection Characters
   @code[fble] @
    @ Char@ = /Core/Char%.Char@;
    % Chars = /Core/Char%.Chars;

    Char@ c = Chars.A;
    String@ output = Strs[Str|'A character: ', c];

  @subsection Lists
   @code[fble] @
    String@ output = Strs[Str|'A list: ',
      /Core/List/Show%.Show(/Core/Bool/Show%.Show)[True, False, True]];

  @subsection Integers
   @code[fble] @
    @ Int@ = /Core/Int%.Int@;
    % Int = /Core/Int/Lit%.Int;

    Int@ x = Int|42;
    String@ output = Strs[Str|'An integer: ', x];

 @section Exercises
  @exercise
   Update your hello world program to output all of the different types shown
   in a single string. Compare your hello world program with the sample one in
   at @l{tutorials/HelloWorld/HelloWorld.fble} included with this tutorial.

  @exercise
   Sometimes we import values from other modules, other times we use them
   directly. It's your choice. Try removing the import for @L{String@} and using
   the value directly from the @L{/Core/String%} module. Try importing the
   @L{/Core/Stdio/StringO%.Run} function before using it.
 
  @exercise
   String literals are introduced using @L{Str|}, not from single quotes. If
   you have a string without spaces or other punctuation characters, you don't
   need single quotes. Try printing @l{hello} using a string literal without
   single quotes.
 
 @section Next Steps
  Now you know how to write and run your own fble program and print some
  different types of values. The next step is to do a deep dive, starting with
  the basics of fble: structs, unions, and functions. Head over to the
  @fbld[Basics.fbld][Basics] tutorial to learn more.
