
% Hex = /Core/Digits%.Hex;

@ Int@ = /Core/Int%.Int@;
% Sub = /Core/Int%.Sub;
% Int = /Core/Int/Lit%.Int;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<@>@ Put@ = /Core/Process%.Put@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Bit8@ = /Md5/Bits%.Bit8.Bit8@;
% H2 = /Md5/Bits%.Bit8.H2;

@ Md5Hash@ = /Md5/Md5%.Md5Hash@;
% Md5 = /Md5/Md5%.Md5;

Int@ 1 = Int|1;

(Put@<Maybe@<Bit8@>>, Int@) { Unit@!; }
PutN = (Put@<Maybe@<Bit8@>> out, Int@ n) {
  n.?(0: out(Nothing<Bit8@>));

  Unit@ _ := out(Just<Bit8@>(H2(Hex.A, Hex.5)));
  PutN(out, Sub(n, 1));
};

# Benchmark for md5 sum that takes about 1 minute to run.
Unit@! Bench = {
  Int@ n = Int|60000;
  Maybe@<Bit8@> ~ get, put;
  Md5Hash@ md5 := Md5(get), Unit@ x := PutN(put, n);
  !(Unit);
};

@(Bench);
