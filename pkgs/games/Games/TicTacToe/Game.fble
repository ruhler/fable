
<@>@ Maybe@ = /Core/Maybe%.Maybe@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ AI@ = /Games/TicTacToe/AI%.AI@;
@ AIR@ = /Games/TicTacToe/AI%.AIR@;
% AI = /Games/TicTacToe/AI%;

@ Board@ = /Games/TicTacToe/Board%.Board@;
@ Position@ = /Games/TicTacToe/Board%.Position@;
@ Player@ = /Games/TicTacToe/Board%.Player@;
% BoardStatus = /Games/TicTacToe/Board%.BoardStatus;
% EmptyBoard = /Games/TicTacToe/Board%.EmptyBoard;
% Move = /Games/TicTacToe/Board%.Move;


@ GameResult@ = +(Player@ win, Unit@ draw);
@ GameStatus@ = +(Player@ playing, GameResult@ ended); 
@ Game@ = *(Board@ board, GameStatus@ status, AI@ ai);

@ Move@ = +(Position@ given, Unit@ ai);

Game@ Initial = Game@(
  EmptyBoard,
  GameStatus@(playing: Player@(X: Unit)),
  AI.Initial
);

(Move@, Game@) { Game@; } Play = (Move@ move, Game@ game) {
  game.status.?(ended: game);

  Player@ player = game.status.playing;

  AIR@ air = move.?(
    given: AIR@(game.ai, move.given),
    ai: AI.Move(game.ai, game.board, player));

  Maybe@<Board@> nboard = Move(game.board, air.position, player);
  nboard.?(nothing: game);

  Player@ nplayer = player.?(
    X: Player@(O: Unit),
    O: Player@(X: Unit));

  GameStatus@ nstatus = BoardStatus(nboard.just).?(
    X: GameStatus@(ended: GameResult@(win: Player@(X: Unit))),
    O: GameStatus@(ended: GameResult@(win: Player@(O: Unit))),
    D: GameStatus@(ended: GameResult@(draw: Unit)),
    E: GameStatus@(playing: nplayer));

  Game@(nboard.just, nstatus, air.ai);
};

@(GameStatus@, Game@, Move@, Initial, Play);
