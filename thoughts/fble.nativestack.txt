Native Stack
============
Currently we use a mix of native and managed stack. The managed stack comes
from the days when we had concurrency built in and we used garbage collection
on the stack. Now that we don't have that, I think we can almost get rid of
the managed stack. Everything except for tail
calls.

How could we do that? And why should we?

The why is for cleanup purposes and performance. No need to have a managed
stack if we can do it with a native stack. In the case of no tail calls, we
can avoid any managed stack allocations entirely. In the case of tail calls, I
think we still need some allocation, to pass arguments from the callee back to
the caller so it can do the tail call on behalf of the callee.

For the how we could do it, I think we can go a step at a time. Starting with
result and func fields, which I think should be easy to get rid of. Right?

Maybe let's start with the function. Where do we use that?
* In tail call, to know what function to call. In other words, seems like
  we'll want to keep that for the tail call stack anyway.

Okay, how about return value?
* FbleThreadReturn uses that to know where to save the result.

So we need to save result pointer to know where to store the result. How about
making it more like a function? As in, FbleRunFunction can return the
FbleValue* which is the result. We use some other mechanism to notify of tail
call or abort conditions.

Except we still want to make sure FbleThreadReturn is called, to do the
profile exit block call? No. That can be done in the FbleThreadCall function.

Proposal: return NULL for abort, FbleValue* for finished, and some special
sentinel value for 'continue'. In case of continue, we continue from the tail
call stack, which we will have saved the func and args to call.

So, user API is:
  FbleValue* FbleThreadCall(heap, thread, func, args);
    Calls the function, returns the result, or NULL in case of abort.
  FbleValue* FbleThreadTailCall(heap, thread, func, args)
    Arranges for func and args to be called by the caller (internally via the
    managed tail call stack)

There is no FbleThreadReturn function. You just directly return NULL or the
value or the result of FbleThreadTailCall in any of those cases.

Now then, how do we manage profiling blocks and ownership of func and args?

Version 1:
* FbleThreadCall does the first enter call.
* FbleThreadCall does replace calls as required for tail calls.
* FbleThreadCall does the final exit call.
* FbleThreadCall retains args. Callee is responsible for freeing args.

Version 2:
* FbleThreadCall does the first enter call.
* FbleThreadCall does replace calls as required for tail calls.
* FbleThreadCall does the final exit call.
* Callee is not responsible for freeing any args.
* return transfers ownership of return value from callee to caller.

Version 2 sounds good. Simpler. Maybe good to jump directly to it?

Proposed changes are:
* Move all profiling stuff to FbleThreadCall function.
* Change things to return FbleValue* directly.
* Callee doesn't have ownership of args.
* Callee responsible for allocating space for its own locals.

Two of these things we can separate: profiling stuff, and args versus locals.
The last bit is going to be harder to separate. I think better to do the last
bit all at once.

Let's see if I can do the profiling change first. Then think about locals
versus args.

Good. Works great.

Next step: let's work on some uses of locals. Where do we have num_locals not
matching num_args?
* generate-c, if FbleCode stores a different number of locals than args.
* generate-aarch64.c, if FbleCode stores a different number of locals than
  args.

Just those two cases. How should we track locals in general? Still via
FbleExecutable? I think there are two separate parts:
1. Passing num locals from compiler to codegen/interpreter.
2. Using num locals for generated code / interpreter.

Trouble is, currently we assume args and locals are contiguous. And maybe we
allow the compiler to reuse arg space for locals? In an instruction, we would
need to know whether an variable is in an arg versus in a local versus in a
static. That requires changes to instructions. It's not so easy to change. But
kind of a prerequisite for using the native stack, because the caller doesn't
know how much local variable space to allocate, but it does know how many args
to allocate.

I think this is a change worth doing, and before we try to make more use of
the native stack. It means working out the front end details:

* Add an FBLE_ARGS_FRAME_SECTION.
* Change FbleCode to have instrs and num_locals.
* Remove num_locals from FbleExecutable*.
...

The real question is whether there is an incremental path to implement this,
or if we just need to do it all in one big change.

I'm thinking this will be easiest as an all in one big change. Which isn't to
say it will be easy.

Okay. Let's brainstorm the list of changes to make all at once:
* Add an FBLE_ARGS_FRAME_SECTION.
* Update everywhere we refer to frame section to support this new case.
* Make sure to fix GET and GET_STRICT macros to handle all three cases of
  section.
* Rename 'locals' variable of run function to 'args'.
* Allocate local 'locals' variable in interpreter and generated c and aarch64
  code.
* Add num_locals field to FbleCode.
* Remove num_locals from FbleExecutable*.
* Update disassembler for these changes.
* Update compiler to distinguish between args and locals.
* Add R_ARGS to generate aarch64.
* Change ownership of args from callee to caller.

Wish me luck.

Are we still having callee take ownership of args at this point? I think let's
say yes? But that would require we add something to ReleaseInstr to
distinguish between args and local. If we say caller is responsible for args
ownership, we can avoid that. In other words, treat args more like statics
than like locals. It's pretty straight forward, right? FbleThreadCall doesn't
need to take ownership of args anymore. FbleThreadTailCall still frees its
args?

This is important to get straight, so I know I'm converging to the right
place:

* Remove num_locals from FbleExecutable.
* Add num_locals to FbleCode
* Change 'locals' to 'args' in run function.
* Callee responsible for allocating their own locals array.
* Add 'args' frame section.
* statics and args frame sections are read only. Function owns statics, caller
  owns args, callee owns locals.
* FbleThreadTailCall takes ownership of args.

Looks like I have FbleVarSource, FbleVarIndex, as sort of copies of
FbleFrameSection and FbleFrameIndex. Maybe, as a first pass, I can merge those
into a single type. I like the name of VarSource and VarIndex better. And
maybe call the enum FBLE_STATIC_VAR, FBLE_LOCAL_VAR, FBLE_ARG_VAR.

Where should that live? tc.h is fine I think. Cool. Let's start with this CL,
which should be a straight forward naming change.

Umm... but don't introduce ARG_VAR yet, right?

---

Notes while I work on the implementation:
* Remember to update GET and GET_STRICT macros. DONE.
* Need to update compile.c for args versus locals. DONE.
* Need to update typecheck.c to generate arg vars. DONE.
* FbleNewCode has new meaning for num_locals now. DONE.
 - It doesn't include args anymore.
* Need to update execute.c for args versus locals. DONE.
* I'll keep regular call args on the stack for now. We can remove that later. DONE.
* Need to allocate space for locals in generate-c. DONE.
* Need to allocate space for locals in generate-aarch64. DONE.
* Very clearly document how FbleThreadCall, FbleThreadTailCall, and
  FbleThreadReturn are intended to be used, because I'm making some pretty
  strong assumptions about it in the implementation.
  DONE. I hope it's clear enough.
* Would be good to have consistent order for args versus statics.
 - FbleVarTag puts statics, then args, then locals
 - RunFunction puts args then statics
 - FbleExecutable puts num_args then num_statics
 - FbleNewCode puts args, then statics, then locals.
 - FbleDisassemble puts args, then statics, then locals.
 - compile.c Scope puts statics, then args, then locals.
 - generate-c var_tag matches order of FbleVarTag.
 - RunStackFrame in generate-aarch64 is locals, args, statics.
* Would be nice to rename Local to Var in compile.c?

Notes in compile.c:
* Don't PopVar args to the function. DONE.

Notes in execute.c:
* Need to decide whether Stack owns args or not. DONE.
 - Let's say yes for now. We can remove that redundancy later.
 - But I don't need to do this anymore right? I can clean it all up here? Only
   use the Stack for tail calls?
 - No. Hold off until we update the interface to FbleRunFunction. Keep stack
   so we can hold func, result, etc.
* Make sure to FbleReleaseValue on args on the stack when popping the stack.
  DONE.

Notes in generate-aarch64.c
* Check var_tags for debug info. I think it's
  statics, args, locals
  R_STATICS, R_ARGS, R_LOCALS,
  x23, x22, x21
  0x86, 0x85, 0x84
  
  

FbleTailCall pops the caller stack. That means FbleTailCall has to release any
args on the stack, otherwise we loose a handle to those args to free them.

But FbleTailCall doesn't know if whatever is on the stack was for a normal
call or a tail call. We can fix that later. For now, let's always retain all
args on the stack so that FbleTailCall can clean up properly.

---

Draft of the change is done. Time to try compiling and running.

I forgot about updating all the other run functions. That's easily enough
fixed.

Lots of runtime failures:
* ReleaseLocal: Assertion `local->var.tag == FBLE_LOCAL_VAR' failed
 ./test/fble-test.cov --profile /dev/null -I ../spec -m /'SpecTests'/'5.2-FuncValue'/'Basic'/'SingleArg'%
* Bus Error
 ./spec/SpecTests/Unit/SpecTests-Unit.fble.aarch64 --profile /dev/null

Those look like two pretty simple repro cases to look into. Let's start with
the compiler issue.
  
It's from compiling a function value.
* Maybe ReleaseLocal should be a no-op if trying to release an arg?
  No. It should be the same as a static variable. Right?
  Oh. This is because I changed the order of asserts.

Next:
* GetVar: Assertion `var.index < scope->vars.size && "invalid local var index"' failed.
 ./test/fble-test.cov --profile /dev/null -I ../spec -m /'SpecTests'/'8.2-Path'/'Basic'/'Absolute'%
  Looks related to module variables. Those should be args, not locals in
  typecheck.c.
* Bus Error
 ./spec/SpecTests/Unit/SpecTests-Unit.fble.aarch64 --profile /dev/null
* Memory leak detected:
 ./test/fble-test.cov --profile /dev/null -I ../spec -m /'SpecTests'/'5.2-FuncValue'/'Basic'/'Recursive'%

GetVar:
* Looks like a bug in tc. I think module references are being treated as
  local variables from the point of view of indexing, when they ought to be
  considered as args, which shouldn't effect the local variable index.

Probably I need to special case args in typecheck.c, rather than lump them
together with locals. Otherwise the indexes will be off.

Next:
* Memory leak detected:
 ./test/fble-test.cov --profile /dev/null -I ../spec -m /'SpecTests'/'5.2-FuncValue'/'Basic'/'Recursive'%
* Bus Error
 ./spec/SpecTests/Unit/SpecTests-Unit.fble.aarch64 --profile /dev/null

Bus Error:
* 400d50

0000000000400d48 <_Run.0x55a0458728._2f_SpecTests_2f_Unit_25_>:
  400d48: a9b8fbfd  stp x29, x30, [sp, #-120]!
  400d4c: 910003fd  mov x29, sp
  400d50: f9000bf3  str x19, [sp, #16]

The 120 is wrong here. It needs to be a multiple of 16. What happened? Messed
up the padding.

Next:
* Memory leak detected:
  Looks like it's from tail calls.
 ./test/fble-test.cov --profile /dev/null -I ../spec -m /'SpecTests'/'5.2-FuncValue'/'Basic'/'Recursive'%
* Error: immediate offset out of range -512 to 504 at operand 3 -- `stp FP,LR,[SP,#-896]!'
  Looks like we'll want to separate allocation of locals when entering the
  stack.

Memory leak was taking extra references to func and args in tail call.
Solution is to have PopStackFrame consume.

To fix the stp issue, advance the stack pointer for locals before calling stp.
Hopefully that doesn't violate any expectations as to where things are stored
on the stack. It should be fine I think.
