
@ Bool@ = /Core/Bool%.Bool@;

<@>@ List@ = /Core/List%.List@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;
<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;
<<@>@>@ OStream@ = /Core/Stream%.OStream@;

@ String@ = /Core/String%.String@;

# Stdio@ --
#   Interface for standard input and output operations.
<<@>@>@ Stdio@ = <<@>@ M@> { *(
  # stdin stream
  IStream@<M@> in,

  # stdout stream
  OStream@<M@> out,

  # stderr stream
  OStream@<M@> err,

  # Open the named file for reading.
  # Returns an input stream for reading. Nothing if unable to open the file.
  (String@) { M@<Maybe@<IStream@<M@>>>; } read,

  # Open the named file for writing.
  # Returns an output stream for writing. Nothing if unable to open the file.
  (String@) { M@<Maybe@<OStream@<M@>>>; } write,

  # Gets an environment variable value.
  (String@) { M@<Maybe@<String@>>; } getenv
); };
  
# Main@ --
#   Type of the main function for a stdio application.
#
# Inputs:
#   M@ - The abstract computation type.
#   stdio - A Stdio@ interface for M@.
#   m - A Monad@ interface M@.
#   args - The list of arguments to the application.
#
# Results:
#   True if the program ran successfully and should exit zero. False if the
#   program failed and should exit non-zero.
<<@>@>@ Main@ = <<@>@ M@>(Stdio@<M@>, Monad@<M@>, List@<String@>) { M@<Bool@>; };

@(Stdio@, Main@);
