Fble Language Updates
=====================

Should we make it easier to modify fields of a struct value?

For sat solver we do this a lot: modify one or two or three fields of the
Solver@ state. Any time you add a new field to the Solver@ state, you have to
touch a whole bunch of code. And the code becomes cluttered with a lot of
stuff like:

  @(clause_id: s.clause_id, 
    vars: s.vars,
    clauses: Clauses.Insert(s.clauses, id, c),
    conflicts: s.conflicts,
    assigns: s.assigns,
    ops: nops);

  Solver@(Inc(id), nvars, nclauses, s.conflicts, s.assigns, s.ops);

There's an abstract syntax that would make this much nicer. Give a struct
value and a list of field values to change, it returns a new struct value with
the same values as the original struct value plus the changed values.

An idea for a concrete syntax:
 s.@(clauses: Clauses.Insert(s.clauses, id, c), ops: nops);
 s.@(clause_id: Inc(id), vars: nvars, clauses: clauses);

The two concerns are:
1. Is it bad to have a simple syntax for an expensive operation?
2. Do we actually gain much from having this syntax?
 
Another, potentially related language concern was conditionally updating
multiple variables.

 x = ...
 y = ...
 z = ...
 (x, y, z) = p.?(a: ..., b: ...);
 
Anything those can share? Only if you use a struct I guess.
 % vars = @(x: ..., y: ..., z: ...);
 % vars = {
   p.?(vars.@(x: ... ));

I don't see a clear link. Let's focus on the "struct modify" syntax first,
decide if it makes the cut for the language.

Maybe try out my proposed s.@(...) syntax. See where we could apply it. Think
more about whether there's a real cost to it or not. Maybe come up with a
way to optimize the implementation specially over straight up new constructor
value. Or if we already have precedent elsewhere for complex operations with
simple syntax.

---

There is potentially a justification for adding this syntax from an
implementation point of view. If we know based on context that the value being
modified would otherwise be unused after the modification, we could modify in
place and avoid the allocation. For example:

 Solver@ s = ...;
 foo(s.@(...));

Because 's' is defined locally, we can track all of its uses.
Because the result goes into the tail call of foo, we know nobody else will
refer to the original 's' again. Then we can update in place.

It's a bit thin of an argument. This seems like a rare case to me. Also, it
wouldn't mean the compiler is required to update in place. That's too much
burden on the compiler.

---

I want to give this a try. I think it could simplify things a lot where you
have structs with a lot of fields that you update incrementally. Let's put it
in as experimental for release 0.2 and make a call based on experience whether
I want to keep it or not.

It's just so painful any time I add a new field to a struct like Solver@.

Steps to implement:
* Update language spec.
* Add language spec tests.
* Add to parser.
* Add to typecheck.c.
I think desugar at the typecheck level for now. No need for bytecode or
bytecode generation to know about it to start.

What to call it? I think struct copy sounds good. That's really what it is. A
shallow copy of a struct with option to modify.

Should we allow s.@()? No. Just use s in that case.

---

I implemented struct copy. Let's give it some soak time and see how it feels.

Initially in /Sat/Solver%, it's looks pretty nice to me. I can add a new
'unsat' field with minimal modifications to the code, rather than having to
touch every single place we construct a Solver@ value.

