
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Char@ = /Core/Char%.Char@;
% IsNewline = /Core/Char/Type%.IsNewline;

<@>% Cons = /Core/List%.Cons;
<@>% Append = /Core/List%.Append;
<@>% Reverse = /Core/List%.Reverse;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Core@ = /Fbld/Core%.Core@;

<@>@ Fbld@ = /Fbld/Fbld%.Fbld@;
<@>% Error = /Fbld/Fbld%.Error;

% Cat = /Fbld/Fbld/Utils%.Cat;
% NL = /Fbld/Fbld/Utils%.NL;
% S = /Fbld/Fbld/Utils%.S;
% T = /Fbld/Fbld/Utils%.T;

@ Loc@ = /Fbld/Loc%.Loc@;

@ Text@ = /Fbld/Text%.Text@;
% StringOf = /Fbld/Text%.StringOf;

(Loc@, Text@) { Fbld@<Text@>; }
Text = (Loc@ l, Text@ str) {
  T(str);
};

(Loc@, Text@) { Fbld@<Text@>; }
L = (Loc@ l, Text@ str) {
  Cat(l)[S(l)|'`', Text(l, str), S(l)|'`'];
};

(Loc@, Text@) { Fbld@<Text@>; }
A = (Loc@ l, Text@ str) {
  Cat(l)[S(l)|'*', Text(l, str), S(l)|'*'];
};

(Loc@, Text@, Fbld@<Text@>) { Fbld@<Text@>; }
Label = (Loc@ l, Text@ id, Fbld@<Text@> text) {
  Error<Text@>(l, Str|'TODO: Support label in Markdown backend');
};

(Loc@, Text@, Fbld@<Text@>) { Fbld@<Text@>; }
Ref = (Loc@ l, Text@ id, Fbld@<Text@> caption) {
  Error<Text@>(l, Str|'TODO: Support ref in Markdown backend');
};

(Loc@, Text@, Fbld@<Text@>) { Fbld@<Text@>; }
Url = (Loc@ l, Text@ url, Fbld@<Text@> text) {
  Cat(l)[S(l)|'[', text, S(l)|'](', T(url), S(l)|')']; 
};

(Loc@, Text@, Fbld@<Text@>) { Fbld@<Text@>; }
File = Url;

(Loc@, Text@, Fbld@<Text@>) { Fbld@<Text@>; }
Fbld = (Loc@ l, Text@ file, Fbld@<Text@> text) {
  # TODO: Convert filename from *.fbld to *.md?
  Text@ fbld = file;
  File(l, fbld, text);
};

(Loc@, Fbld@<Text@>) { Fbld@<Text@>; }
Par = (Loc@ l, Fbld@<Text@> body) {
  Cat(l)[NL(l), body];
};

(Loc@, Fbld@<Text@>) { Fbld@<Text@>; }
Item = (Loc@ l, Fbld@<Text@> body) {
  Cat(l)[S(l)|'* ', body, NL(l)];
};

# Indent the given text by 4 spaces.
(String@) { String@; } Indent = (String@ text) {
  (Bool@, String@, String@) { String@; }
  indent = (Bool@ nl, String@ str, String@ rchrs) {
    str.?(nil: Reverse(rchrs));
    nl.?(true: indent(False, str, Append(Str|'    ', rchrs)));
    Char@ c = str.cons.head;
    indent(IsNewline(c), str.cons.tail, Cons(c, rchrs));
  };

  indent(True, text, Str|'');
};

(Loc@, Text@, Text@) { Fbld@<Text@>; }
Code = (Loc@ l, Text@ lang, Text@ text) {
  Cat(l)[NL(l), S(l)(Indent(StringOf(text)))];
};

(Loc@, Fbld@<Text@>, Fbld@<Text@>) { Fbld@<Text@>; }
Def = (Loc@ l, Fbld@<Text@> name, Fbld@<Text@> value) {
  Cat(l)[NL(l), S(l)|'* **', name, S(l)|'**: ', value, NL(l)];
};

(String@)(Loc@, Fbld@<Text@>, Fbld@<Text@>) { Fbld@<Text@>; }
Heading = (String@ hashes)(Loc@ l, Fbld@<Text@> title, Fbld@<Text@> body) {
  Cat(l)[NL(l), S(l)(hashes), title, NL(l), body];
};

(Loc@, Fbld@<Text@>, Fbld@<Text@>) { Fbld@<Text@>; }
Section = Heading|'## ';

(Loc@, Fbld@<Text@>, Fbld@<Text@>) { Fbld@<Text@>; }
SubSection = Heading|'### ';

(Loc@, Fbld@<Text@>, Fbld@<Text@>) { Fbld@<Text@>; }
SubSubSection = Heading|'#### ';

(Loc@, Fbld@<Text@>, Fbld@<Text@>) { Fbld@<Text@>; }
Doc = Heading|'# ';

Core@ Core = @(
  text: Text,
  l: L, a: A,
  label: Label, ref: Ref,
  url: Url, file: File, fbld: Fbld,
  par: Par,
  item: Item,
  code: Code,
  def: Def,
  definition: Def,
  section: Section,
  subsection: SubSection,
  subsubsection: SubSubSection,
  doc: Doc
);

@(Core);
