
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ Eq@ = /Core/Eq%.Eq@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Cons = /Core/List%.Cons;

# Eq --
#   Implementation of Eq@ for List@. See documentation of /Eq%.Eq@.
<@ T@>(Eq@<T@>) { Eq@<List@<T@>>; }
Eq = <@ T@>(Eq@<T@> eq, List@<T@> a, List@<T@> b) {
  a.?(nil: b.?(nil: True, : False));
  b.?(nil: False);
  eq(a.cons.head, b.cons.head).?(false: False);
  Eq(eq, a.cons.tail, b.cons.tail);
};

# Has --
#   Return true if the list contains an element satisfying the given property.
<@ T@>(List@<T@>, (T@) { Bool@; }) { Bool@; }
Has = <@ T@>(List@<T@> l, (T@) { Bool@; } p) {
  l.?(nil: False);
  p(l.cons.head).?(true: True);
  Has(l.cons.tail, p);
};

# Search --
#   Return the first element of the list satisfying the given property.
<@ T@>(List@<T@>, (T@) { Bool@; }) { Maybe@<T@>; }
Search = <@ T@>(List@<T@> l, (T@) { Bool@; } p) {
  l.?(nil: Nothing<T@>);
  p(l.cons.head).?(true: Just(l.cons.head));
  Search(l.cons.tail, p);
};

# Contains --
#   Return true if the list contains the given element, false otherwise.
<@ T@>(Eq@<T@>, List@<T@>, T@) { Bool@; }
Contains = <@ T@>(Eq@<T@> eq, List@<T@> l, T@ e) {
  l.?(nil: False);
  eq(l.cons.head, e).?(true: True);
  Contains(eq, l.cons.tail, e);
};

# Split --
#   Split a list into a list of lists, with boundaries determined by the given
#   predicate.
#
# Inputs:
#   T@ - The type of element on the list.
#   list - The list to split.
#   sep - Predicate specifying separate elements.
#
# Occurences of sep elements at the start and back of the list are removed.
# Sequences of sep elements are treated as a single separator.
#
# For example, Split('  hello  there now. ', IsSpace) would result in
#   ['hello', 'there', 'now.']
<@ T@>(List@<T@>, (T@) { Bool@; }) { List@<List@<T@>>; }
Split = <@ T@>(List@<T@> list, (T@) { Bool@; } sep) {
  list.?(nil: List<List@<T@>>[]);

  List@<List@<T@>> tail = Split(list.cons.tail, sep);
  sep(list.cons.head).?(true: tail);

  T@ head = list.cons.head;
  list.cons.tail.?(nil: List[List[head]]);
  sep(list.cons.tail.cons.head).?(true: Cons(List[head], tail));
  Cons(Cons(head, tail.cons.head), tail.cons.tail);
};

# RemoveFirst --
#   Removes the first element of the list matching the given predicate.
<@ T@>((T@) { Bool@; }, List@<T@>) { List@<T@>; }
RemoveFirst = <@ T@>((T@) { Bool@; } p, List@<T@> l) {
  l.?(nil: l);
  p(l.cons.head).?(true: l.cons.tail);
  Cons(l.cons.head, RemoveFirst(p, l.cons.tail));
};

# RemoveAll --
#   Removes all elements of the list matching the given predicate.
<@ T@>((T@) { Bool@; }, List@<T@>) { List@<T@>; }
RemoveAll = <@ T@>((T@) { Bool@; } p, List@<T@> l) {
  l.?(nil: l);
  List@<T@> tail = RemoveAll(p, l.cons.tail);
  p(l.cons.head).?(true: tail);
  Cons(l.cons.head, tail);
};

# StartsWith --
#   Return true if the list starts the given sequence, false otherwise.
<@ T@>(Eq@<T@>, List@<T@>, List@<T@>) { Bool@; }
StartsWith = <@ T@>(Eq@<T@> eq, List@<T@> haystack, List@<T@> needle) {
  needle.?(nil: True);
  haystack.?(nil: False);
  eq(haystack.cons.head, needle.cons.head).?(false: False);
  StartsWith(eq, haystack.cons.tail, needle.cons.tail);
};

@(Eq, Has, Search, Contains, Split, RemoveFirst, RemoveAll, StartsWith);
