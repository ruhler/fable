
@ Bool@ = /Core/Bool%.Bool@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<@>@ List@ = /Core/List%.List@;

% Internal = /Core/Stdio/Internal%;
@ _@ = Internal._@;

@ String@ = /Core/String%.String@;

# Stdio@ --
#   Interface for standard input and output operations.
<<@>@>@ Stdio@ = <<@>@ M@> { _@<Internal.Stdio@<M@>>; };

# Main@ --
#   Type of the main function for a stdio application.
#
# Inputs:
#   M@ - The abstract computation type.
#   m - A Monad@ interface M@.
#   stdio - A Stdio@ interface for M@.
#   args - The list of arguments to the application.
#
# Results:
#   True if the program ran successfully and should exit zero. False if the
#   program failed and should exit non-zero.
<<@>@>@ Main@ = <<@>@ M@>(Monad@<M@>, Stdio@<M@>)(List@<String@>) { M@<Bool@>; };

@(Stdio@, Main@);
