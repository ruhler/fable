
<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;

<@>@ Pure@ = /Core/Stdio/Pure%.Pure@;
% Monad = /Core/Stdio/Pure%.Monad;
% Stdio = /Core/Stdio/Pure%.Stdio;
<@>% Run = /Core/Stdio/Pure%.Run;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;

@ Seq@ = /Pprof/Seq%.Seq@;
% M = /Pprof/Seq%.Map;

<<@>@>% Parse = /Pprof/Perf%.Parse;

String@ Input = Str|'ls 1687358 464282.541169:          1 cycles:u: 
	            1140 _start+0x0 (/usr/lib/aarch64-linux-gnu/ld-2.31.so)

ls 1687358 464282.541189:          1 cycles:u: 
	            1140 _start+0x0 (/usr/lib/aarch64-linux-gnu/ld-2.31.so)

ls 1687358 464282.541198:          1 cycles:u: 
	            1140 _start+0x0 (/usr/lib/aarch64-linux-gnu/ld-2.31.so)

ls 1687358 464282.541231:         61 cycles:u: 
	            1140 _start+0x0 (/usr/lib/aarch64-linux-gnu/ld-2.31.so)

ls 1687358 464282.541283:       7603 cycles:u: 
	            1f94 _dl_start+0x300 (/usr/lib/aarch64-linux-gnu/ld-2.31.so)
	            1148 _start+0x8 (/usr/lib/aarch64-linux-gnu/ld-2.31.so)

ls 1687358 464282.543333:     290718 cycles:u: 
	            a140 _dl_lookup_symbol_x+0x3c (/usr/lib/aarch64-linux-gnu/ld-2.31.so)
	            be9c _dl_relocate_object+0x6cc (/usr/lib/aarch64-linux-gnu/ld-2.31.so)
	            4898 dl_main+0x2208 (/usr/lib/aarch64-linux-gnu/ld-2.31.so)
	           162a4 _dl_sysdep_start+0x364 (/usr/lib/aarch64-linux-gnu/ld-2.31.so)
	            1c5c _dl_start_final+0xac (/usr/lib/aarch64-linux-gnu/ld-2.31.so)
	            1ec8 _dl_start+0x234 (/usr/lib/aarch64-linux-gnu/ld-2.31.so)
	            1148 _start+0x8 (/usr/lib/aarch64-linux-gnu/ld-2.31.so)
';

@ Entry@ = *(Seq@ seq, Int@ count);

(List@<Entry@>) { M.Map@<Int@>; }
Inserts = (List@<Entry@> xs) {
  xs.?(nil: M.Empty<Int@>);
  M.Insert(Inserts(xs.cons.tail), xs.cons.head.seq, xs.cons.head.count);
};


M.Map@<Int@> Expected = Inserts[
  Entry@(List[Str|'_start'], Int|4),
  Entry@(List[Str|'_start', Str|'_dl_start'], Int|1),
  Entry@(List[
    Str|'_start', Str|'_dl_start', Str|'_dl_start_final',
    Str|'_dl_sysdep_start', Str|'dl_main', Str|'_dl_relocate_object',
    Str|'_dl_lookup_symbol_x'], Int|1)
];

(String@) { List@<Int@>; } Bytes = (String@ str) {
  /Core/List%.Map(str, /Core/Char/Ascii%.Ord);
};

Test@ Tests = TestSuite(Str|Perf, List[
  Test(Str|Parse, (Unit@ _) {
    List@<Int@> inputs = Bytes(Input);
    Maybe@<M.Map@<Int@>> wnt = Just(Expected);
    Maybe@<M.Map@<Int@>> got = Run(Parse<Pure@>(Monad, Stdio.in), inputs).x;
    AssertEquals(
      /Core/Maybe/Eq%.Eq(/Core/Map/Eq%.Eq(M, /Pprof/Seq%.Eq, /Core/Int/Eq%.Eq)),
      /Core/Maybe/Show%.Show(/Core/Map/Show%.Show(M, /Pprof/Seq%.Show, /Core/Int/Show%.Show)),
      wnt, got);
  })
]);

@(Tests);
