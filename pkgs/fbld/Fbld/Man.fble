
<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ OStream@ = /Core/Stream%.OStream@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Loc@ = /Fbld/Loc%.Loc@;
<@>% Err = /Fbld/Result%.Err;
@ StringL@ = /Fbld/StringL%.StringL@;

<@>% Ok = /Fbld/Result%.Ok;

<<@>@ M@>(Monad@<M@> m, OStream@<M@> out) {

  % ResultM = /Fbld/ResultM%<M@>;
  <@>@ MR@ = ResultM.MR@;
  Monad@<MR@> mr = ResultM.Monad(m);

  @ Core@ = /Fbld/Core%(m).Core@;

  % O = /Core/Stream/OStream%(m);

  (StringL@) { MR@<Unit@>; }
  Text = (StringL@ str) {
    Unit@ _ <- m.do(O.PutStr(out, str.str));
    mr.return(Unit);
  };

  (StringL@) { MR@<Unit@>; }
  L = (StringL@ str) {
    Unit@ _ <- m.do(O.PutStr(out, Str|'\fB'));
    Unit@ _ <- mr.do(Text(str));
    Unit@ _ <- m.do(O.PutStr(out, Str|'\fR'));
    mr.return(Unit);
  };

  (StringL@) { MR@<Unit@>; }
  A = (StringL@ str) {
    Unit@ _ <- m.do(O.PutStr(out, Str|'\fI'));
    Unit@ _ <- mr.do(Text(str));
    Unit@ _ <- m.do(O.PutStr(out, Str|'\fR'));
    mr.return(Unit);
  };

  (StringL@, MR@<Unit@>) { MR@<Unit@>; }
  Label = (StringL@ id, MR@<Unit@> text) {
    text;
  };

  (StringL@, MR@<Unit@>) { MR@<Unit@>; }
  Ref = (StringL@ id, MR@<Unit@> caption) {
    # TODO: Should we link somehow to the label?
    caption;
  };

  (StringL@, MR@<Unit@>) { MR@<Unit@>; }
  Url = (StringL@ url, MR@<Unit@> text) {
    # TODO: Can we do something better here?
    Unit@ _ <- mr.do(text);
    Unit@ _ <- m.do(O.PutStr(out, Str|'('));
    Unit@ _ <- mr.do(Text(url));
    Unit@ _ <- m.do(O.PutStr(out, Str|')'));
    mr.return(Unit);
  };

  (StringL@, MR@<Unit@>) { MR@<Unit@>; }
  File = (StringL@ file, MR@<Unit@> text) {
    # TODO: Can we do something better here?
    Url(file, text);
  };

  (StringL@, MR@<Unit@>) { MR@<Unit@>; }
  Fbld = (StringL@ file, MR@<Unit@> text) {
    # TODO: Can we do something better here?
    File(file, text);
  };

  (MR@<Unit@>) { MR@<Unit@>; }
  Par = (MR@<Unit@> body) {
    Unit@ _ <- m.do(O.PutLine(out, Str|'.P'));
    Unit@ _ <- mr.do(body);
    Unit@ _ <- m.do(O.PutLine(out, Str|''));
    mr.return(Unit);
  };

  (MR@<Unit@>) { MR@<Unit@>; }
  Item = (MR@<Unit@> body) {
    # TODO: Do something better here.
    Unit@ _ <- m.do(O.PutStr(out, Str|'.IP \[bu] 2'));
    body;
  };

  (StringL@, StringL@) { MR@<Unit@>; }
  Code = (StringL@ lang, StringL@ text) {
    Unit@ _ <- m.do(O.PutLine(out, Str|'.P'));
    Unit@ _ <- m.do(O.PutLine(out, Str|'.EX'));
    Unit@ _ <- mr.do(Text(text));
    Unit@ _ <- m.do(O.PutLine(out, Str|''));
    Unit@ _ <- m.do(O.PutLine(out, Str|'.EE'));
    m.return(Ok(Unit));
  };

  (MR@<Unit@>, MR@<Unit@>) { MR@<Unit@>; }
  Def = (MR@<Unit@> name, MR@<Unit@> value) {
    Unit@ _ <- m.do(O.PutLine(out, Str|'.TP 4'));
    Unit@ _ <- mr.do(name);
    Unit@ _ <- m.do(O.PutLine(out, Str|''));
    Unit@ _ <- mr.do(value);
    Unit@ _ <- m.do(O.PutLine(out, Str|''));
    mr.return(Unit);
  };

  (MR@<Unit@>, MR@<Unit@>) { MR@<Unit@>; }
  Definition = (MR@<Unit@> name, MR@<Unit@> value) {
    Unit@ _ <- m.do(O.PutLine(out, Str|'.P'));
    Unit@ _ <- mr.do(name);
    Unit@ _ <- m.do(O.PutLine(out, Str|''));
    Unit@ _ <- m.do(O.PutLine(out, Str|'.RS'));
    Unit@ _ <- mr.do(value);
    Unit@ _ <- m.do(O.PutLine(out, Str|'.RE'));
    mr.return(Unit);
  };

  (MR@<Unit@>, MR@<Unit@>) { MR@<Unit@>; }
  Section = (MR@<Unit@> title, MR@<Unit@> body) {
    Unit@ _ <- m.do(O.PutStr(out, Str|'.SH "'));
    Unit@ _ <- mr.do(title);
    Unit@ _ <- m.do(O.PutLine(out, Str|'"'));
    body;
  };

  (MR@<Unit@>, MR@<Unit@>) { MR@<Unit@>; }
  SubSection = (MR@<Unit@> title, MR@<Unit@> body) {
    Unit@ _ <- m.do(O.PutStr(out, Str|'.SS "'));
    Unit@ _ <- mr.do(title);
    Unit@ _ <- m.do(O.PutLine(out, Str|'"'));
    body;
  };

  (MR@<Unit@>, MR@<Unit@>) { MR@<Unit@>; }
  SubSubSection = (MR@<Unit@> title, MR@<Unit@> body) {
    # TODO: Do something better here?
    Definition(title, body);
  };

  (Loc@, MR@<Unit@>, MR@<Unit@>) { MR@<Unit@>; }
  Doc = (Loc@ loc, MR@<Unit@> title, MR@<Unit@> body) {
    String@ msg = Str|'@doc not supported by man backend. Use @man instead.';
    m.return(Err<Unit@>(StringL@(msg, loc)));
  };

  @ Man@ = (MR@<Unit@>, MR@<Unit@>, MR@<Unit@>, MR@<Unit@>) { MR@<Unit@>; };

  # @man[INLINE section][INLINE title][INLINE source][BLOCK body]
  # Top level entry point for a man page.
  # @param section  The section of the man page, e.g. 1 or 3.
  # @param title  The title of the document.
  # @param source The source of the document.
  # @param body  The contents of the document.
  Man@ Man = (MR@<Unit@> section, MR@<Unit@> title, MR@<Unit@> source, MR@<Unit@> body) {
    Unit@ _ <- m.do(O.PutStr(out, Str|'.TH "'));
    Unit@ _ <- mr.do(title);
    Unit@ _ <- m.do(O.PutStr(out, Str|'" '));
    Unit@ _ <- mr.do(section);
    Unit@ _ <- m.do(O.PutStr(out, Str|' "" "'));
    Unit@ _ <- mr.do(source);
    Unit@ _ <- m.do(O.PutLine(out, Str|'"'));
    body;
  };

  Core@ Core = @(
    text: Text,
    l: L, a: A,
    label: Label, ref: Ref,
    url: Url, file: File, fbld: Fbld,
    par: Par,
    item: Item,
    code: Code,
    def: Def,
    definition: Definition,
    section: Section,
    subsection: SubSection,
    subsubsection: SubSubSection,
    doc: Doc
  );

  @(Core, Man@, Man);
};
