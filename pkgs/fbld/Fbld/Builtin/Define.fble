
@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;
<@>% Reverse = /Core/List%.Reverse;
<@>% Length = /Core/List/Length%.Length;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Command@ = /Fbld/Command%.Command@;

<@>@ Fbld@ = /Fbld/Fbld%.Fbld@;
@ Invoke@ = /Fbld/Fbld%.Invoke@;
@ Env@ = /Fbld/Fbld%.Env@;
<@>% Do = /Fbld/Fbld%.Do;
<@>% Return = /Fbld/Fbld%.Return;
<@>% Error = /Fbld/Fbld%.Error;
% GetEnv = /Fbld/Fbld%.GetEnv;
<@>% WithEnv = /Fbld/Fbld%.WithEnv;

@ Markup@ = /Fbld/Markup%.Markup@;
% Entries = /Fbld/Markup%.Entries;
% Entry = /Fbld/Markup%.Entry;

% Run = /Fbld/Run%;

% MakeMap = /Fbld/Subst%.MakeMap;
% Subst = /Fbld/Subst%.Subst;

@ Text@ = /Fbld/Text%.Text@;
% StringOf = /Fbld/Text%.StringOf;
% LocOf = /Fbld/Text%.LocOf;

@ Args@ = *(String@ name, List@<String@> params, Text@ def, Text@ body);

(List@<Text@>) { Args@; } GetArgs = (List@<Text@> args) {
  (List@<Text@>, String@, List@<String@>) { Args@; }
  getargs = (List@<Text@> in, String@ name, List@<String@> rparams) {
    in.cons.tail.cons.tail.?(nil: {
      Args@(name, Reverse(rparams), in.cons.head, in.cons.tail.cons.head);
    });

    getargs(in.cons.tail, name, Cons(StringOf(in.cons.head), rparams));
  };

  String@ name = StringOf(args.cons.head);
  getargs(args.cons.tail, name, Nil<String@>);
};

(List@<String@>, Text@, Command@) { Fbld@<Text@>; }
Define = (List@<String@> argnames, Text@ def, Command@ command) {
  Int@ wnt_args = Length(argnames);
  Int@ got_args = Length(command.args);
  /Core/Int/Eq%.Eq(wnt_args, got_args ).?(false: {
    Error<Text@>(LocOf(command.name), Strs[
          Str|'expected ', /Core/Int/Show%.Show(wnt_args),
          Str|' args to @', StringOf(command.name),
          Str|', but got ', /Core/Int/Show%.Show(got_args)]);
    });

  Text@ subst = Subst(MakeMap(argnames, command.args), def);
  Return(subst);
};

(List@<String@>)(Text@) { Invoke@; }
Def = (List@<String@> argnames)(Text@ def) {
  (Command@ command) {
    Text@ text <- Do(Define(argnames, def, command));
    Run.Block(text);
  };
};

Markup@ Markup = Entries[
  # @define[name][param1][param2]...[paramN][def][body]
  #  Executes body as block structured text with a new command @name
  #  defined that performs substitution of params into def.
  Entry(Str|'define', (Command@ cmd) {
    Int@ num_args = Length(cmd.args);
    /Core/Int/Eq%.Lt(num_args, Int|3).?(true: {
      Error<Text@>(LocOf(cmd.name), Str|'expected at least three args');
    });

    Args@ args = GetArgs(cmd.args);
    Invoke@ invoke = Def(args.params)(args.def);
    Env@ env <- Do(GetEnv);
    Env@ nenv = (Command@ cmd) {
      /Core/String/Eq%.Eq(StringOf(cmd.name), args.name).?(
        true: invoke(cmd),
        false: env(cmd));
    };
    WithEnv(nenv, Run.Block(args.body));
  })
];

@(Markup);
