
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

% Chars = /Core/Char%.Chars;

@ Int@ = /Core/Int%.Int@;
% Decr = /Core/Int%.Decr;
% Sub = /Core/Int%.Sub;
% Le = /Core/Int/Eq%.Le;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Length = /Core/List/Length%.Length;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Seq@ = /Pprof/Seq%.Seq@;
% M = /Pprof/Seq%.Map;

<<@>@>% Parse = /Pprof/Perf%.Parse;

# Add n spaces to the left of the string.
(Int@, String@) { String@; }
Pad = (Int@ n, String@ str) {
  Le(n, Int|0).?(true: str);
  Pad(Decr(n), Cons(Chars.' ', str));
};

# Add spaces on the left to meet the target width.
(Int@, String@) { String@; }
MinWidth = (Int@ width, String@ str) {
  Pad(Sub(width, Length(str)), str);
};

Main@ Main = <<@>@ M@>(Stdio@<M@> stdio, Monad@<M@> m, List@<String@> _args) {
  % O = /Core/Stream/OStream%(m);

  Maybe@<M.Map@<Int@>> mparsed <- m.do(Parse(m, stdio.in));
  mparsed.?(nothing: m.return(False));

  Unit@ _ <- m.do(M.ForEach(mparsed.just, m.return(Unit),
      (Seq@ s, Int@ v, M@<Unit@> b) {
        Unit@ _ <- m.do(b);
        O.PutLine(stdio.out, Strs[
            MinWidth(Int|8, /Core/Int/Show%.Show(v)),
            Str|' ', /Pprof/Seq%.Show(s)]);
        }));

  m.return(True);
};

/Core/Stdio/IO%.Run(Main);
