De-RefValue
===========
Goal is to remove the need for calling StrictValue every time we access a
value. The primary motivation is to simplify access logic so we can easily
inline it into backends at the call sites. It will be nice to get a little
performance improvement from not having to do the check all the time as well.

It's not rocket science I don't think. A few approaches we could consider:
1. Have FbleAssignRefValue traverse the value, replacing any references to the
original ref value.
2. Any time we take a reference to a RefValue, add it to a list tracked by the
RefValue. In FbleAssignRefValue, traverse that list.
3. Use some crazy signal handler and memory protection to detect access to ref
values and replace them on the fly with their use.
4. Preallocate a large enough space for the allocated value and overwrite the
   contents of the RefValue on assignment.

Note that we need some way still to check for undefined values. Whatever
approach we use should ideally work with undef expressions and, if necessary,
stack unwinding.

Where ref values happen most often in practice is the definition of recursive
functions. Can I think of any other places? Certainly we could make up things
like infinite lists, but I think that's very rare in practice.

Which means, in the normal use case, we would only have to traverse the static
fields of a struct value to do the assignment. Approach (1) sounds like the
way to go. Don't worry about the rare pathological case. Sure someone can
create a really long circular list, and that would be expensive to traverse.
So what?

Sketch of proposal:
* Change RefValue to a new kind of packed value, with least significant bits
  10. The most significant bits are a unique id for the ref value.
* To assign: traverse the value and update references to the RefValue in
  place. GC should have enough info to avoid traversing previously allocated
  objects. We should only have to traverse new allocated objects.
* Check for RefValue in data access. If we see it, it's undefined. Throw an
  error.

I don't think we can get away without some kind of check during data access.
Not unless we want to do silly things with signal handlers. My proposal sounds
reasonable.

Concerns:
* Today we use ref value to know when to merge frames. We won't have that info
  anymore.
* Does anywhere in the code rely on there being ref values to detect cycles? I
  think it shouldn't, but I wouldn't be surprised if it did.

That means the first step is to remove use of ref value for deciding when to
merge frames. Either make something more explicit to detect recursive
functions, or find some other scheme.

I want to think a little bit about proposal (4). Could we pre-allocate
for the RefValue assignment and simply overwrite the RefValue on assignment? I
think not. It's possible we have no type information about the RefValue. For
example:

 <@ T@>((T@) { T@; } f) {
   T@ x = f(x);
   x;
 };

We need a RefValue for x in this case, but we have no idea what the type is.

Okay, let's continue on with proposal (1). First step: find an alternate to
RefValue for deciding on frame merges.

I probably want to have a more comprehensive benchmark suite when evaluating
this change. md5sum for sure, to cover the case of deep non-recursive
functions.

---

We are no longer using RefValue for deciding on frame merges.

Let's proceed with the update to RefValue. Here's how it will work:
* RefValue becomes packed {<id>, 'b10}
  We'll need some way to generate unique ids for RefValues. Needs thought.
* StrictValue turns all ref values to NULL (as a first step).
* FbleAssignRefValue does a traversal of value, replacing references to the
  ref value with the actual value. Check for vacuous value here still.

I think that's it. Even if we just do that, I'm hoping we'll see a noticeable
performance improvement.

How to assign ids for ref values? It should be a proper stack, right? I always
do assignment for the most recent ref value? Close. Double check the ordering
logic when we have multiple ref values defined in the same statement.

Assuming that's the case, we can have a single counter which keeps track of
the number of ref values allocated so far. Assert when we do a ref value
assignment it's of the top counter value, then decrement that top counter
value.

---

I need to change the API for ref values, because we need to do the
substitution in all values of a let. For example, if we have 3 recursively
defined variables, we have 3 ref values, we have 3 values to assign to, and we
have 3 values to traverse to do all 3 substitutions.

Proposal:
* void FbleNewRefValues(FbleValueHeap* heap, size_t n, FbleValue** dest);
  Allocates n new ref values, storing them continuously in dest.
* bool FbleAssignRefValues(FbleValueHeap* heap, size_t n, FbleValue** refs, FbleValue** values);
  Assigns n ref values at once. The ref values are stored continuously and the
  values to assign them to are stored continuously.

If we have this API, it's also easier to require ref values are assigned in
last in first out order, which is convenient for assigning unique ids to ref
values.

I can do the implementation in phases:
1. Switch to the new API.
2. Implement the traverse and replace on existing RefValue datatype.
3. Allocate and manage unique ids for ref values.
4. Pack ref values.

This idea of allocating continuous values in the compiler is new. I don't
think it's too hard, but something different. Let's review where and how we
use ref values today.

In let, we allocate n ref values in a row. Then we compute n definitions in a
row. Then we do n assignments in a row and call SetVar to update the
definitions.

Shouldn't be too hard? The most awkward part is having continuous allocations
for things. It means we may have to move memory around we otherwise wouldn't
need to. Is there a better way?

Struct value takes FbleVarV args. Let's do the same?

FbleNewRefValues can take an FbleLocalIndexV. It fills in each of the
individual indices. FBLE_REF_DEF can take FbleVarV and FbleLocalIndexV. That's
easy. That should be quite doable. Okay? Let's try that.

---

We don't need to change FbleNewRefValue to start. That's fine to split up.
We'll end up inlining that anyway. We just need to change FbleAssignRefValue
to do it all at once.

The annoying part is that we need to report vacuous value errors per
assignment. A vacuous value is currently defined as a variable being set to
itself.

For example:

a = b, b = a;

We can assign a = b. But then when we try b = a, we'll see it a vacuous. Do we
need location at the specific variable, or is the let in general okay? The
specific variable is probably important information.

Sigh. For now, let's include a list of locations with the instruction. Really,
I think best to have a vector of: loc, ref, value. Okay? First step is to get
the instruction updated. Second step is to change FbleAssignRefValue to
FbleAssignRefValues.

---

Next step is to try doing the traversal to update the ref values when we call
FbleAssignRefValues. Careful: we need to be able to handle traversal of
cycles.

I'm also slightly concerned about having to traverse a lot of objects when
defining recursive functions at the top level of complex modules, because you
might have to end up traversing everything defined in the module, in some
cases (exponentially?) repeatedly, which would be bad. But let's not worry
about this performance issue to start. Wait to see if it's a problem in
practice, or that I can force it to be a problem.

How to handle traversal of cycles? We need a way to mark if we have done a
traversal of the object or not. Some bit somewhere in the stack or GC
allocated object we can set during traversal? Or do we need to maintain a
separate data structure?

GcRealloc takes advantage of value->loc to tell if it has been traversed. We
don't have that luxury here.

In terms of info about an FbleValue:
* ValueTag - needs 3 bits for 5 different kinds of values.
* Header - 2 words: gc value and frame, or gc list and generation.
* AllocLoc - needs 1 bit for 2 different kinds of values.

Let's just add a bit saying if it's traversing or not. We can pack ValueTag,
AllocLoc, and this extra bit into a single word easily enough.

Can I use bitfields for these things? Should I not worry about that yet, worry
about it later? Let's worry about it later.

---

4 problems with the refvalue traversal code:
1. It doesn't handle vacuous values.
But this should be easy enough to fix. Use RefAssign to assign values in place
in their array. Then check that the assigned value isn't the same as the ref
value itself. Go one by one. That should let us check vacuous value.

2. If one of the values is a ref value that's being assigned, we'll fail to
update the value on the stack frame. I should add a test case for that and
figure out how to fix it. Maybe we need to pass pointers (to pointers) to the
original values instead of the values themselves.

3. Memory leak. I fear it may be because we violate some GC invariants saying
that an older dimension object will not point to a younger generation object.
Needs debug.

4. Infinite loop or slow performance on md5 and some other tests.
Needs debug to figure out if it's just slow due to some pathological case or
an infinite loop related to cycles. Don't work on this until the previous 3
issues are addressed, in case the fixes there fix this.

---

Idea on a simpler api:
  FbleValue* FbleRefValues(heap, n);
    Allocates a struct value with n fields, one for each ref value. To get to
    the individual ref values, call FbleStructValueAccess. The compiler will
    generate those calls for you.

  size_t FbleRefValuesAssign(heap, FbleValue* r, FbleValue* v);
    You give it the struct of ref values and the struct of assignments. It
    does everything all at once.

Slightly simpler this way because we can reuse struct value instruction to
pack together the values. It also lets us easily do the allocation in batch.

Anyway, let me save that idea for later. It won't change the fundamentals I
don't think.

---

How to deal with vacuous values? How to deal with updating the original
values? They are sort of related. Think about it conceptually.

We have N ref values.
We have N assignments to them.
Those assignments might themselves refer to the original N ref values, either
directly or indirectly.

I only care about the case of directly. If it goes through a func, struct, or
union constructor, we're fine.

Each value is either one of the N ref values, or its constant. We want to
propagate one at a time, right?

Going from i = 0, increasing. Maintain the invariant that for any values
before index i, we've removed all references to any ref values.

Or maybe we want to remove ref values one at a time?

How about, first step: remove right hand side references to ref value 0. If
the value for 0 is ref value 0, that's vacuous, return error. Otherwise we can
in place update any values pointing to ref value 0 to point to value 0. Easy.

Next, remove right hand side references to ref value 1. If the value for 1 is
ref value 1, that's vacuous, otherwise we can kick the can down the road.

Yeah, this seems like the right approach to use. Just at the top level. No
deeper traversal yet. Eliminate all right hand references to ref values. If
we can't, then it's vacuous.

What test case do we have that covers this, to help me zoom in on it?

spec/SpecTests/2.5-Let/Type/VacuousValue.fble.tr

Probably we want to add more advanced cases to test? Anyway, let's get this to
pass first.

Turns out it's pretty easy to implement. Cool.

---

Next issue to tackle, spec/SpecTests/2.5-Let/Regression/DeRefIssue.fble.

We have to write back our updates to the values when doing vacuous value
elimination. Here's what I'm thinking, based on the proposed new API above:

  r = FbleNewRefValues(heap, n);
  v0 = r.0
  v1 = r.1
  ...
  v = StructValue(<compute v0>, <compute v1>, ...)
  FbleRefValueAssigns(heap, r, v);
  v0 = v.0
  v1 = v.1
  ...

I think that should work. Basically we pass the modified values back through
the struct.

We should be able to accomplish the same thing without the API change, right?
The idea is, if we update a value, it must have been ref value initially,
which means it must have been allocated on the stack?

Why don't I just write back the values to the original ref locals? That way we
don't even need this SetVar thing in the compiler.

Cool. Let's try that.
  
---

We still net SetVar for the non-recursive let case. The backend code for
REF_DEF instruction is a little tedious. I had bugs in both c and aarch64
backend. Switching to an API where the compiler generates all the code to
bundle up ref values, result values, and do writebacks sounds like a good
plan.

---

Next step is to debug the memory leak.

Some things to look into:
* Do the failing tests to a single call to REF_DEF and the leak is elsewhere
  (presumably a result of having a cycle in the graph), or do they repeatedly
  do REF_DEFs and the leak is related to the REF_DEF implementation somehow?
* Review all the invariants on the garbage collector.
  Maybe we need to GcRealloc the values because GC values aren't allowed to
  point to stack allocated values?

It seems strange to me that I'm getting a memory leak rather than lingering
pointer access. I would have thought I fail to hold on to memory, not that I
hold on too much to the memory.

---

Looking at /spec/SpecTests/5.3-FuncApply/Eval/TailRecursionMemory.fble.

The function 'f' is the only recursive declaration. It happens once. This is
not a case of more than one ref value assignment. It seems to have something
to do with tail recursion. Somehow we are failing to clean up after compact
frame or some such?

  memory growth of 1048656 (1074230 -> 2122886)

Note: there is no allocation here at all. It's purely tail recursive. That
means we must be smashing the stack or some thing?

GC invariants:
* Unmarked objects are reachable if and only if they are reachable from a
  marked object. But we aren't reclaiming early, so I don't think that's a
  problem.

Hm... It's tricky. There are a bunch of subtle GC invariants. 
* Some objects are 'currently undergoing gc', others are not.

The behavior before was to assign to REF_VALUE's value field:
* Do we have any special handling for REF_VALUE in the GC code?
* Before I remember GcReallocing the value. Do we need that for some reason?

Here's one issue:
* If the value is stack allocated, the ref is GC allocated. If we try to
  GcAlloc the ref when returning, it ends up skipping GC realloc? But we
  shouldn't ever return the ref. After the assignment, there should be no more
  references to the ref.

Question:
* Do we need to do RefsAssign into a substituted value? Answer should be no,
  we've already ensured it doesn't contain any ref values.

There must be something to do with marking references, right?

So we have a reference value, which is the function. It has a static value
which points to itself. In this case, the function value is allocated on the
stack and is supposed to survive the entire time. But at some point it should
be moved to GcAllocated when we compact the frame, right?

So, here's my hypothesis: every time we call compact frame, we end up
re-GcAllocating the function. Because we didn't GcAlloc the value in the first
place, so the function passed in the recursion always points to the original
value of that function on the stack?

Okay, so claim is, I just need to GcRealloc the values before doing any
substitution on them. Let's try that?

Didn't work. Maybe I should figure out what's really going on first.

But I'm sure it's a problem if we don't GcRealloc. So let me put that in
place, see if it changes behavior anywhere else.

For example, we could end up with:
  Assign(r1, sa1 -> ga1 -> r1)

After substitution:
   sa1 -> ga1 -> sa1

If we gc realloc that, we end up with:
   ga_sa1 -> ga1 -> sa1

Notice ga1 still points to the stack allocated sa1, which is wrong. That could
get clobbered.

Uh... it would be good for me to write a test case for this. But it will be
difficult, because I don't have easy control over when things get GC versus
stack allocated?

Doesn't look like that magically fixed anything. Oh well. I can probably get
rid of it when I make ref value no longer be a gc allocated value? Maybe not.
We could always end up with a gc allocated value pointing to the ref value,
and end up trying to substitute in a stack allocated value.

---

Can I simplify? Write a trivially infinite tail recursive function and see if
that grows the heap? Seems like a good next thing to try. Minimize the
problem.

---

Update on "4. Infinite loop or slow performance on md5 and some other tests."

Looks like it's just md5 taking a long time to run. It finishes after 112
minutes if you wait long enough.

Let's get back to that memory leak first.

Try minimizing the test case. Careful not to run my computer out of memory. Is
there a way to run a program with a memory quota?

Internet suggests:

  systemd-run --scope -p MemoryMax=500M --user <command>

Let's try that.

Pure tail recursion does not appear to leak memory.

We are definitely allocating new stack chunks, which means we are filling up
frames somehow. With what?

Let's get rid of the frame memory limit and always use push/pop.
* We still leak, as expected.

I should be able to understand what's going on here, right? Can we log pushes
and pops and compacts somehow?

Found it. Silly bug. I got rid of use of ref value for merging in PushFrame,
but forgot to do the same for CompactFrame merging. So we were merging all
frame compactions.

Cool. Let's clean this up.

First: removing all merging from CompactFrame, because the naive merging
doesn't seem to work. Let me work out how to merge after, and see what the
performance impact is.

---

Maybe I should disable merging entirely for the time being. Just to have one
less thing to worry about.

Because now all the spec tests pass, but we are getting errors related to
undefined access on real programs and md5 is still running slow.

Seems like the errors related to undefined access must be from a function
that's allocated on the stack that we don't manage to re-allocate properly
to GC?

---

Debugging with this:

./pkgs/core/fble-stdio -I ../pkgs/games -I ../pkgs/app -I ../pkgs/core -m /Games/Tests%

The ForDepth function refers to itself from s0. We've failed to turn that s0
from the ref value into the pointer to the real value. Seems like a ref value
traversal bug.

Note that we have two separate layers here, in case that matters. At first:

l1 = ref
l2 = func ... [statics[14] = l1]
l1 ~= l2

It's when we call that func later on (right?) that it instantiates another
func with statics[0] = s14. In the debugger, it's that statics[0] I see as a
ref value.

I suspect this will be easiest if I compile to C code, so I can easily set a
breakpoint on RefValue assign code in question and step through to see what's
happening.

---

What's happening is the function after GcRealloc is getting gc generation
4023, but the current gc generation is 4024? What?

gen is 4024, min_gen is 4024, max_gen is 4088.

Why did I GcRealloc to 4023?

Stepping through again:
* min_gen = 2313, gen = 4023, max_gen = 4151, gc.gen is 4024
* We do an incremental gc as part of GcRealloc.
  We are marking an object of gen 4025. It's moving to 4024.
  gc was interrupted during the previous pop frame or compact.
* We assign new generation of value as 4023.

Now, gc is at 4024, but we allocated the value to 4023, the frame generation.
And I'm comparing against 4024. That sounds wrong.

Okay, what do I want to compare against?
  heap->top->gen, not gc->gen. I think that's what I had intended originally
  anyway.

I should be able to write a spec test case for this. Let's see how the fix
looks first though?

The spec test might be tricky actually. We need gc to have been interrupted,
which means allocating a lot on a stack somewhere and then popping back while
gc is working at that level of the stack?

Anyway, that fixed the issue. Let's run tests. Maybe that was the last bug?

Looks like it fixed the md5 performance issue. But there are still two failing
tests:
* memory growth in spec/SpecTests/5.3-FuncApply/Regression/MemoryLeak2.fble.tr
* @[Fbld.Builtin.Define]: fbld-tests: ../lib/value.c:1478: FbleUnionValueTag:
  Assertion `object->tag == UNION_VALUE' failed.

I recall Fbld/Builtin/Define being a complicated case of recursive def.
Probably it's revealing a new bug. The memory leak test is so small, I wonder
if it's just noise?

---

Debugging the fbld test assert failure:
* The object in question is a GC-allocated struct value.
* It's the first argument passed to _2f_Fbld_2f_Markup_25__2e_Append_21__001b,
  we're getting a two bit tag. It's a Markup@ object.
* It's called from /Fbld/Parse/Block%.!!.:!.true!! [0072]

Backtrace:
* _2f_Fbld_2f_Markup_25__2e_Append_21__001b
* _2f_Fbld_2f_Parse_2f_Block_25__2e_Block_21__21__2e__3a__21__2e_true_21__21__0072 
* _2f_Fbld_2f_Parse_2f_M_25__2e_Run_21__0049 
* _2f_Fbld_2f_Builtin_2f_Tests_25__2e_Run_21__0017 
* _2f_Fbld_2f_Builtin_2f_Tests_25__2e_Tests_21__001c 
* _2f_Core_2f_Test_2f_Run_25__21__2e_RunTests_21__2e_Run
* _2f_Core_2f_Monad_2f_State_25__2e_Monad_21__0008 
* _2f_Core_2f_Monad_2f_State_25__2e_Monad_21__0008 
* ...

Let me try to minimize the test case. See if that helps.

Minimizing doesn't help much. This does hit the code where we have a pretty
big recursive definition:

  Impl@ impl = (Env@ e, Command@ c) {
    Unit@ _ <- r.do(AssertArgCount(Length(params), c));

    List@<Markup@> args <- r.do(Evals(e, c.args));
    Eval(DefArgs(nenv, params, args), prepped);
  },
  Env@ nenv = Insert(env, name, impl),
  Markup@ prepped = PreLookup(DelArgs(Insert(env, name, impl), params), def);

It has to be a case of gc collecting the union value markup

Interesting. It doesn't need to involve that code at all in the test case.
Don't get distracted by that.

Anyway, must be a case of gc collecting the union value markup object, then
reallocating a new struct value there. Which means gc is freeing something it
shouldn't, which means some invariant of gc is being violated, probably
related to the gc traversal invariant. That is, we aren't marking something we
should be, because the generation is wrong.

I bet that's it. Imagine we already marked some object, then we do a ref
assignment to it. How will we ever go back to remember we need to mark that
ref assignment?

Maybe we need a test to be able to interrupt GC if we do ref assign of the gen
while doing gc of that gen, like how we do for pop frame and compact frame?

---

Thoughts:
* Try to minimize the test case even more.
* Understand where the object in question is originally allocated and how it
  is at all related to ref values.
* I don't think there is any issue with pop-frame here or other interruption.
  We aren't modifying any gc data structures and you can allocate new objects
  during GC no problem, right?
* Double check it's okay to call GcRealloc when you aren't about to
  compact/pop frame.
* I feel like there should be a bug if we traverse whoever holds the ref value
  before we traverse the referent, then do the assignment, then never see any
  other references to the referent. But if that's the case, that would have
  been an existing bug, right?

Minimal test case is parsing the following:

  @define[foo][a b] a: @a @@
  @foo[hello][there]

I should be able to step through that pretty easily.

Reminder of stack trace:
* _2f_Fbld_2f_Markup_25__2e_Append_21__001b
* _2f_Fbld_2f_Parse_2f_Block_25__2e_Block_21__21__2e__3a__21__2e_true_21__21__0072 
* _2f_Fbld_2f_Parse_2f_M_25__2e_Run_21__0049 

Which corresponds to the append here:

  # Block Command
  Bool@ cmd <- Do(Try_(String|'@'));
  cmd.?(true: {
    Markup@ command <- Do(Command);
    Markup@ tail <- Do(Block);
    Return(Append(command, tail));
  });

Let me step through aarch64, so I can see what command starts as and then what
it dies as. Or try to anyway.

  command = 0x5555691e18
(gdb) print *(FbleValue*)command
$1 = {h = {gc = {list = {next = 0x5555690e08, prev = 0x5555685fa8},
      gen = 3987}, stack = {gc = 0x5555690e08, frame = 0x5555685fa8}},
  tag = UNION_VALUE, loc = GC_ALLOC, traversing = false}

Looks good at this point.

On the next line:

(gdb) print *(FbleValue*)command
$2 = {h = {gc = {list = {next = 0x5555685fa8, prev = 0x5555685ee8},
      gen = 3992}, stack = {gc = 0x5555685fa8, frame = 0x5555685ee8}},
  tag = UNION_VALUE, loc = GC_ALLOC, traversing = false}

Odd that the header changed. I'm hoping it's still the same good value?

(gdb) print *(FbleValue*)a
$3 = {h = {gc = {list = {next = 0x5555685fa8, prev = 0x5555685ee8},
      gen = 3992}, stack = {gc = 0x5555685fa8, frame = 0x5555685ee8}},
  tag = UNION_VALUE, loc = GC_ALLOC, traversing = false}

Oh. That wasn't the one that broke. Let me find the one that breaks. It's the
second one.

Original value for 'command':

 (gdb) print *(FbleValue*)command
$5 = {h = {gc = {list = {next = 0x5555689a38, prev = 0x5555681ed8},
      gen = 4016}, stack = {gc = 0x5555689a38, frame = 0x5555681ed8}},
  tag = UNION_VALUE, loc = GC_ALLOC, traversing = false}

Corrupted value for 'command':

(gdb) print *(FbleValue*)command
$6 = {h = {gc = {list = {next = 0x555568f958, prev = 0x555568fd18},
      gen = 4035}, stack = {gc = 0x555568f958, frame = 0x555568fd18}},
  tag = STRUCT_VALUE, loc = GC_ALLOC, traversing = false}

Note that at no point during the lifetime of this command object do we
allocate or assign to a ref value. This could be an unrelated GC bug that we
happen to expose, probably related to getting rid of stack merging?

I should be able to track where the object is freed.

It's a call to PopFrame.

print value
$11 = (FbleValue *) 0x5555683448
print *value
$9 = {h = {gc = {list = {next = 0x5555683448, prev = 0x5555683448},
      gen = 4016}, stack = {gc = 0x5555683448, frame = 0x5555683448}},
  tag = UNION_VALUE, loc = GC_ALLOC, traversing = false}

(gdb) print *gc
$10 = {gen = 4034, min_gen = 4033, max_gen = 4035, frame = 0x7ff7d4a370,
  next = 0x7ff7d4a370, marked = {next = 0x5555690478, prev = 0x5555690478},
  unmarked = {next = 0x5555690428, prev = 0x555568f958}, interrupted = true,
  save = {size = 6, xs = 0x55556973e8}, free = {next = 0x5555689a38,
    prev = 0x5555685f48}}

(gdb) print *frame
$12 = {caller = 0x7ff7d4a370, merges = 0, min_gen = 4032, gen = 4032,
  max_gen = 4033, unmarked = {next = 0x7ff7d4a408, prev = 0x7ff7d4a408},
  marked = {next = 0x7ff7d4a418, prev = 0x7ff7d4a418}, alloced = {
    next = 0x7ff7d4a428, prev = 0x7ff7d4a428}, top = 549618754696,
  max = 549619789848, chunks = 0x0}

Unfortunately this means we decided the object was free earlier, and only now
are we getting around to freeing it.

My proposal:
* Modify gc to free all objects immediately.
* Use gdb to track down the state of GC when the object in question was freed.
* See if the object ought to have been reachable at that point.

---

Interesting. If I free objects right away, I get a slightly different error.
Maybe that's expected because it changes the reallocation order. Let's see
where we are failing now.

* /Fbld/Text/Eq%.Eq! () ../pkgs/fbld/Fbld/Text/Eq.fble:9
* /Fbld/Markup/Eq%.Command! ()
* /Core/Eq/Assert%.AssertEquals! ()

Now we are failing in the equality check. Hmm... That sounds like a completely
different failure maybe?

Let me run spec tests with this change. Maybe there's already a smaller test
that I can use to debug. No, it's till just the memory leak.

Text@ value, expected to be a struct, but seen as a union:

$2 = (FbleValue *) 0x55556900d8
$1 = {h = {gc = {list = {next = 0x555568b0e8, prev = 0x5555698208},
      gen = 4038}, stack = {gc = 0x555568b0e8, frame = 0x5555698208}},
  tag = UNION_VALUE, loc = GC_ALLOC, traversing = false}

Let's step through the code, to see how we got there. Looks tricky.

Instead, let's try not actually freeing objects, but scribbling over them and
keeping them alive. Then it should be obvious the first thing we do wrong,
right?

Yeah. It's very clear now we have a use after free, which means we have a gc
bug where it's freeing something reachable. How do I figure out what? How do I
stop at the point where the free happens? Can valgrind help us here somehow,
to track the use after free?

Okay, good. Scribbling after free shows us the same location for the error as
originally.

$9 = (struct FbleValue *) 0x5555766fe8
$10 = {h = {gc = {list = {next = 0x55557448f8, prev = 0x55557671e8},
      gen = 3987}, stack = {gc = 0x55557448f8, frame = 0x55557671e8}},
  tag = UNION_VALUE, loc = GC_ALLOC, traversing = false}

We see that gets clobbered. I have a clear point when the object is supposed
to be live. I can step through GC to see when it gets reclaimed. I can try to
understand at that point where the object is reachable from and why it wasn't
considered reachable.

Though honestly this should be easy. The object is supposed to be reachable
because it is on the stack? Well, not exactly. There maybe some tail calls in
between.

---

Something looks wrong here. We are doing a tail call, we've just compacted the
frame. The command is one of the arguments to the call. Notice how the
generation of the command object is equal to max_gen of the heap. That
looks wrong, doesn't it?

command: 
$24 = {h = {gc = {list = {next = 0x555570ea48, prev = 0x555576cfa8},
      gen = 4016}, stack = {gc = 0x555570ea48, frame = 0x555576cfa8}},
  tag = UNION_VALUE, loc = GC_ALLOC, traversing = false}

heap->top:
$20 = {caller = 0x7ff7d49e00, merges = 0, min_gen = 1193, gen = 4015,
  max_gen = 4016, unmarked = {next = 0x555570e9e8, prev = 0x555576c808},
  marked = {next = 0x555576cfa8, prev = 0x555570ea48}, alloced = {
    next = 0x7ff7d4a0c8, prev = 0x7ff7d4a0c8}, top = 549618753776,
  max = 549619789848, chunks = 0x0}

I have to remember the invariant, is it that max_gen is the greatest
generation of a frame? If so, I would expect that when we pop a frame, we have
to update max_gen for the caller, because it is getting objects back from
max_gen. No?

* When we allocate a value, we allocate it to frame->gen.
* I assume frame->max_gen is always greater than frame->gen.
* Aha. I see, heap->top->max_gen = top->max_gen when we pop a frame.
  But why is it that conditioned on the return value of the object? Just to
  save some gen id? Because what if what we are returning is a gc allocated
  object that has a reference to ...

Aha. I think this could be it.

PopFrame assumes the top level value you return has the greatest gen of all
returned values. Seems like that's wrong. And seems like RefValues could have
something to do with it: if we return the ref value instead of the value, the
ref value ...?

I'm not sure. Seems like a bug regardless though. What do you think?

  if (IsAlloced(value) && value->h.gc.gen >= top->min_gen) {
    heap->top->max_gen = top->max_gen;
    MoveTo(&heap->top->marked, value);
  }

Should instead be:

  heap->top->max_gen = top->max_gen;
  if (IsAlloced(value) && value->h.gc.gen >= top->min_gen) {
    MoveTo(&heap->top->marked, value);
  }

Maybe?

Or does max_gen really mean something about gc? Like, it's fine to have values
allocated with gen greater than max_gen, we just ... what? Won't traverse
them?

No. We clearly assume max_gen means what it suggests: no objects have
generation equal (?) or greater than this on the heap. This looks like a gc
bug to me: assuming an object doesn't point to another object with greater
generation after calling PopFrame?

Actually wait, it looks okay. The condition is to see if we are allocating
some new value. That looks okay, right?

---

Summary of GC theory, as constructed from my mind:

We have a stack of frames. We assign GC generations to objects on frames.
Looking at a particular frame on the stack, we have:

* obj.gen < frame.min_gen
  The object is owned by a calling frame.
* obj.gen in [frame.min_gen, frame.gen)
  The object was owned by this frame before compaction. It is reachable only
  if it is reachable from an objected in the 'marked' list of this frame
  through a path of objects not owned by a calling frame.
* obj.gen = frame.gen
  The object is owned by this frame and is on the 'alloced' list.
* obj.gen in (frame.gen, frame.max_gen]
  The object was allocated in a callee. It is reachable only if it is
  reachable from an object in the 'marked' list of this frame through a path
  of objects not owned by a calling frame.
* obj.gen > frame.max_gen
  Allocated in a callee frame, either from a previous call or a currently
  running call. Must not be reachable from this frame. For the purposes of
  allocating a gen that no reachable object on this frame has, so we can know
  if we have marked the object as part of the current gc or not.

Initial state:
  frame.min_gen = 0, frame.gen = 0, frame.max_gen = 0

GC Alloc:
  Allocate to object to frame.gen.

Push Frame:
  callee.min_gen = caller.max_gen + 1
  callee.gen = callee.min_gen
  callee.max_gen = callee.gen

Pop Frame:
  Move all callee alloced, marked to caller unmarked.
  Mark the return value.
  caller.max_gen = callee.max_gen

Compact Frame:
  Move all alloced, marked to unmarked.
  Mark the save values.
  frame.gen = frame.max_gen + 1

GC:
  while there is a marked object X:
    set X.gen to frame.gen
    for any reference from X with gen >= frame.min_gen and gen != frame.gen,
    move that object to 'marked'.
  free all unmarked objects.

Main concern is: how to avoid running out of generations? Can we reclaim them
at all?

Can we assume that we do GC on frames in order from caller to callee, and take
advantage of that to reclaim generation ids? For example, after GC runs in a
frame, or when we start gc, or something, we can reset max_gen to gen? It's
definately worth thinking about.


This is slightly different from the current implementation I think. I'll try
to reconcile that next.

Current implementation differences:
* Interrupted GC: GC is in charge of 'returning' objects to caller when done.
  Which maybe messes up this idea of 'gc happens in caller before callee'?
* max_gen is exclusive, not inclusive. Maybe better called 'next_gen'?
* Possible bug in ref assign traversal gc.gen filter? Double check that.
* Need to track gc.max_gen for interrupted gcs to know if an object belongs to
  the current gc or not. Possibly bugs around that to think about.

Let's move this discussion to gc.txt.

---

So it turns out it was a pre-existing GC bug that now should be fixed. Nothing
wrong with the deref value approach. I don't see a feasible way to catch this
as part of a spec test. Hopefully that assertions I added to GC will help
catch in the future.

What's next for deref value?
* Debug that still failing memory leak test.
* Change API again so that REF_VALUE returns a struct and REF_DEF takes two
  structs.
  So that the invariants live in the compiler instead of the backends.
* Pack the ref values into values.
  ID allocation should be easy with the above API change.
