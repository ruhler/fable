
@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Length = /Core/List/Length%.Length;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

@ String@ = /Core/String%.String@;
% Strs = /Core/String%.Strs;
% Str = /Core/String%.Str;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Markup@ = /Fbld/Markup%.Markup@;
@ Command@ = /Fbld/Markup%.Command@;
% Append = /Fbld/Markup%.Append;

% Text = /Fbld/Text%.Text;

<@>@ Result@ = /Fbld/Result%.Result@;
<@>% Err = /Fbld/Result%.Err;
% r = /Fbld/Result%.Monad;

@ Impl@ = (Env@, Command@) { Result@<Markup@>; },
@ Env@ = /Core/Map%.Map@<String@, Impl@>;

% EmptyEnv = /Core/Map%.Empty<String@, Impl@>;
% InsertEnv = /Core/Map%.Insert<String@>(/Core/String/Ord%.Ord)<Impl@>;
% LookupEnv = /Core/Map%.Lookup<String@>(/Core/String/Ord%.Ord)<Impl@>;

(Env@, Markup@) { Result@<Markup@>; }
Eval = (Env@ env, Markup@ markup) {
  markup.?(
    empty: r.return(markup),
    plain: r.return(markup),
    command: {
      Command@ cmd = markup.command;
      Maybe@<Impl@> impl = LookupEnv(env, cmd.name.text);
      impl.?(nothing: r.return(Markup@(command: cmd)));
      impl.just(env, cmd);
    },
    sequence: {
      Markup@ a <- r.do(Eval(env, markup.sequence.a));
      Markup@ b <- r.do(Eval(env, markup.sequence.b));
      r.return(Append(a, b));
    });
};

(Env@, List@<Markup@>) { Result@<List@<Markup@>>; }
Evals = (Env@ env, List@<Markup@> markups) {
  markups.?(nil: r.return(markups));
  Markup@ head <- r.do(Eval(env, markups.cons.head));
  List@<Markup@> tail <- r.do(Evals(env, markups.cons.tail));
  r.return(Cons(head, tail));
};

# Helper function to assert that a command has been provided with the given
# number of arguments.
(Int@, Command@) { Result@<Unit@>; }
AssertArgCount = (Int@ expected, Command@ cmd) {
  Int@ num_args = Length(cmd.args);
  /Core/Int/Eq%.Eq(num_args, expected).?(false: {
    Err<Unit@>(Text(cmd.name.loc, Strs[
      Str|'Expected ', /Core/Int/Show%.Show(expected),
      Str|' arguments to ', cmd.name.text,
      Str|', but found ', /Core/Int/Show%.Show(num_args)]));
  });
  r.return(Unit);
}; 


@(Impl@, Env@,
  EmptyEnv, LookupEnv, InsertEnv,
  Eval, Evals,
  AssertArgCount);
