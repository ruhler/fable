
<@>% List = /Core/List%.List;

% Neg = /Pinball/Num%.Neg;
% Int = /Pinball/Num%.Int;
% Rotate = /Pinball/Rotate%.Rotate;
@ Vec@ = /Pinball/Vec%.Vec@;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;

Test@ Tests = TestSuite(Str|'Rotate', List<Test@>[
  Test(Str|'Unrotated Q1', (Unit@ _) {
    # Rotation a vector by an angle of 0 should not change the vector.
    Vec@ v = Vec@(Int|2, Int|3);
    Vec@ want = v;
    Vec@ got = Rotate(v, Int|0);
    AssertEquals(/Pinball/Vec%.Eq, /Pinball/Vec%.Show, want, got);
  }),

  Test(Str|'Unrotated Q2', (Unit@ _) {
    # Rotation a vector by an angle of 0 should not change the vector.
    Vec@ v = Vec@(Neg(Int|2), Int|3);
    Vec@ want = v;
    Vec@ got = Rotate(v, Int|0);
    AssertEquals(/Pinball/Vec%.Eq, /Pinball/Vec%.Show, want, got);
  }),

  Test(Str|'Unrotated Q3', (Unit@ _) {
    # Rotation a vector by an angle of 0 should not change the vector.
    Vec@ v = Vec@(Neg(Int|2), Neg(Int|3));
    Vec@ want = v;
    Vec@ got = Rotate(v, Int|0);
    AssertEquals(/Pinball/Vec%.Eq, /Pinball/Vec%.Show, want, got);
  }),

  Test(Str|'Unrotated Q4', (Unit@ _) {
    # Rotation a vector by an angle of 0 should not change the vector.
    Vec@ v = Vec@(Int|2, Neg(Int|3));
    Vec@ want = v;
    Vec@ got = Rotate(v, Int|0);
    AssertEquals(/Pinball/Vec%.Eq, /Pinball/Vec%.Show, want, got);
  })
]);

@(Tests);
