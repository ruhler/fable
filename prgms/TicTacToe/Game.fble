
{ Bool%; @(Bool@, True, False); };
{ Maybe%; @(Maybe@); };
{ Process%; @(Get@, Put@); };
{ Unit%; @(Unit@, Unit); };

{ AI%; @(AI@, WithAI); };
{ Board%; @(Board@, Position@, Player@, BoardStatus, EmptyBoard, Move); };

@ GameStatus@ = +(Player@ Move, Player@ Win, Unit@ Draw); 
@ Output@ = *(Board@ board, GameStatus@ status);

# position: Make a move at the given position for the current player.
# computer: Have the computer make a move for the current player.
# reset: Reset the game.
@ Input@ = +(Position@ position, Unit@ computer, Unit@ reset, Unit@ quit);

(Input@!, Put@<Output@>, AI@){Unit@!;}
NewGameAI = (Input@! input, Put@<Output@> output, AI@ ai) {
  PlayGame(input, output, ai, EmptyBoard, Player@(X: Unit));
},
(Input@!, Put@<Output@>, AI@, Board@, Player@){Unit@!;}
PlayGame = (Input@! input, Put@<Output@> output, AI@ ai, Board@ board, Player@ x) {
  GameStatus@ status := $(?(BoardStatus(board);
                          X: GameStatus@(Win: Player@(X: Unit)),
                          O: GameStatus@(Win: Player@(O: Unit)),
                          D: GameStatus@(Draw: Unit),
                          E: GameStatus@(Move: x)));
  Unit@ _ := output(Output@(board, status));
  Input@ in := input;
  Bool@ over = ?(status; Move: False, Win: True, Draw: True);
  ?(in;
     position: {
       ?(over; true: PlayGame(input, output, ai, board, x),
          false: {
            Maybe@<Board@> nboard := $(Move(board, in.position, x));
            ?(nboard ;
                just: PlayGame(input, output, ai, nboard.just, ?(x; X: Player@(O: Unit), O: Player@(X: Unit))),
                nothing: PlayGame(input, output, ai, board, x));
       });
     },
     computer: {
       ?(over; true: PlayGame(input, output, ai, board, x),
          false: {
            Position@ position := ai(board, x);
            Maybe@<Board@> nboard := $(Move(board, position, x));
            ?(nboard ;
                just: PlayGame(input, output, ai, nboard.just, ?(x; X: Player@(O: Unit), O: Player@(X: Unit))),
                nothing: PlayGame(input, output, ai, board, x));
        });
     },
     reset: NewGameAI(input, output, ai),
     quit: $(Unit));
};

(Get@<Input@>, Put@<Output@>){Unit@!;} TicTacToe = (Get@<Input@> input, Put@<Output@> output) {
  AI@ ai <- WithAI<Unit@>;
  NewGameAI(input, output, ai);
};

@(GameStatus@, Input@, Output@, TicTacToe);
