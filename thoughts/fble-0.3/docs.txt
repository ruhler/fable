Fble 0.3 Miscellaneous Docs Topics
==================================

Be able to write doc comments for extern values and types as well as
functions?

Let's find some concrete examples.

Extern: fble-value.h FbleGenericTypeValue.

/**
 * FbleValue instance for types.
 *
 * Used as an instance of an fble type for those types that don't need any
 * extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

What do we want to turn it into?

There are 4 pieces of information:
* name
* brief
* type
* description

Call it @value.

The only real question is how we want to pass the type. Probably as an
argument, but that might make brief slightly annoying. For example:

/**
 * @value[FbleGenericTypeValue][FbleValue*] FbleValue instance for types.
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

/**
 * @value[FbleGenericTypeValue] FbleValue instance for types.
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 *  
 *  @type FbleValue*
 */
extern FbleValue* FbleGenericTypeValue;

/**
 * @value[FbleValue*][FbleGenericTypeValue] FbleValue instance for types.
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

/**
 * @value[FbleGenericTypeValue] FbleValue instance for types.
 * @[FbleValue*]
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

Honestly, I think @value[type][name][brief][description] makes sense. Except
that doesn't work as well with dcget.

Otherwise, @value[name][brief][description], where description contains @type
tag is okay I guess. Consistent with function. Except what does it mean of
@type isn't provided? Dunno. Anyway, let's give that a try to start.

We want to generate a man page and run dc check. Should be straight forward.

Can we require @type in dc check? That would be nice. We can probably do that.

---

Next step: types. Probably @struct to start.

For example:

/**
 * Source file location.
 *
 * Pass by value. Explicit copy and free required.
 */
typedef struct {
  /**
   * Source file name. Or other description of the source of the program text.
   * Owned by this FbleLoc.
   */
  FbleString* source;

  /**
   * The line number.
   */
  size_t line;

  /**
   * The column number.
   */
  size_t col;
} FbleLoc;

This is just like function, except no return value and rename @arg to @field,
right?

/**
 * @struct[FbleLoc] Source file location.
 *  Pass by value. Explicit copy and free required.
 * 
 *  @field[FbleString*][source]
 *   Source file name or other description of the source of the program text.
 *   Owned by this FbleLoc.
 *  @field[size_t][line] The line number.
 *  @field[size_t][col] The column number.
 */
typedef struct {
  FbleString* source;
  size_t line;
  size_t col;
} FbleLoc;

Great. That should be easily doable, right?

---

List of files to go through for @struct conversion.

lib/aarch64.c     DONE
lib/code.h        DONE
lib/compile.c     DONE
lib/expr.h        DONE
lib/heap.c        DONE
lib/kind.h        DONE
lib/load.c        DONE
lib/parse.y       DONE
lib/profile.c     DONE
lib/tag.h         DONE
lib/tc.h          DONE
lib/type.c        DONE
lib/typecheck.c   DONE
lib/type.h        DONE
lib/unused.c      DONE
lib/value.c       DONE
lib/var.h         DONE
pkgs/app/app.c    DONE

---

I'm going to punt some doc comment stuff to the next release. We made good
incremental progress by adding @struct. I want to let it sit and see how I
feel about having the documentation before the struct instead of inline with
it, because it feels a little more silly for the @enum use case.

---

* Figure out how to get rid of extra space before '}' in man page struct
  synopsis.

Right now, using:

  @inline[\n };\n]

Generates something like:

struct FbleValueV {
    \fBsize_t\fR \fIsize\fR\fB,
    \fR\fBFbleValue**\fR \fIxs\fR
 };
.SH "DESCRIPTION"

If I get rid of the space:

struct FbleValueV {
    \fBsize_t\fR \fIsize\fR\fB,
    \fR\fBFbleValue**\fR \fIxs\fR
};
.SH "DESCRIPTION"

Something about space is continuation in troff?

Options:
* Indent the struct description?
* Insert a .P somewhere?
* Insert a break somewhere?

Let's review troff syntax for this.

It's not clear. Troff syntax says:
* .br for break
* Lines starting with '.' are control, otherwise printed.

I guess that means newlines are ignored? Then why does it work some times?

I don't really understand what I should be doing here, but a well placed .br
seems to make things work.

---

How to fix vim syntax highlighting of {} in fbld?

Examples:

  @l[{]@hi@l[}]             - broken now, do want to highlight @hi
  @l[x]@hi@l[x]             - should highlight same as above.
  @l{ruhler@degralder.com}  - works now, don't want to highlight @degralder.com

Current strategy:

  Anything in between { and } is highlighted as normal, with outer most braces
  colored as bracket.

A better approach might be:

  @ name { ... }

or

  @name[...]{

Hmm...

A hack in this case could be:
  ]{ ... }
  }{ ... }
  n{ ... } ?

Also think about: where do we support escape sequences? In []? In {}?

Let's summarize from the fbld spec.
* \ @ [ ] n - supported in plain text.
* [] args take plain text.
* {} args take literal text (no subcommands or escapes, braces nest)

Conceptually the trick is figuring out when { is just in plain text, or when
it is the start of an argument. Specifically:

]{...}
}{...}
@{...}
@<name>{...}

That's what I want to predicate on. The challenge being the case of
@<name>{...}, which has a more involved start regex and wants
sub-highlighting.

This should certainly be doable. Let's read more about regions first.

There are magic regex options to explicitly specify things to match without
including them in the match itself. Could we use that for start?

For example:

@(name)?...

Ugh. Feels complicated. Maybe:

\(@[name]\)\@={

To say: match @name{, but the @name part match with zero width.

Or, looks like \@<= is designed for this.

\(@[a-zA-Z0-9_]\+\)\@<={

Proposal then is to try that. Have 4 different regions set up with starting
regex:

  @{
  }{
  ]{
  \(@[a-zA-Z0-9_]\+\)\@<={

