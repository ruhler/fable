
% True = /Core/Bool%.True;

@ Int@ = /Core/Int%.Int@;
% Sub = /Core/Int%.Sub;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;
<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<<@>@>@ App@ = /App/App%.App@;
<<@>@>@ Main@ = /App/App%.Main@;
@ Event@ = /App/App%.Event@;
@ Effect@ = /App/App%.Effect@;

@ Drawing@ = /App/Drawing%.Drawing@;
% Color = /App/Drawing%.Color;
% Rect = /App/Drawing%.Rect;
% Drawings = /App/Drawing%.Drawings;

@ Params@ = /SatGame/Puzzle%.Params@;
@ Puzzle@ = /SatGame/Puzzle%.Puzzle@;

@ Game@ = /SatGame/Game%.Game@;
% Toggle = /SatGame/Game%.Toggle;

@ TileIndex@ = /SatGame/Game/Draw%.TileIndex@;
% TileOf = /SatGame/Game/Draw%.TileOf;

% PureLFSR = /SatGame/Random/PureLFSR%;
% Generate = /SatGame/Generate%<PureLFSR.M@>(PureLFSR.Monad, PureLFSR.Random);

@ Args@ = *(
  Int@ num_vars,
  Int@ num_clauses,
  Int@ num_literals_per_clause,
  Int@ seed
);

(List@<String@>) { Args@; }
GetArgs = (List@<String@> args) {
  Int@ num_vars = /Core/Int/Show%.Read(args.cons.head);

  List@<String@> a2 = args.cons.tail;
  Int@ num_clauses = /Core/Int/Show%.Read(a2.cons.head);

  List@<String@> a3 = a2.cons.tail;
  Int@ num_literals_per_clause = /Core/Int/Show%.Read(a3.cons.head);

  List@<String@> a4 = a3.cons.tail;
  Int@ seed = /Core/Int/Show%.Read(a4.cons.head);

  @(num_vars, num_clauses, num_literals_per_clause, seed);
};

@ State@ = *(
  Game@ game,
  Int@ mouse_x,
  Int@ mouse_y
);

Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio, App@<M@> app, Int@ width, Int@ height, List@<String@> argv) {
  % O = /Core/Stream/OStream%(m);

  Args@ args = GetArgs(argv);
  Params@ params = Params@(args.num_vars, args.num_clauses, args.num_literals_per_clause);

  Int@ cols = Int|2;

  (State@) { M@<Unit@>; } Draw = (State@ state) {
    Drawing@ background = Rect(Int|0, Int|0, width, height, Color.Black);
    Drawing@ cursor = Rect(
      Sub(state.mouse_x, Int|4),
      Sub(state.mouse_y, Int|4),
      Int|8, Int|8, Color.Yellow);
    Drawing@ game = /SatGame/Game/Draw%.Draw(cols, state.game);
    Drawing@ screen = Drawings[background, game, cursor];
    app.effect(Effect@(draw: screen));
  };

  (State@) { M@<Unit@>; } EventLoop = (State@ state) {
    Event@ e <- m.do(app.event);
    e.?(
      tick: EventLoop(state),
      key_down: m.return(Unit),
      key_up: m.return(Unit),
      mouse_down: {
        Int@ x = e.mouse_down.x;
        Int@ y = e.mouse_down.y;
        Maybe@<TileIndex@> ti = TileOf(params, cols, x, y);
        ti.?(nothing: EventLoop(state));
        State@ ns = state.@(game: Toggle(ti.just.group, ti.just.tile, state.game));
        Unit@ _ <- m.do(Draw(ns));
        EventLoop(ns);
      },
      mouse_up: EventLoop(state),
      resize: EventLoop(state),
      mouse_motion: {
        State@ ns = state.@(
          mouse_x: e.mouse_motion.x,
          mouse_y: e.mouse_motion.y);
        Unit@ _ <- m.do(Draw(ns));
        EventLoop(ns);
      });
  };

  Unit@ _ <- m.do(O.PutLine(stdio.out, Strs[
      Str|'Generating puzzle with params: ',
      /SatGame/Puzzle/Show%.Params(params),
      Str|' (seed ', /Core/Int/Show%.Show(args.seed), Str|')'
  ]));

  Puzzle@ puzzle = PureLFSR.Run(Generate(params), args.seed);
  Unit@ _ <- m.do(O.PutLine(stdio.out, /SatGame/Puzzle/Show%.Puzzle(puzzle)));

  Game@ game = /SatGame/Game%.Game(puzzle);

  State@ state = State@(game, Int|0, Int|0);
  Unit@ _ <- m.do(Draw(state));
  Unit@ _ <- m.do(EventLoop(state));
  m.return(True);
};

Main;
