@(Unit_, Bool_, Char_, List_, String_, UBNat_, Primes_, Test) {
  Unit_ { @(Unit@, Unit); };
  Bool_ { @(Bool@); };
  Char_ { @(Char@, Chars); };
  List_ { @(S@, P@, ConsS, S, Append, Concat); };
  String_ { @(Str@, Str); };
  UBNat_ { @(Nat@, 1, 3, 10, Lit2, EqNat); };
  Primes_ { @(NthPrime); };
  Test { @(TestResult@, Test@); };

  Str@ prefix = { Chars; Str([P, r, i, m, e, s, period]); };

  (Str@, Nat@, Nat@){Test@;} TEq = (Str@ name, Nat@ a, Nat@ b) {
    Test@(Append<Char@>(prefix, name), {
      # TODO: Better error message in case of failure.
      ?(EqNat(a, b);
          true: $(TestResult@(pass: Unit)),
          false: $(TestResult@(fail: { Chars; Str([f, a, i, l, e, d]); })));
    });
  };

  Test@ NthPrime_1_10 = TEq(
    Concat<Char@>(S<Str@>([
      { Chars; Str([N, t, h, P, r, i, m, e, underscore]); },
      { Chars; Str([1, underscore, 1, 0]); }])),
    Lit2(3, 1), NthPrime(1, 10));

  S@<Test@> Tests = S<Test@>([NthPrime_1_10]);

  @(Tests);
};
