
# Implementation of a balanced binary tree-based map.

@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ Ord@ = /Core/Ord%.Ord@;
@ Ordering@ = /Core/Ord%.Ordering@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Nothing = /Core/Maybe%.Nothing;
<@>% Just = /Core/Maybe%.Just;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

# Balance@ --
#   Keeps track of how well balanced a map node's children are.
@ Balance@ = +(
  Unit@ '-',     # The left subtree has height 1 greater than the right subtree.
  Unit@ '0',     # The heights of the left and right subtrees match.
  Unit@ '+'      # The right subtree has height 1 greater than the left subtree.
);

Balance@ '-' = Balance@('-': Unit);
Balance@ '0' = Balance@('0': Unit);
Balance@ '+' = Balance@('+': Unit);

(Balance@) { Balance@; } Flip = (Balance@ x) {
  x.?('-': '+', '0': '0', '+': '-');
};

# Sum@ --
#   Represents the sum of two Balance@.
@ Sum@ = +(Unit@ '-', Balance@ '0', Unit@ '+');

# Sum --
#   Compute the Sum of two Balance@.
(Balance@, Balance@) { Sum@; }
Sum = (Balance@ a, Balance@ b) {
  a.?(
    '-': b.?('-': Sum@('-': Unit), '0': Sum@('0': '-'), '+': Sum@('0': '0')),
    '0': Sum@('0': b),
    '+': b.?('-': Sum@('0': '0'), '0': Sum@('0': '+'), '+': Sum@('+': Unit)));
};

# Delta --
#   Determine how the height of a map changes of the right subtree changes by
#   the given 'delta' and the map originally had the given 'balance'.
(Balance@, Balance@) { Balance@; }
Delta = (Balance@ delta, Balance@ balance) {
  delta.?(
    '-': {
      # The right subtree is smaller now. That reduces the height of the
      # overall tree only if tree was originally right heavy.
      balance.?('+': '-', : '0');
    },
    '0': {
      # No change in height.
      '0';
    },
    '+': {
      # The right subtree is larger now. That increases the height of the
      # overall tree unless the tree was originally left heavy.
      balance.?('-': '0', : '+');
    });
};

# /Core/Map%.Map@ implementation for key types with an Ord@ interface.
<@>% Map = <@ K@>(Ord@<K@> ord) {
  @ Key@ = K@;

  <@>@ Map@ = <@ V@> {
    @ M@ = +(Unit@ empty, P@ map),
    @ P@ = *(K@ key, V@ value, Balance@ balance, M@ left, M@ right);
    M@;
  };
    
  # MapP@ --
  #   A non-empty map from K@ to V@.
  <@>@ MapP@ = <@ V@> {
    @ M@ = +(Unit@ empty, P@ map),
    @ P@ = *(K@ key, V@ value, Balance@ balance, M@ left, M@ right);
    P@;
  };

  # MapP --
  #   Construct a non-empty Map@ instance.
  (K@)<@ V@>(V@, Balance@, Map@<V@>, Map@<V@>) { Map@<V@>; }
  MapP = (K@ key)<@ V@>(V@ value, Balance@ balance, Map@<V@> left, Map@<V@> right) {
    Map@<V@>(map: MapP@(key, value, balance, left, right));
  };

  Map@ Empty = <@ V@> {
    Map@<V@>(empty: Unit);
  };

  <@>@ Entry@ = <@ V@> { *(K@ key, V@ value); };

  # First --
  #   Get the first (least) value in the map.
  #
  # Type Parameters:
  #   V@ - the type of values in the map.
  #
  # Inputs:
  #   map - the map to look up the value in.
  #
  # Returns:
  #   The entry in the map with the smallest key value. Nothing if the map is
  #   empty.
  <@ V@>(Map@<V@>) { Maybe@<Entry@<V@>>; }
  First = <@ V@>(Map@<V@> map) {
    map.?(
      empty: Nothing<Entry@<V@>>,
      map: {
        Maybe@<Entry@<V@>> first = First(map.map.left);
        first.?(
          just: first,
          nothing: Just(Entry@(map.map.key, map.map.value)));
      });
  };

  # Last --
  #   Get the last (greatest) value in the map.
  #
  # Type Parameters:
  #   K@ - the type of keys in the map.
  #   V@ - the type of values in the map.
  #
  # Inputs:
  #   map - the map to look up the value in.
  #
  # Returns:
  #   The entry in the map with the largest key value. Nothing if the map is
  #   empty.
  <@ V@>(Map@<V@>) { Maybe@<Entry@<V@>>; }
  Last = <@ V@>(Map@<V@> map) {
    map.?(
      empty: Nothing<Entry@<V@>>,
      map: {
        Maybe@<Entry@<V@>> last = Last(map.map.right);
        last.?(
          just: last,
          nothing: Just(Entry@(map.map.key, map.map.value)));
      });
  };

  <@ V@>(Map@<V@>) { Bool@; }
  IsEmpty = <@ V@>(Map@<V@> map) {
    map.?(empty: True, map: False);
  };

  <@ V@>(Map@<V@>, K@) { Maybe@<V@>; }
  Lookup = <@ V@> {
    (Map@<V@>, K@) { Maybe@<V@>; } L = (Map@<V@> map, K@ key) {
      map.?(empty: Nothing<V@>);

      Ordering@ ordering = ord(key, map.map.key);
      ordering.?(lt: L(map.map.left, key));
      ordering.?(gt: L(map.map.right, key));
      Just(map.map.value);
    };
    L;
  };

  # Modified@ --
  #   Keeps track of the result of a map modification.
  #
  # Fields:
  #   delta - '+' if the map grew in height by 1, '0' if the map did not change
  #           height, '-' if the map decreased in height by 1.
  #   map - the modified, rebalanced map.
  <@>@ Modified@ = <@ V@> { *(Balance@ delta, Map@<V@> map); };

  # Rebalance --
  #   Rebalance a potentially unbalanced map.
  #
  # Inputs:
  #   delta - the change in height of the tree before rebalancing.
  #   key - the root key
  #   value - the root value
  #   balance - the balance of the map
  #   left - the left subtree
  #   right - the right subtree
  #
  # Returns:
  #   A rebalanced map and the overall change in height of the tree with the
  #   effects of rebalancing included.
  (Balance@)(K@)<@ V@>(V@, Sum@, Map@<V@>, Map@<V@>) { Modified@<V@>; }
  Rebalance = (Balance@ delta)(K@ key)<@ V@>(V@ value, Sum@ balance, Map@<V@> left, Map@<V@> right) {
    balance.?(
      '-': {
        # The left subtree is too large. We need to rebalance. How we rebalance
        # depends on the balance of the left subtree.
        left.map.balance.?(
          '-': {
            # The left subtree ('b') is left heavy.
            #     d3            b2
            #    /  \          /  \
            #   b2  e0  ==>  a1   d1
            #  / \               /  \
            # a1  c0            c0  e0
            @(delta: Sum(delta, '-').'0',
              map: MapP(
                left.map.key,
                left.map.value,
                '0',
                left.map.left,
                MapP(key, value, '0', left.map.right, right)));
          },
          '0': {
            # The left subtree ('b') is balanced.
            #     d3            b3
            #    /  \          /  \
            #   b2  e0  ==>  a1   d2
            #  / \               /  \
            # a1  c1            c1  e0
            @(delta: delta,
              map: MapP(
                left.map.key,
                left.map.value,
                '+',
                left.map.left,
                MapP(key, value, '-', left.map.right, right)));
          },
          '+': {
            # The left subtree ('f') is right heavy.
            #        f3             d2
            #       /  \          /    \
            #      b2  g0        b1     f1
            #     /  \     ==>  /  \   /  \
            #    a0  d1        a0  c? e?  g0
            #       /  \
            #      c?   e?
            Map@<V@> a = left.map.left;
            Entry@<V@> b = @(
              key: left.map.key,
              value: left.map.value);
            Map@<V@> c = left.map.right.map.left;
            Entry@<V@> d = @(
              key: left.map.right.map.key,
              value: left.map.right.map.value);
            Balance@ dB = left.map.right.map.balance;
            Map@<V@> e = left.map.right.map.right;
            Entry@<V@> f = @(key, value);
            Map@<V@> g = right;
            @(
              delta: Sum(delta, '-').0,
              map: MapP(
                d.key,
                d.value,
                '0',
                MapP(b.key, b.value, dB.?('+': '-', : '0'), a, c),
                MapP(f.key, f.value, dB.?('-': '+', : '0'), e, g)));
          });
      },

      '0': {
        # The tree does not need rebalancing.
        @(delta: delta, map: MapP(key, value, balance.'0', left, right));
      },

      '+': {
         # The right subtree is too large. We need to rebalance. How we
         # rebalance depends on the balance of the right subtree.
         right.map.balance.?(
           '-': {
             # The right subtree ('f') is left heavy.
             #   b3             d2
             #  / \           /    \
             # a0  f2        b1     f1
             #    / \  ==>  / \    / \
             #   d1  g0    a0  c? e?  g0
             #  / \
             # c?  e?
             Map@<V@> a = left;
             Entry@<V@> b = @(key, value);
             Map@<V@> c = right.map.left.map.left;
             Entry@<V@> d = @(
               key: right.map.left.map.key,
               value: right.map.left.map.value);
             Balance@ dB = right.map.left.map.balance;
             Map@<V@> e = right.map.left.map.right;
             Entry@<V@> f = @(
               key: right.map.key,
               value: right.map.value);
             Map@<V@> g = right.map.right;
             @(
               delta: Sum(delta, '-').'0',
               map: MapP(
                 d.key,
                 d.value,
                 '0',
                 MapP(b.key, b.value, dB.?('+': '-', : '0'), a, c),
                 MapP(f.key, f.value, dB.?('-': '+', : '0'), e, g)));
           },
           '0': {
             # The right subtree ('d') is balanced.
             #   b3             d3
             #  /  \           /  \
             # a0   d2   ==>  b2   e1
             #     / \       / \
             #    c1  e1    a0  c1
             @(
               delta: delta,
               map: MapP(
                 right.map.key,
                 right.map.value,
                 '-',
                 MapP(key, value, '+', left, right.map.left),
                 right.map.right));
           },
           '+': {
             # The right subtree ('d') is right heavy.
             #   b3             d2
             #  /  \           /  \
             # a0   d2   ==>  b1   e1
             #     / \       / \
             #    c0  e1    a0  c0
             @(
               delta: Sum(delta, '-').'0',
               map: MapP(
                 right.map.key,
                 right.map.value,
                 '0',
                 MapP(key, value, '0', left, right.map.left),
                 right.map.right));
           });
      });
  };

  # RebalanceLeft --
  #   Rebalance after modifying the left subtree of a map.
  #
  # Inputs:
  #   key - the root key
  #   value - the root value
  #   balance - the original balance of the map
  #   left - the modified left subtree
  #   right - the original right subtree
  #
  # Returns:
  #   A rebalanced map along with its overall change in height.
  (K@)<@ V@>(V@, Balance@, Modified@<V@>, Map@<V@>) { Modified@<V@>; }
  RebalanceLeft = (K@ key)<@ V@>(V@ value, Balance@ balance, Modified@<V@> left, Map@<V@> right) {
    Rebalance(
      Delta(left.delta, Flip(balance)),
      key, value, Sum(balance, Flip(left.delta)), left.map, right);
  };

  # RebalanceRight --
  #   Rebalance after modifying the right subtree of a map.
  #
  # Inputs:
  #   key - the root key
  #   value - the root value
  #   balance - the original balance of the map
  #   left - the original left subtree
  #   right - the modified right subtree
  #
  # Returns:
  #   A rebalanced map along with its overall change in height.
  (K@)<@ V@>(V@, Balance@, Map@<V@>, Modified@<V@>) { Modified@<V@>; }
  RebalanceRight = (K@ key)<@ V@>(V@ value, Balance@ balance, Map@<V@> left, Modified@<V@> right) {
    Rebalance(
      Delta(right.delta, balance),
      key, value, Sum(balance, right.delta), left, right.map);
  };

  <@ V@>(Maybe@<V@>) { Maybe@<V@>; }
  WithRemove = <@ V@>(Maybe@<V@> _) {
    Nothing<V@>;
  };

  # Modify --
  #   Insert, modify, or delete a value in the map.
  #
  # Type Parameters:
  #   K@ - the type of keys in the map.
  #   V@ - the type of values in the map.
  #
  # Inputs:
  #   lt - The less than operator to use for comparing keys.
  #   map - the map to insert the value into up the value in.
  #   key - the value of the key to store with the map entry.
  #   with - a function that returns the value to insert given the existing
  #          value in the map, or Nothing to delete the value in the map.
  <@ V@>(Map@<V@>, K@, (Maybe@<V@>){ Maybe@<V@>; }) { Modified@<V@>; }
  Modify = <@ V@> {
    (Map@<V@>, K@, (Maybe@<V@>) { Maybe@<V@>; }) { Modified@<V@>; } 
    modify = (Map@<V@> map, K@ key, (Maybe@<V@>) { Maybe@<V@>; } with) {
      map.?(empty: {
        Maybe@<V@> value = with(Nothing<V@>);
        value.?(just: {
          # Insert into empty map.
          @(
            delta: '+',
            map: MapP(key, value.just, '0', Empty<V@>, Empty<V@>));
        });

        # Remove from empty map.
        @(delta: '0', map: Empty<V@>);
      });

      Ordering@ ordering = ord(key, map.map.key);

      ordering.?(lt: {
        # Recurse to left subtree.
        RebalanceLeft(
          map.map.key,
          map.map.value,
          map.map.balance,
          modify(map.map.left, key, with),
          map.map.right);
      });

      ordering.?(gt: {
        # Recurse to right subtree.
        RebalanceRight(
          map.map.key,
          map.map.value,
          map.map.balance,
          map.map.left,
          modify(map.map.right, key, with));
      });

      Maybe@<V@> value = with(Just(map.map.value));
      value.?(just: {
        # Replace root entry's value.
        @(
          delta: '0',
          map: MapP(
            map.map.key,
            value.just,
            map.map.balance,
            map.map.left,
            map.map.right));
      });

      Maybe@<Entry@<V@>> entry = Last(map.map.left);
      entry.?(just: {
        # Delete root entry, filling in from left.
        RebalanceLeft(
          entry.just.key,
          entry.just.value,
          map.map.balance,
          modify(map.map.left, entry.just.key, WithRemove<V@>),
          map.map.right);
      });

      Maybe@<Entry@<V@>> entry = First(map.map.right);
      entry.?(just: {
        # Delete root entry, filling in from right.
        RebalanceRight(
          entry.just.key,
          entry.just.value,
          map.map.balance,
          map.map.left,
          modify(map.map.right, entry.just.key, WithRemove<V@>));
      });

      # We are deleting the only element in the map.
      @(delta: '-', map: Empty<V@>);
    };

    modify;
  };

  # Delete --
  #   Remove a key and its value from the map, if present.
  #
  # Inputs:
  #   lt - The less than operator to use for comparing keys.
  #   map - the map to insert the value into up the value in.
  #   key - the key of the value to delete from the map.
  #
  # Example Use:
  #   % Delete = /Map%.Delete<String@>(/Core/String/Ord%.Ord)<Int@>;
  #   Delete(map, Str(Chars|foo));
  <@ V@>(Map@<V@>, K@) { Map@<V@>; }
  Delete = <@ V@> {
    % modify = Modify<V@>;

    (Map@<V@> map, K@ key) {
      modify(map, key, WithRemove<V@>).map;
    };
  };

  # InsertWith --
  #   Insert a value into a map, taking into account whatever existing value is
  #   in the map for the given key.
  #
  # Type Parameters:
  #   K@ - the type of keys in the map.
  #   V@ - the type of values in the map.
  #
  # Inputs:
  #   lt - The less than operator to use for comparing keys.
  #   map - the map to insert the value into up the value in.
  #   key - the value of the key to store with the map entry.
  #   with - a function that returns the value to insert given the existing
  #          value in the map.
  #
  # Example Use:
  #   % InsertWith = /Map%.InsertWith<String@>(/Core/String/Ord%.Ord)<Int@>;
  #   InsertWith(map, Str(Chars|foo), (Maybe@<Int@> mv) {
  #     mv.?(just: Add(mv, value), nothing: value);
  #   };
  <@ V@>(Map@<V@>, K@, (Maybe@<V@>){ V@; }) { Map@<V@>; }
  InsertWith = <@ V@> {
    % modify = Modify<V@>;
    (Map@<V@> map, K@ key, (Maybe@<V@>) { V@; } with) {
      modify(map, key, (Maybe@<V@> v) { Just(with(v)); }).map;
    };
  };

  # Insert --
  #   Insert a value into a map. Any existing value for the key in the map will
  #   be overridden with the new value.
  #
  # Type Parameters:
  #   K@ - the type of keys in the map.
  #   V@ - the type of values in the map.
  #
  # Inputs:
  #   lt - The less than operator to use for comparing keys.
  #   map - the map to insert the value into up the value in.
  #   key - the value of the key to store with the map entry.
  #   value - the value to insert.
  #
  # Example Use:
  #   % Insert = /Map%.Insert<String@>(/Core/String/Ord%.Ord)<Int@>;
  #   Insert(map, Str(Chars|foo), 4);
  <@ V@>(Map@<V@>, K@, V@) { Map@<V@>; }
  Insert = <@ V@> {
    % insert = InsertWith<V@>;

    (Map@<V@> map, K@ key, V@ value) {
      insert(map, key, (Maybe@<V@> _) { value; });
    };
  };

  # ForEach --
  #   Iterate over entries of a map.
  #
  # Type Parameters:
  #   K@ - the type of keys in the map.
  #   V@ - the type of values in the map.
  #   B@ - The type of value updated and returned by the foreach loop.
  #
  # Inputs:
  #   map - the map to iterate over.
  #   base - the initial value to update and return from the loop.
  #   body - the body of the loop.
  #
  # Returns:
  #   The result of applying the body consecutively to the base value, once for
  #   each entry in the map.
  #
  # Conceptually:
  #   B@ b = base
  #   foreach (k, v) in map:
  #     b = body(k, v, b)
  #   return b
  <@ V@>(Map@<V@>)<@ B@>(B@, (K@, V@, B@) { B@; }) { B@; }
  ForEach = <@ V@>(Map@<V@> map)<@ B@>(B@ base, (K@, V@, B@) { B@; } body) {
    map.?(empty: base);

    B@ b1 = base;
    B@ b2 = ForEach(map.map.left, b1, body);
    B@ b3 = body(map.map.key, map.map.value, b2);
    ForEach(map.map.right, b3, body);
  };

  /Core/Map%.Map@<Map@, K@> Map = @(
    Map@, Key@, Empty, IsEmpty, Insert, InsertWith, Delete, Lookup, ForEach
  );
  Map;
};

@(Map);
