

@ Bit@ = /Core/Digits%.Bit@;
% Bit = /Core/Digits%.Bit;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% List = /Core/List%.List;
<@>% Append = /Core/List%.Append;

# CRC@ --
#   State for a cyclic redundancy check.
#
# Fields:
#   poly - Polynomial used in the CRC, in order of most to least significant
#          bit, including high and low bits. For an 8 bit CRC, for example,
#          poly will have 9 bits.
#   checksum - The checksum, in order of most to least significant bit.
@ CRC@ = *(List@<Bit@> poly, List@<Bit@> checksum);

(Bit@, Bit@) { Bit@; } Xor = (Bit@ a, Bit@ b) {
  a.?(0: b);
  b.?(0: a);
  Bit.0;
};

# Xors --
#   Bitwise XOR. Assumes the input lists both have the same length.
(List@<Bit@>, List@<Bit@>) { List@<Bit@>; } Xors = (List@<Bit@> a, List@<Bit@> b) {
  a.?(nil: a);
  List@<Bit@> tail = Xors(a.cons.tail, b.cons.tail);

  Bit@ x = Xor(a.cons.head, b.cons.head);
  Cons(x, tail);
};

# Feed --
#   Feed the next bit into the CRC calculation.
(CRC@, Bit@) { CRC@; } Feed = (CRC@ crc, Bit@ bit) {
  List@<Bit@> bits = Append(crc.checksum, List[bit]);
  List@<Bit@> rem = bits.cons.head.?(
    0: bits.cons.tail,
    1: Xors(crc.poly, bits).cons.tail);
  CRC@(crc.poly, rem);
};

# Feeds --
#   Feed a sequence of bits in order into the CRC calculation.
(CRC@, List@<Bit@>) { CRC@; } Feeds = (CRC@ crc, List@<Bit@> bits) {
  bits.?(nil: crc);
  Feeds(Feed(crc, bits.cons.head), bits.cons.tail);
};

@(CRC@, Feed, Feeds);

