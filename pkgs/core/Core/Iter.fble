
@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<@>% Types = <@ T@> {
  # IterH@ --
  #   An iterator that points to a value.
  @ H@ = *(T@ value, I@ next),

  # IterM@ --
  #   An iterator that may point to a value or may have reached the end of the
  #   sequence.
  @ M@ = +(H@ has, Unit@ end),

  # Iter@ --
  #   An iterator over a sequence of values.
  @ I@ = (Unit@) { M@; };

  @(H@, M@, I@);
};

<@>@ IterH@ = <@ T@> { Types<T@>.H@; };
<@>@ IterM@ = <@ T@> { Types<T@>.M@; };
<@>@ Iter@ = <@ T@> { Types<T@>.I@; };

<@ T@>(T@, Iter@<T@>) { IterM@<T@>; } Has = <@ T@>(T@ value, Iter@<T@> next) {
  IterM@(has: IterH@(value, next));
};

IterM@ End = <@ T@> { IterM@<T@>(end: Unit); };

# For --
#   Apply the body of the loop to each iterator value in turn.
#
# Type Parameters:
#   I@ - The type of iterator value.
#   B@ - The type of the result of the for loop.
#
# Arguments:
#   iter - The iterator to iterate over.
#   base - The initial loop state.
#   body - The body of the loop.
#
# Conceptually:
#   B@ b = base
#   for x in iter:
#     b = body(x, b)
#   return b
<@ I@>(Iter@<I@>)<@ B@>(B@, (I@, B@) { B@; }) { B@; }
For = <@ I@>(Iter@<I@> iter)<@ B@>(B@ base, (I@, B@) { B@; } body) {
  IterM@<I@> m = iter(Unit);
  m.?(end: base);
  For(m.has.next, body(m.has.value, base), body);
};

@(Iter@, IterH@, IterM@, Has, End, For);
