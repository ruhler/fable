
@ Bool@ = /Core/Bool%.Bool@;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<@>@ Process@ = /Core/IO/Process%.Process@;
<@>@ Get@ = /Core/IO/Process%.Get@;
<@>@ Put@ = /Core/IO/Process%.Put@;
% ProcessMonad = /Core/IO/Process%.ProcessMonad;

@ String@ = /Core/String%.String@;

# IO@ --
#   Input and output streams for a Stdio program.
@ IO@ = *(
  # Gets the next line of input, including the terminating newline.
  # Returns Nothing if there is no more input to read.
  Get@<Maybe@<String@>> stdin,

  # Outputs a string to stdout.
  Put@<String@> stdout,

  # Outputs a string to stderr.
  Put@<String@> stderr
);

# The Stdio Interface.
# Inputs:
#   io - The input and output streams.
#   args - The list of arguments.
#
# Results:
#   True if the program ran successfully and should exit zero. False if the
#   program failed and should exit non-zero.
@ Stdio@ = (IO@, List@<String@>) { Bool@!; };

# IOStdio --
#   An IO implementation of Stdio@.
(/Core/Stdio%.Main@) { Stdio@; }
IOStdio = (/Core/Stdio%.Main@ main)(IO@ io, List@<String@> args) {
  main<Process@>(
    ProcessMonad,
    /Core/Stdio%.Stdio@<Process@>(io.stdin, io.stdout, io.stderr),
    args);
};

@(IOStdio);
