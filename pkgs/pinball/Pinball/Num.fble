
@ Bool@ = /Core/Bool%.Bool@;

@ Decimal@ = /Core/Digits%.Decimal@;

@ Int@ = /Core/Int%.Int@;
% AddI = /Core/Int%.Add;
% SubI = /Core/Int%.Sub;
% NegI = /Core/Int%.Neg;
% AbsI = /Core/Int%.Abs;
% MulI = /Core/Int%.Mul;
% DivI = /Core/Int/Div%.Div;
% GtI = /Core/Int/Eq%.Gt;
% GeI = /Core/Int/Eq%.Ge;
% LtI = /Core/Int/Eq%.Lt;
% LeI = /Core/Int/Eq%.Le;
% EqI = /Core/Int/Eq%.Eq;
% IntI = /Core/Int/Lit%.Int;
% ShowI = /Core/Int/Show%.Show;
% SqrtI = /Core/Int/Sqrt%.Sqrt;

<@>@ List@ = /Core/List%.List@;

<@>@ Show@ = /Core/Show%.Show@;

% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

# Num@ -- 
#   A number with sufficient precision for the pinball game.
#
# The integer x is used to represent the number x/S.
# TODO: Make this a private type:
@ Num@ = Int@.%(@/Pinball/Num%);

# S -- 
#   Scale factor for converting Int@ to Num@.
Int@ S = IntI|128;

(Num@, Num@) { Num@; } Add = AddI;
(Num@, Num@) { Num@; } Sub = SubI;
(Num@) { Num@; } Neg = NegI;
(Num@) { Num@; } Abs = AbsI;

(Num@, Num@) { Num@; } Mul = (Int@ a, Int@ b) {
  DivI(MulI(a, b), S).q;
};

(Num@, Num@) { Num@; } Div = (Int@ a, Int@ b) {
  DivI(MulI(a, S), b).q;
};

(Num@, Num@) { Bool@; } Eq = EqI;
(Num@, Num@) { Bool@; } Gt = GtI;
(Num@, Num@) { Bool@; } Ge = GeI;
(Num@, Num@) { Bool@; } Lt = LtI;
(Num@, Num@) { Bool@; } Le = LeI;

Show@<Num@> Show = (Int@ a) {
  Strs[ShowI(a), Str|'/', ShowI(S)];
};

# Int --
#   Integer literal.
(List@<Decimal@>) { Num@; } Int = (List@<Decimal@> ds) {
  MulI(IntI(ds), S);
};

(Num@) { Int@; } Floor = (Int@ a) {
  DivI(a, S).q;
};

(Num@) { Num@; } Sqrt = (Int@ a) {
  SqrtI(MulI(a, S)).q;
};

@(Num@, Add, Sub, Neg, Abs, Mul, Div, Eq, Gt, Ge, Lt, Le, Show, Int, Floor, Sqrt);
