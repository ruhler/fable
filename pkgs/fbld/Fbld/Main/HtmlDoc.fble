
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;
<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;

% Report = /Fbld/Loc%.Report;
% Start = /Fbld/Loc%.Start;

@ Command@ = /Fbld/Command%.Command@;
<@>@ Result@ = /Fbld/Result%.Result@;
@ StringL@ = /Fbld/StringL%.StringL@;


# Main --
#   Main function for fbld-html-doc program.
#
# Converts an fbld @doc into html format.
Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio) {
  % I = /Core/Stream/IStream%(m);
  % O = /Core/Stream/OStream%(m);

  @ Env@ = /Fbld/Invoke%<M@>.Env@;

  % Markup = /Fbld/Markup%(m);
  @ Markup@ = Markup.Markup@;
  % Markups = Markup.Markups;
  % Inline = Markup.Inline;
  % Entry = Markup.Entry;

  % Core = /Fbld/Core%(m);
  @ Core@ = Core.Core@;

  % Run = /Fbld/Run%(m);

  Core@ core = /Fbld/Html%(m, stdio.out).Core;

  # TODO: Properly implement @FbleVersion, @Buildstamp
  Markup@ markup = Markups[
    Core.Markup(core),
    Inline[
      Entry(Str|'FbleVersion', (Env@ env, Command@ c) {
          core.text(StringL@(Str|'??FbleVersion??', c.name.loc));
        }),
      Entry(Str|'BuildStamp', (Env@ env, Command@ c) {
        core.text(StringL@(Str|'??BuildStamp??', c.name.loc));
      })
    ]];

  Env@ env = Markup.Env(markup);

  (List@<String@> args) {
    args.?(nil: {
      String@ msg = Str|'missing input file';
      Unit@ _ <- m.do(O.PutLine(stdio.err, msg));
      m.return(False);
    });

    String@ filename = args.cons.head;
    
    Maybe@<IStream@<M@>> fin <- m.do(stdio.read(filename));
    fin.?(nothing: {
      String@ msg = Strs[Str|'unable to open ', filename];
      Unit@ _ <- m.do(O.PutLine(stdio.err, msg));
      m.return(False);
    });

    String@ contents <- m.do(I.GetText(fin.just));
    Result@<Unit@> r <- m.do(Run.Block(env, StringL@(contents, Start(filename))));
    r.?(err: {
      String@ msg = Report(r.err.loc, r.err.str);
      Unit@ _ <- m.do(O.PutLine(stdio.err, msg));
      m.return(False);
    });

    m.return(True);
  };
};

/Core/Stdio/IO%.Run(Main);
