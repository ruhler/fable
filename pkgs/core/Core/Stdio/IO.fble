@ Bool@ = /Core/Bool%.Bool@;

@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Nothing = /Core/Maybe%.Nothing;
<@>% Just = /Core/Maybe%.Just;

<@>@ IO@ = /Core/Monad/IO%.IO@;
@ World@ = /Core/Monad/IO%.World@;
<@>@ R@ = /Core/Monad/IO%.R@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;
<<@>@>@ OStream@ = /Core/Stream%.OStream@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
@ Mode@ = /Core/Stdio%.Mode@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;

% Builtin = /Core/Stdio/IO/Builtin%;

@ StdioIO@ = *(
  IO@<Maybe@<Int@>> stdin,
  (Int@, World@) { R@<Unit@>; } stdout,
  (Int@, World@) { R@<Unit@>; } stderr,
  (String@, World@) { R@<Maybe@<IStream@<IO@>>>; } read,
  (String@, World@) { R@<Maybe@<(Int@, World@) { R@<Unit@>; }>>; } write,
  (String@, World@) { R@<Maybe@<String@>>; } getenv
);

Stdio@<IO@> StdioIO = @(
  in: Builtin.Stdin,
  out: (Int@ s, World@ w) { Builtin.Stdout(s, w); },
  err: (Int@ s, World@ w) { Builtin.Stderr(s, w); },
  read: (String@ s, Mode@ m, World@ w) { Builtin.Read(s, m, w); },
  write: (String@ s, Mode@ m, World@ w) {
    R@<Maybe@<(Int@, World@) { R@<Unit@>; }>> r = Builtin.Write(s, m, w);
    r.x.?(nothing: @(s: r.s, x: Nothing<OStream@<IO@>>));
    @(s: r.s, x: Just((Int@ s, World@ w) { r.x.just(s, w); }));
  },
  getenv: (String@ s, World@ w) { Builtin.GetEnv(s, w); }
);

@ Main@ = (List@<String@>) { IO@<Bool@>; };

# RunIO --
#   A top-level IO implementation for running a Stdio IO Main@ program.
(/Core/Stdio%.Main@<IO@>) { Main@; }
RunIO = (/Core/Stdio%.Main@<IO@> main, List@<String@> args) {
  main(StdioIO, /Core/Monad/IO%.Monad, args);
};

# Run --
#   A top-level IO implementation for running a Stdio Main@ program.
(/Core/Stdio%.Main@) { Main@; } Run = (/Core/Stdio%.Main@ main) {
  RunIO(main<IO@>);
};

@(StdioIO@, Main@, StdioIO, Run, RunIO);
