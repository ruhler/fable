
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Int@ = /Core/Int%.Int@;
% 0 = /Core/Int%.0;

@ IntP@ = /Core/Int/IntP%.IntP@;

% P = /Core/Int/IntP/Map%.Map;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ Key@ = Int@;

# A Map from Int@ to V@.
<@>@ Map@ = <@ V@> { *(P.Map@<V@> n, Maybe@<V@> 0, P.Map@<V@> p); };

Map@ Empty = <@ V@> {
  Map@(P.Empty<V@>, Nothing<V@>, P.Empty<V@>);
};

<@ V@>(Map@<V@>) { Bool@; }
IsEmpty = <@ V@>(Map@<V@> map) {
  P.IsEmpty(map.n).?(false: False);
  map.0.?(just: False);
  P.IsEmpty(map.p).?(false: False);
  True;
};

<@ V@>(Map@<V@>, Int@) { Maybe@<V@>; }
Lookup = <@ V@>(Map@<V@> map, Int@ key) {
  key.?(
    n: P.Lookup(map.n, key.n),
    0: map.0,
    p: P.Lookup(map.p, key.p));
};

<@ V@>(Map@<V@>, Int@, V@) { Map@<V@>; }
Insert = <@ V@>(Map@<V@> map, Int@ key, V@ value) {
  key.?(
    n: map.@(n: P.Insert(map.n, key.n, value)),
    0: map.@(0: Just(value)),
    p: map.@(p: P.Insert(map.p, key.p, value)));
};

<@ V@>(Map@<V@>, Int@, (Maybe@<V@>) { V@;}) { Map@<V@>; }
InsertWith = <@ V@>(Map@<V@> map, Int@ key, (Maybe@<V@>) { V@; } with) {
  key.?(
    n: map.@(n: P.InsertWith(map.n, key.n, with)),
    0: map.@(0: Just(with(map.0))),
    p: map.@(p: P.InsertWith(map.p, key.p, with)));
};

<@ V@>(Map@<V@>, Int@) { Map@<V@>; }
Delete = <@ V@>(Map@<V@> map, Int@ key) {
  key.?(
    n: map.@(n: P.Delete(map.n, key.n)),
    0: map.@(0: Nothing<V@>),
    p: map.@(p: P.Delete(map.p, key.p)));
};

<@ V@>(Map@<V@>)<@ B@>(B@, (Int@, V@, B@) { B@; }) { B@; }
ForEach = <@ V@>(Map@<V@> map)<@ B@>(B@ base, (Int@, V@, B@) { B@; } body) {
  B@ b1 = base;

  B@ b2 = P.ForEach(map.n, b1, (IntP@ i, V@ v, B@ b) {
    body(Int@(n: i), v, b);
  });

  B@ b3 = map.0.?(just: body(0, map.0.just, b2), nothing: b2);

  P.ForEach(map.p, b3, (IntP@ i, V@ v, B@ b) {
    body(Int@(p: i), v, b);
  });
};

/Core/Map%.Map@<Map@, Int@> Map = @(
  Map@, Key@, Empty, IsEmpty, Insert, InsertWith, Delete, Lookup, ForEach
);

@(Map);

