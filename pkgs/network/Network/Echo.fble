

# Implementation of RFC 862 TCP-based Echo Protocol

@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Int@ = /Core/Int%.Int@;
% Neg = /Core/Int%.Neg;
% Decr = /Core/Int%.Decr;
% IsZero = /Core/Int/Eq%.IsZero;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;
<<@>@>@ OStream@ = /Core/Stream%.OStream@;
<<@>@>@ IOStream@ = /Core/Stream%.IOStream@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% StrE = /Core/String%.StrE;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<<@>@>@ Main@ = /Network/Sockets%.Main@;
<<@>@>@ Server@ = /Network/Sockets%.Server@;
<<@>@>@ Sockets@ = /Network/Sockets%.Sockets@;

@ Args@ = *(
  Bool@ help,
  String@ error,
  String@ hostname,
  Int@ port,
  Int@ num_clients
);

Args@ DefaultArgs = @(
  help: False,
  error: Str|'',
  hostname: Str|'localhost',
  port: Int|7,
  num_clients: Neg(Int|1)
);

(List@<String@>, Args@) { Args@; }
GetArgs = (List@<String@> args, Args@ default) {
  args.?(nil: default);

  String@ arg = args.cons.head;
  /Core/List/Eq%.Contains(/Core/String/Eq%.Eq,
    List[Str|'-h', Str|'--help'], arg).?(true: {
    default.@(help: True);
  });

  args.cons.tail.?(nil: {
    default.@(error: Strs[Str|'missing arg to option ', arg]);
  });

  String@ value = args.cons.tail.cons.head;
  List@<String@> nargv = args.cons.tail.cons.tail;

  Args@ nargs = {
    /Core/List/Eq%.Contains(/Core/String/Eq%.Eq,
      List[Str|'--host'], arg).?(true: {
        default.@(hostname: value);
      });

    /Core/List/Eq%.Contains(/Core/String/Eq%.Eq,
      List[Str|'-p', Str|'--port'], arg).?(true: {
        default.@(port: /Core/Int/Show%.Read(value));
      });

    /Core/List/Eq%.Contains(/Core/String/Eq%.Eq,
      List[Str|'-n', Str|'--num-clients'], arg).?(true: {
        default.@(num_clients: /Core/Int/Show%.Read(value));
      });

    default.@(error: Strs[Str|'unrecognized option ', arg]);
  };

  nargs.error.?(cons: nargs);
  GetArgs(nargv, nargs);
};

Main@ Main = <<@>@ M@>(Sockets@<M@> sockets, Monad@<M@> m, Stdio@<M@> stdio, List@<String@> argv) {
  % O = /Core/Stream/OStream%(m);

  (IStream@<M@>, OStream@<M@>) { M@<Unit@>; }
  ForwardAll = (IStream@<M@> in, OStream@<M@> out) {
    Maybe@<Int@> mb <- m.do(in);
    mb.?(nothing: m.return(Unit));
    Unit@ _ <- m.do(out(mb.just));
    ForwardAll(in, out);
  };

  Args@ args = GetArgs(argv, DefaultArgs);
  args.help.?(true: {
    Unit@ _ <- m.do(O.PutStr(stdio.out, /Network/Echo/Usage%));
    m.return(True);
  });

  args.error.?(cons: {
    Unit@ _ <- m.do(O.PutStr(stdio.err, args.error));
    Unit@ _ <- m.do(O.PutStr(stdio.err, StrE|'\ntry --help for help\n'));
    m.return(False);
  });

  Maybe@<Server@<M@>> ms <- m.do(sockets.server(args.hostname, args.port));
  ms.?(nothing: {
    Unit@ _ <- m.do(O.PutLine(stdio.err, Str|'unable to serve'));
    m.return(False);
  });

  Server@<M@> s = ms.just;

  (Int@) { M@<Unit@>; } Serve = (Int@ n) {
    IsZero(n).?(true: m.return(Unit));
    Int@ nn = /Core/Int/Eq%.Gt(n, Int|0).?(true: Decr(n), false: n);

    IOStream@<M@> ios <- m.do(s);
    Unit@ _ <- m.do(ForwardAll(ios.in, ios.out));
    Serve(nn);
  };

  Unit@ _ <- m.do(Serve(args.num_clients));
  m.return(True);
};

/Network/Sockets/IO%.Run(Main);
