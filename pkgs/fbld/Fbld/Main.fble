
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;
<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

% Report = /Fbld/Loc%.Report;
% Start = /Fbld/Loc%.Start;

<@>@ Result@ = /Fbld/Result%.Result@;
@ StringL@ = /Fbld/StringL%.StringL@;


# Main --
#   Main function for fbld program.
Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio) {
  % I = /Core/Stream/IStream%(m);
  % O = /Core/Stream/OStream%(m);

  @ Env@ = /Fbld/Invoke%<M@>.Env@;

  % Markup = /Fbld/Markup%(m);
  @ Markup@ = Markup.Markup@;
  % Markups = Markup.Markups;

  % Core = /Fbld/Core%(m);
  @ Core@ = Core.Core@;

  % Run = /Fbld/Run%(m);

  @ Backend@ = +(Unit@ html, Unit@ markdown);

  @ Args@ = *(
    String@ buildstamp,
    String@ version,
    Backend@ backend,
    Bool@ fble_frontend,
    Maybe@<String@> file
  );

  (List@<String@>) { Args@; } ParseArgs = (List@<String@> args) {
    (List@<String@>, Args@) { Args@; }
    parse = (List@<String@> args, Args@ result) {
      args.?(nil: result);
      String@ arg = args.cons.head;
      /Core/String/Eq%.Eq(Str|'--buildstamp', arg).?(true: {
        String@ buildstamp = args.cons.tail.cons.head;
        List@<String@> nargs = args.cons.tail.cons.tail;
        parse(nargs, result.@(buildstamp));
      });
      /Core/String/Eq%.Eq(Str|'--version', arg).?(true: {
        String@ version = args.cons.tail.cons.head;
        List@<String@> nargs = args.cons.tail.cons.tail;
        parse(nargs, result.@(version));
      });
      /Core/String/Eq%.Eq(Str|'--html', arg).?(true: {
        List@<String@> nargs = args.cons.tail;
        parse(nargs, result.@(backend: Backend@(html: Unit)));
      });
      /Core/String/Eq%.Eq(Str|'--markdown', arg).?(true: {
        List@<String@> nargs = args.cons.tail;
        parse(nargs, result.@(backend: Backend@(markdown: Unit)));
      });
      /Core/String/Eq%.Eq(Str|'--fble', arg).?(true: {
        List@<String@> nargs = args.cons.tail;
        parse(nargs, result.@(fble_frontend: True));
      });
      parse(args.cons.tail, result.@(file: Just(arg)));
    };
    parse(args, Args@(Str|'??', Str|'??', Backend@(html: Unit), False, Nothing<String@>));
  };

  (List@<String@> args) {
    Args@ parsed = ParseArgs(args);

    Core@ core = parsed.backend.?(
      html: /Fbld/Html%(m, stdio.out).Core,
      markdown: /Fbld/Markdown%(m, stdio.out).Core);

    parsed.file.?(nothing: {
      String@ msg = Str|'missing input file';
      Unit@ _ <- m.do(O.PutLine(stdio.err, msg));
      m.return(False);
    });

    String@ filename = parsed.file.just;
    
    Maybe@<IStream@<M@>> fin <- m.do(stdio.read(filename));
    fin.?(nothing: {
      String@ msg = Strs[Str|'unable to open ', filename];
      Unit@ _ <- m.do(O.PutLine(stdio.err, msg));
      m.return(False);
    });


    Markup@ markup = Markups[
      Core.Markup(core),
      /Fbld/Fble/Build%(m)(core, parsed.buildstamp).Markup,
      /Fbld/Fble/Version%(m)(core, parsed.version).Markup,
      parsed.fble_frontend.?(
        true: /Fbld/Fble/Fble%(m)(core).Markup,
        false: Markup.Empty)
    ];

    Env@ env = Markup.Env(markup);

    String@ contents <- m.do(I.GetText(fin.just));
    Result@<Unit@> r <- m.do(Run.Block(env, StringL@(contents, Start(filename))));
    r.?(err: {
      String@ msg = Report(r.err.loc, r.err.str);
      Unit@ _ <- m.do(O.PutLine(stdio.err, msg));
      m.return(False);
    });

    m.return(True);
  };
};

/Core/Stdio/IO%.Run(Main);
