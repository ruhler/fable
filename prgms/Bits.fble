@(StdLib) {
  @(Hex: &Hex);

  @ Bit@ = +(StdLib.Unit@ 0, StdLib.Unit@ 1);
  @(Bit: @(Bit@));

  \<@ ; @> BitN@ = \<@ T@> {
    @ Result@ = +(T@ z, Bit@ cout);
    +(
      \(T@ a; T@) not,          # !a
      \(T@ a, T@ b; T@) and,    # a & b
      \(T@ a, T@ b; T@) or,     # a | b
      \(T@ a, T@ b; T@) xor,    # a ^ b
      \(T@ a, T@ b; T@) add,    # a + b
      T@ zero,                  # 0
      \(T@ a; Bool@) iszero,    # a == 0
      \(T@ a, T@ b; Bool@) eq,  # a == b
      \(T@ a; Bit@) msb,        # most significant bit
      \(T@ a; T@) clshift,      # circular left shift by 1
      \(T@ a, T@ b, Bit@ cin; Result@) fulladd,
      \(T@ a, Bit@ cin; Result@) lshift # left shift by 1
    );
  };

  \<@ ; @> Bit2X@ = \<@ T@> { *(T@ hi, T@ lo); };
  \<@ T@> { \(BitN@<T@> B; BitN@<Bit2X@<T@>>); } Bit2XN = &Bit2XN;

  @(Bit1: @(Bit1@: Bit@, BitN: &Bit1));
  @(Bit2: @(Bit2@: Bit2X@<Bit1.Bit1@>, BitN: Bit2XN<Bit1@>(Bit1.BitN)));

  {
    @ Bit2@ = Bit2.Bit2@;
    @ Bit4@ = Bit2X@<Bit2@>;
    \(Hex@ x; Bit4@) H1 = \(Hex@ x) {
      Bit@ 0 = Bit@(0: Unit@());
      Bit@ 1 = Bit@(1: Unit@());
      ?(x; 0: Bit4@(Bit2@(0, 0), Bit2@(0, 0)),
           1: Bit4@(Bit2@(0, 0), Bit2@(0, 1)),
           2: Bit4@(Bit2@(0, 0), Bit2@(1, 0)),
           3: Bit4@(Bit2@(0, 0), Bit2@(1, 1)),
           4: Bit4@(Bit2@(0, 1), Bit2@(0, 0)),
           5: Bit4@(Bit2@(0, 1), Bit2@(0, 1)),
           6: Bit4@(Bit2@(0, 1), Bit2@(1, 0)),
           7: Bit4@(Bit2@(0, 1), Bit2@(1, 1)),
           8: Bit4@(Bit2@(1, 0), Bit2@(0, 0)),
           9: Bit4@(Bit2@(1, 0), Bit2@(0, 1)),
           A: Bit4@(Bit2@(1, 0), Bit2@(1, 0)),
           B: Bit4@(Bit2@(1, 0), Bit2@(1, 1)),
           C: Bit4@(Bit2@(1, 1), Bit2@(0, 0)),
           D: Bit4@(Bit2@(1, 1), Bit2@(0, 1)),
           E: Bit4@(Bit2@(1, 1), Bit2@(1, 0)),
           F: Bit4@(Bit2@(1, 1), Bit2@(1, 1)));
    };
    @(Bit4: @(Bit4@, BitN: Bit2XN<Bit2@>(Bit2.BitN), H1));
  };

  {
    @ Bit8@ = Bit2X@<Bit4.Bit4@>;

    \(Hex@ hi, Hex@ lo; Bit8@) H2 = \(Hex@ hi, Hex@ lo) {
      Bit8@(Bit4.H1(hi), Bit4.H1(lo));
    };

    \(Hex@ x; Bit8@) H1 = \(Hex@ x) {
      H2(0, x);
    };

    @(Bit8: @(Bit8@, BitN: Bit2XN<Bit4@>(Bit4.BitN), H1, H2));
  };

  @(Bit16: @(Bit16@: Bit2X@<Bit8.Bit8@>, BitN: Bit2XN<Bit8@>(Bit8.BitN)));
  @(Bit32: @(Bit32@: Bit2X@<Bit16.Bit16@>, BitN: Bit2XN<Bit16@>(Bit16.BitN)));
  @(Bit64: @(Bit64@: Bit2X@<Bit32.Bit32@>, BitN: Bit2XN<Bit32@>(Bit32.BitN)));
    
  @(Hex, Bit, Bit1, Bit2, Bit4, Bit8, Bit16, Bit32, Bit64);
};
