
@ Bool@ = /Core/Bool%.Bool@;
@ Bit@ = /Core/Digits%.Bit@;

# Overflow@ --
#   A result with overflow bit.
<@>@ Overflow@ = <@ T@> { *(T@ x, Bit@ out); };

# Bits@ --
#   Interface for a fixed-width bit vector.
<@>@ Bits@ = <@ T@> {
  *(
    (T@) { T@; } Not,          # !a
    (T@, T@) { T@; } And,      # a & b
    (T@, T@) { T@; } Or,       # a | b
    (T@, T@) { T@; } Xor,      # a ^ b
    (T@, T@) { T@; } Add,      # a + b
    (T@) { T@; } Inc,          # a++
    T@ 0,                      # 0
    (T@) { Bool@; } IsZero,    # a == 0
    (T@, T@) { Bool@; } Eq,    # a == b
    (T@) { Bit@; } Msb,        # most significant bit
    (T@, T@, Bit@) { Overflow@<T@>; } Addx, # add with overflow
    (T@) { Overflow@<T@>; } Incx,           # inc with overflow
    (T@, Bit@) { Overflow@<T@>; } Shlx      # left shift by 1
  );
};

@(Bits@, Overflow@);
