Fble Debug
==========
It's not working great.

I just want to be able to step through fble code, without having it stop in C
code in between.

I've tried skip. I've tried not including debug symbols in libfble.a.

It's too painful to navigate. I don't understand why.

---

Exploring different approaches to debugging than dwarf3 + gdb:

There's something called Debug Adapter Protocol, from Microsoft. Looks like a
language agnostic protocol for debug. Maybe I can add support to implement
that ... somehow?

The challenge is we have different backends: interpreter, c, aarch64. In any
case, to look at the fble stack, we need to know how to traverse the native
stack. Because the interpreter uses the native stack too.

Commands we would need to support:
* initialization of debugging / process to debug.
* breakpoints management.
* continue/next/step.
* goto, break
* get stack trace
* variables
* eval

It's almost like a protocol for controlling the UI.

Honestly, better I think to come up with my own, fble specific protocol.
We could write a debug adapter separately to plug into Microsoft's format.

I'm thinking: provide minimum support necessary in the core for accessing the
required information, come up with my own custom protocol, and outsource the
UI / source code management related bits to an external program.

If only I could figure out how to implement those core operations.

We would need to decide the scope:
* interpreted code only?
* generated c code too?
* native c code too?
* generated aarch64 code too?

Seems like we should have some debug protocol that generated code and native
code can support. Just like we have a debug protocol for profiling.

In fact, I wonder, could we reuse the profiling protocol somehow? For example,
with profiling enabled, we ... sort of know the stack trace? That's an
interesting idea.

---

Revisiting how to use gdb to more easily step through fble code without having
it stop at C along the way. Any way to do this?

Current status:
* Next from within fble code works pretty well.
* Step immediately goes into C code. For example, FbleRetainValue.

gdb says step means "Step program until it reaches a different source line".

So, in theory, it should only stop where we have source lines annotated.

What happens if we remove all debug symbols from C code?
* It doesn't step into functions at all.
* It steps into FbleCall with no source available.

In other words, today, gdb step is completely useless. Even if we only have
debug info for fble code.

My guess is there's something broken about the generated line number
information. Like maybe we adjust the stack during execution and somehow it
looses track of where it is.

It's interesting that we can set explicit breakpoints in functions and it
works.

Wait. Let me change the test to remove -O3 and try again.
* Doesn't help at all.

Why is 'step' so broken? I have the file and line number info in the generated
code, right?

From the gdb manual:

          _Warning:_ If you use the 'step' command while control is
          within a function that was compiled without debugging
          information, execution proceeds until control reaches a
          function that does have debugging information.  Likewise, it
          will not step into a function which is compiled without
          debugging information.  To step through functions without
          debugging information, use the 'stepi' command, described
          below.

There you go. It will not step into a function which is compiled without
debugging information. As long as function calls go via FbleCall, sounds like
we are stuck. If FbleCall has debug info, it will step into the C code. If
FbleCall doesn't have debug info, it will not step into the called code.

We could try 'set step-mode on', which would step into FbleCall even if it
doesn't have debug info. But it would also step into other things that don't
have debug info.

I understand now why step is broken for us. What can we do about it?
A. Inline all uses of FbleCall. Then we could enable step only for .fble code
and it should do as desired because no native calls will be on the stack.
B. Figure out a way to mark all C functions except for FbleCall as boring.
Have the user step through FbleCall.
C. Find some method other than gdb for debugging.

Interesting note in (A): we should be able to look at a backtrace to see if
stepping will work. As long as all items in the backtrace are fble code, we
can step successfully. Otherwise we can't. We need to be able to step into all
functions on the stack trace, and skip borings.

Let's assume we went with approach (C). Is there any loss in not generating
dwarf info for fble code? Have I ever made use of that? Presumably if you are
using gdb, it's for debugging the fble implementation. I can't think of a time
where having it go into fble code was useful for that. The last thing I
debugged I switched to the interpreter to avoid that confusion.

So, if we went with approach (C), we could remove all the dwarf related debug
code.

The other appealing thing about (C) is we could make debug work for all modes:
interpreted, compiled to C, compiled to native. Not just compiled to native.

I think that's the right approach to take. But how would we implement that
kind of debug? Let's revisit that idea.

---

All modes have profiling support. Let's see we want a profiling based
debugger. How would it work?

Let's ignore for the time being that profiling block enter/exit is processed
in batch instead of at every instruction. Assume profiling block enter/exit
happens at the right place.

Setting Breakpoints:
* We could set a breakpoint at a profile op. Or... at a debug op?

Interesting. We could use DebugInfo in the code for debugging. No need to rely
on profiling code? Maybe that would be helpful? Maybe a mix.

gdb sets breakpoints by modifying the instruction at the start of a
breakpoint. I'm not sure if we could do that. More easily we could check at
execution of every instruction if it matches an enabled breakpoint. It will be
slow, especially with a large number of breakpoints, but maybe not too slow.

Next can be implemented using breakpoints.

Step needs to know about call stack enter/exit. We know when we enter/exit a
function.

Not sure how to unwind the stack though. We could keep a shadow stack I guess.

Aside from implementing support for all these things, there's the question of
the UI. Ideally the UI is not at all tied to the internal implementation.
Different people could use different UIs.

Still sounds hard.

---

Back to gdb for the time being. Assuming we will at some point in the future
switch away from gdb, can we at least make gdb a little more usable in the
meantime?

Let's figure out how to skip all c functions except FbleCall. Because my
hypothesis is that will be the most practical approach for stepping through
code.

Oh, and we don't want to generate debug symbols for FbleCall, because then it
will step through it. Sigh.

Maybe I can define a gdb command to set up the environment for fble specific
debugging. Call it 'fble' for example. What would that do?

* skip ignore all c code.
* add a skip-hook that:
  * sets a breakpoint on FbleCall which automatically:
    - Removes itself and skips to skip to child?

Actually, maybe it's as easy as:
* Wrap the calls to executable->run in some function, CallRun
* Ignore all C code.
* When step is called, add a breakpoint to FbleCallRun that:
  - disables the breakpoint at FbleCallRun
  - auto steps.

Nope. Adding a wrapper function isn't good enough, because we would still need
to step into FbleCall to get to the wrapper function.

How nice would it be if we could inline calls to FbleCall in generated code?

For as complicated as it looks, it's not that complicated:
* call FbleProfileEnterBlock if needed.
* Allocate space for the tail call buffer.
* Call the run function.
* Loop on the result:
  - Extend tail call buffer if needed and move over args.
  - Call FbleProfileReplaceBlock if needed.
  - Call the run function.
  - Free args from the tail call buffer.
* Call FbleProfileExitBlock if needed.

I assume this wouldn't have much impact on performance. We save an extra
function call to FbleCall, but we also increase the size of the generated
code. And we loose out on whatever optimizations gcc -O3 give us. It's a step
closer to where we want to be with function calls.

Surely it's worth it if it makes gdb stepping work seamlessly?

The big challenge is just the complexity of writing and maintaining the
assembly code for this. And maybe some encapsulation issues depending on how
we get access to the function info. May as well use FbleFuncValueInfo like we
do now.
 
What do you say? Worth a try? It's a localized change, so not risky in terms
of impacting the 0.2 release.

I vote we try it and see what happens.

On the other hand, given I'm planning to change the calling convention for
functions, maybe best to hold off until after I've done that. Otherwise I'll
just have to rewrite the generated assembly code again.

I don't know. I'm still tempted to do it for the fun of it.

Let's sketch out how the assembly code would look for this:

1. Call FbleStrictValue to get the function value.
2. Call into FbleFuncValueInfo to get the function info.
  No need to save the function value across this call, because we never refer
  to it again.

It's a little sad that FuncValueInfo is exactly FuncValue, minus the value
tag. Current uses of the value tag:
* To find the FbleExecutable* to free OnFree.
* To traverse the value for references.
  
Any better way to structure FbleValue? Like, make it a union type? How would
that look?

* size_t tag_size/tag/profile_block_offset
* size_t valuec - Number of values.
* FbleExecutable* - executable
* FbleValue* values[] - Any values this may reference.

No. Not worth the added complexity.

Alternatives:
* Define an FbleFuncValue type, for easy casting from FbleValue* to
  FbleFuncValue*.
* Add an explicit function to convert FbleValue* to FbleFuncValue*
  We could store FbleFuncValue separately.

I guess one difference is statics being a pointer instead of part of the
object itself. There's no point in doing that though if people always access
the field via FbleFuncValueInfo though.

FbleFuncInfo is public. Why not make FbleFuncValue public? It's the same
thing. The question, I suppose, is what to do about the _base field.

Anyway, don't worry about this now. Back to where we were.

1. Call FbleStrictValue to get the function value.
2. Call into FbleFuncValueInfo to get the function info.
  No need to save the function value across this call, because we never refer
  to it again.
3. If profiling is enabled, jump to profiling code to call
  FbleProfileEnterBlock.
  Will need to save info across this call. Use R_SCRATCH_0.
4. Allocate space for arguments on stack. Set up args.
5. Allocate space for tail call buffer on stack.
6. Call the executable->run function.
7. Save the result to call_instr->dest.
8. Loop check:
  If result != FbleTailCallSentinelValue, goto end of loop
9. Loop body:
  a. Call FbleFuncValueInfo to get function info.
  b. Expand stack allocation as needed.
  c. Copy args over to the right place - will need an inner loop.
  d. Jump to profiling code to call FbleProfileReplaceBlock.
     Need to save info across this call.
  e. Call run function. Save the result to call_instr->dest.
  e. Call FbleReleaseValues on args.
     Save result across the call.
  f. Go to loop check.
10. End of loop:
  a. Call FbleProfileExitBlock if needed. Jump to profiling code for that.
     No need to save anything.
  b. Reset the stack pointer from saved value.

The big thing to keep track of at all times is the stack allocation.
* SP is the start of the stack allocation for tail call and args.
* Save some reg which is the value of SP before that.
* We'll need to make sure we always allocate SP in 16 byte chunks. There
  should be easy logic somewhere to round up to next 16 byte size.
  As in: (x + 15) & (~0x4);

---

Challenge: How does FbleFuncInfo get returned? Do we need to allocate space
for it in advance? Is it returned via registers? It would really be nice if I
could just access FuncValue directly.

From the assembly code, looks like it's storing it to the address passed via
x8?

Do I want to make FbleValue* public in its entirety? What's the downside? What
are the consequences?
* It's really nice to know I can change the format without impacting things.
* It's nice to know they can only be constructed in value.c. We can deal with
  packing properly that way.

So, yeah, I would rather keep it private if possible. But making FbleFuncValue
public seems okay?

It's pretty tempting to allow FbleValue* to be public, so we can directly
access things from assembly code. But again, there's a risk.

A possible compromise would be to return a pointer to FbleFuncValueInfo
instead of an FbleFuncValueInfo? Or have a function to extract the fields by
passing pointers to where to store?

According to the aarch64 spec, allocating a pointer and passing in x8 is the
right thing, because this is a composite type of more than 16 bytes.

How about this:
* In value.h, internally make available:
  FbleValueTag, FbleValue, FbleFuncValue.
* Get rid of FbleFuncValueInfo. I don't think anyone uses it outside of
  internal library anymore, right?

Surely that's better? A decent compromise?

---

Okay, got rid of FbleFuncValueInfo. Now we can access directly from the func
value.

Okay, draft of assembly code done. 115 lines of code so far. I'm sure there
are errors. Hopefully nothing major. I also still need to write all the
profiling code.

I'm not convinced this kind of complexity is worth having. Code bloat, hard to
maintain, probably doesn't buy us any performance, not clear it's actually
useful for anything in the future. All just for an improvement to a
fundamentally limited debugger approach?

Some other thoughts:
* Maybe this helps perf profiling? Though we could probably special case
  FbleCall and recover all the same information at processing time.
* Maybe only inline the code for the main function call. Call out to an
  FbleTailCall to handle the tail call? Because I'm not convinced inlining the
  tail call code helps at all with gdb debugging.

---

Okay, it's implemented now. Fairly gnarly. Hard to debug. But working.

Let's evaluate it:
* Can we step through code with gdb now more easily?
  Works awesome with skip -gfi *.c
* How does runtime performance compare to before the change?
* How does perf profiling look now?

With this change:

time ./pkgs/fbld/bin/fbld ../fbld/nobuildstamp.fbld ./fbld/version.fbld
../fbld/html.fbld ../spec/fble.lib.fbld ../spec/fble.fbld > /dev/null

real    0m33.546s
user    0m32.773s
sys     0m0.761s

Before this change:

time ./pkgs/fbld/bin/fbld ../fbld/nobuildstamp.fbld ./fbld/version.fbld
../fbld/html.fbld ../spec/fble.lib.fbld ../spec/fble.fbld > /dev/null

real    0m33.685s
user    0m32.985s
sys     0m0.612s

So, no appreciable difference in performance.

perf profiling looks decent now. Better than with FbleCall everywhere.

What do you say? I think let's take this for now. It gets good coverage, so
I'm not worried about it hiding bugs. It will just be annoying when I go to
change the FbleRunFunction API in the next release. If it's too much trouble
at that point, consider going back to the previous implementation.

---

Any way to support struct/union access of variables in gdb? foo.bar, for
example, instead of FbleStructValueAccess(foo, 1)?

Dwarf has DW_TAG_structure type.

Currently we say each variable is an FbleValue* type. That's identified by
name. You could potentially have two types with the same name, which is a
little annoying. Or we could uniquify them.

We would have to keep track of the type for each variable through to debug
info. A consequence is we wouldn't be able to access the value as FbleValue*
without casting. That's probably fine.

Members of a type use DW_TAG_member. There's a way to say where the member is
relative to the beginning of the object itself. For unpacked values, that
should be easy to compute based on the field id.

I'm not convinced there's a way to support packed fields in dwarf. Perhaps I
shouldn't worry about that yet. Start with support for unpacked values.

This seems doable to me, but tedious. I'm not convinced its worth putting
effort into if we are going to eventually move away from dwarf to a custom
debugging format that works with all the different backends.

---

Just for the fun of it, let me try running fbld compiled via c instead of
aarch64. If the c compile time and performance is comparable to aarch64,
that's a decent indication that we may want to abandon the aarch64 backend
entirely, and thus really want to find a separate approach to debugging fble
code.

Via aarch64:

Time to compile fbld from scratch:
* 0m39.599s

time ./pkgs/fbld/bin/fbld ../fbld/nobuildstamp.fbld ./fbld/version.fbld
../fbld/html.fbld ../spec/fble.lib.fbld ../spec/fble.fbld > /dev/null

real    0m33.189s
user    0m32.413s
sys     0m0.742s

Via C:

Time to compile fbld binary from scratch:
* 1m17.252s, max process memory 10% 

Time to run fbld command above: 0m39.735s

So, aarch64 is twice as fast to compile and runs 15% faster. Not super
motivating to get rid of at the moment then.

---

How about the topic of printf debugging? Anything nicer we can do?

Honestly, I think it's okay for now. gdb-based for pure code which can be
enabled or disabled. We can move /Sat/Debug% to core if/when desired. I don't
see much point right now. I don't want to force code to be monadic everywhere.

This is another place where better debug support in general for the different
backends could help.

