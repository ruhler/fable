Revisiting Abstract Types
=========================
The question is: can we redesign abstract types to take advantage of modular
compilation?

Because they are a pain to use, and I really don't use them anymore anywhere
significant.

What does modular compilation give me?

When we ship a module, we don't have to ship the implementation as a .fble
file. We can ship it as native code. It seems reasonable to assume the set of
people you trust with manipulating the type corresponds to the set of people
who have access to the .fble file.

The other idea is: is there any way we can avoid the explicit conversions and
casts? Can we please modify the type system to treat the types as equal
otherwise?

For example, I feel like what I really want is to say the set of trusted
modules can access the type as if it were defined in terms of the plain type.
Nobody else can.

A problem with the current approach is that things are forgeable. Anyone can
create a module under any path and use that to gain access to the type.

You know? I don't think modular compilation helps at all with abstract types.
We need access to the implementation if we want to run code in the
interpreter. We shouldn't make compiled code a requirement for abstract types
to work.

There's still merit in trying to improve abstract types. In a dream world, the
extreme case, I would want:
* No casting required to use abstract types.
* Ideally, but not a requirement, we don't have to write the implementation of
  the type at all where it's declared for outside users.
* Imagine we assigned a public key to every abstract type. Then say, when you
  compile, you provide a set of private keys. You are allowed to access any
  abstract type that you have the key for. That's the most flexible and secure
  way to enforce things.

Review of how abstract types work in other languages:
* C: void* with casting for things.
  You either know the secret of what real type it is or not.
* C++ classes - only the class implementation gets access, or explicit friend
  classes.
  Essentially an explicit list of allowed users.
* Java classes: subclass, class, package level granularity.
  Predefined sets of allowed users.
* Fble today: package says who can access or not, but need to explicitly cast.

There must be some natural way to express things? Like, with a Map or Int
interface, I want to declare it to the outside world as abstract 'Int@;', but
the inside world knows what it really is. The inside world is allowed to use
it directly, the outside world isn't.

Again, the question is: how do you define who is inside and who is outside?
And in this case, it seems I want two separate declarations: the 'outside'
opaque declaration and the 'inside' actual declaration.

It's kind of how like in C++ I can forward reference a class without giving an
implementation in the public header. Then pass around a private header with
the actual implementation. The build system enforces in that case who has
access to the private header.

Maybe modular compilation does help here? For example, imagine we have an
abstract type thing that is different from any other type. Use that in the
header file for a module. In the implementation file for the module, use the
actual implementation. When distributing the code, don't share the
implementation.... but that's where we get stuck. You need to share the
implementation to run the code.

Somehow we would need to tell those on the inside to load the real
implementation of the type.

Maybe we should start by removing the need for explicit cast.

Implementation wise I could require every type to have an access list. Most
types will be full access. That way we don't have to special case abstract
types in type checking. Types are treated the same as long as you have full
access to each. Otherwise they are treated different. You are allowed to
construct and access fields from a type you have access to, otherwise you are
not.

---

Yes, the above proposal sounds good. Much simpler syntax. Nothing to do with
modular compilation. Doesn't solve the forgeable issue. But it would be a
great improvement over what we have today.

In terms of forgeability, I feel like what we need is a way to identify
provenance of a module. You can access an abstract type if you are under the
proper module path and of the same provenance.

Examples of provenance: Maybe it's some secret string you provide at compile
time that gets hashed into the module. If you can provide the string key that
hashes to the right value and you are from the right module hierarchy, you can
access that type. Otherwise you can't.

---

Implementation proposal:
* Add a field to FbleType for access control: "open", or a module path
  restriction.
* Check for access control in typecheck on all types before using them for
  struct value, access, etc...
* Pass a module path to the type eqs function for use during type equality.

To help the user understand what access control went bad, print access
controls as part of the type when we print them? Or have a way, after type
equality check fails, to re-run the check without access controls. If that
passes, then we know its an access control issue and can report that to the
user.

For type equality, the access control part is:
* If the access restrictions for normal types a and b are different and you
  don't have full access to both of them, report the types as not equal.
  Otherwise treat them as equal.

Syntax proposal:
* Expr: abstract_type (type : Type, path : Path)
* concrete syntax ??? Maybe: <type> .%(path) ?

We just need that one syntactic construct. No cast, package types, etc.

For example:

@ Int@ = +(
  IntP@ n,
  Unit@ 0,
  IntP@ p
).%(/Core/Int%);

Implementation plan of attack:
* Maybe try implementing it first. Keeping the existing abstract type stuff
  around. Once I have a proof of concept and clear concrete syntax, update
  docs, tests, etc?

Let's see what the parser thinks is an acceptable syntax here.

.% Should work fine on an expression. We already make use of that syntax for
abstract types.

How would poly types look? I want to have a way to distinguish between:
  abstract(<@ T@> { ...}) and <@ T@> { abstract(...) }, right?

  @ Int@ = %(/Core/Int%, +(
    IntP@ n,
    Unit@ 0,
    IntP@ p
  ));

  @ Int@ = %(+(
    IntP@ n,
    Unit@ 0,
    IntP@ p
  ), /Core/Int%);

<@>@ Maybe@ = <@ T@> { +(T@ just, Unit@ nothing).%(/Core/Maybe%); };
<@>@ Maybe@ = <@ T@> { +(T@ just, Unit@ nothing); }.%(/Core/Maybe%);

Yeah, I like the <type> '.%(' <path> ')' syntax.

Where do we use abstract type support today?
* /Pinball/Num%

I think that's the only place right now. That's a good test case.

Here's my vote for a development plan:
1. Add support in type.h, to derisk that.
* FbleNewAbstractType(FbleTypeHeap*, FbleLoc loc, FbleType* type, FbleModulePath* access)
  Creates a copy of 'type' with restricted access.
* Add a field to FbleType with FbleModulePath*;
* Implement the access check in type equality check.
2. Add some support in typecheck.c, to derisk that.
* Don't allow struct construction or access without access to the type, for
  example.
3. Add temporary syntax.
* FBLE_ABSTRACT_TYPE_EXPR
* ...
4. Start writing spec tests.
5. Phase out old impl?

The other option would be to get rid of existing abstract type support
entirely first? Honestly that sounds reasonable to me. We need to update
Pinball in that direction anyway. As long as I have the spec tests behind me,
it should be okay in the end.

Yeah. Let's go that route:
1. Remove existing support for abstract types from impl, spec tests, spec.
2. Draft new spec for abstract types.
3. Draft new spec tests for abstract types.
4. Implement new support for abstract types.
5. Update Pinball/Num to use new abstract types.

---

What is the kind of an abstract type? It should be '@' if abstract. It should
always be @, right? It doesn't matter. The base is '@'. But not if you know
about it?

---

I think it could be cool to support abstract values as well as types. For
example, given a value x, of type X@, the abstract value x.%(/Foo%) is the
same value as x but with type X@.%(/Foo%).

That way we can easily make private modules and private fields of modules. But
we need to be careful here? Maybe, maybe not?

  <expr> .% (<path>)

We should know if <expr> is a type or not based on its type. So we can apply
things appropriately. Sounds reasonable to me. Let's try it.

You know? I think maybe 'private' is a better word than 'abstract' here. The
type isn't abstract to the owner, right? Yes. I like that.

Cool. Updated spec is drafted. It will need a few rounds to clarify details,
but the gist is there and I like how it looks.

---

For the record, I don't think I should worry about forgeability. The goal of
private types is to specify a clear, finite set of modules that are allowed to
access a particular type or value. Specifically, to allow a developer to
change details of the type or value without fear of breaking anything other
than the explicitly specified modules.

Since private types are enforced at type check, not at runtime, there is
nothing we can do in general to prevent security violations. Think of private
types as a way of clearly documenting intent on code changes and what things
may break in the future, along with type checking support to help developer
and user of a library to understand that.

Users can circumvent the check with sufficient investment. If they are willing
to do so, they ought to be willing to deal with any breakage caused down the
line.

The feature is useful as long as we don't end up in a situation where a
developer is afraid to make changes to a type because they think enough (or
significant enough) users are hacking around the private type.

---

Now that I have the draft of the new spec, next step I think is to update the
parser, make sure my syntax is okay.

No issues with the parser syntax. Looks good.

---

Writing tests for private types, I wish there was a way to define a package as
an fble value. That way we could use fble variables for describing packages
instead of having to hard code potentially long module path names. Remember I
used to use _@ for the name of the package type, as short as possible?

Even writing the basic access test case feels too tedious without that.

In other words, I want to bring back the notion of a package type and use that
in place of a module path.

  @ _@ = %(/Foo/Bar%);
  PrivateBool@ = Bool@.%(_@);

If we did that, is there a different syntax that makes more sense?

  PrivateBool@ = _@<Bool@>;
  PrivateBool@ = _@<+(Unit@ true, Unit@ false)>;
  PrivateTrue = _@(True);

  True.%(Pkg@);
  Pkg@.(True);
  Pkg@.(Bool@);

  Pkg@(True), Pkgs@<Bool@>;
  True.%(Pkg@), Bool@.%(Pkg);

For type definitions, I like putting the underlying type first. It feels
more natural.

  True.%(%(/Foo/Bar%));
  +(Unit@ true, Unit@ false).%(%(/Foo/Bar%));

There should be no need for parens around a module path. Maybe:
 
  @ Pkg@ = /Foo/Bar%@;
  @ Pkg@ = @/Foo/Bar%;

  True.%(@/Foo/Bar%)  True.%(Pkg@)   True.%(_@)
  Bool@.%(@/Foo/Bar%)  Bool@.%(Pkg@)  Bool@.%(_@)

Let's see if that would work.

In summary:
  package type: '@' path
  private type: <expr> '.%(' <type> ')', where the type must be a package type.

Or maybe we could let the .%(...) part be any expression, and we return use
the same type as restricted by that expression? Overly general? Yes. Overly
general.

Okay. Let's try out the new syntax. See if there are any issues. Then update
the spec.

---

Trouble with private types of polymorphic abstract types:

  <@>@ Private@ = <@ A@> { A@.%(@/Foo%); }

Is that well typed? You could pass any type A@. Including a private type
restricted to, say @/Bar%.

  Private@<Int@.%(@/Bar%)>.

Options:
* Don't allow use of abstract type in forming a private type.
* Allow any type in forming a private type.
  Meaning, in general, we need to support ANDED lists of module path
  restrictions? Or have TOP and BOTTOM types.

Are there more serious issues here? We don't know the type of A@, so we can't
access it. Good.

Another option could be to say:
  Foo@.%(Pkg@) gives a type with the same underlying type as Foo@, but sets
  access to Pkg@ type. 

Basically ignore whatever restriction is on Foo@ to start. Because what does
it mean to have a private private type? Normally I expect users to know what
the type restriction on a type is.

