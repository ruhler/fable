The Type Name Problem
---------------------
We syntactically distinguish between regular names and type names by appending
'@' to type names. We want to enforce that a type name is always used with
type values and regular name is always used with normal values.

But we don't have enough information today to check that. Specifically, given
an abstract type, we don't know if it is a type type or a normal type, so we
can't properly type check its use:

 <@>@ L@ = <@ T@> { *(T@ head, L@ tail); }

Is tail a valid name, or should it be tail@? There's no way of knowing.

There seem to be a few options:
* Default to abstarct type is normal type
* Don't distinguish between type names or normal names
* Add typeness vs. normalness to the kind descriptor
* use other syntactic markers to distinguish. For example, in the extreme,
  have type and expr be different syntax. In practice that will be super
  tedious, but whatever approach it uses could be adapted to the existing
  setup.


Proposed Solution
-----------------
Expand the notion of kind internally to distinguish between levels of typeof.

@0 is a value
@1 is a type of a value
@2 is a type of a type of a value
etc.

Any time we use the kind '@' in the syntax, that's interpreted to be @1.
You can't specify any other kind. For @0, use a function instead. For @2 or
greater, pass the corresponding @1 type as an argument and call typeof
internally.

I think, hopefully, that shouldn't be too restrictive.


