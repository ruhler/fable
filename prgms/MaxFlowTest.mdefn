
mdefn MaxFlowTest< ; ; MaxFlowTest<>> {
  using Unit<;> { Unit; };
  using Bool<;> { Bool; };
  using UBNat<;> { Nat; Eq; };
  using List<TestFailure;> { TestFailureS = S; TestFailureP = P; };
  using MaxFlow<Node;> { EdgeS; MaxFlow; };

  union TestName(Unit Basic);
  struct TestFailure(TestName name, Nat a, Nat b);

  union Node(Unit A, Unit B, Unit C);

  func TEq(TestName name, Nat a, Nat b, TestFailureS rest; TestFailureS) {
    ?(Eq(a, b); rest,
      TestFailureS:cons(TestFailureP(TestFailure(name, a, b), rest)));
  };

  func Graph( ; EdgeS) {
  };

  func Test( ; TestFailureS) {
    TEq(TestName:Basic(Unit()), 4(), MaxFlow(Graph(), Node:A(Unit()), Node:C(Unit())),
    TestFailureS:nil(Unit()));
  };
}

