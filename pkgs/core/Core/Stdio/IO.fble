@ Bool@ = /Core/Bool%.Bool@;

@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<@>@ IO@ = /Core/Monad/IO%.IO@;
@ World@ = /Core/Monad/IO%.World@;
<@>@ R@ = /Core/Monad/IO%.R@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;
<<@>@>@ OStream@ = /Core/Stream%.OStream@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;

@ StdioIO@ = *(
  IO@<Maybe@<Int@>> stdin,
  (Int@, World@) { R@<Unit@>; } stdout,
  (Int@, World@) { R@<Unit@>; } stderr,
  (String@, World@) { R@<Maybe@<IStream@<IO@>>>; } read,
  (String@, World@) { R@<Maybe@<OStream@<IO@>>>; } write,
  (String@, World@) { R@<Maybe@<String@>>; } getenv
);

# Run --
#   A top-level IO implementation for running a Stdio Main@ program.
(/Core/Stdio%.Main@)(StdioIO@, List@<String@>) { IO@<Bool@>; }
Run = (/Core/Stdio%.Main@ main)(StdioIO@ stdio, List@<String@> args) {
  main<IO@>(
    /Core/Monad/IO%.Monad,
    @(
      in: stdio.stdin,
      out: (Int@ s)(World@ w) { stdio.stdout(s, w); },
      err: (Int@ s)(World@ w) { stdio.stderr(s, w); },
      read: (String@ s)(World@ w) { stdio.read(s, w); },
      write: (String@ s)(World@ w) { stdio.write(s, w); },
      getenv: (String@ s)(World@ w) { stdio.getenv(s, w); }
    ))(args);
};

@(Run);
