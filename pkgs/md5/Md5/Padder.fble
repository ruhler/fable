
@ Bool@ = /Core/Bool%.Bool@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

@ Unit@ = /Core/Unit%.Unit@;

@ Bit8@ = /Md5/Bits/Bit8%.Bit8@;
% H8 = /Md5/Bits/Bit8%.H8;

@ Bit64@ = /Md5/Bits/Bit64%.Bit64@;
% And = /Md5/Bits/Bit64%.And;
% Add = /Md5/Bits/Bit64%.Add;
% Shl1 = /Md5/Bits/Bit64%.Shl1;
% Inc = /Md5/Bits/Bit64%.Inc;
% IsZero = /Md5/Bits/Bit64%.IsZero;
% H64 = /Md5/Bits/Bit64%.H64;

@ T@ = Bit8@;

Bit64@ 3f_64 = H64|3F;
Bit64@ 08_64 = H64|08;

<<@>@ M@>(Monad@<M@> m, M@<Maybe@<T@>> get) {
  % Stream = /Md5/Stream%(m, get);
  @ Stream@ = Stream.Stream@;
  % Put = Stream.Put;
  % End = Stream.End;

  # Add zeros as needed, then the final length to the output message.
  (Bit64@, Bit64@) { M@<Stream@>; }
  PadZ = (Bit64@ msglen, Bit64@ length) {
    Bool@ end = IsZero(And(3f_64, Add(08_64, length)));
    end.?(false: {
      Unit@ _ <- Put(H8|0);
      PadZ(msglen, Inc(length));
    });

    Bit64@ bits = Shl1(Shl1(Shl1(msglen)));
    Unit@ _ <- Put(bits.lo.lo.lo);
    Unit@ _ <- Put(bits.lo.lo.hi);
    Unit@ _ <- Put(bits.lo.hi.lo);
    Unit@ _ <- Put(bits.lo.hi.hi);
    Unit@ _ <- Put(bits.hi.lo.lo);
    Unit@ _ <- Put(bits.hi.lo.hi);
    Unit@ _ <- Put(bits.hi.hi.lo);
    Unit@ _ <- Put(bits.hi.hi.hi);
    m.return(End);
  };

  # Note: length is in units of bytes
  (Bit64@) { M@<Stream@>; } Pad = (Bit64@ length) {
    Maybe@<Bit8@> x <- m.do(get);
    x.?(nothing: {
      Unit@ _ <- Put(H8|80);
      PadZ(length, Inc(length));
    });

    Unit@ _ <- Put(x.just);
    Pad(Inc(length));
  };

  @(Pad: Pad(H64|0));
};
