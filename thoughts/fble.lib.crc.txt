CRC Library

Seems like a good thing to add to fble library. Useful for png, among
apparently many other things.

https://reveng.sourceforge.io/ is a nice reference for the kind of CRCs we may
want to support, and as a reference implementation to test against.

I like the idea of a general implementation that supports arbitrary bit
lengths. But how could we make that efficient? Like, we could implement it on
top of list of bits. Or we could implement it on top of some abstract BitN@
type. I think I prefer the latter.

Maybe the thing to do is figure out what interface we need for a BitN type and
advertise that interface. If it doesn't line up exactly with the BitN
interface we implement elsewhere, we can always add an adaptor function to
convert interfaces with practically no cost.

Hmm... Except we may want to use lookup tables to help in the implementation.
Is it still reasonable to do that with a generic BitN type?

Anyway, general interface would be:
* Width. Number of bits. Probably parameterize by BitN type.
* Initial register value, I assume BitN@.
* Polynomial. Maybe described using a BitN@?

Based on wikipedia:
* N bits: the length of the check value.
* Polynomial - of degree n. Can be encoded with N bits.

Computation: 
 * Pad the input with 0s to make it a multiple of N bits in length.
 * While there is more input:
    uh... I'll need to understand in better detail.

The crc32 shortcut is:
  sum = init
  for each byte:
     index = (sum XOR byte) & 0xFF
     sum = (sum >> 8) XOR LOOKUP[index]
     
---

The shortcut is really just precomputation and lookup table. The fact that it
uses 8 bits has nothing to do with the definition of the CRC. In general, we
have a clear N bit register/checksum, and we feed in a single bit at a time.
We could feed in batches of M bits at a time for performance if we wanted.

Let me start by doing some implementation that I can test is correct. Let me
start by writing a test case. Don't worry too much about the interface or
performance to start.

Let's use cksum to start. Because it's easy for me to generate reference test
cases.

cksum parameters:

  CRC-32/CKSUM

   width=32 poly=0x04c11db7 init=0x00000000 refin=false refout=false
   xorout=0xffffffff check=0x765e7680 residue=0xc704dd7b name="CRC-32/CKSUM"

   The cksum program processes a representation of the input stream
   length following the input. It returns 930766865 (0x377A6011) on the
   check string, processed internally as 31 32 33 34 35 36 37 38 39 09.

That suggests the check string is: 123456789\t

Can I repro this example using cksum?

Yes. The file is the 9 characters: 123456789. The cksum program adds the
length 09 after that. The result is 0x377A6011.

Note the 'check' value listed is the contents of the register after reading
"123456789" as 8 bit characters.

'refin=false' means message is read most significant most significant bit
first.

So, in this case, we feed a byte at a time, which is translated to bits at a
time. If I want to, I could write the test case and API entirely in terms of
sequences of bits.

Note, 'poly' is in MSB first code, highest order term is omitted.

Cool. Let's start with a list of bits implementation, like we have for LFSR (I
wonder if we can somehow reuse/share the LFSR code?). Test that on cksum, and
then go from there.

---

My first draft doesn't work. Debugging.

Ideas:
* Is my bit order wrong? Is it most significant bit first of a byte or least
  significant bit first? According to above, most significant bit, which is
  the order I input bits.
* Let's try the wikipedia example and debug that. That should be easier.

I think I'm just not understanding the algorithm correctly. I should figure it
out by hand on the wikipedia example first.

Turns out you do need to add n bits of 0 to the end. The math is:

M(x)*x^n = Q(x)*G(x)+R(x),

Where M is the message, Q is the quotient (ignored), G is the polynomial, and
R is the remainder checksum. But it's in a funny math land where 1 + 1 = 0 for
all the coefficients.

Rather than have to pass through a bunch of zeroes at the end, you can use a
different algorithm that shifts bits in to the most significant bit instead of
the least significant bit.

The algorithm is something like:
  R = 0
  for each bit
    R = R << 1
    R[msb] = R[msb] XOR bit
    if R[msb] == 1
       R = R XOR G
    
So, a couple things I can try.

1. modify my existing test cases to append zeroes to the message. Just to
check if I get the magic values I hope.
2. Reimplement CRC with the above algorithm and remove the zeroes padded to
the messages and see if I get the magic values I hope.

Tried (1). It doesn't work. So maybe I have a bug elsewhere in my code.

Code looks okay by manual inspection. Maybe worth pulling out the debugger,
step through the code, and see from there?
      
---

The problem was my initial value was Hex|000 instead of Binary|000. That fixes
the wikipedia example. The cksum example still isn't working as I expect
though. Perhaps I have an incorrect interpretation of 'check'. Maybe we need
to feed in the check and verify the output is zero in that case?

Check is:

   The contents of the register after initialising, reading the UTF-8 string
   "123456789" (as 8-bit characters), optionally reflecting, and applying the
   final XOR.

Note that xorout is set to 0xffffffff. And we have a residue What's residue
and xorout? xorout is what we apply to the final message.

residue is is before the final XOR. Does that make sense? No. I clearly don't
understand. residue is 0xc704dd7b. XOR that with 0xffffffff would give
0x38fb2284, or something like that.

The value I get at the end is
1000 1001 1010 0001 1000 1001 0111 1111
89a1897f

Hey, that looks right, as inverted check value:
1000 1001 1010 0001 1000 1001 0111 1111
0111 0110 0101 1110 0111 0110 1000 0000
765e7680.

Perfect. So it works. I just need to interpret the check bit properly.

---

Next step: re-implement it so we don't need to feed in the extra bits at the
end.

