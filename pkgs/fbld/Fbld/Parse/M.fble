
@ Char@ = /Core/Char%.Char@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Loc@ = /Fbld/Loc%.Loc@;
% Advance = /Fbld/Loc%.Advance;

@ StringL@ = /Fbld/Types%.StringL@;
<@>@ Result@ = /Fbld/Types%.Result@;
<@>% Ok = /Fbld/Types%.Ok;
<@>% Err = /Fbld/Types%.Err;

<@>@ S@ = <@ T@> { *(StringL@ in, T@ x); };

# M@ - A parser monad.
<@>@ M@ = <@ T@>(StringL@) { Result@<S@<T@>>; };

# Return the given value.
<@ T@>(T@) { M@<T@>; }
Return = <@ T@>(T@ x)(StringL@ in) {
  Ok(S@(in, x));
};

# Report a parse error.
<@ T@>(StringL@) { M@<T@>; }
Error = <@ T@>(StringL@ msg)(StringL@ _) {
  Err<S@<T@>>(msg);
};

# Monadic Do for the parser monad.
<@ A@>(M@<A@>)<@ B@>((A@) { M@<B@>; }) { M@<B@>; }
Do = <@ A@>(M@<A@> ma)<@ B@>((A@) { M@<B@>; } f)(StringL@ in) {
  Result@<S@<A@>> ra = ma(in);
  ra.?(err: Err<S@<B@>>(ra.err));
  f(ra.ok.x)(ra.ok.in);
};

# Returns the next character in the input stream without changing the parser
# state.
M@<Maybe@<Char@>> Peek = (StringL@ in) {
  Maybe@<Char@> mc = {
    in.str.?(nil: Nothing<Char@>);
    Just(in.str.cons.head);
  };
  Ok(S@(in, mc));
};

# Returns the current location.
M@<Loc@> Loc = (StringL@ in) {
  Ok(S@(in, in.loc));
};

# Gets the next character in the input stream, advancing the parser state as
# appropriate.
M@<Maybe@<Char@>> Get = (StringL@ in) {
  String@ str = in.str;
  str.?(nil: Ok(S@(in, Nothing<Char@>)));
  Char@ c = str.cons.head;
  Loc@ l = Advance(in.loc, c);
  Ok(S@(StringL@(str.cons.tail, l), Just(c)));
};
  
# Skips the next character in the input stream, advancing the parser state as
# appropriate.
M@<Unit@> Skip = {
  Maybe@<Char@> _ <- Do(Get);
  Return(Unit);
};

# Runs a parser monad on the given input string.
<@ T@>(M@<T@>, StringL@) { Result@<T@>; }
Run = <@ T@>(M@<T@> m, StringL@ in) {
  Result@<S@<T@>> r = m(in);
  r.?(err: Err<T@>(r.err));
  Ok(r.ok.x);
};

@(M@, Return, Error, Do, Peek, Loc, Get, Skip, Run);
