Fble CMake
==========
Goal: see if we can uses CMake to build Fble packages, including the compiler
and fble program packages.

The motivation is: if we can build things with cmake, then it should be more
portable, handle configuration and package dependencies automatically, and
make it easy to create distributable packages.

Step 1: let's do a straight forward cmake build setup for libfble.a. This
should be easy I claim. Nothing crazy or fancy needed.

---

Well, this is pretty frustrating. I need -std=c99 to build properly, because I
use 'typeof' as a variable name. CMake claims to support setting required
standards, but it's picking gnu99 instead of c99.

Perhaps that's a hint that it's worth me not using 'typeof' in the name of
variables? That way it will be more portable?

Looks like set(CMAKE_C_EXTENSIONS OFF) is required. Cmake does extensions on
by default. I want to get feedback from the compiler if I'm using any
extensions, so C_EXTENSIONS OFF sounds reasonable to me.

With that, it's pretty straight forward to build a vanilla libfble.a using
cmake. I'm not convinced the settings for cmake are well defined. I suspect
I'm just getting lucky that by specifying a standard and extensions off, it
happens to set the right flags. Oh well. It probably doesn't matter that much
in practice anyway.

---

Next challenge: cmake isn't building the parser. Looks like there is a module
that supports that. Okay. Looks good. We have fble-test now.

What's next? fble-stdio would be nice. Okay, that works fine.

Next? Maybe add Fble/Tests.fble test?

How will I specify that it depends on the value of all the relevant fble
files? I bet it silently doesn't care about those dependencies. Like it
silently ignored parse.y that I passed. Hmm...

---

cmake has a for loop, which is nice for factoring out common code for a lot of
target. For example, I can use a for loop for all the tools.

Documentation is tricky. I read stuff and don't have a clue how to make use of
it in practice. For example, find_package. It looks like SDL2 ships with a
cmake file describing the package, so I can use that. But GL doesn't. I'll
have to figure out how to set that up.

Okay, looks like there is a FindOpenGL cmake thing somewhere. I wonder where?

/usr/share/cmake-3.16/Modules/FindOpenGL.cmake

And there are other modules there that ship with CMake.

---

Added a test. It took me a while to figure out that enable_testing() has to be
done before adding any test. Note that running 'make test' does not cause
things to be rebuilt that are out of date. I'll need to run 'make && make
test' for that, which is slightly annoying.

I don't know what they are doing for their makefiles, but it takes a
noticeably long time to run make when everything is already up to date. That's
annoying.

---

Next question: how can we compile an fble program?

Maybe start simple. Try compiling /Unit% to an object file?

It looks like I can add_custom_command. There is an option to ask it to scan
for implicit dependencies, but that only works for C, CXX, and makefiles and
is ignored otherwise. And there is an option for a Ninja .d depends file, but
that's an error for other generators. In other words, this is not going to be
portable. And I'm starting to question now if all the dependencies are
properly tracked. For example, how about I change a header file and see if
anything is recompiled? It's hard to know, because it looks like it does
something even if I change nothing.

Looks like changing a header file does cause c code to be rebuilt. That's
good.

So, what do I do? Require Ninja as the generator and use .d files?

---

I'm going to abandon my first attempt at cmake for fble.

For when I want to revisit later, here is the summary of why:

Major Concerns:
* I don't see a portable way to support scanning of non-C or CXX files for
  implicit dependencies. I haven't tried too hard, but it doesn't seem worth
  the effort to me.

Moderate Concerns:
* The documentation is cryptic. It's too hard to figure things out from the
  documentation alone.

Minor Concerns (general dislike and distrust):
* Silently ignoring parse.y when passed to add_library.
* Hard to figure out what's going wrong from make files if build doesn't work.
* Make takes forever just to see that it's up to date, and I don't believe
  that's due to anything intrinsic about make.
* Having language extensions enabled by default.
* Not rebuilding out of date files when 'make test' is run.
* Re-running tests that have already run.

