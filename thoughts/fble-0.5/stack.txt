Stack
=====
Revisiting how we manage the stack.

The primary goal is to avoid use of ref value for deciding when to merge
frames. But it seems worthwhile to think more about how we lay out the stack.

Approaches:

A. PushFrame / PopFrame every time, without merging.
Best use of memory. Costly, due to the need to GcRealloc objects when
returning from frames. This would be a good baseline to measure against.

B. Merge on non-ref function.
This is a hack. It doesn't make sense. You could have recursive calls where it
makes sense to merge and you could have non-recursive calls where it doesn't
make sense to merge. For example, you could implement an exponential behaving
non-recursive function that takes exponentially more memory than it should
with this case. This would be a good baseline to measure against, but
otherwise I want to move away from it.

C. Merge on frame size.
The idea is we should be able to use not more than a constant amount of extra
memory per frame to reduce the cost of PushFrame / PopFrame. That's easy: if
we haven't used up that much memory in the frame yet, merge the next call. If
we have, don't merge the next call. That will guarantee us we aren't using
more than a constant amount of extra memory per frame. It lets us do some
merging for recursive functions and makes sure we don't over-merge for
non-recursive functions. I don't know what size to pick. Maybe 4K extra per
frame? I'm interested in seeing how this compares to approach (B).

D. Something smarter?
I have this feeling that it would be great if the compiler could be smart
about how objects are allocated initially. Like, what if we say we allocate
objects to be returned at the front of the frame, then when we pop the frame,
instead of having to GcRealloc or copy the returned values, we bump the caller
frame size to include what's returned. I'm not sure how well this can
generalize though.

Other miscellaneous ideas:
* We can copy stack data from a callee stack frame to a caller stack frame.
  Just so long as we don't pathologically copy it. So maybe limit to 5 copies
  before switching to a GcRealloc?

Let's start by benchmarking A, B, and C. If (C) isn't too much of a
regression, let's go that route. That's enough to unblock reference values.

---

If we remove merging of frames entirely:

/usr/bin/time -f "Time: %E\nMemory: %M"  ./out/pkgs/benchmark/fble-benchmark
  Time:   4:46.72 ==> 5:08.26
  Memory:  609396 ==> 528920

Seems like less of a performance impact than I expected?

If we use 4K frame alloc as limit:
  Time:   4:46.72 ==> 5:08.26 ==> 4:50.23
  Memory:  609396 ==> 528920 ==> 504192

That's nice.

If we use 16K frame alloc as limit:
  Time:   4:46.72 ==> 5:08.26 ==> 4:50.23 ==> 4:51.69
  Memory:  609396 ==> 528920 ==> 504192 ==> 504372

Let's stick to 4K frame alloc limit.

Clearly we can get rid of basing this in ref value. Cool.

Let me call this line of discussion done for now, since the goal is achieved.

---

The numbers above don't include changes to merging of compact frame, I later
discovered. After getting rid of ref values for real, it seems I can't merge
frames like I used to.

Specifically:
A. If we try to merge PushFrame and Compact with a 4K alloc limit, we get a
   memory leak.
B. If we try to merge PushFrame only with a 4K alloc limit, md5 runtime blows
   up.
C. If we don't try to merge frame at all, things run fine, but we spend an
   excessive amount of time in GcRealloc.

I would like to understand (A) and (B) a little better. At the same time, I
feel like it's worth exploring the idea of deciding at PopFrame and
CompactFrame whether to merge after the fact instead of deciding in advance. I
think that could avoid the issues with (A) and (B).

To get the most out of post merging, we'll want to split the stack into three
parts:
1. The native stack.
2. The managed stack frames.
3. Stack allocated data.

That way way I can pop from the manage stack frame without popping from the
stack allocated data. We can chose to pay for GcRealloc or for stack allocated
data growth.

Hack to get an idea if post merging could get us anything: try post merging
without splitting the stack yet. It's not an efficient use of space, but
should show us if correctness stuff will work out, right?

The code for PopFrame to do post-merge looks pretty straight forward to me.
One funny thing: why do we store Frame* as part of the stack header?

It's because we need to know when we GcRealloc a value what frame owns it. We
can have stack allocated values up frame.

This is where the tricky part of post merging happens: I don't have an easy
way to update the frame point for all the stack allocated values in a callee
frame when reassigning those values to the caller.

Specifically I need to know the right 'gen' and 'alloced' list to GcAlloc the
object to.

---

Here's how I could make post merging work: scribble over part of the callee
frame when we merge. Then when I GcRealloc, check if the frame was scribbled
over. If so, use 'top' instead of the given frame?

That might not be right though. We could have popped a bunch of frames, then
pushed a bunch of frames. I need to allocate to the right caller frame, right?

Anyway, let's go back to understand (A) and (B) a little better.

A. pre-merge push and compact.

There was a bug in the merge condition. I updated it. Let's see how it looks
now. All the tests pass.

If pre-merging works, I suppose go with that? Somehow I feel like post-merging
is a 'better' way to go, but given I don't know how to implement it, and I
can't explain why it would be a better way to go...
