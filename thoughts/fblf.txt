Fable F
=======
Richard Uhler <ruhler@degralder.com>

1. Introduction
---------------
Fblf is intended to be a high performance, Turing-complete imperative
programming language. It is designed based on the idea that all program and
data memory is allocated statically.

Fblf disallows memory allocations and unbounded data types at run
time. It allows partial in-place updates of values. This should address the
biggest challenges fble faces performance wise: dynamic memory allocation,
automatic memory management, immutable data types, and support for fine
grained multithreading.

Fblf includes support for defining reusable procedures. Though procedures
could make it easier to write fblf programs, their primary motivation is to
make it possible to express, at runtime, large programs using a small amount
of program memory.

Abstractions designed for programmers will be implemented in a meta language
that is statically evaluated away at compile time. There will be no runtime
cost to these programmer abstractions, except we expect some of the programmer
level abstractions will be translated into fblf procedures to save program
memory.

The big questions are whether fblf runs fast enough and is expressive enough
to describe interesting programs. We shall see.

2.0 Abstract Syntax Reference
-----------------------------
Name ::= (* A string of characters. *)
Int ::= (* An integer. *)
Const ::= (* A sequence of zero or more bits. *)

Var ::= var (id :: Int) (offset :: Int)

Value ::= Var | Const ;

Cond ::=
   equals (a :: Value) (b :: Value) (n :: Int)
 | not_equals (a :: Value) (b :: Value) (n :: Int)
 ;

Stmt ::=
   assign (var :: Var) (value :: Const) (n :: Int)
 | seq (statements :: [Stmt])
 | if (cond :: Cond) (if_body :: Stmt) (else_body :: Stmt)
 | while (cond :: Cond) (body :: Stmt)
 | call (name :: Name) (args :: [Var])
 ;

Proc ::= proc (name :: Name) (argc :: Int) (body :: Stmt) ;

Prog ::= prog (procs :: [Proc]) ;

