
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Drawing@ = /Drawing%.Drawing@;
@ Color@ = /Drawing%.Color@;
@ Point@ = /Drawing%.Point@;

@ Int@ = /Int%.Int@;
% Add = /Int%.Add;
% Mul = /Int%.Mul;
% Eq = /Int/Eq%.Eq;
% Lt = /Int/Eq%.Lt;
% Int = /Int/Lit%.Int;
% Range = /Int/Iter%.Range;

<@>@ List@ = /List%.List@;

@ String@ = /String%.String@;
% Strs = /String%.Strs;
% Str = /String%.Str;

@ TestResult@ = /Test%.TestResult@;

(Point@, Point@) { Bool@; } EqPoint = (Point@ a, Point@ b) {
  Eq(a.x, b.x).?(false: False);
  Eq(a.y, b.y).?(false: False);
  True;
};

(Point@, Point@) { Bool@; } LtPoint = (Point@ a, Point@ b) {
  Lt(a.x, b.x).?(true: True);
  Lt(b.x, a.x).?(true: False);
  Lt(a.y, b.y);
};

(Point@) { String@; } ShowPoint = (Point@ x) {
  Strs[Str|'(', /Int/Show%.Show(x.x),
    Str|', ', /Int/Show%.Show(x.y), Str|')'];
};

(Color@, Color@) { Bool@; } EqColor = (Color@ a, Color@ b) {
  Eq(a.r, b.r).?(false: False);
  Eq(a.g, b.g).?(false: False);
  Eq(a.b, b.b).?(false: False);
  True;
};

(Color@) { String@; } ShowColor = (Color@ c) {
  # TODO: Show color as hex string.
  Strs[
    Str|'(',  /Int/Show%.Show(c.r),
    Str|', ', /Int/Show%.Show(c.g),
    Str|', ', /Int/Show%.Show(c.b), Str|')'];
};

@ Drawn@ = /Map%.Map@<Point@, Color@>;

% Insert = /Map%.Insert<Point@>(LtPoint)<Color@>;

@ Pixel@ = *(Int@ x, Int@ y, Color@ color);

# Drawn --
#   Create a drawing by listing raw pixels.
(List@<Pixel@>) { Drawn@; } Drawn = (List@<Pixel@> pixels) {
  pixels.?(nil: /Map%.Empty<Point@, Color@>);

  Pixel@ head = pixels.cons.head;
  Insert(Drawn(pixels.cons.tail), Point@(head.x, head.y), head.color);
};

# Draw --
#   Render a drawing.
# 
# Inputs:
#   a, b - current affine transformation
#   drawing - the drawing to draw
#   drawn - the canvas that has been drawn so far.
(Point@, Point@, Drawing@, Drawn@) { Drawn@; }
Draw_ = {
  (Point@ a, Point@ b, Drawing@ drawing, Drawn@ drawn) {
    drawing.?(
      blank: drawn,
      triangle: /Undef%.Undef<Drawn@>.undefined,  # TODO
      rect: {
        Int@ x = Add(Mul(a.x, drawing.rect.x), b.x);
        Int@ y = Add(Mul(a.y, drawing.rect.y), b.y);
        Int@ w = Mul(a.x, drawing.rect.w);
        Int@ h = Mul(a.y, drawing.rect.h);

        Int@ xmin = Lt(w, Int|0).?(true: Add(x, w), false: x);
        Int@ xmax = Lt(w, Int|0).?(true: x, false: Add(x, w));
        Int@ ymin = Lt(h, Int|0).?(true: Add(y, h), false: y);
        Int@ ymax = Lt(h, Int|0).?(true: y, false: Add(y, h));

        /Iter%.For<Int@, Drawn@>(Range(xmin, xmax), drawn, (Int@ x, Drawn@ d) {
          /Iter%.For<Int@, Drawn@>(Range(ymin, ymax), d, (Int@ y, Drawn@ d) {
            Insert(d, Point@(x, y), drawing.rect.color);
          });
        });
      },
      transformed: {
        Int@ axi = drawing.transformed.a.x;
        Int@ ayi = drawing.transformed.a.y;
        Int@ bxi = drawing.transformed.b.x;
        Int@ byi = drawing.transformed.b.y;

        Point@ a_ = @(x: Mul(a.x, axi), y: Mul(a.y, ayi));
        Point@ b_ = @(x: Add(Mul(a.x, bxi), b.x), y: Add(Mul(a.y, byi), b.y));
        Draw_(a_, b_, drawing.transformed.drawing, drawn);
      },
      over: {
        Draw_(a, b, drawing.over.above, Draw_(a, b, drawing.over.below, drawn));
      });
  };
};

(Drawing@) { Drawn@; } Draw = (Drawing@ d) {
  Draw_(Point@(Int|1, Int|1), Point@(Int|0, Int|0), d, /Map%.Empty<Point@, Color@>);
};

(Drawn@, Drawn@) { TestResult@; }
AssertEquals = (Drawn@ expected, Drawn@ actual) {
  /Test%.AssertEquals<Drawn@>(
    /Map/Eq%.Eq<Point@, Color@>(EqPoint, EqColor),
    /Map/Show%.Show<Point@, Color@>(ShowPoint, ShowColor),
    expected, actual);
};

@(Drawn@, Pixel@, Draw, Drawn, ShowColor, EqColor, LtPoint, AssertEquals);

