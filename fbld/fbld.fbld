@doc Fbld
  @FbleVersion (@BuildStamp)

 @section Introduction
  Fbld is a lightweight markup language for structured text. It aims to
  balance the readibilty of markup languages like asciidoc and markdown with
  the extensibility and clarity of structure of markup languages like xml.

  Note: Fbld should not be confused with the predecessor to fble, which was
  also called fbld. We reuse the name @l[fbld] in this case to suggest the
  term "Fable Doc Language".

  @subsection Goals
   The primary design goals of fbld are:

   @item
    It should be easy to parse, by both human and computer. There should not
    be weird corner cases, ambiguity, or complex resolution rules for parsing
    like there are for markdown, for example.

   @item
    The main textual content should be easy to read from source by a human.
    It should not include excessive clutter from tags that overly distract
    from the contents of the text, as is the case with roff and xml, for
    example.

   @item
    It should be easy to provide custom processing of the document. For
    example, conversion to html, latex, roff, or anything you might like.

   @item
    It should support custom structure, allowing a user to define their own
    new kinds of structures and use those structures in their documents.

  @subsection Use Cases
   The original use cases motivating development of the fbld language are:

   @item
    Document functions in code and automatically generate man pages from it.

   @item
    Document command line usage and automatically generate both man page and
    help usage text from it.

   @item
    Mark up README files, tutorials, and language specifications to add
    clarity to structure and make it possible to generate books, webpages,
    etc. with that information.

  @subsection Alternatives
   There are many alternatives for document markup. Each of the ones I tried
   had their own issues. Some of the issues are subtle and quite subjective.
   Here are a list of alternatives I considered before deciding to develop my
   own markup language.

   @definition Markdown
    @item Subtleties in how to parse correctly.
    @item No support for custom structure components.

   @definition Asciidoc
    @item Complex to parse and provide custom processing of the document.
    @item Vim syntax highlighting doesn't work well, if at all.
    @item
     You have to know what particular symbols mean to understand the structure
     of a document. For example, @l[......] versus @l[////////].

   @definition XML
    @item Tags clutter the doc too much.

   @definition roff
    @item Tags clutter the doc too much.

   @definition tcl
    @item Too tedious to have nested inlined structure.

   @definition doxygen
    @item Not generally extensible to things beyond code documentation.

 @section Example
  This section provides an example of fbld markup text which will be
  referenced through the remainder of the fbld specification. It's a contrived
  document explaining the risks of using malloc:

  @code[fbld] @
   @title Malloc Reminder

   It's @emph[really] important to check the result of the @code[malloc]
   function in C, in case it returns @NULL. See @link[the malloc man
   page][https://manpages.org/malloc] for more details.

   @section[The Risks of Malloc]
    It's possible that @code[malloc] is unable to allocate memory. If that's
    the case, it will return @NULL. If you try to access the returned pointer,
    bad things can happen.

    So you should always check the result of @code[malloc] for @NULL.

   We have discussed that it's important to check the result of @code[malloc]
   for @NULL.

  Fbld documents are a mix of plain text and commands introduce with the @l{@}
  character. The syntax and interpretation of these commands are described in
  detail in the following sections.

 @section Document Structure
  Internally, fbld documents are represented as a mix of plain text and
  commands.

  A command has a name and zero or more arguments. For example,
  @l{@NULL} is a command with name @l[NULL] and no arguments.
  @l{@emph[really]} is a command with name @l[emph] and single argument
  @l{really}, and @l{@link[the malloc man page][https://manpages.org/malloc]}
  is a command with name @l{link} and two arguments.

  Arguments to commands are fbld markup which can themselves have
  additional commands in them.

  @subsection Abstract Syntax
   Here's an abstract syntax for fbld document structure:

   @code[text] @
    Text ::= (* A string of plain text characters *)

    Command ::=
        command (name : Text) (args : [Markup])
      ;

    Markup ::=
        plain (text : Text)
      | command (command : Command)
      | sequence (markups : [Markup])
      ;

 @section Document Syntax
  The syntax of fbld leverages whitespace and other punctuation to reduce the
  need for brackets around command arguments everywhere. The goal of the
  syntax is to make fbld documents easy to read while still providing clear
  rules for forming commands and arguments to commands.

  There are two main kinds of syntax in fbld: inline structured text and block
  structured text.

  @subsection Inline Structured Text
   Inline structured text is used for marking up paragraphs or short lines of
   text. Whitespace is preserved in inline structured text.

   @subsubsection Plain Text
    Inline structured text interleaves plain text and commands. Plain text is
    any text that comes between commands. It can be written directly. For
    example:

    @code[fbld] @
     Hello, how are you?

    The following escape sequences are supported in plain text:

    @def[@l{\\}] @l{\}
    @def[@l{\@}] @l{@}
    @def[@l{\[}] @l{[}
    @def[@l{\]}] @l{]}
    @def[@l{\n}] Newline

    Any other character following a backslash is considered reserved for
    future use and is not currently allowed. The escape sequences make it
    possible to include @l{@} in plain text, and make it possible to include
    @l{[}, @l{]}, and newline in plain text where they may not otherwise be
    allowed. For example:

    @code[fbld] @
     My email is ruhler\@degralder.com.

   @subsubsection Command
    An inline command starts with the character @l{@} followed by a command
    name made up of one or more characters from the set @l{[a-zA-Z0-9_]}.
    Arguments to commands are provided following the command name.

   @subsubsection Inline Args
    The standard way of supplying arguments to a command is using inline args.
    An inline arg is inline structured text in square brackets following a
    command or other inline arguments to a command.

    For example, the following @l{@emph} command has a single inline argument:

    @code[fbld] @
     @emph[You must check for @NULL!]

   @subsubsection Inline Literal Args
    Inline literal args are used to pass literal text as an argument. A
    literal inline arg is literal text in braces following a command or other
    inline arguments to a command. This is primarily useful for writing plain
    text with @l{@} characters without having to escape them. For example:

    @code[fbld] @
     @email{ruhler@degralder.com}

    There is no processing of escape sequences in inline literal args. The
    characters are read directly. Braces nest inside the literal argument, so
    you can include close braces in the literal text as long as there is a
    matching, properly nested open brace.

    For example, the following inline literal argument specifies an fble
    function type, which includes both @l{@} and @l[}] characters:

    @code[fbld] @
     @emph{(Bool@) { Bool@; }}

    The argument to the command in the following example includes the
    backslash characters:

    @code[fbld] @
     @emph{The escape sequences in fbld are: \\, \@, \[, \], and \n.}

  @subsection Block Structured Text
   Block structured text is used for marking up larger sections of document
   spanning multiple lines or paragraphs. It provides a variety concrete
   syntax options for specifying arguments to commands. Documents are parsed
   as block structured text.

   @subsubsection Block Commands
    Commands are introduced in block structured text using the @l{@} symbol,
    as in inline structured text, except the commands must start at the first
    column of text. For example, here is a sequence of four commands in block
    structured text:

    @code[fbld] @
     @title[My Favorite Document]
     @author[Richard]{ruhler@degralder.com}
     @date[November 3rd]
     @abstract[A study of my @emph{most} favoriate document in the world]

    Block commands take inline arguments and inline literal arguments just
    like commands in inline structured text. Blank lines between commands act
    as delimiters.

   @subsubsection Implicit Block Command
    If a line of block structured text starts with plain text rather than a
    block command, it and following lines of text up to the next blank line
    are interpreted as inline structured text and passed as a single argument
    to an implicit command named @l{.block}.

    From the malloc example above, we had:

    @code[fbld] @
     It's possible that @code[malloc] is unable to allocate memory. If that's
     the case, it will return @NULL. If you try to access the returned pointer,
     bad things can happen.

     So you should always check the result of @code[malloc] for @NULL.

    This is parsed as if it were instead written:

    @code[fbld] @
     @.block[It's possible that @code[malloc] is unable to allocate memory. If that's
     the case, it will return @NULL. If you try to access the returned pointer,
     bad things can happen.\n]
     @.block[So you should always check the result of @code[malloc] for @NULL.\n]

    This makes it possible to identify and format paragraphs when processing
    fbld marked up text, without the clutter of an explicit paragraph tag for
    each paragraph.

    The newline on the last line of inline structured text forming the
    implicit block command is included in the argument passed to the implicit
    block command.

   @subsubsection Explicit Implicit Block Command
    Occasionally it happens that you want to write an implicit block command
    that starts with an inline command. For example:

    @code[fbld] @
     @l{malloc} is a very interesting function to call, because it could be
     that it returns @NULL.

    In this case, the command @l{@l} is intended as inline structured text of
    the paragraph, not as a separate block command. To parse this as an
    implicit block command, put a single space before the @l{@} character. The
    space indicates the following text should be parsed as an implicit block
    command, not including the leading space character.

    In this case, for example:

    @code[fbld] @
     Pay attention to the next paragraph of this document.

      @l{malloc} is a very interesting function to call, because it could be
     that it returns @NULL.

   @subsubsection Same Line Arg
    Text on the same line as a block command is parsed as inline structured
    text and passed as an additional argument to the block command. For
    example, the command:

    @code[fbld] @
     @title[My Favorite Document]

    Could equivalently be written as:

    @code[fbld] @
     @title My Favorite Document

    This reduces some of the clutter of brackets in block structured text.

    The same line arg can contain inline commands, and need not be the first
    argument to the block command. For example:

    @code[fbld] @
     @callout[warning] You @emph{must} check for @NULL!

    Is equivalent to:

    @code[fbld] @
     @callout[warning][You @emph{must} check for @NULL!]

    The trailing newline at the end of the same line argument is not included
    in the argument to the block command.

    If there is no space on the same line after the command and any inline
    arguments, no same line argument is passed to the command.

   @subsubsection Next Line Arg
    If the line following a block command starts with a single space, it
    indicates the start of a next line argument. The next line argument
    includes all the following lines at the same level of indentation, with
    the leading space character stripped from the argument.

    For example, the following block structured text has two invocations of
    the @l{@example} command, each with a single next line argument.

    @code[fbld] @
     @example
      This is an example of next line argument text.

      That spans multiple paragraphs

     @example
      Here is a second example block command.

    The next line argument is parsed as block structured text.

    Next line argument ends at the first line of text indented at the same
    level or less than the original block command.

    Notice that, because of next line arguments, block commands end up
    indented in practice, even though we said they have to start at the
    beginning of the line. This is because the indent is stripped away from
    the lines before the block command gets processed.

   @subsubsection Literal Next Line Arg
    If the block command ends with a space character followed by a single
    @l{@} character, it is assumed to have a next line argument that is
    interpreted as literal text. This is convenient for writing large blocks
    of literal text such as code blocks.

    For example:

    @code[fbld] @
     @code @
      Here is a bunch of text not interpreted with @ and other stuff
      that wouldn't parse as fbld text.

   @subsubsection Continuation
    If the line immediately following a block command starts with an @l{@}
    character not associated with another command, it continues the arguments
    being passed to the block command. This allows you to provide additional
    inline arguments, same line arguments, and next line arguments.

    For example:

    @code[fbld] @
     @foo[first] second
     @[third][fourth] fifth
      @sixth
     @ seventh
     @bar

    Is equivalent to:

    @code[fbld] @
     @foo[first][second][third][fourth][fifth][@sixth][seventh]
     @bar

   @subsubsection Same Line Final Arg
    If a same line argument ends with @l{ @@}, then the text following the
    command at the same indent level is parsed as block structured text and
    provided as the final argument to the block command.

    For example:

    @code[fbld] @
     @foo First argument @@
     @bar

    Is equivalent to:

    @code[fbld] @
     @foo[First argument][@bar]

   @subsubsection Next Line Final Arg
    If the line following a block command is the text @l{@@}, then the text
    following the command at the same indent level is parsed as block
    structured text and provided as the final argument to the block command.

    For example:

    @code[fbld] @
     @foo First argument
     @@
     @bar

    Is equivalent to:

    @code[fbld] @
     @foo[First argument][@bar]

 @section Document Processing
  An fbld document is a mix of plain text and commands. To process a document,
  the commands are evaluated to plain text with the results all concatenated
  together.

  There are a small number of builtin commands which make it possible for a
  user to define their own commands. These user-defined commands can be
  collected into separate files, with different implementations for different
  target backends. For example, one implementation of the commands could be
  used to convert the document to html when processed, another to convert the
  document to markdown.

  @subsection Builtin Commands
   @def @l{@head[str]}
    Returns the first character of the given string after evaluation. Returns an
    empty string if the given string is empty.

   @definition @l{@tail[str]}
    Returns all but the first character of the given string after evaluation.
    Returns an empty string if the given string is empty.

   @definition @l{@ifeq[a][b][then][else]}
    Compares strings @a[a] and @a[b] after evaluation. If they are equal,
    returns the result of evaluating the @a[then] branch. Otherwise returns
    the results of evaluating the @a[else] branch.

   @definition @l{@define[name][params][def][body]}
    Defines a new command @l{@}@a[name] for use in the body. @a[params] is a
    space separated list of parameters for the new command. @a[def] defines
    the value of the command, which will be evaluated in a context where args
    are bound to the parameters.

    For example:

    @code[fbld] @
     @define[ShowPair][a b][The pair is: @a, @b][@ShowPair[hello][there]]

   @definition @l{@eval[arg]}
    Evaluates @a[arg] in the current environment. Any unevaluated commands in
    arg that are now defined in the environment will be evaluated.

   @definition @l{@plain[f][body]}
    Applies command @l{@}@a[f]@l{[...]} to each occurrence of plain text in
    body, then evaluates the result.

    The command @a[f] ought to satisfy the property: @l{@f[xy] = @f[x]@f[y]}

  @subsection Evaluation
   Commands do not have any side effects. When a command is encountered in an
   fbld document, it is substituted for the result of its evaluation according
   to the rules described in the section on builtin commands.

   If a command is encountered in an fbld document that has not been defined,
   the command is left as is in the document, without processing any of the
   arguments to the command.

  @subsection Invocation
   The @l[fbld] program is used to process an fbld document, which can be
   split across multiple files. These files are concatenated in order to form
   the document to be processed. The file is parsed into an fbld document as
   block structured text. The commands in the document are processed as
   described above. The resulting text is concatenated together and output,
   assuming there are no unprocessed commands left after evaluation.

   The most common way to split a document into separate files is to put
   related command definitions into a separate file ending with @l{@@} as a
   final arg separator. The next file in the list of files will then be
   interpreted as the body of the last command definition in the previous
   file.

 @section To Do
  The fbld markup language is still being developed. The following are open
  questions or things likely to change in future revisions of fbld.

  @item
   Having all commands belong to a single global namespace doesn't scale. Some
   form of namespace management is desired.

  @item
   It's not nice for the user to have to know all the right @l{.fbld} files to
   list on the command line in the right order. It seems like we ought to have
   some form of import to import required command definitions automatically in
   the right order.

  @item
   Is it possible to have blank lines at the end of next line literal text?
   Should it be possible?
