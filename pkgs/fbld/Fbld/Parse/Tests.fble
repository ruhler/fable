
@ Decimal@ = /Core/Digits%.Decimal@;

<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% StrE = /Core/String%.StrE;
% Strs = /Core/String%.Strs;
% Lines = /Core/String%.Lines;

@ Test@ = /Core/Test%.Test@;
@ TestResult@ = /Core/Test%.TestResult@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;

@ Loc@ = /Fbld/Loc%.Loc@;

@ Markup@ = /Fbld/Markup%.Markup@;
% Command = /Fbld/Markup%.Command;
% Plain = /Fbld/Markup%.Plain;
% M = /Fbld/Markup%.Markups;

<@>@ Result@ = /Fbld/Result%.Result@;
<@>% Ok = /Fbld/Result%.Ok;
<@>% Error = /Fbld/Result%.Error;

% Parse = /Fbld/Parse%.Parse;

@ Text@ = /Fbld/Text%.Text@;

(List@<Decimal@>, List@<Decimal@>) { Loc@; }
L = (List@<Decimal@> line, List@<Decimal@> col) {
  Loc@(Str|'foo.fbld', /Core/Int/Lit%.Int(line), /Core/Int/Lit%.Int(col));
};

(List@<Decimal@>, List@<Decimal@>, String@, List@<Markup@>) { Markup@; }
C = (List@<Decimal@> line, List@<Decimal@> col, String@ name, List@<Markup@> args) {
  Command(L(line, col), name, args);
};

(List@<Decimal@>, List@<Decimal@>, String@) { Text@; }
T = (List@<Decimal@> line, List@<Decimal@> col, String@ text) {
  Text@(L(line, col), text);
};

(List@<Decimal@>, List@<Decimal@>, String@) { Markup@; }
P = (List@<Decimal@> line, List@<Decimal@> col, String@ text) {
  Plain(L(line, col), StrE(text));
};

(List@<Decimal@>, List@<Decimal@>, String@) { Markup@; }
Pr = (List@<Decimal@> line, List@<Decimal@> col, String@ text) {
  Plain(L(line, col), Str(text));
};

(Result@<Markup@>, Result@<Markup@>) { TestResult@; }
AssertResultEquals = (Result@<Markup@> expected, Result@<Markup@> actual) {
  AssertEquals(
    /Fbld/Result/Eq%.Eq(/Fbld/Markup/Eq%.Markup),
    /Fbld/Result/Show%.Show(/Fbld/Markup/Show%.Markup),
    expected, actual);
};

Test@ Tests = TestSuite(Str|Parse, List[
  Test(Str|Define, (Unit@ _) {
    String@ text = Lines[
      Str|'@define[foo][a b] a: @a @@',
      Str|'@foo[hello][there]'
    ];

    Result@<Markup@> got = Parse[T|1|1(text)];
    AssertResultEquals(got, got);
  })
]);

@(Tests);
