
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Char@ = /Core/Char%.Char@;
% IsSpace = /Core/Char/Type%.IsSpace;
% IsNewline = /Core/Char/Type%.IsNewline;

@ Int@ = /Core/Int%.Int@;
% Incr = /Core/Int%.Incr;
% 1 = /Core/Int%.1;

<@>% Cons = /Core/List%.Cons;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Frame@ = /Pprof/Frame%.Frame@;

@ Seq@ = /Pprof/Seq%.Seq@;
% M = /Pprof/Seq%.Map;

@ Samples@ = M.Map@<Int@>;

(Seq@) { Seq@; } Canonicalize = (Seq@ s) {
  # TODO: Actually canonicalize.
  #/Core/List%.Nil<Frame@>;
  s;
};

(Char@) { Bool@; } IsTab = (Char@ c) {
  c.?('	': True, : False);
};

# Parse a profile from the output of running
#   perf script
<<@>@ M@>(Monad@<M@>, IStream@<M@>) { M@<Maybe@<M.Map@<Int@>>>; }
Parse = <<@>@ M@>(Monad@<M@> m, IStream@<M@> in) {
  % I = /Core/Stream/IStream%(m);

  M@<Unit@> SkipSpace = {
    Maybe@<Char@> mc <- m.do(I.GetChar(in));
    mc.?(nothing: m.return(Unit));
    IsSpace(mc.just).?(false: m.return(Unit));
    SkipSpace;
  };

  M@<Unit@> SkipWord = {
    Maybe@<Char@> mc <- m.do(I.GetChar(in));
    mc.?(nothing: m.return(Unit));
    IsSpace(mc.just).?(true: m.return(Unit));
    SkipWord;
  };

  M@<String@> GetToPlus = {
    Maybe@<Char@> mc <- m.do(I.GetChar(in));
    mc.?(nothing: m.return(Str|''));
    mc.just.?('+': m.return(Str|''));
    String@ tail <- m.do(GetToPlus);
    m.return(Cons(mc.just, tail));
  };

  M@<Unit@> SkipLine = {
    Maybe@<Char@> mc <- m.do(I.GetChar(in));
    mc.?(nothing: m.return(Unit));
    IsNewline(mc.just).?(true: m.return(Unit));
    SkipLine;
  };

  M@<Frame@> ParseFrame = {
    Unit@ _ <- m.do(SkipSpace);
    Unit@ _ <- m.do(SkipWord);
    GetToPlus;
  };

  # Parse the rest of a single sample from the input file.
  (Seq@) { M@<Seq@>; } ParseSample = (Seq@ s) {
    Maybe@<Char@> mc <- m.do(I.GetChar(in));

    mc.?(nothing: m.return(s));
    IsNewline(mc.just).?(true: m.return(s));

    IsTab(mc.just).?(false: {
      Unit@ _ <- m.do(SkipLine);
      ParseSample(s);
    });

    Frame@ frame <- m.do(ParseFrame);
    Unit@ _ <- m.do(SkipLine);
    ParseSample(Cons(frame, s));
  };

  (Samples@) { M@<Samples@>; } ParseSamples = (Samples@ s) {
    Seq@ sample <- m.do(ParseSample[]);
    sample.?(nil: m.return(s));

    ParseSamples(M.InsertWith(s, Canonicalize(sample), (Maybe@<Int@> mv) {
        mv.?(nothing: 1);
        Incr(mv.just);
      }));
  };

  Samples@ samples <- m.do(ParseSamples(M.Empty<Int@>));
  m.return(Just(samples));
};

@(Parse);
