
@ Int@ = /Core/Int%.Int@;

<@>@ IO@ = /Core/Monad/IO%.IO@;
<@>@ R@ = /Core/Monad/IO%.R@;
@ World@ = /Core/Monad/IO%.World@;

@ Unit@ = /Core/Unit%.Unit@;

@ Event@ = /App/App%.Event@;
@ Effect@ = /App/App%.Effect@;

# Run --
#   A top-level IO implementation for running an App Main@ program.
(/App/App%.Main@)(
  IO@<Event@>,
  (Effect@, World@) { R@<Unit@>; },
  Int@, Int@) { IO@<Unit@>; }
Run = (/App/App%.Main@ main)(
  IO@<Event@> event,
  (Effect@, World@) { R@<Unit@>; } effect,
  Int@ width, Int@ height) {
  # Note: We pass effect as a function taking the effect and the
  # world rather than a function from effect to IO@ just so we don't have to
  # implement the currying on the native C side.
  main<IO@>(
    /Core/Monad/IO%.Monad,
    /App/App%.App@<IO@>(event, (Effect@ e)(World@ w) { effect(e, w); }),
    width,
    height);
};

@(Run);
