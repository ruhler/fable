
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ Eq@ = /Eq%.Eq@;

@ Int@ = /Core/Int%.Int@;
% NegI = /Core/Int%.Neg;
% IntI = /Core/Int/Lit%.Int;

<@>% List = /Core/List%.List;

@ Rat@ = /Rat%.Rat@;
% Rat = /Rat%.Rat;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

# EqS --
#   Test for structural equality of rational numbers. Used for testing
#   normalization.
Eq@<Rat@> EqS = (Rat@ a, Rat@ b) {
  /Core/Int/Eq%.Eq(a.n, b.n).?(false: False);
  /Core/Int/Eq%.Eq(a.d, b.d).?(false: False);
  True;
};

# TestReduce --
#   Test that rational numbers are properly reduced.
#
# Specifically, tests that (n / d) reduces to (nr / dr).
(String@, Int@, Int@, Int@, Int@) { Test@; }
TestReduce = (String@ name, Int@ n, Int@ d, Int@ nr, Int@ dr) {
  Test(name, !({
    Rat@ wnt = Rat@(nr, dr);
    Rat@ got = Rat(n, d);
    AssertEquals<Rat@>(EqS, /Rat/Show%.Show, wnt, got);
  }));
};

Test@ Tests = TestSuite(Str|Rat, List<Test@>[
  TestSuite(Str|Reduce, List<Test@>[
    TestReduce(Str|'reduced', IntI|5, IntI|7, IntI|5, IntI|7),
    TestReduce(Str|'neg_pos', NegI(IntI|5), IntI|7, NegI(IntI|5), IntI|7),
    TestReduce(Str|'neg_neg', NegI(IntI|5), NegI(IntI|7), IntI|5, IntI|7),
    TestReduce(Str|'pos_neg', IntI|5, NegI(IntI|7), NegI(IntI|5), IntI|7),
    TestReduce(Str|'even_even', IntI|10, IntI|14, IntI|5, IntI|7),
    TestReduce(Str|'even_odd', IntI|10, IntI|7, IntI|10, IntI|7),
    TestReduce(Str|'odd_even', IntI|5, IntI|14, IntI|5, IntI|14)
  ])
]);

@(Tests);
