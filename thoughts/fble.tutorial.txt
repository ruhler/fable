Tutorial
========
Goal: write an fble tutorial to help people with getting started.

I'm thinking we could start with a program that does 4 bit bitwise arithmetic
operations, without any use of the core packages or other libraries.

Brainstorm of chapters:
* introduction, goals, scope of tutorial.
* first fble program
  - 4 bit AND operation, including types, variables, functions.
  - use fble-test program to assert you get the right result.
* first fble program in detail
  - Add lots of extra details about all the bits of the program in the
    previous section. Things like kinds versus types, types as values, etc.
    Assuming there is enough of interest there.
* Writing your own main function.
  - Write a main function to print out the result of a computation instead of
    using asserts.
  - Write a main function that takes inputs on the command line, calls a
    function, and then outputs the result.
  - Run both of these with the interpreter.
* Compiling code.
  - Using the main function from before, invoke the compiler to compile the
    code. Either via C or via aarch64.
* Profiling code.
  - with --profile
  - with linux perf
* Debugging code.
* Working with modules.
  - How to run interpreted.
  - How to compile with all the right dependencies.
* Core library: Stdio program
  - intro to core package and common modules in there.
  - discussion of monads and what all that involves.
  - stdio@ interface.
  
---

The tutorial is a good exercise for cleaning up fble. Install things the right
places, clean up the interfaces, etc.

What are some tutorials for other languages that would be good reference? The
Java tutorials are good.

It starts with motivation for Java, what it's good for. That's valuable to
have, but let me skip that to start. Looks like they give a reference to
downloading the software, but otherwise assume you have it installed. Perhaps
it's reasonable to start assuming you have installed fble. Either as a package
install, or manual, to whatever location you want. Let me assume it's
installed and accessible from standard path environment variables for binaries
and libraries.

---

Question: How should I name tutorials? There is a clear order to them, in my
mind. But I fear if I talk a lot about the tutorial number in the tutorial,
that's going to make it much harder to insert a new tutorial somewhere in the
mix. What options do I have?

* Number tutorials, refer to by number, as now.
* Number tutorials, refer to by name in the tutorial.
  - Then we need to pick decent names.
* Only name tutorials.
  - Then we need to pick decent names.
  - Use asciidoc or some other table of contents to put them in order?

How does java tutorial do it? They just use names, like "First Java Program",
which is called simple-program-of-java in the URL. And file names, in this
case, things like "Simple.java".

Let's try adjusting and go that route. How about, just to force decent pick of
names, remove number entirely from the name of the tutorial. Have a table of
contents for tutorials, and maybe each tutorial can give the name or a link to
the previous tutorial and the next tutorial at the top and the bottom.

Tutorial1 name brainstorm:
* FirstProgram. That's pretty obvious.

Tutorial2 name brainstorm:
* Main. I think 'functions' is maybe not necessary? Because it doesn't have to
  be a function. Except it is a function on the c side. And "Main Function"
  makes it a little more clear that we aren't talking about, for example, the
  main tutorial, or main explanation of fble.
* Main Function
* Entry Point. Actually, that's good: EntryPoints.
"In computer programming, an entry point is the place in a program where the
execution of a program begins, and where the program has access to command
line arguments."

I like that.

So, let's update things to be FirstProgram and EntryPoints.

Also, I should add some tests that we can compile and run the commands in the
programs.

Next question: what about sample code names?
* In theory users should write their own code from the text of the tutorial.
* But if they are lazy, or need some help putting it together, I want to
  provide a copy of the sample code.
* Some tutorials, like EntryPoints, may have multiple variations of the code.
  Then you want copies of all variations.
* When giving examples for how to run, do you tell them based on the code they
  right, or the sample program supplied?

For a tutorial, EntryPoints, I assume code would be: EntryPoints.fble. That's
what we ask the user to write. The sample code would be: EntryPoints1.fble,
EntryPoints2.fble? or EntryPointsA.fble, EntryPointsB.fble?
EntryPoints_1.fble, EntryPoints_2.fble? 1/EntryPoints.fble,
2/EntryPoints.fble? EntryPoints_NoMainFunction.fble, where 'NoMainFunction' is
the section where we do that code? EntryPoints/1.fble, EntryPoints/2.fble
EntryPoints/NoMainFunction.fble, EntryPoints/...

Use of a subdirectory for artifacts related to the tutorial is appealing to
me. Then any build artifacts, etc, can go in that subdirectory? Or, we keep
things out of the way of whatever the user is writing in their own directory
if they are working from the tutorials directory?

FirstProgram/FirstProgram.fble
FirstProgram.md

Versus

FirstProgram.md
FirstProgram.fble

Yeah, I like the organization of subdirectories. Much easier to see artifacts
for that particular tutorial.

Let me assume the reader is working in some directory other than the tutorial
directory. Use '.' to name that directory. Then we can say, if using sample
program, copy it to '.', or run directly with tutorials/FirstProgram, etc as
the include path.

Not sure. Let's try and see. This should be a decent improvement at least.

---

I'm not really into markdown. It's too limited in what you can do. Consider
switching over to asciidoc syntax. That way I could provide a much nicer book
format in the end.

What extension does asciidoc use? .adoc. Hmm... that's a little annoying. I
would rather it be, like .txt. Maybe we can use .txt anyway.

---

One thing we can do is use a generic name for the programs, like
'Program.fble'. That way we can reuse the same name from tutorial to tutorial,
 provide different sample versions for different tutorials using
subdirectories, and at the same time allow the user to reuse the same file in
place?

Yeah, that's good.

---

I'm second guessing the name of the second tutorial. Entry points feels like a
weird name. How about "main driver" instead? I think that's better.

---

Going on to CompiledCode tutorial. I need to remove references to internal
header files from compiled code before this makes sense. That should be a
priority to work on.

---

References to internal header files are removed. Next question: should we use
aarch64 or c as the target? I'm kind of thinking c might be better to start,
so that people don't need to be running aarch64 to try. And maybe have an
extra optional section of the tutorial that shows how to compile via aarch64
after that.

---

One of the problems with my current set of tutorials is it spends a lot of
time writing C code instead of writing fble code. Wouldn't it be great if we
could have tutorials start with all fble code? Learn the language that way,
and only venture into C code when you want to do something more advanced?

Now that we've made progress on the Stdio@ interface, it's not unreasonable to
do a real hello world program in fble, and do a bunch of tutorials entirely
within fble to learn the language. I want to revisit what the path of
tutorials might be.

It's kind of funny, but a hello world program in fble is about the most
complicated thing you can write. See /Core/Stdio/Test%, which is basically the
hello world program. Language features involved:
* Modules.
* Polymorphism.
* Nested functions.
* Function bind and monads.
* Literals.

What would I want to teach in order to get that far?
* Modules
* Polymorphism.
* Nested functions.
* Function bind & monads.
* Literals
* Implicit type struct values (for Modules)
* Struct values (for impliict type struct values)
* Lists (for literals)
* Kinded let statements (for modules)
* Basic functions (for nested functions)
* Union values (to do anything interesting)
* Type inference (for monads)

We could as well ask what we don't need to cover:
* typeof, abstract types 

Here's a vision for how the tutorials could work:
1. Show the hello world program. Don't explain it yet. Let people try it out.
2. Progress through language specific features from the ground up in a series
   of tutorials. Each tutorial hopefully gets the reader to write a small,
   interesting, different, fun program.
3. Explain the hello world program again, now that the reader knows the
   language.
4. Go on to whatever other advanced topics I want.

For inspiration, let's take a look at how other language tutorials are
structured.

Java:
* Three tracks: basics, guis, and specialized.
* Basics track:
  Hello world - and everything you need to write and run it.
  Java Language
     Object oriented programming, Bicycle example.
     Variables, Primitive Datatypes, using bicycle example.
     Arrays, contrived example
  Operators
  etc. Lots using contrived examples, and still on the bicycle example.

In summary, they use few big examples (hello world, bicycle), and a lot of
contrived mini examples.

Python (w3 schools):
* hello world, a bunch of mini contrived examples for different language
  features.

I'm not terribly inspired.

Python is much easier to do mini examples for, because you can run them in the
interpreter. Java tutorials make heavy use of println to get the equivalent.
Fble is a little more awkward perhaps, because it's all in the monad, and we
don't have fancy formatters for different types. I guess show would work.

  (List@<String@> args) {
    Int@ x = Int|2;
    Unit@ _ <- m.do(O.PutLine(stdio.out, Show(x)));
    m.return(True);
  };

Maybe I want to make some helper functions to simplify printing things?

  (List@<String@> args) {
    Int@ x = Int|2;
    Unit@ _ <- PrintLn(Show(x));
    Unit@ _ <- PrintLn(Str|'Hello there!');
    m.return(True);
  };

Yeah, that's not too bad. Put args at the top so we aren't super indented.
Then fill in everything from there?

Haskell tutorials:
* Based around ghci.

How hard would it be to write a similar interpreter for fble? Would that be
worth it?

I don't know what that means. I would prefer not to.

Okay, so, assume we clean up hello world as much as possible, so it's as easy
as possible to play around with things and print things. Maybe have a special
hello world library if that helps too. We could get rid of all the
polymorphism maybe? Maybe not. Anyway, try to simplify it as much as possible?
I'm not sure.

What is the list of tutorials I would want?
* Intro to fble. What it's for, why use it, how to install, where to see the
  language spec.
* Hello world - how to run. How to play around. The starting point.
  Don't understand everything yet.
* Basic Data types - structs, unions, functions.
  4-bit bitwise && sounds good for this.
  Covers:
    var
    let
    struct_type
    struct_value_explicit_type
    struct_access
    union_type
    union_value
    union_access
    union_select (non-stmt)
    func_type
    func_value
    func_apply
* More about variables
 - Cover the various kinds of lets.
 - Introduce notion of a kind. Don't need to worry about polymorphism yet.
 - Including recursive lets.
* More about structs
 - Cover implicit struct types.
 - Cover type fields. Including typeof operator perhaps.
* Modules
 - Module paths.
 - Dependency graph versus hierarchy.
 - Should be easy to explain now that we have all the background needed.
 - Note that module values need not be structs, they can be functions, for
   example?
* More about unions.
 - default branches, case statements.
* More about functions.
 - multi-arg versus curried.
 - capturing variables from scopes.
 - nested functions.
 - function bind.
* Lists and literals.
* Polymorphism. 
 - poly kinds, type inference.
* Monads.
 - As a kind of putting it all together.
* Relevant Standard library types.
 - Char, List, String, Stdio
* Hello World revisited.

Then have some advanced/miscellaneous topics:
* Abstract types.
* Compilation.
* Foreign function interface.
* Profiling.
* Debugging.
* Vim syntax highlighting.
  - No longer needed, because we say how to install vim in Install tutorial.
* Style guide.

Cool. I think that's perfect. It makes more sense to go in that order I feel
like.

---

Hello world tutorial:
* Give them the code.
* Explain why it's complicated. List the features it relies on. That will be
  good foreshadowing of what's to come in the tutorials.
* Show how to run it via the interpreter.
* Show how to add some more print statements, and print a boolean value, for
  example. Maybe use of Strs. Just so they feel comfortable printing
  different things.

Question: how to refer to installed binaries and fble packages? That's been
pretty tedious so far in the tutorials. For binaries we can ask them to put
the path to them in the PATH variable? For libraries... how should we find
those?

Also, if I'm going to do these tutorials, I would like to get fbld tutorial
structure in good enough shape to start using and evolving that. Which
suggests generating html automatically from it that I can check if desired.

---

Let's have the first tutorial be how to install fble. The goal is to have fble
installed, binaries added to PATH, libraries added to LD_LIBRARY_PATH as
needed so you don't need to know where it was installed to use it. Have
everyone set up that way in the first tutorial, double check they can run the
existing /Core/Stdio/HelloWorld% code.

There are three things we need to make running fble independent of where it is
installed: PATH, LD_LIBRARY_PATH, and some notion of an fble package path to
find preinstalled fble packages in. Thoughts on the package path in
fble.packages.txt.

---

Install tutorial and HelloWorld tutorials are drafted. Next is Fble Basics.

I like 4-bit bitwise AND. Misc thoughts:
* Let's define Unit@ ourselves, instead of importing it. Then let people take
  a look at the definition of the Unit module?
* Define Unit@, Bit@, Bit4@, Unit, 0, 1, x, y, And, And4, z.
* Define ShowBit, ShowBit4.
* Things to print: x, y, z, 
* Should we write code to read Bit4@ from the command line?
  I vote no. This is not about parsing. This is about working with the basic
  types.
* Where should we write the code relative to the Main function?
  After the inputs, before the main function?
  In a separate module?
  I like the idea of a separate module. Import everything we need into Main.
  Avoid dependencies. A little bit of insight into 

Yeah, so lets define a module that has no dependencies on anything else. It
exports: Unit@, Bit@, Bit4@, Unit, 0, 1, And, And4, 0011, 1010...

Oh. We'll need to import String to be able to write the Show functions. I
think that's okay.

Hmm... I'm not sure. Much easier to do it all in HelloWorld, right?

---

Next tutorial: variables. What all examples do I want to include?

Topics to discuss include:
* Two forms for lets:
  e.g. Unit@ Unit = Unit@();
       % Unit = /Core/Unit%.Unit;
  Two ways to define a variable: with a type, or with a kind (type is
  automatically inferred).
* Kinds and kind lets (save polymorphism for later).
  Types as values: Note we can use type values where type names are expected.
  And define two different names for the same type.

  % versus @.
  Examples of defining type variables and normal variables using kind let:
  @ Unit@ = /Core/Unit%.Unit@;
  % Unit = /Core/Unit%.Unit;

  Note kind form often used for imports, but can be used for regular variables
  too:
  @ Unit@ = *();
  % Unit = Unit@();
  
  Note: polymorphic kinds too, we'll talk more about those in future tutorial.
* Type lets.
  e.g. Unit@ Unit = Unit@();
  
  Defining type variables with type lets:
  What the type of a type is.
  Typeof operator.
  e.g. @<*()> Unit@ = *();

  Note: This is kind of silly, because you repeat the value of the type
  variable in the type itself. That's why we tend to use kind lets for
  defining type variables.
* Variable scopes
  * A note on lifetimes of variables?
  * Visible in the body of the let.
  * Not visible prior to the let. Note: this means you need to define things
    in order.
  * Yes visible in the definition of the let, as 'undefined'.
    Example of recursive function.
    Example of acceptable recursive value.
    Example of vacuous value.
  * Note about shadowing of variables.
  * Warnings about unused variables, and use of '_' to prevent that.
  * Note about conventional use of '_' for unused variables.
  * Mutually recursive lets.
* Tell readers to read section 2 of the language spec, which they should now
  be entirely familiar with.

I think don't bother with writing a .fble file for this tutorial. Just do
small snippets. Readers can try things out on their own, and we can use
exercises to get them to try things out.

---

Next tutorial: Structs.
* Basics: types, constructing values, accessing fields.
* Implicit type structs.
 - Explicit names.
 - Implicit names.
 - Mix of explicit and implicit names.
* Type fields.
 - Using explicit type struct and implicit type struct.
* Struct as a namespace example.
  
So, this is pretty simple.

---

Next tutorial: Modules.

I think better to go to Modules next, so people can really understand and
program at scale, before going on to unions. Also, they will have just done
the structs tutorial, so namespaces stuff is fresh in their minds.

* Motivation
  - Split programs across multiple files.
  - Be able to reuse code in multiple programs.
* Organization
  - By dependency (dependency graph)
    Recursion not allowed.
  - By development (directory structure)
    Independent of dependencies.
    Implications for access controls described in future tutorial.
* Module as a value.
  - And how they get assembled into a program.
  - Note: struct most common, but can be any kind of value.
* Mapping from module path to file name.
  - -m option
* Module search path.
  - -I option
* Packages, package path.
  - -p option
* Example: splitting up Basics code into separate modules.

---

Next step: Unions.
* Basics: type, value, field access, union select.
* Give an interesting example of a union that isn't an enum.
* Invalid field access in union select.
* Tag orders in union select.
* Default branches in union select.
* Default branch allowed even if all other tags present.
* Statement version of union select.

---

Next step: functions.

* Basics: type, value, function application.
* Function body as same as top level
  - you can define functions, types, etc.
* Capturing variables from scope.
  - Example of how to pull code out of functions this way.
* Recursive functions.
  - And what it means for the stack. Calls versus tail calls, etc.
* Higher order functions (function arguments).
* Curried functions.

---

Next step: lists.
* Example of a list type and a function over lists.

---

Brainstorm for polymorphism tutorial:
* Basics: with list example.
* Motivation: using list example.
* poly versus function.
* "curried" polys.
* poly kinds.
* poly types.
* non-function poly values.
* function poly values.
  - convenient syntax.
* higher order poly kinds.
* poly application.
* type inference.
* type of a poly.
* ad-hoc polymorphism.
* where poly's can be used:
 - function arguments.
 - struct fields.
 - variables.

