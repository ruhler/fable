@ Bool@ = /Core/Bool%.Bool@;

<@>@ List@ = /Core/List%.List@;
<@>% Nil = /Core/List%.Nil;
<@>% Cons = /Core/List%.Cons;

# Insert --
#   Inserts the element 'x' into 'l' at the sorted position based on the
#   comparision function.
#
# Type Parameters:
#   T@ - The type of element on the list.
#
# Arguments:
#   le - The <= comparison operation used for sorting.
#   x - The element to insert.
#   l - The list to insert into.
#
# Returns:
#   A new list with the element x inserted at the appropriate position given
#   the comparison operation.
<@ T@>((T@, T@) { Bool@; }, T@, List@<T@>) { List@<T@>; }
Insert = <@ T@>((T@, T@) { Bool@; } le, T@ x, List@<T@> l) {
  l.?(nil: Cons(x, Nil<T@>));
  le(x, l.cons.head).?(true: Cons(x, l));
  Cons(l.cons.head, Insert(le, x, l.cons.tail));
};

# Sort --
#   Sorts the given list of elements, using the given comparison operation.
#
# Type Parameters:
#   T@ - The type of element of the list.
#
# Arguments:
#   le - A function that compares two elements of the list, returning True if
#        the first should be before or the same as the second, False
#        otherwise.
#   l - The list to sort.
#
# Returns:
#   A new list with the elements of 'l' sorted in ascending order.
#
# TODO:
#   Use something more efficient than an insertion sort.
<@ T@>((T@, T@) { Bool@; }, List@<T@>) { List@<T@>; }
Sort = <@ T@>((T@, T@) { Bool@; } le, List@<T@> l) {
  l.?(nil: l);
  Insert(le, l.cons.head, Sort(le, l.cons.tail));
};

@(Sort);
