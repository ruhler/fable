
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% Not = /Core/Bool%.Not;
% And = /Core/Bool%.And;
% Or = /Core/Bool%.Or;
% Eq = /Core/Bool/Eq%.Eq;

<@>% List = /Core/List%.List;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;

# T --
#  Tests that a boolean expression evaluates to True.
#
# Inputs:
#  name - the name of the test.
#  p - a function that evaluates and returns the result of the boolean
#      expression to test.
#
# Results:
#  A test case that tests the result of evaluating the boolean expression is
#  True.
#
# Example Use:
#  T(Str|Test_True_Is_True, (Unit@ _) { True; });
(String@, (Unit@) { Bool@; }) { Test@; }
T = (String@ name, (Unit@) { Bool@; } p) {
  Test(name, (Unit@ u) {
    AssertEquals(Eq, /Core/Bool/Show%.Show, True, p(u));
  });
};

# F --
#  Tests that a boolean expression evaluates to False.
#
# Inputs:
#  name - the name of the test.
#  p - a function that evaluates and returns the result of the boolean
#      expression to test.
#
# Results:
#  A test case that tests the result of evaluating the boolean expression is
#  False.
#
# Example Use:
#  F(Str|Test_False_Is_False, (Unit@ _) { False; });
(String@, (Unit@) { Bool@; }) { Test@; }
F = (String@ name, (Unit@) { Bool@; } p) {
  Test(name, (Unit@ u) {
    AssertEquals(Eq, /Core/Bool/Show%.Show, False, p(u));
  });
};

# Tests --
#  A test suite to test the /Core/Bool% module.
Test@ Tests = TestSuite(Str|Bool, List[
  T(Str|True, (Unit@ _) { True; }),
  F(Str|False, (Unit@ _) { False; }),

  F(Str|Not_True, (Unit@ _) { Not(True); }),
  T(Str|Not_False, (Unit@ _) { Not(False); }),

  T(Str|And_True_True, (Unit@ _) { And(True, True); }),
  F(Str|And_True_False, (Unit@ _) { And(True, False); }),
  F(Str|And_False_True, (Unit@ _) { And(False, True); }),
  F(Str|And_False_False, (Unit@ _) { And(False, False); }),

  T(Str|Or_True_True, (Unit@ _) { Or(True, True); }),
  T(Str|Or_True_False, (Unit@ _) { Or(True, False); }),
  T(Str|Or_False_True, (Unit@ _) { Or(False, True); }),
  F(Str|Or_False_False, (Unit@ _) { Or(False, False); }),

  T(Str|Eq_True_True, (Unit@ _) { Eq(True, True); }),
  F(Str|Eq_True_False, (Unit@ _) { Eq(True, False); }),
  F(Str|Eq_False_True, (Unit@ _) { Eq(False, True); }),
  T(Str|Eq_False_False, (Unit@ _) { Eq(False, False); }),

  Test(Str|Show_True, (Unit@ _) {
    String@ wnt = Str|'True';
    String@ got = /Core/Bool/Show%.Show(True);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|Show_False, (Unit@ _) {
    String@ wnt = Str|'False';
    String@ got = /Core/Bool/Show%.Show(False);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  })
]);

@(Tests);
