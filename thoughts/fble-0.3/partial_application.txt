Partial Application
===================
See thoughts/fble-0.2/partial_application.txt for background.

The motivation is this:
* Do functions currently have to be split into (a)(b) instead of (a, b) to
  work with monadic bind.
* It would be great if we could write Do as (a, b) instead. But then bind gets
  a little wonky in terms of applying a single arg versus adding a single
  argument.
* A clean way to do this in the language we be not to distinguish between
  functions of type (a)(b) and (a, b).

So, seems like there's opportunity to improve performance and clean up the
language by not treating multi-arg functions as different from functions to
functions at the language level.

The sole reason for treating multi-arg functions as different from functions
to functions in fble is performance. Can we use a better implementation that
has comparable performance with functions to functions?

A key difference with the language based approach:
* The type system knows how the function was implemented.

Otherwise the type system doesn't know.

An interesting insight:
* The compiler could track the difference in types without preventing you from
  interchanging them.

For example, say a multi arg function is expected, you provide a function to a
function. Then the compiler automatically inserts a conversion:
   f(a, b) = g(a)(b).

Say a function to function is expected, but you provide a multiarg. Then the
compiler automatically inserts a conversion:
  f(a)(b) = g(a, b)

It worries me that how you write the code could make a difference for
performance for what otherwise should be the same thing.

The other option is to support partial/over application at runtime in an
efficient way.

I would like there to be a clear way to reason about the performance of it.

---

It's probably pretty easy to implement over and under application. I bet we
could just change FbleCall implementation. It would be something like this:

while argc >= func->num_args:
  num_args = func->num_args
  func = func(argv)
  argc -= num_args
  argv += num_args

if argc > 0:
  FblePartialFuncValue(func, argc, args)

Where FblePartialFuncValue is a helper function to allocate a partially
applied function value. We can provide a custom executable for that that
stuffs func and args in statics and knows how to apply the function when given
enough arguments.

I don't expect a big performance hit. We can support over and under
application. I think the idea would be foo(a)(b) gets rewritten to foo(a, b)
as much as possible.

To bring this up, I would want to revert aarch64 to using FbleCall. Decide
later if we want to go back and inline the code again to help with gdb
stepping through the code.

Type inference gets a little interesting. For example, f(x)(y) doesn't give us
access to the type of y for knowing how to apply f(x). But maybe f(x, y) does.

Maybe we say type inference happens at the syntactic boundary, like f(x). So
you can do type inference explicitly. Or maybe we say we always merge
application, so f(x)(y) is treated as f(x, y) and we do type inference there.

Is the type of Do still separate arguments? I think we could automatically
turn this into a multi argument function at runtime for a more efficient
implementation. A function value whose body is a function value, or a poly
of a function value can be compiled to a multi argument function.

So, there are some details to work out, but I think it's worth doing. My
intuition says we really should allow partial and over application of
functions at the fble language level. It gives more flexibility to optimize
performance later on.

I guess I'll have to come up with a clear performance model for it though.
Hmm...

Anyway, if I want to try this, steps would be:

1. Update implementation of FbleCall to support different number of args at
runtime.
2. Update type checker to allow under/over application.
3. Update language spec for details on type inference.

And go from there.

The hope is fbld should run noticeably faster because Result@ Do function is
implemented as a multi argument function instead of a function that returns a
function, so we avoid the extra function object allocation.

---

On type inference: do everything in terms of single arg application. Users
should write their functions to mix type parameters with arguments. They
should do that anyway, because it makes it more flexible. This way type
inference is clear. Nothing tricky to work out in the spec.

For performance, here's an idea: for the sake of 'compiler doesn't change
algorithmic complexity', assume the number of arguments to a function, the
number of fields in a struct or union type are small. That means we are
allowed to make O(N^2) to to O(N) for N the number of args, or fields. I think
that should give the performance flexibility we want to make things fast
without having to rely on a runtime implementation to do crazy things.

---

Step one: Update FbleCall to support less/more arguments than the function
expects.

One challenge: our tail call protocol doesn't have a way to indicate how many
arguments are being returned. How should we update it? Set the last entry to
NULL, have FbleCall count them? That's doable actually. We just overallocate
buffer to be tail_call_buffer_size of previous plus tail call buffer size of
new. Because we know tail_call_buffer_size is max of args, and we copy over
each individual arg anyway.

Yeah. I think that's easiest to start.

Next step: Update FbleCall to take explicit argc. Update tail call standard to
set entry following the args to NULL. Maybe special case it so max number of
args is tail_call_buffer_size, so we don't need to allocate the extra space?
Or just be easy and require an extra element in tail_call_buffer_size and
always set NULL following it.

---

Question: how do we record profiling for partial function application?

My vote: we don't enter the function until we actually enter it. We can say we
enter it from the thunk.

How will we pick the profile block offset for the thunk?

If we did it at the language level today, we would have two different block
ids: one for creating the thunk, one for calling the function.

Maybe each function should allocate a range of block ids given the number of
its arguments? Let's worry about that later, because allocating a range of
block ids for each function sounds like a workable approach worst case.

---

Trying to update FbleCall for under/over application logic. It's tricky, I
think because it's most natural to write it recursively, but we need to
transform into a loop.

Let me brainstorm the nicest way to write it assuming I didn't have to worry
about recursion or costs of retain/release.

Ugh. This is complicated.

The main split, I think, is Exact number of args versus NonExact.

NonExact:
  while (sufficient args):
    Exact.
  if args left
    Partial
  else
    Result.

Exact:
  executable->run
  while tail call
    NonExact(tail call)
    clean up args.
  return result

We have Call and CallExact. Call is responsible for various args. It will
never get sentinel tail call. Exact is responsible for sentinel tail call.

The problem is, NonExact has no way to return a tail call.

Perhaps the cases are about Exact/NonExact and Tail versus NonTail?

Say 'Tail' means it could return a tail call. NonTail means it can't.

NonExactNonTail - The high level FbleCall. We do everything.
NonExactTail - Arg number may mismatch. We can return tail call.
ExactNonTail - Exact args, can't return tail call.
ExactTail - Exact args, can return tail call.

NonExactNonTail:
  while sufficient args:
    ExactNonTail
  if args left:
    Partial
  else
    Return result

ExactNonTail:
  executable->run
  while tail call
    NonExactTail(tail call)
    clean up args.
  return result

NonExactTail:
  
I think where I'm getting stuck is if you do an under application and the
result is a request for a tail call.

In this case, we have args left over from the first application and we have
args from the tail call. All at once, we should be able to merge those args
together and be done, right? One big happy family? A tail call provides a
function and more arguments. We know how to deal with more arguments. The
arguments at the end are the ones that we don't own.

Not worrying about argument ownership, it would look something like this:

  if insufficient args:
    return partial

  Call with exact args.
  if tail requested
    insert tail args before leftover args
  
  if leftover args
    rinse and repeat

Ownership makes it tricky. Some args we own, some we don't. One function we
own, the rest we don't.

Let's say FbleCall is the wrapper. It takes ownership of func and args, then
calls our function above.

  if insufficient args:
    Allocate Partial.
    Release func and all args.
    return

  Call with exact args.
  Free function. (We can't do this for top level func, don't worry about it yet).
  Free exact args.
  if tail requested
    Add leftover args to end of tail call buffer.
  
  if leftover args
    rinse and repeat

Say we have two versions then: top level (where we don't own func, args), and
else, where we do own func and args.

Top:
  if insufficient args:
    Allocate partial. Return.

  Call with exact args.
  if no tail and no args leftover.
    Return result.

  We now own func one way or the other.
  Retain leftover args, add to tail args if any.
  Call into NonTop.

NonTop:
  if insufficient args:
    Allocate partial.
    Release func, args. Return.
  
  Call with exact args.
  Free func, exact args.
  if tail:
    Add leftover args to tail.

  if leftover args:
    Go back to start of NonTop.
  return result

There you go. Let's try implementing for real. Top is FbleCall. What shall we
call NonTop? FinishCall. Or just Call. Yeah. Just Call.

Trouble:
* We can't allocate a partial function from just FbleFunction. We need the
  FbleValue* to hold on to it. Will that cause any issues? It shouldn't,
  right? Just means potentially some duplicate code to check if the function
  is undefined.

I feel like undefined function locations are messed up anyway with this new
approach. Maybe we can move all error reporting for that into FbleCall?

Okay. Draft is basically done. It seems reasonable. Just need to make the
change that we pass FbleValue* for func instead of FbleFunction*, and
undefined function is reported in FbleCall. We'll still have the original
call site error reported via an '@...', so it should be okay. No loss of
information.

---

Sneaky idea for how to implement PartialApply: return
FbleSentinelTailCallValue. Force the caller to tail call it.

Anyway, initial draft of FbleCall seems to be working now. I want to get a
pulse on what runtime looks like, to see if there were any noticeable
performance regressions.

fble.html generation is up to 100s. That's noticeably slower. It was like 92,
93s before I think.

Next steps:
* Test out over application.
* Implement PartialApply.
* Review performance difference.

Nothing obvious shows up in the performance profile. Presumably this is the
overhead we are dealing with to check number of args against what we expect.
I'm hoping this is a worst case performance regression. Anything else from
here should be performance improvement by letting us avoid unnecessary
partial applications.

Let's try over-application next, to test it out.

In compile.c, I think we just check for apply_tc where the function is itself
apply_tc. Merge all the arguments into a single call. We don't expect any
performance improvement here, because none of the functions we allocate can
take advantage of the over application, but we will at least exercise the code
to make sure it works.

---

Tried over-application. Seems like it works okay? Though it doesn't have much
coverage yet.

Next step: implement support for partial application.

How would we test partial application? We need updates to the type checker
before we can check that, right? Well, one step at a time.

---

The implementation is all there in theory. We support partial and over
application. Next step is to update the language spec and type checker and
compiler.

My vision is for there to only be single application and single argument
functions at the FbleExpr* and Tc* levels. It's in compile.c that we convert
to multiarg functions and calls.

Looking at FbleFuncValueTc, it might be easier to merge function values in
typecheck.c to avoid duplicating static variables? No. If the body of a
function is a func value, then there should be no static variables referenced.
Let's see.

There are static variables referenced. In this case type variables. We'll need
changes in typecheck.c. Either to avoid capturing types as static variables,
or to merge the functions there.

Why does it try to capture the type in that case? The fble disassembly shows
that static value is not used anywhere. Is this a bug?

Looks like the type in this case is being used to form a struct value:

(Pair@)((Bool@){ Bool@; }) { Pair@; } Map = (Pair@ p)((Bool@){ Bool@; } f) {
  Pair@(f(p.first), f(p.second));
};

The type is Pair@. The code the handles this is misc apply. It doesn't check
for type versus non-type. We need the variable in scope to know its type.

I think we should special case type variables in typecheck.c. List them as
variables, but when you look it up, don't mark it as used, and when you go to
use it, generate a type literal instead.

Maybe we save some performance and memory that way. We can skip definitions of
variables. It also should let us avoid allocating a type value for poly value
expressions.

What about function arguments that are types? That's allowed, right? I have a
spec test for that.

---

Here's a proposal for how to update typecheck.c

When looking for a var, we always check locals, then args, then statics. I
vote we add an additional category 'types'. If it's a type variable, always
look in 'types'. 'types' don't have locals associated with them.

Hmm... Maybe I'm trying to do too much at once.

Perhaps the first step is:

If GetVar is called on a type variable, consider it a phantom variable lookup
and return a type instruction instead. This should hopefully eliminate the
type in statics and let us merge multiarg func values at compile time.

Type variables would still take up space at runtime. A later step would be ...

I wish there was a way to represent 'type var' in FbleVar. But I want that
only for typecheck.

The general proposal would be:
* VAR_EXPR turns onto TYPE_VALUE_TC for all types.
* Treat type vars as always not used. (they don't show up in statics).
* Avoid allocating slots for type vars. (they don't show up in locals).

Really what I want is a way to sanity check I'm not accidentally making a
reference to a type var. What to use for FbleVar? Use a special tag I guess.

In that case, we have to make sure we don't compute the value of any type var.
That's annoying. Yeah, let's take baby steps here.

---

I can't merge function values in compile.c. The arg indices change. I
don't want to deal with that in compile.c. Better to merge in typecheck.c.

We can merge in typecheck.c. It isn't hard. But first we need to unify
function types.

I think it's time to go all in on the front end with single argument function
application and function values.

* Update spec.
* Change FbleExpr to all single arg functions.
* Change FbleType to all single arg function types.

It might be a little crazy for while in terms of things being broken.

---

Next step: need to fix how type inference works for multi arg application.
Once that's sorted out, we'll need to update all the library code to put the
type parameters in the right place. For example:

<@ A@, @ B@>(List@<A@>, B@, (A@, B@) { B@; }) { B@; }
ForEach = <@ A@, @ B@>(List@<A@> list, B@ base, (A@, B@) { B@; } body) {
  list.?(nil: base);
  ForEach(list.cons.tail, body(list.cons.head, base), body);
};

Needs to change to:

<@ A@>(List@<A@>)<@ B@>(B@, (A@, B@) { B@; }) { B@; }
ForEach = <@ A@>(List@<A@> list)<@ B@>(B@ base, (A@, B@) { B@; } body) {
  list.?(nil: base);
  ForEach(list.cons.tail, body(list.cons.head, base), body);
};

Keeping these changes in mind, it's going to be critical that we can merge
poly functions into multi arg functions like this. ForEach should end up being
a 3 argument function at runtime.

