Fble 0.3 TODO
=============
Things to consider doing for the fble-0.3 release.

* Add test for overapplication to a function whose value is 'NULL' due to
  abort.

* Can we remove the need for profile_block_offset by making function profile
  blocks be relative to the function that allocates them?

* Figure out how to avoid duplicate code between LinkInterpreted and
  LinkGenerated?

* SatGame
 - Implement a nicer Random@ interface.
 - Implement List@ shuffle.
 - Implement Puzzle@ generator.

* Some better way to recover if build.ninja gets messed up than having to
  re-run configure.

* Update tutorials for partial function application updates.
   Particularly noting how to do type inference for multiple poly parameters.

* It's strange that a function that returns a poly has kind %.
  Does that make sense?

* Module compilation
 - As a blocker for major compiler optimizations.

* Add spec tests for coverage.

* Improve build times?
 - It's getting a little annoying for development now that everything is
   rebuilt and it takes a while when you touch the library code, for example.
   Full rebuild: real    6m32.236s, sys     3m17.144s

* Fbld: Proper support for include/modularity
* Fbld: Native C implementation.
 - To decouple dependencies and for comparison against fble implementation.
* Fbld: Language agnostic test suite.

* Smten, and smten-based mnist classification.
* IEEE floating point support.
* Implement an image viewer.

* Make programs run twice as fast.
 - Implement function inlining?
 - Implement packing of data types?
 - Use registers for args and locals instead of the stack?
 - Avoid copying func, args in FbleCall tail call case?
   Instead allocate enough space before/after for tail call buffer as needed?

* Do something with .@ module value vs. type?
  - There's currently unexercised code for it.

* Improving packing support for data values.
 - Taking advantage of explicit type info to pack and unpack.

* [compilation] Add support for .fble.@ files and modular compilation.

*  Can fble-stdio check that the function has the right type?
 - Right now, the only info we have at runtime is num_args. We could at least
   check for that. Also that it's a function.

* [lang] Add some way to catch or recover from errors at runtime?

* [modules]
 - Decide about .fble.@ files.
 - Split FbleLoad into FbleLoadProgram and FbleLoadModule.
 - Add support for loading .fble.@ files.
   And presumably some way to test this and something about it in the language
   spec?
 - Test all combinations of .fble/.fble.@, with all combinations of type
   errors in one or the other or both.

* Add option for passing .so files to FbleLinkFromCompiledOrSource?

* Improve performance with profiling enabled?
 - Now that we removed the optimization for detecting duplicate call entries
   in the stack?
 - see thoughts/fble.profile.txt

* Clean up fble library
 - Separate modules as appropriate to reduce false dependencies.
 - Document all functions.
 - Add tests for full code coverage of all functions.

* Add tests that at least the compiled apps don't crash when you run them.
 - Including with --profile enabled.
 - But can we assume there is a DISPLAY available for testing?

* Debug improvements:
 - Add debug support for all backends, not just aarch64
 - Add easy member access in debug. e.g.: print(foo.just).
 - Inline FbleCall again to support stepping through code?
   Or try using dwarf trampoline annotation?

Doc Comments
* convert lib/*, test/*, etc. code to fbld doc comments.
* Be able to write doc comments for extern values and types as well as
  functions.
* Would be nice to have SEE ALSO section for library man pages.

* Fbld Markdown Backend
 - Reflow paragraphs to 80 columns.
 - How to support labels in markdown?
 - etc.

* write tutorials for C api.
* Factor out common code for @FbleVersion (@BuildStamp)

* Consider syntax highlighting of the syntax specification in fble.fbld.
* Add way to do inline code syntax highlighting in fbld?

* Improve vim syntax highlighting of {} blocks in fbld
 - For example, it shouldn't highlight in the case of: @l[{]@hi@l[}].

* Improve fbld syntax highlighting of {} blocks in fbld
 - For example, don't highlight @degralder in @l{ruhler@degralder.com}.

* Write an App tutorial.
* Remove all the scary language from HelloWorld tutorial.
* Improve exercises for Unions and Functions tutorials, and others.

Usage docs
* Come up with a better story for building and integrating usage help text?
* Add usage generated help text to fble derived programs?
 graphics, md5, pinball, invaders, and sat?

* Proper support for unicode characters in /Core/Char%.

* Consider not building and installing documentation by default?
  Just because it takes a while to generate?

* There's no way to do user defined ifneq in fbld?
  Because all the arguments are evaluated. That's annoying?

* Avoid O(N) operations for allocations in heap.c?
  Specifically, forming the 'gc' generation and cleaning up the gc generation.
