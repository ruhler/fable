Fbld 4:
* Implement new spec as needed for tests to pass.
 - Fix support for recursion.
* Increase test coverage for spec.
* Refactor existing programs to take advantage of the new features.
* Write a new program (deflate) taking advantage of the new features.

Fbld 4 Cleanup:
* Introduce FbldProto as distinct type from FbldDecl.
* Put 'access' in front of defn, not each individual defn in parse.y grammar.

Fbld 4 Test:
* Test that you can't have two static parameters with the same name.
* Add a test that you can't use a func, proc, interf, or module as a type
  parameter argument.
* Add a test that you can't use a type, func, proc, interf as a module
  parameter argument.
* Add a test that you can't use a module parameter argument of the wrong
  interface type.
* Add a test for inner module definition with following declaration.
* Add test for importing a polymorphic declaration.
* Test case when abstract type is used as select for conditional.
* Test that all imported names exist in the module they are imported from.
* Test that we don't print error messages for "failed to load top level
  declaration Blah" multiple times.
* Test that we don't print error messages for "Foo not defined" multiple
  times, even if we use Foo multiple times without it being defined?
* Reach full test coverage.
* Warn for unused imports?

Fbld Cleanup:
* Move contents of program.c into name.c. Maybe call it qref.c?
* Define and use UNREACHABLE everywhere appropriate.
* Make it more clear in error messages when a module decl doesn't match its
  interf decl that that's why we expected something different.
* Change check's ReportError to take a context.
* Change CheckTypesMatch to take a context.
* Make sure the Side Effects description of the Check functions say that r
  states are resolved.
* General code cleanup.
* Re-organize parse.y to match order in fbld.h.
* Figure out how to deal with allocations in fbld check and compile, and maybe
  how to reuse allocations rather than allocating duplicates of things.
* Review all documentation and other things for consistency.
* Document that parse returns FBLC_NULL_ID for field ids and check fills in
  field ids.
* Update comments on FbldCompile functions to clarify assumptions about the
  input program, namely that entity modules have already been resolved.
* Update comments on FbldCheck functions to clarify that module names are
  resolved as a side effect.
* Don't allocate and leak FbldLocs like crazy in the lexer/parser.
* Cleanup fbld types to have less pointers - don't include an indirection just
  because it makes parsing easier. Copy values in parser as needed instead.
* Use consistent style for error messages. Capitalize? Punctuate?

App Ideas:
* compress/deflate
* snake - text based and graphics
* tictactoe - text based and graphics
* space invaders
* scrabble crush
* 2d minigolf

General Cleanup:
 - Rename FBLC_ALLOC FblcAlloc to be more consistent?
 - Verify all document comments are present and up to date.
 - Document allocations for every function that takes an FblcArena,
   specifically, what the caller should do to free all allocations.
 - Increase test code coverage as much as reasonably possible.
 - Put vector type definitions after their corresponding element definitions.

Snake Arc:
* Make food appear randomly instead of at the tail.
* Speed up the snake every time it eats something.
* Test and fix bug when snake eats its tail.
* Ignore moves that aren't orthoginal to current snake direction.
* Keep track of and report score.

Miscellanous:
* Add test to fblc-test that we don't leak memory in FblcExecute.
  - See for example, fbld-md5 which clearly shows we do leak memory in
    FblcExecute.
* Use consistent naming in spec tests to distinguish between:
  - Something with the wrong syntax, such as ???. "malformed"
  - Something that cannot be typed, such as x, when x is not defined.  "maltyped"
  - Something with the wrong type, such as Donut(), when Unit() is expected. "mistyped"

* Test that tail recursive functions and procedures don't smash the stack.
  - And document the performance model which says tail recursive functions
    should not smash the stack.
* Test what happens when we try to access the wrong field of a union.

* Better document that for binary encodings of values, the top level value is
  guarenteed to take at least one bytes, regardless of whether or not it is
  part of a stream.

* Change fblc-check-error and friends to take the program last, and switch to
  a style where an anonymous program is passed rather than setting a $prg
  variable?

* Test writing a stream of Units
 - which requires some alignment be done.

* Test that error messages don't contain garbled characters.

* Write man pages for fblc and friends?

* Rethink arenas and documentation, because some cases appear to assume you
  have a bulk-free arena. Other cases its not well specified what is freed
  explicitly and what is expected to be freed implicitly.

* Document performance model.
  Specifically that we use strict evaluation to model performance because it
  is a simple model, which is essential for writing high performance code.
  Lazy evaluation is not 'performance modular' in the sense that the runtime
  of a function depends on how its arguments were computed and how its result
  is going to be used, rather than just the value of arguments. Lazy
  evaluation has some benefits I'll miss, but not nearly enough to justify
  loss of a simple, modular performance model. Implementations should focus on
  improving constant factors, not improving complexity over the performance
  model.

Future:
* Implement compiler to C. Idea is translate a function body into a sequence
  of commands like we have in the current interpreter. Split the command
  sequence into blocks any place there is a function call. Gather up all the
  blocks of all the command sequences in the program, give each a unique name
  starting from zero, then generate a loop containing one large switch
  statement with a case for each block. Global state is a list of thread
  contexts. Thread context is a frame, which has variables, ports, the id of
  the block that currently needs to be executed, and a pointer to the frame to
  execute after executing this block.

* Implement compiler to hardware. Same idea as compiler to C: break up into
  blocks. Now each block can be its own hardware block. Frames are queued up
  at their block, all blocks can execute in parallel as inputs are available,
  and we can pipeline or duplicate the blocks to allow for even more
  parallelism.

* Implement an fblc debugger. Where at minimum you can trace through source
  locations as the program executes. Maybe we want fancy stuff like viewing
  variables, breakpoints, setting values, etc... but mostly to start tracing
  through source locations.

* Implement fblc code coverage tool. Input is a program to run. Output is a
  list of error messages for each line of code not exercise by the program?

