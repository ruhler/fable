module AllTestsM(AllTestsI) {
  using UnitM { Unit; };
  using List M{ S; P; Append; };
  using UBNatTestM { UBNatTestFailure = TestFailure; };
  using PrimesTestM { PrimesTestFailure = TestFailure; };

  union TestFailure(
      UBNatTestFailure UBNatTest,
      PrimesTestFailure PrimesTest
  );
  
  module UBNatTestFailureF(Function<UBNatTestFailure, TestFailure>) {
    func f(UBNatTestFailure x ; TestFailure) {
      TestFailure:UBNatTest(x);
    };
  }

  module PrimesTestFailureF(Function<PrimesTestFailure, TestFailure>) {
    func f(PrimesTestFailure x ; TestFailure) {
      TestFailure:PrimesTest(x);
    };
  }

  func Test( ; S<TestFailure>) {
    Append<TestFailure>(
        MapS<UBNatTestFailure, TestFailure; UBNatTestFailiureF>(Test@UBNatTestM()),
        MapS<PrimesTestFailure, TestFailure; PrimesTestFailureF>(Test@PrimesTestM()));
  };
};
