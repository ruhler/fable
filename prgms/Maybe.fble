{ Unit%; @(Unit@); };

<@>@ Maybe@ = <@ T@> { +(T@ just, Unit@ nothing); };

<@ T@>(T@){ Maybe@<T@>; } Just = <@ T@>(T@ x) { Maybe@<T@>(just: x); };
<@ T@>{ Maybe@<T@>; } Nothing = <@ T@> { Maybe@<T@>(nothing: Unit@()); };

<@ A@, @ B@>(Maybe@<A@>, (A@){B@;}){ Maybe@<B@>; }
MapMaybe = <@ A@, @ B@>(Maybe@<A@> m, (A@){B@;} f) {
  ?(m; just: Just<B@>(f(m.just)), nothing: Nothing<B@>);
};

<@ A@, @ B@>(A@, B@, (A@){Maybe@<A@>;}, (A@, B@){B@;}){ B@;}
For = <@ A@, @ B@>(A@ i, B@ base, (A@){Maybe@<A@>;} incr, (A@, B@){B@;} body) {
  Maybe@<A@> mnext = incr(i);
  ?(mnext;
      just: For<A@, B@>(mnext.just, body(i, base), incr, body),
      nothing: body(i, base));
};

@(Maybe@, Just, Nothing, MapMaybe, For);
