@doc Debugging Guide
  @FbleVersionStamp

 Fble has some limited support for debugging. This document explains tips and
 tricks for making the most of the currently available debug support.

 @definition Compile your code
  There is debug support for compiled fble code generated using the aarch64
  target. There is not currently debug support for compiled fble generated
  using the c target nor for interpreted fble code. Compile your code using
  the aarch64 target to access that debug support.

  You should now be able to debug your fble code with gdb.

 @definition To print an @l{Int@} variable value in gdb
  @code[gdb] @
   print FbleIntValueAccess(foo)

 @definition To print a @l{String@} variable value in gdb
  @code[gdb] @
   print FbleStringValueAccess(foo)

 @definition To access a struct field
  @code[gdb] @
   print FbleStructValueField(foo, tag)

 @definition To set a breakpoint that will trigger on runtime error
  @code[gdb] @
   break fprintf

 @definition For printf like debugging
  Use the @l{/Core/Debug%.Trace} function for the strings to print.

  In gdb, run the following sequence of commands:

  @code[gdb] @
   break /Core/Debug%.Trace!
   commands
   silent
   call FbleDebugTrace(_)
   continue
   end

  Now you should see Trace values printed as the program executes.

  Or, to automatically run those same commands:

  @code[sh] @
   gdb -x pkgs/core/trace.gdb ...

 @definition To avoid stepping into runtime implementation code
  @code[gdb] @
   skip -gfi *.c

  Note: This currently will not work because it's too much of a pain to
  maintain the code needed to support it.
