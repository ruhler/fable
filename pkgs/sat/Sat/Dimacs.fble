
@ Char@ = /Core/Char%.Char@;
% Chars = /Core/Char%.Chars;
% IsSpace = /Core/Char/Type%.IsSpace;

@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;
% Abs = /Core/Int%.Abs;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Cons = /Core/List%.Cons;
<@>% Reverse = /Core/List%.Reverse;
<@>% Split = /Core/List/Eq%.Split;
<@>% Length = /Core/List/Length%.Length;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Var@ = /Sat/Solver%.Var@;
@ Clause@ = /Sat/Solver%.Clause@;
@ Cnf@ = /Sat/Solver%.Cnf@;

# DIMACS cnf parser.
# http://www.satcompetition.org/2009/format-benchmarks2009.html
#
# c
# c start with comments
# c
# c
# p cnf 5 3        // p cnf <nbvar> <nbclauses>
# 1 -5 4 0         // 1 line per clause.
# -1 5 3 4 0       // +x, -x not allowed in same clause
# -3 -4 0

# Parse@ monad definition.
@ ParseState@ = *(List@<String@> lines, Cnf@ formula);
<@>@ ParseResult@ = <@ T@> { *(ParseState@ state, T@ result); };
<@>@ ParseStatus@ = <@ T@> { +(String@ error, ParseResult@<T@> parsed); };
<@>@ ParseM@ = <@ T@> { (ParseState@) { ParseStatus@<T@>; }; };

<@ T@>(T@) { ParseM@<T@>; } Return = <@ T@>(T@ x)(ParseState@ s) {
  ParseStatus@<T@>(parsed: ParseResult@<T@>(s, x));
};

<@ A@>(ParseM@<A@>)<@ B@>((A@) { ParseM@<B@>; }) { ParseM@<B@>; }
Do = <@ A@>(ParseM@<A@> m)<@ B@>((A@) { ParseM@<B@>; } f)(ParseState@ s) {
  ParseStatus@<A@> r = m(s);
  r.?(error: ParseStatus@<B@>(error: r.error));
  f(r.parsed.result)(r.parsed.state);
};

<@ T@>(String@) { ParseM@<T@>; } Error = <@ T@>(String@ msg)(ParseState@ _) {
  ParseStatus@<T@>(error: msg);
};

ParseM@<Maybe@<String@>> GetLine = (ParseState@ state) {
  state.lines.?(nil: Return(Nothing<String@>)(state));

  ParseState@ nstate = ParseState@(state.lines.cons.tail, state.formula);
  Return(Just(state.lines.cons.head))(nstate);
};

(Clause@) { ParseM@<Unit@>; } AddClause = (Clause@ clause)(ParseState@ s) {
  ParseState@ ns = ParseState@(s.lines, Cons(clause, s.formula));
  Return(Unit)(ns);
};

(List@<String@>) { ParseM@<Clause@>; } ParseVars = (List@<String@> words) {
  words.?(nil: Error<Clause@>(Str|'missing clause terminator'));

  Int@ x = /Core/Int/Show%.Read(words.cons.head);
  /Core/Int/Eq%.Eq(x, Int|0).?(true: Return(List<Var@>[]));

  Var@ v = Var@(Abs(x), /Core/Int/Eq%.Gt(x, Int|0));

  Clause@ tail <- Do(ParseVars(words.cons.tail));
  Return(Cons(v, tail));
};

(String@) { ParseM@<Clause@>; } ParseClause = (String@ line) {
  ParseVars(Split<Char@>(line, IsSpace));
};

ParseM@<Unit@> ParseClauses = {
  Maybe@<String@> line <- Do(GetLine);
  line.?(nothing: Return(Unit));

  Clause@ clause <- Do(ParseClause(line.just));
  Unit@ _ <- Do(AddClause(clause));
  ParseClauses;
};

# Parse starting from the 'p cnf...' header line
(String@) { ParseM@<Unit@>; } ParseFromHeader = (String@ header) {
  List@<String@> words = Split<Char@>(header, IsSpace);
  Int@ num_words = Length<String@>(words);
  /Core/Int/Eq%.Eq(num_words, Int|4).?(false: {
    Error<Unit@>(Strs[Str|'invalid header line: ', header]);
  });

  String@ p = words.cons.head;
  String@ cnf = words.cons.tail.cons.head;

  /Core/String/Eq%.Eq(p, Str|'p').?(false: {
    Error<Unit@>(Strs[Str|'expected ''p'', but got: ', p]);
  });

  /Core/String/Eq%.Eq(cnf, Str|'cnf').?(false: {
    Error<Unit@>(Strs[Str|'expected ''cnf'', but got: ', cnf]);
  });

  # TODO: check syntax and values of nbvars and nbclauses?
  ParseClauses;
};

# Parse from the starting state of a file, where there are still comment
# lines.
ParseM@<Unit@> ParseFromStart = {
  Maybe@<String@> line <- Do(GetLine);
  line.?(nothing: Error<Unit@>(Str|'no clauses found'));

  line.just.?(nil: Error<Unit@>(Str|'empty line'));

  Char@ c = line.just.cons.head;
  c.?(
    c: ParseFromStart,
    p: ParseFromHeader(line.just),
    : Error<Unit@>(Strs[Str|'invalid line: ', line.just]));
};

<@>@ Parse@ = <@ T@> { +(String@ error, T@ parsed); };

(List@<String@>) { Parse@<Cnf@>; } ParseLines = (List@<String@> lines) {
  ParseStatus@<Unit@> ps = ParseFromStart(ParseState@(lines, List<Clause@>[]));
  ps.?(error: Parse@<Cnf@>(error: ps.error));
  Parse@<Cnf@>(parsed: Reverse(ps.parsed.state.formula));
};

(String@) { Parse@<Cnf@>; } Parse = (String@ dimacs) {
  ParseLines(Split<Char@>(dimacs, (Char@ c) {
    /Core/Char/Eq%.Eq(c, Chars.nl);
  }));
};

@(Parse@, Parse, ParseLines);
