
% True = /Core/Bool%.True;

@ Char@ = /Core/Char%.Char@;
% Chars = /Core/Char%.Chars;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Concat = /Core/List%.Concat;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Square@ = /Games/TicTacToe/Board%.Square@;
@ Board@ = /Games/TicTacToe/Board%.Board@;
@ Player@ = /Games/TicTacToe/Board%.Player@;
@ Position@ = /Games/TicTacToe/Board%.Position@;

@ GameStatus@ = /Games/TicTacToe/Game%.GameStatus@;
@ Move@ = /Games/TicTacToe/Game%.Move@;
@ Game@ = /Games/TicTacToe/Game%.Game@;
% Initial = /Games/TicTacToe/Game%.Initial;
% Play = /Games/TicTacToe/Game%.Play;

(Square@) { String@; } ShowSquare = (Square@ s) {
  s.?(X: Str|X, O: Str|O, E: Str|_);
};

(Board@) { String@; } ShowBoard = (Board@ b) {
  String@ _ = Str|' ';
  Concat<Char@>(List<String@>[
    Str|'  1 2 3', Str[Chars.nl],
    Str|'A ', ShowSquare(b.ul), _, ShowSquare(b.uc), _, ShowSquare(b.ur), Str[Chars.nl],
    Str|'B ', ShowSquare(b.ml), _, ShowSquare(b.mc), _, ShowSquare(b.mr), Str[Chars.nl],
    Str|'C ', ShowSquare(b.ll), _, ShowSquare(b.lc), _, ShowSquare(b.lr), Str[Chars.nl]]);
};

(Player@) { String@; } ShowPlayer = (Player@ p) {
  p.?(X: Str|X, O: Str|O);
};

(GameStatus@) { String@; } ShowStatus = (GameStatus@ s) {
  s.?(
    playing: Concat<Char@>(List<String@>[Str|'Player ', ShowPlayer(s.playing), Str|' move:']),
    ended: s.ended.?(
      win: Concat<Char@>(List<String@>[
        Str|'GAME OVER: Player ',
        ShowPlayer(s.ended.win),
        Str|' wins.']),
      draw: Str|'GAME OVER: Draw.'));
};

(Game@) { String@; } ShowGame = (Game@ game) {
  Concat<Char@>(List<String@>[
    ShowBoard(game.board),
    Str[Chars.nl],
    ShowStatus(game.status),
    Str[Chars.nl]]);
};

@ Input@ = +(Unit@ quit, Unit@ reset, Move@ move);

(String@) { Maybe@<Input@>; } ParseInput = (String@ in) {
  in.?(
      cons: in.cons.head.?(
        'A': in.cons.tail.?(cons: in.cons.tail.cons.head.?(
                '1': Just(Input@(move: Move@(given: Position@(UL: Unit)))),
                '2': Just(Input@(move: Move@(given: Position@(UC: Unit)))),
                '3': Just(Input@(move: Move@(given: Position@(UR: Unit)))),
                   : Nothing<Input@>),
                nil: Nothing<Input@>),
        'B': in.cons.tail.?(cons: in.cons.tail.cons.head.?(
                '1': Just(Input@(move: Move@(given: Position@(ML: Unit)))),
                '2': Just(Input@(move: Move@(given: Position@(MC: Unit)))),
                '3': Just(Input@(move: Move@(given: Position@(MR: Unit)))),
                   : Nothing<Input@>),
                nil: Nothing<Input@>),
        'C': in.cons.tail.?(cons: in.cons.tail.cons.head.?(
                '1': Just(Input@(move: Move@(given: Position@(LL: Unit)))),
                '2': Just(Input@(move: Move@(given: Position@(LC: Unit)))),
                '3': Just(Input@(move: Move@(given: Position@(LR: Unit)))),
                   : Nothing<Input@>),
                nil: Nothing<Input@>),
        'P': Just<Input@>(Input@(move: Move@(ai: Unit))),
        'Q': Just<Input@>(Input@(quit: Unit)),
        'R': Just<Input@>(Input@(reset: Unit)),
           : Nothing<Input@>),
      nil: Nothing<Input@>);
};

# Play a game of tic-tac-toe.
Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio) {
  % S = /Core/Stdio/Stdio%(m, stdio);

  (Game@) { M@<Unit@>; } TicTacToe = (Game@ game) {
    Unit@ _ <- m.do(S.PutStr(S.Stdout, ShowGame(game)));

    String@ line <- m.do(S.GetLine(S.Stdin));
    line.?(nil: m.return(Unit));

    Maybe@<Input@> mi = ParseInput(line);
    mi.?(nothing: {
      Unit@ _ <- m.do(S.PutLine(S.Stdout, Strs[
        Str|'invalid input: ',
        Str|'expected {A,B,C}{1,2,3}, P, Q, or R']));
      TicTacToe(game);
    });

    mi.just.?(quit: m.return(Unit));
    mi.just.?(reset: TicTacToe(Initial));
    TicTacToe(Play(mi.just.move, game));
  };

  (List@<String@> args) {
    Unit@ _ <- m.do(TicTacToe(Initial));
    m.return(True);
  };
};

/Core/Stdio/IO%.Run(Main);
