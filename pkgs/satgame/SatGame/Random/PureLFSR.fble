
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Bit@ = /Core/Digits%.Bit@;
% Bit = /Core/Digits%.Bit;

@ Int@ = /Core/Int%.Int@;
@ QR@ = /Core/Int/Div%.QR@;
% Div = /Core/Int/Div%.Div;
% IsZero = /Core/Int/Eq%.IsZero;
% Int = /Core/Int/Lit%.Int;

@ LFSR@ = /Core/LFSR%.LFSR@;
<@>@ Shifted@ = /Core/LFSR%.Shifted@;
% LFSR = /Core/LFSR%.LFSR;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;

% State = /Core/Monad/State%<LFSR@>;

@ Unit@ = /Core/Unit%.Unit@;

<<@>@>@ Random@ = /SatGame/Random%.Random@;

<@>@ M@ = State.State@;

% Monad = State.Monad;

M@<Bool@> RandBool = {
  LFSR@ lfsr <- Monad.do(State.Get);
  Shifted@<Bit@> shifted = /Core/LFSR%.Shift(lfsr);
  Unit@ _ <- Monad.do(State.Set(shifted.lfsr));
  Monad.return(shifted.output.?(0: False, 1: True));
};

Random@<M@> Random = Random@<M@>(RandBool);

(Int@, List@<Bit@>) { List@<Bit@>; }
IntToBits = (Int@ x, List@<Bit@> bits) {
  IsZero(x).?(true: bits);
  QR@ qr = Div(x, Int|2);
  Bit@ bit = /Core/Int/Eq%.Eq(Int|0, qr.r).?(true: Bit.0, false: Bit.1);
  IntToBits(qr.q, Cons(bit, bits));
};

<@ T@>(M@<T@>, Int@) { T@; }
Run = <@ T@>(M@<T@> mr, Int@ seed) {
  LFSR@ lfsr = LFSR(/Core/LFSR%.Polynomials.24, IntToBits(seed, Nil<Bit@>));
  State.Run(mr, lfsr).x;
};

@(M@, Monad, Random, Run);
