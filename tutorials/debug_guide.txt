Fble Debugging Guide
====================
Fble has some limited support for debugging. This document explains tips and
tricks for making the most of the currently available debug support.

* Compile your code.
  There is debug support for compiled fble code generated using the aarch64
  target. There is not currently debug support for compiled fble generated
  using the c target nor for interpreted fble code. Compile your code using
  the aarch64 target to access that debug support.

* To print an Int@ variable value in gdb:
  print FbleIntValueAccess(foo)

* To print a String@ variable value in gdb:
  print FbleStringValueAccess(foo)

* To access a struct field:
  print FbleStructValueAccess(foo, tag)

* To set a breakpoint that will trigger on runtime error:
  break fprintf

* For printf like debugging.
  Use the /Debug%.Trace function for the strings to print.

  In gdb, run the following sequence of commands:
    break /Core/Debug%.Trace!
    commands
    silent
    call FbleDebugTrace(_)
    continue
    end

  Now you should see Trace values printed as the program executes.

  Or, to automatically run those same commands:

    gdb -x pkgs/core/trace.gdb ...

* To avoid stepping into runtime implementation code:
  In theory:
    skip -gfi *.c
  But doesn't seem to work in practice?
  It does 'skip' function calls, but that's not what we want. We want it to go
  into function calls, but only stop when it reaches the fble code.

  The other option: link against a libfble without any symbols.
  Behaves the same as skip -gfi *.c? Odd. Maybe debug symbols aren't generated
  correctly?

