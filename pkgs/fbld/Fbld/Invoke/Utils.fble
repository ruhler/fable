
@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>% Length = /Core/List/Length%.Length;

% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Command@ = /Fbld/Command%.Command@;
@ Loc@ = /Fbld/Loc%.Loc@;

@ Text@ = /Fbld/Text%.Text@;
% Text = /Fbld/Text%.Text;
% LocOf = /Fbld/Text%.LocOf;
% StringOf = /Fbld/Text%.StringOf;

(Text@) { Text@; } Unescape = (Text@ s) {
  Text(/Fbld/Unescape%.Unescape(StringOf(s)), LocOf(s));
};

% Run = /Fbld/Run%;

<@>@ Fbld@ = /Fbld/Fbld%.Fbld@;
@ Invoke@ = /Fbld/Fbld%.Invoke@;
<@>% Error = /Fbld/Fbld%.Error;

# @<tag>[*]
# Creates an Invoke@ function expecting one argument.
((Loc@, Text@) { Fbld@<Text@>; }) { Invoke@; }
A1 = ((Loc@, Text@) { Fbld@<Text@>; } f) {
  (Command@ command) {
    Int@ num_args = Length(command.args);
    /Core/Int/Eq%.Eq(Int|1, num_args ).?(false: {
      Error<Text@>(LocOf(command.name), Strs[
            Str|'expected 1 arg, but got ',
            /Core/Int/Show%.Show(num_args)]);
    });

    Text@ arg = command.args.cons.head;
    f(LocOf(command.name), arg);
  };
};

# @<tag>[*][*]
# Creates an Invoke@ function expecting two arguments.
((Loc@, Text@, Text@) { Fbld@<Text@>; }) { Invoke@; }
A2 = ((Loc@, Text@, Text@) { Fbld@<Text@>; } f) {
  (Command@ command) {
    Int@ num_args = Length(command.args);
    /Core/Int/Eq%.Eq(Int|2, num_args ).?(false: {
      Error<Text@>(LocOf(command.name), Strs[
            Str|'expected 2 args, but got ',
            /Core/Int/Show%.Show(num_args)]);
    });

    Text@ a1 = command.args.cons.head;
    Text@ a2 = command.args.cons.tail.cons.head;
    f(LocOf(command.name), a1, a2);
  };
};

# @<tag>[ESCAPED]
# Creates an Invoke@ function expecting one ESCAPED argument.
((Loc@, Text@) { Fbld@<Text@>; }) { Invoke@; } LE = ((Loc@, Text@) { Fbld@<Text@>; } f) {
  Loc@ loc, Text@ arg <- A1;
  f(loc, Unescape(arg));
};

# @<tag>[INLINE]
# Creates an Invoke@ function expecting one INLINE argument.
((Loc@, Fbld@<Text@>) { Fbld@<Text@>; }) { Invoke@; } LI = ((Loc@, Fbld@<Text@>) { Fbld@<Text@>; } f) {
  Loc@ loc, Text@ arg <- A1;
  f(loc, Run.Inline(arg));
};

# @<tag>[BLOCK] helper function
# Creates an Invoke@ function expecting one BLOCK argument.
((Loc@, Fbld@<Text@>) { Fbld@<Text@>; }) { Invoke@; } LB = ((Loc@, Fbld@<Text@>) { Fbld@<Text@>; } f) {
  Loc@ loc, Text@ arg <- A1;
  f(loc, Run.Block(arg));
};

# @<tag>[ESCAPED][ESCAPED] helper function
# Creates an Invoke@ function expecting two ESCAPED arguments.
((Loc@, Text@, Text@) { Fbld@<Text@>; }) { Invoke@; } LEE = ((Loc@, Text@, Text@) { Fbld@<Text@>; } f) {
  Loc@ loc, Text@ a1, Text@ a2 <- A2;
  f(loc, Unescape(a1), Unescape(a2));
};

# @<tag>[ESCAPED][INLINE] helper function
((Loc@, Text@, Fbld@<Text@>) { Fbld@<Text@>; }) { Invoke@; } LEI = ((Loc@, Text@, Fbld@<Text@>) { Fbld@<Text@>; } f) {
  Loc@ loc, Text@ a1, Text@ a2 <- A2;
  f(loc, Unescape(a1), Run.Inline(a2));
};

# @<tag>[INLINE][INLINE] helper function
((Loc@, Fbld@<Text@>, Fbld@<Text@>) { Fbld@<Text@>; }) { Invoke@; }
LII = ((Loc@, Fbld@<Text@>, Fbld@<Text@>) { Fbld@<Text@>; } f) {
  Loc@ loc, Text@ a1, Text@ a2 <- A2;
  f(loc, Run.Inline(a1), Run.Inline(a2));
};

# @<tag>[INLINE][BLOCK] helper function
((Loc@, Fbld@<Text@>, Fbld@<Text@>) { Fbld@<Text@>; }) { Invoke@; } LIB = ((Loc@, Fbld@<Text@>, Fbld@<Text@>) { Fbld@<Text@>; } f) {
  Loc@ loc, Text@ a1, Text@ a2 <- A2;
  f(loc, Run.Inline(a1), Run.Block(a2));
};

# @<tag>[ESCAPED][? INLINE] helper function, where the optional argument
# defaults to the first argument value.
((Loc@, Text@, Fbld@<Text@>) { Fbld@<Text@>; }) { Invoke@; }
LEmI = ((Loc@, Text@, Fbld@<Text@>) { Fbld@<Text@>; } f) {
  (Command@ command) {
    Int@ num_args = Length(command.args);
    /Core/Int/Eq%.Eq(Int|1, num_args).?(true: {
      Text@ a1 = command.args.cons.head;
      f(LocOf(command.name), Unescape(a1), Run.Inline(a1));
    });

    /Core/Int/Eq%.Eq(Int|2, num_args).?(true: {
      Text@ a1 = command.args.cons.head;
      Text@ a2 = command.args.cons.tail.cons.head;
      f(LocOf(command.name), Unescape(a1), Run.Inline(a2));
    });

    Error<Text@>(LocOf(command.name), Strs[
            Str|'expected 1 or 2 args, but got ',
            /Core/Int/Show%.Show(num_args)]);
  };
};


@(LE, LEI, LEmI, LI, LB, LEE, LII, LIB);
