{ Unit%; @(Unit@, Unit); };
{ Bool%; @(Bool@, Not); };
{ Char%; @(Char@, Chars); };
{ List%; @(P@, S@, S0, S, Append); };
{ String%; @(Str@, CharLit@, Str); };
{ Test%; @(TestResult@, Test@); };
{ UBNat%; @(
    Nat@,
    0, 1, 2, 3, 4, 5, 6, 7, Lit2,
    EqNat, Lt, Le, Gt, Ge,
    Inc, Dec, Add, Sub, Mul, Div, Mod
  );
};

@ TestFailure@ = *(Str@ name, Nat@ a, Nat@ b);

(CharLit@, Bool@!){Test@;} T = (CharLit@ name, Bool@! p) {
  Test@(Append<Char@>(Str(Chars|'UBNat.'), Str(name)), {
    Bool@ x := p;
    ?(x;
       true: $(TestResult@(pass: Unit)),
       false: $(TestResult@(fail: Str(Chars|failed))));
  });
};

(CharLit@, Nat@, Nat@!){Test@;} TEq = (CharLit@ name, Nat@ a, Nat@! b) {
  # TODO: Provide a custom error message
  T(name, { Nat@ x := b; $(EqNat(a, x)); });
};

S@<Test@> Tests = S<Test@>([
  T(Chars|Eq_0_0, $(EqNat(0, 0))),
  T(Chars|Eq_0_1, $(Not(EqNat(0, 1)))),
  T(Chars|Eq_1_1, $(EqNat(1, 1))),
  T(Chars|Le_5_5, $(Le(5, 5))),
  T(Chars|Le_5_7, $(Le(5, 7))),
  T(Chars|Le_7_5, $(Not(Le(7, 5)))),
  T(Chars|Lt_5_5, $(Not(Lt(5, 5)))),
  T(Chars|Lt_5_7, $(Lt(5, 7))),
  T(Chars|Lt_7_5, $(Not(Lt(7, 5)))),
  T(Chars|Ge_5_5, $(Ge(5, 5))),
  T(Chars|Ge_5_7, $(Not(Ge(5, 7)))),
  T(Chars|Ge_7_5, $(Ge(7, 5))),
  T(Chars|Gt_5_5, $(Not(Gt(5, 5)))),
  T(Chars|Gt_5_7, $(Not(Gt(5, 7)))),
  T(Chars|Gt_7_5, $(Gt(7, 5))),
  TEq(Chars|Inc_5, 6, $(Inc(5))),
  TEq(Chars|Dec_5, 4, $(Dec(5))),
  TEq(Chars|Dec_5, 4, $(Dec(5))),
  TEq(Chars|Add_5_7, Lit2(1, 2), $(Add(5, 7))),
  TEq(Chars|Sub_5_7, 0, $(Sub(5, 7))),
  TEq(Chars|Mul_5_7, Lit2(3, 5), $(Mul(5, 7))),
  TEq(Chars|Div_6_3, 2, $(Div(6, 3))),
  TEq(Chars|Div_10_3, 3, $(Div(Lit2(1, 0), 3))),
  TEq(Chars|Mod_6_3, 0, $(Mod(6, 3))),
  TEq(Chars|Mod_10_3, 1, $(Mod(Lit2(1, 0), 3)))
]);

@(Tests);
