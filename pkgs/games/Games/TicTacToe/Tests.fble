
<@>% List = /Core/List%.List;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
@ TestResult@ = /Core/Test%.TestResult@;
% TestSuite = /Core/Test%.TestSuite;
% Test = /Core/Test%.Test;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ AIR@ = /Games/TicTacToe/AI%.AIR@;
% AI = /Games/TicTacToe/AI%;

@ Board@ = /Games/TicTacToe/Board%.Board@;
@ Player@ = /Games/TicTacToe/Board%.Player@;
@ Square@ = /Games/TicTacToe/Board%.Square@;
@ Status@ = /Games/TicTacToe/Board%.Status@;
@ Position@ = /Games/TicTacToe/Board%.Position@;
% BoardStatus = /Games/TicTacToe/Board%.BoardStatus;
% EmptyBoard = /Games/TicTacToe/Board%.EmptyBoard;

% Eq = /Games/TicTacToe/Board/Eq%;
% Show = /Games/TicTacToe/Board/Show%;

# Import to test compilation.
% _ = /Games/TicTacToe/Stdio%;

(Unit@) { TestResult@; } TestBoardStatus = (Unit@ _) {
  Status@ want = Status@(O: Unit);
  Status@ got = BoardStatus(Board@(
      Square@(X: Unit), Square@(O: Unit), Square@(O: Unit),
      Square@(E: Unit), Square@(O: Unit), Square@(X: Unit),
      Square@(O: Unit), Square@(X: Unit), Square@(X: Unit)));
  AssertEquals(Eq.Status, Show.Status, want, got);
};

(Unit@) { TestResult@; } TestChooseBestMoveWin = (Unit@ _) {
  AIR@ air = AI.Move(AI.Initial,
    Board@(Square@(X: Unit), Square@(X: Unit), Square@(E: Unit),
           Square@(O: Unit), Square@(O: Unit), Square@(E: Unit),
           Square@(E: Unit), Square@(E: Unit), Square@(E: Unit)),
    Player@(X: Unit));
  Position@ want = Position@(UR: Unit);
  Position@ got = air.position;
  AssertEquals(Eq.Position, Show.Position, want, got);
};

(Unit@) { TestResult@; } TestChooseBestMoveNoLose = (Unit@ _) {
  AIR@ air = AI.Move(AI.Initial,
    Board@(Square@(E: Unit), Square@(E: Unit), Square@(E: Unit),
           Square@(X: Unit), Square@(X: Unit), Square@(O: Unit),
           Square@(E: Unit), Square@(E: Unit), Square@(O: Unit)),
    Player@(X: Unit));
  Position@ want = Position@(UR: Unit);
  Position@ got = air.position;
  AssertEquals(Eq.Position, Show.Position, want, got);
};

Test@ Tests = TestSuite(Str|TicTacToe, List[
  Test(Str|TestBoardStatus, TestBoardStatus),
  Test(Str|TestChooseBestMoveWin, TestChooseBestMoveWin),
  Test(Str|TestChooseBestMoveNoLose, TestChooseBestMoveNoLose)
]);

# Benchmark for TicTacToe AI that takes about 1 minute to run.
Test@ Bench = Test(Str|TicTacToe, (Unit@ _) {
  AIR@ _ = AI.Move(AI.Initial, EmptyBoard, Player@(X: Unit));
  TestResult@(pass: Unit);
});

@(Tests, Bench);
