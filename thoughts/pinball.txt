Pinball Game
============
There are so many different games we could redo as a pinball game. For
example:
* skiball
* bowling
* breakout
* space invaders
* soccer
* platformer, like mario brothers or celeste
* air hockey.
* tony hawk
* minigolf
* basketball

Long term game idea:
* Have lots of different pinball maps, one for each game we could redo. Each
  map can have some collection of achievements for a player. Completing
  achievements in a map leads to unlocking new maps to try.

Initial proposal:
* Have a half court with sloping sides and paddles with a single object at the
  top of the screen that goes back and forth left and right in a fixed
  pattern. You have a score multiplier. Hit the object, you score the number
  of points on the score multiplier and double the score multiplier. Hit the
  ceiling you reset the score multiplier to 1. The game ends when the ball
  drops down the drain.

  Ideally we can print a score on the screen and keep track of high score and
  all that stuff. No fancy graphics required.

Current challenge:
* With just a ball and fixed edges, it's going way too slow. Averaging 4
  frames per second. We want to get it up to 60 frames per second. So let's do
  some profiling to figure out what's up.

Without looking at profiles yet, what I expect is:
* Maybe collision detection is expensive, given the performance seems tied
  directly to the number of edges in the screen. Maybe we can add a fast path
  cutout?
* Maybe drawing the circle every frame. We could just cache the drawing and
  translate it instead?

* Making a compiled version of pinball helps a bit.

Pinball app benchmark profile says:
* 70% of the time is spent drawing the triangles for the edges.

Let's fix that. Maybe it's finally time to add the optimization of drawing
triangles that are tall and skinny.

Actually, no need to redraw the triangles. Do the background drawing once and
reuse it.

---

The next performance issue is the rational arithmetic, mostly Add and Sub for
Rat@, which involves calls to /Int/Int%.Mul. Those multiplications account for
70% of the time now.

Perhaps this is because we introduced 3/5, 4/5 as rational numbers and we
don't reduce Rat@, so the denominator goes up and up and up leading to large
multiplications?

---

Reducing Rat@ made a big difference. That fixed the issue with integer
multiplication taking up all the time.

Setting restitution to 1 so that the ball bounces forever, it's starting to
look pretty good, except that there is a pause every time we collide with an
edge.

Perhaps not surprisingly, now all of our time is spent normalizing rational
numbers? Though maybe changing the ball to bounce forever isn't the right way
to look at things, if the performance issue is when collisions actually occur.

In particular, it's when the ball bounces off the diagonal edge that it
noticeably lags. Bouncing off vertical or horizontal edges appear to be fine.

Less than 5% of the profile is time spent in collisions, which suggests the
profile is not terribly meaningful for understanding the lag at time of
collision.

I tried changing the world to do lots of collisions against the diagonal
walls, but then it didn't lag so much.

I want to try using integers instead of rational numbers and see if it makes a
noticeable difference. Have everything be scaled by a factor of 128 and see
how that goes.

---

Turns out, the collision lag issue goes away if we fix precision to 1/128 at
intermediate computations of rational numbers. In that case, why not use Int@
instead of Rat@?

I'm not more prominently running into the issue where the ball manages to
escape it's box. I was having that with Rat@ too, but it seems more likely to
happen now with the precision limits. Any easy way to address that?

Switching from Rat@ to Int@ is almost 4x improvement in benchmark performance.

---

Next issue is the details of collision to make sure the ball doesn't magically
get energy from hitting a corner and eventually runs out of energy, but is
still able to roll on an incline.

It seems to do a collision at the end corner of an edge and get significant
boost to velocity in the negative tangential direction.

It's not about hitting the end of an edge, because it happens even if the two
intersecting edges intersect in the middle. And it only appears to happen on
the left hand corner, not the right hand corner.

Specifically, this is the ball rolling left on the floor towards the left
slope. It gets to the left slope, then slides up the left slope.

The order in which we test for collision doesn't seem to matter.

Try this math:

pos = (-2325/128, -11678/128)
vel = (-126/128, -4/128)

Understand why we go to
pos = (-2616/128, -11507/128)
vel = (-38/128, 98/128)

And in particular, how we can jump to the left by 291 units at once when the
X velocity is somewhere between -126 and -38.

Checking the math suggests the issue may be that 3/5 and 4/5 don't divide 128
evenly, so rotating forward and then backwards leads to funny behavior at time
of collision.

Seems things are better if we avoid use of RotateFrom for computing the new X
position. I worry that could lead to the possibility of the ball sinking
through the wall over time, but maybe that's not the case. It looks okay.
Gravity pushes it down, it doesn't actually go down, then the velocity from
collision pushes it back up a little. I think we are okay.

---

Computing cos/sin for integers is pretty doable I think. From some
experiments, important notes:
* Do the intermediate computation with double the precision requested.
* Do expansion only close to 0, so first 90 degrees, and compute rest based on
  those numbers. Or first 45 degrees sin and cos.
* Compute as many terms as needed until we run out of precision to store the
  result.

---

Issue: Collision with paddle leaves ball on the edge of the paddle, but then
moves the ball from there. The ball is at the edge of the paddle. Should it be
considered a collision or not? If we say yes, the we get stuck at the edge. If
we say no, then could we possibly get unlucky and go through the edge?

Perhaps the right solution is don't count it as a collision if the ball is
moving away from the edge at the time of collision.

Issue: Computation of paddle velocity is wrong if the paddle is at rest but
paddle.vel is not zero.

Is it wrong for paddle.vel to be non-zero when the paddle has reached its
limit? When do we have the paddle reach its limit?

Here's what I think:
* We should treat the paddle reaching it's end point as a collision. It should
  break up a Move. It should set the paddle velocity to 0. So paddle velocity
  is 0 when the paddle is stopped.

* We should decouple the computation of a collision from whether that happens
  before or after something else.

What kinds of movements can we have?
* Ball moves, doesn't run into anything.
  Position changes.
* Paddle moves, doesn't run into anything.
  Position changes.
* Paddle moves, hits end of range.
  Position and velocity of paddle changes.
* Ball moves, hits edge.
  Position and velocity of ball changes.
* Ball moves, paddle moves, they hit.
  Paddle position, ball position, and ball velocity all change.

Ideally each can be concerned just with its own thing. But we also don't want
to have to calculate super far out in time, for example, how long it would
take the ball to collide with an edge that it is running almost parallel to,
because that could be expensive to compute.

Part of the annoyance is how we can easily specify which paddle is updated in
a world. It would be nice if we could name the paddles somehow.

Let's take this one step at a time. What's the first test case I want to add
that would demonstrate the problem?

A paddle going up, hits the top edge and stops before the ball then collides
with that stationary edge, all in one tick of the world. The solution will be
to add a check for when the paddle reaches its end and treat that as a kind of
collision.

The position of the ball and all paddles are effected by time. The velocity of
the ball and paddles are effected by collisions. There's nothing to say you
couldn't have a ball collide with a paddle at the same time multiple paddles
reaches their end point, which suggests we want a way to describe updates to
multiple things at once somehow.

The way rocinante worked is we first check for events. Events give the time of
the event and all the information needed to update the ball as a result of the
event. Namely, the velocity and point of collision of the object with the
ball. We would advance the ball until the time of the event, and if there was
an event, update the ball velocity based on the information it has.

I like the idea of having the ball update its own velocity, to factor out
common code for edge and paddle collisions. If we stop worrying about
performance for just a bit, then we could have a function

(Ball@, Vec@, Num@) { Ball@; } Collide = (Ball@ ball, Vec@ pos, Num@ vel) { ...  };

Where pos is the absolute position of the point of collision, vel is the
magnitude of velocity...

But it seems a shame to throw away and recompute what we've already computed.
Hmm... There are a couple of ideas here:
1. How to compactly express a ball collision event.
2. What logic for updating the ball velocity can we localize with the ball
code instead of the edge collision code?

The information we need:
* The new velocity of the ball.
  Depends on:
  - the (normal) velocity of the object the ball collides with.
  - the normal vector of the object the ball collides with (or, equivalently,
    the point on the circumference of the ball where the collision took place).
  - the coefficient of restitution between ball and edge.

The information we already have:
* the velocity of the ball at time of collision relative to the edge.
* the velocity of the edge at time of collision relative to the edge.
* the tangential velocity of the ball at time of collision relative to the
  edge.

So it would seem to me that there is very little code specific to the ball
that we would like to localize:
  v_ball.tangent = v_ball.tangent
  v_ball.normal = R * (v_edge - v_ball.normal)
  v = Rotate(normal, v_ball.tangent, v_ball.normal)

And we could always factor out a function for that logic if desired.

The collision logic makes use of the end position of the ball. We could
recompute that or not.

I'm fine with the event giving the new state for the ball. And we could treat
'time up' as an event. The issue is, some events effect the ball and some
events effect a specific paddle. How can we accumulate those and act
accordingly?

Imagine we have multiball. Then events could involve a particular ball. The
time up event doesn't make sense any more, because time up depends on the time
of another event.

Maybe we have two kinds of events:
* Paddle Stop - sets paddle velocity to zero because the edge has been
  reached.
* Ball Collide - gives direction and magnitude of collision.

We have the following functions:
* Ball Collide Edge - gives a maybe ball collide event.
* Ball Collide Paddle - gives a maybe ball collide event.
* Paddle End - gives a maybe paddle stop event.

We process all possible events, end up with a list of all the events that
happen as soon as some time t. Advance Ball and Paddle by t, then apply each
event.

The key idea being, we need some way to refer to a specific ball or paddle in
the event. That's something we'll want anyway for user input, for example, to
indicate which paddle's velocity to change.

Imagine we have an id. Then things are easy.

Paddle Stop - specifies the id of the paddle.
Ball collide - specifies the id of the ball.

Ball collide edge - takes the id of the ball.
Ball collide paddle - takes the id of the ball and the paddle.
Paddle end - takes the id of the paddle.

Then we have a function to apply an event to a World@. Get the list of events,
filter out any with greater times than any others (via an event queue
abstraction?), advance the world, by the time of the events, apply all the
events to the world, and continue.

More and more I feel like we should use an abstract data type to represent the
world, with methods on the world such as apply event.

The number of balls in play could be dynamic. The number of paddles could be
dynamic, but the names need to be fixed in some sense to know which paddle to
operate? Unless it's just a left paddle or a right paddle that we need to
know.

My question is, what should we use to refer to a specific ball or paddle? An
integer id? A user provided type? A string name?

For the sake of development we could restrict the world to a single ball and
single paddle and not worry about ids yet. Figure out the physics first, add
ids later. That sounds reasonable to me.

Actually, the annoying thing about having one paddle always is for testing we
don't have an easy way to have no paddles.

Perhaps it would be worth having some finer grain unit testing. Better
targeted tests with simpler descriptions. Factor out the core logic in a
better way. And hope the interfaces don't change too much.

For example, to start:
* Pull Ball@ out into its own module, define Eq@ and Show@ and Move.
* Pull Edge@ out into its own module.
* Pull Paddle@ out into its own module, define Eq@ and Show@ and Move.
* Pull Collision routines out into a separate module.

---

I want to summarize what physics seems to work well for stationary edge in
terms of the ball not double colliding or passing through, even in the
presence of gravity:
* It's not considered a collision if the ball is moving in the same direction
  the edge is facing.
* It's not a collision if the ball center starts below the edge.
  - This is the case where the ball starts past the edge.
  - We would expect t is negative if the ball is moving in the direction
    opposite the edge is facing.
  - Maybe it's better to do this by position than time, to avoid large numbers
    in the computation of time.
* It's not a collision if the ball bottom edge ends above the edge.
  - This is the case where the ball doesn't reach the edge.
  - We would expect t is less than tm if the ball is moving in the direction
    opposite the edge is facing.
  - Maybe it's better to do this by position than time, to avoid large numbers
    in the computation of time.
* The ball has to be within the segment of the edge at the point of collision.
* v_normal = R * -v_normal

That works great.

For a paddle, we should be able to apply the same thing. The differences are:
* After filtering out invalid ball start and end positions, computed time of
  collision may still be negative or greater than tm. That should be checked
  for.
* paddle could be moving with some normal velocity v_paddle, so the new ball
  velocity would be: v_normal_ball = R * (v_paddle - v_normal_ball)
  - Example: v_normal_ball is -5, v_paddle is 10, final velocity is 15R.

---

On naming paddles: if the goal is to figure out the physics first, how about
just move all the paddles together? Or say there is at most one paddle in the
list? Or make it a Maybe paddle instead of a list of paddles?

I would like to specify edges using start and end point, rather than normal
and length. Let me write a helper function for that. That way I can write a
bunch of tests for a collide edge function.

The API for collide edge ought to be:
* Inputs: ball, edge, max time.
* Outputs: Maybe<time, Ball@>

And we'll have a function to move a ball with a fixed velocity by a given
time to help.

---

On specifying paddles: the most natural way to specify a paddle, I think,
assuming we are limiting to single edges for the time being, is:
* starting edge
* center of rotation
* maximum angle
* angular velocity

Where conceptually I don't care what unit is used for angles or angular
velocity, as long as it gives sufficient precision.

The question of right versus left paddle is a little tricky. One rotates
clockwise, the other counter clockwise. That sort of messes up the definition
of maximum and minimum angle. Perhaps it would be better to have:

* current edge
* center of rotation
* current angle
* maximum angle
* minimum angle
* angular velocity

But I worry if we are constantly transforming the current edge with loss of
precision, we'll degrade the paddle over time.

In rocinante we specify the edge at angle 0 with max and min angle values.
We update the current edge in place, which could lose precision in theory.

So perhaps we should specify:
* edge at angle 0
* center of rotation
* current angle
* min angle
* max angle
* angular velocity

That sounds reasonable, and it supports left and right paddles.

To rotate, we'll want to compute the current edge either based on sin,cos of
the current angle or a rotation
To rotate, we'll want to compute the current edge either based on sin,cos of
the current angle or a small rotation based on sin,cos of a change in angle.
Which gets us back to the question of sin,cos.

My preference would be to support sin,cos of the current angle, which will
prevent loss of precision and is a more general implementation of sin,cos. We
could represent the angle as an integer either in fractions of radians or
fractions of whole circles. Note that if we do fractions of whole circles, we
can boost the precision. For instance, degrees are fractions of a whole
circles, and using Num@ for a single degree should give plenty of precision.

Let me do another round of thinking about how we can get reasonable enough
precision for an implementation of sin and cos using integer arithmetic.

---

Here's the crux of the problem:

I want to write good tests for the paddle. I need a clear specification of how
the paddle behaves. We care about the normal velocity of the paddle. It would
be nice if we could represent the angular velocity of the paddle with full
precision. We don't care so much about the exact value of the paddle angle,
just so long as we can specify precisely enough when the paddle has reached
its limit.

We would like to be able to write a test where the edge is perfectly well
known at the time of a collision. We can do this if we arrange for the
angle to be zero at the time of collision, though that limits the cases we can
test.

So, let's express angular velocity in radians and choose it such that we can
represent the angular velocity perfectly. Then we can represent the normal
velocity at some integer radius perfectly.

Then I guess all we need is some approximation of cos, sin that takes radians
and is perfectly accurate when the input is 0. And we limit test cases to
those where the collision happens at angle 0. Note that 0 -> sin(0),cos(0) is
the only case where we have perfectly accurate input and output.

Alternatives and why they don't work so well:
* Use degrees instead of radians. Then we have a bunch of cases where
  perfectly accurate input and output match. But then we can't represent the
  angular velocity accurately.

Is there any way we could write a test for the case where the collision
happens at angle not equal to 0? Perhaps if I do it in terms of my
approximation for sin, cos?

It would seem my approximation for sin and cos doesn't have to be terribly
accurate. As long as we get 0, and make sure sin and cos returned form
something close to a unit vector travel around the circle in the right
direction, and are close to doing a full circle when you get near 2pi.

Okay, then let's try this approach and see if it gets us into trouble.

Paddle specification:
 * edge at angle 0
 * min angle in radians, max angle in radians
 * current angle in radians,
 * angular velocity in radians.

I think radians are precise enough. That's 804 divisions of the circle if I
use 128 based fixed point. We could always represent it with more precision
later on if we wanted.

So, how do I want to implement the approximation of cos and sin in radians?
* Convert to positive angle.
* Convert to first quadrant.
* Implement a polynomial approximation in the first quadrant?
* Or normalize the point (1-2x/pi, 2x/pi) in the first quadrant?
* Or do a lookup table in the first quadrant?

---

Some other miscellaneous thoughts about rotation:
* If you think about it, really all we care about for pinball is that the
  paddle length is preserved on rotation, 0 stays at 0 on rotation, and
  possibly that equally spaced angles result in equally spaced points. The
  first two are pretty easy. The last one isn't that important. So it really
  doesn't matter too much how we approximate the rotation.
* What we really care about isn't the value of cos and sin, it's about
  rotating points. So really what I want is a function that takes a vector and
  an angle and rotates the vector by the angle. This could give us more
  opportunity to improve precision. For example, you don't need nearly as much
  precision for a point close to the origin as you do a point far away. If we
  know the point we want to transform, we could take that into consideration
  when performing the translation, and potentially make up for loss in
  precision. In other words, int(rotate(angle, [1, 0]))*v with perfect
  precision for the rotation could give a worse result than
  int(rotate(angle, v)) with less precision for the rotation.

Taking the later into account, maybe what we want is a general way to compute
x*cos(angle), for arbitrary integer value x. The bigger x, the more accuracy
we want.

Let me do some experiments with how to compute A*cos(a/B), with A, a, B all
integer and a/B in units of radians. Let's graph the magnitude of the point
(A*cos(a/B), A*sin(a/B)) as a function of angle a between 0 and pi/2. Let's
graph the distance between points with a and a+1. And see how various
different implementations do.

---

Okay, I now have what looks to me like a reasonable approximation of rotating
a point around an angle in radians. Let's assume that works fine and switch to
new approach for specifying a paddle.

How to specify a paddle now:
  start, end (at angle 0), angle, max angle, min angle, velocity, restitution.

What to store for a paddle now:
  v (at angle 0), angle, max angle, min angle, velocity, current edge 

---

The play is feeling better now. Issues:
* Performance.
 - Half the time is spent drawing the triangles for the paddle.
* The ball still gets stuck occasionally.
 - Move is seeing a collision at time t=0 with 6/128 time steps to go.
 - I'm not sure how to reproduce this though.
 - It appears to happen when the ball is moving at about the same velocity of
   the paddle after just bouncing off the paddle.
* The ball falls through the paddle when rolling down it.
 - Maybe it happens when you start the paddle moving as the ball is already
   rolling down it?
* Ball sometimes appears to bounce off the space in front of the paddle.
* The ball sometimes seems to fall partially through the paddle before
  bouncing off of it.

Example of failing case when ball gets stuck:
ball:
Ball@(
  pos=(-4134/128, -7390/128),
  vel=(491/128, 555/128),
  radius=1024/128),
paddle: (
  edge: (
    normal: (26/128, 125/128),
    start: (-10240/128, -7168/128),
    length: 10240/128,
    restitution: 96/128),
  extent: (8192/128, -6144/128),
  vel: 32/128,
  pos: 65/128)"

It's not terribly obvious I fear.

Thinking about it, in theory I expect the following:
A. Ball moving towards edge. Then it should collide and subsequently be moving
away from the edge or be stationary relative to the edge.
B. Ball stationary relative to edge. Then it should not be considered a
collision.
C. Ball moving away from the edge. Then it should not be considered a
collision.

If we are getting stuck, then one of (A), (B), or (C) is wrong. Let me figure
out which case we are in.

What we see:
* The ball is moving up, the paddle is moving up faster, so it's case (A).

But the new velocity of the ball is not significantly different from the
original velocity because of restitution. For example:
  Ball goes at 800 v
  Paddle at 1800 v
  Relative velocity: 1000v
  New velocity: 0.8 * 1000v = 800 v.

I think the last step is wrong. Shouldn't new velocity be something like 800 +
1000v?

If we do the collision in the reference frame where the velocity of the paddle
is 0, then the resulting velocity is in the frame where the velocity of the
paddle is 0, so we need to add back the velocity of the paddle in the final
(absolute reference frame) velocity.

This should be addressed by testing a basic collision in motion:
  Ball moves down at velocity 1, collides with paddle at velocity 1, with no
  restitution, the resulting velocity should be ball moving up at velocity ...

In reference frame of paddle:
  Ball moves down at velocity 2. Resulting velocity is ball moves up at 2
  relative to the paddle. So absolutely, ball ends up with velocity 3 away
  from the paddle? I think my math is wrong.

According to wikipedia, given masses m1, m2, initial velocity u1, u2, final
velocity v1, v2:

v1 = (m1 - m2)/(m1 + m2) * u1 + 2*m2/(m1 + m2) * u2
v2 = 2*m1/(m1 + m2) * u1 + (m2 - m1)/(m1 + m2) * u2

Take the case where u1 is the paddle which is 0 and m1 is much larger than m2:

v1 = u1 = 0
v2 = -u2.

Now, take the case where u1 is not 0, but m1 is much larger than m2:

v1 = u1
v2 = 2*u1 - u2

So, when u1 = 1 and u2 = -1:

v1 = 1 (as expected)
v2 = 2 + 1 = 3 (as sort of expected)

Let's add the test case and fix the math.

Unfortunately, I'm not getting the accuracy I need for that test case.

How about with u2 0?

Unfortunately we don't handle that case either. No velocity for the ball means
the ball never reaches the first or last position of the paddle. That's a
problem.

So, I need to rethink how I compute collision between ball and paddle to
handle the case where the ball isn't moving, to fix the math, and hopefully to
figure out a reasonable way to write a test for this case.

---

I think I worked out the math for collision, but now we are facing some
precision issues in the test. It's not perfect precision. How should I deal
with that?

Anyway, with the updated paddle collision logic, it's feeling pretty good. We
get pretty reliable bouncing off the paddle. No sticking to the paddle. No
falling through the paddle. Issues now are:
* performance
* hitting the back of the paddle
* once I saw the ball shoot off the paddle not in motion.
* If you hit ball rolling down paddle, it jumps away unrealistically, because
  paddle instantly gets to high velocity instead of gradually.

Review of performance profile now:
* A third of the time spent drawing edge.
* A third of the time spent rotating points.

That's probably a good start.

---

I think the answer to the performance issue is to have the Drawing@ API draw
triangles instead of rectangles, and support arbitrary linear and affine
transformations, including rotations. My hesitation is that would make the
Drawing@ API harder to implement in theory. Is it significant in practice? I'm
sure I could implement triangle drawing routine's fairly easily in SDL. And if
we have a triangle API, we could take advantage of GPUs to do the rendering on
those systems (aka all systems today really) that support it.

Running glxgears program works swell on my computer, so I expect we should be
able to use opengl for the drawing with reasonable performance.

Yeah, I can get 60FPS rotating a triangle with open GL and SDL together. It's
pretty straight forward. That should also support 3D graphics well enough.
That should fix my triangle drawing performance issues.

---

I switched to opengl for drawing triangles. Works great. Triangle drawing
performance issues are gone. I'd say performance is good enough for the time
being that we no longer need to focus on it.

---

Next step: remove requirement for the paddle start point to be the center of
rotation. This way we can fix the right paddle by making the end point the
center of rotation, and we should do it generally so we can later turn the
paddle into a 3d paddle with edges around it that don't have either end point
on the center of rotation.

What changes for the math?

Today we are doing distance of ball from line by rotating to normal of line
based on the endpoint. So we just need to change 'ex' and 'ey' to be end point
minus start point, where start point is now a linear function of time. And,
uh, express the ball position relative to the start of the line, right? Yeah,
both ball and end point relative to start point.

I'm thinking it might be nice to change the representation of Edge@ and
Paddle@ slightly. Maybe introduce something called a Segment@, which is a line
segment. We could factor out common code for drawing segments and rotating
points such that a segment starts at the origin and goes along the x axis.

"Line segment" is the proper term, but that makes for an awkward type name.
Num@, Point@, Vec@, Line@? Seg@? LSeg? LineSeg@?

@ Seg@ = *(Vec@ start, Vec@ end);

Operations I'm interested in:
* Given a Vec@ and Seg@, express the Vec@ relative to the Seg@.
* Get the length of a Seg@.
* Draw a Seg@.

Then we could express Edge@ as Seg@ and restitution. Or better yet, call it a
wall? Because a Paddle@ has an edge. Or multiple edges, possibly with
different restitution? Maybe, if we just want to save space for storing
restitution, we could define Edges@ as a list of segments with the same
restitution? I don't know.

I want:
Seg@ - pure math, no restitution, with length, draw, rotate to.
Edge@ - Seg@ plus restitution.
Paddle@ - Edge@ plus rotation.

Update current code to match that. Then it should be easy to update pinball
collision logic to make ball position and end relative to the start. Then it
should be easy to provide a paddle edge that isn't starting at the origin.
Then I'm done.

---

Do I need a Seg@ type, or can I just pass around Vec@ start and Vec@ end
everywhere? A paddle could be described as a sequence of Vec@ if we assume
they are all connected.

Let me go a little slower. First step: store edge as start and end points
instead of normal and length.

This is nice, but unfortunately it means we end up doing a lot more repeated
computation of edge length and division which makes things way slow. Should I
add the cache of a unit vector for the edge back?

---

Okay, so I made the play field a little more interesting. Now it's really slow
again. What's the plan?

Fble profiling shows 75% of the time is in BallEdge collision detection,
mostly from the 'RotateTo' function, as expected. That function involves 2
divisions and a square root operation. I could avoid those if I pass a unit
vector to RotateTo, which I could easily cache as part of an edge. We could
cache that for paddle too if we want, and rotate the vector based on the
angle.

We'll have a little less precision, but hopefully that's okay.

Looks fine. Helps. But we are still slow. Currently:

42% BallPaddle collision.
40% BallEdge collision.
17% DrawPaddle
  3 calls to 'Rotate'. I bet we could reduce to a single call to Rotate, then
  some calls to the faster RotateTo?

It looks like a lot of the time is spent doing math: multiplication, division.
Hmm...

I suppose the obvious thing to do for the collisions is to define hit boxes
for each thing and make sure there is an intersection of hit boxes before
starting on the more complicated math. This should be better worst case, not
just average case, because we assume at most a small number of hit boxes could
overlap with the ball in any given frame.

Hit box for an edge: defined by min/max x/y points.
Hit box for a paddle: defined by max radius from center to start/end point.
Hit box for ball: defined by max/min x/y +- radius.

Compute the hit box for the ball across the time frame. For each edge/paddle,
first check intersection with the ball hitbox.

Actually, performance seems to be okay for the time being. We're at about
20FPS, which feels responsive enough to focus on functional rather than
performance work for the time being.

---

Next functional topic: make it so the ball can collide with end points of an
edge or paddle.


