
@ Drawing@ = /Drawing%.Drawing@;
@ Color@ = /Drawing%.Color@;
@ Point@ = /Drawing%.Point@;
% Blank = /Drawing%.Blank;
% Over = /Drawing%.Over;
% Rect = /Drawing%.Rect;

@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;
% Sub = /Core/Int%.Sub;
% Int = /Core/Int/Lit%.Int;
% Le = /Core/Int/Eq%.Le;
% Max = /Core/Int/Eq%.Max;
% Min = /Core/Int/Eq%.Min;
% Range = /Core/Int/Iter%.Range;

<@,@>% For = /Core/Iter%.For;

Int@ 0 = Int|0;
Int@ 1 = Int|1;

@ Sorted@ = *(Point@ 0, Point@ 1, Point@ 2);

(Point@, Point@, Point@) { Sorted@; }
SortByY = (Point@ a, Point@ b, Point@ c) {
  Le(a.y, b.y).?(
    true: Le(b.y, c.y).?(
      true: Sorted@(a, b, c),
      false: Le(a.y, c.y).?(
        true: Sorted@(a, c, b),
        false: Sorted@(c, a, b))),
    false: Le(a.y, c.y).?(
      true: Sorted@(b, a, c),
      false: Le(b.y, c.y).?(
        true: Sorted@(b, c, a),
        false: Sorted@(c, b, a))));
};

# Fixed@ -- 
#   A fixed point number.
#
# i = x + r/S, r âˆŠ [0, S), for some constant S given by the context.
@ Fixed@ = *(Int@ x, Int@ r);

# Fixed --
#   Produce a fixed point number from integer x, remainder r, and scale s.
#
# r can be outside the interval [0, S), but it's assumed for performance
# reasons to be close and will be normalized appropriately.
#
# s must be greater than 0.
(Int@, Int@, Int@) { Fixed@; } Fixed = (Int@ x, Int@ r, Int@ s) {
  r.?(n: Fixed(Sub(x, 1), Add(r, s), s));

  Int@ r_minus_s = Sub(r, s);
  r_minus_s.?(n: Fixed@(x, r));

  Fixed(Add(x, 1), r_minus_s, s);
};

# Triangle --
#   Draw a filled triangle between the points a, b, and c.
(Point@, Point@, Point@, Color@) { Drawing@; }
Triangle = (Point@ a, Point@ b, Point@ c, Color@ color) {
  # Sort the points so that a is at the bottom and c is at the top.
  Sorted@ s = SortByY(a, b, c);
  Point@ a = s.0;
  Point@ b = s.1;
  Point@ c = s.2;

  # Draw horizontal lines between line segments ab and ac starting from the
  # bottom point a and going up to the middle point b.
  @ State@ = *(Drawing@ drawing, Fixed@ xb, Fixed@ xc);
  State@ initial = @(
    drawing: Blank,
    xb: Fixed@(a.x, 0),
    xc: Fixed@(a.x, 0));
  Point@ db = Point@(Sub(b.x, a.x), Sub(b.y, a.y));
  Point@ dc = Point@(Sub(c.x, a.x), Sub(c.y, a.y));
  State@ bottom = For<Int@, State@>(Range(a.y, b.y), initial, 
    (Int@ y, State@ state) {
      Int@ xmin = Min(state.xb.x, state.xc.x);
      Int@ xmax = Max(state.xb.x, state.xc.x);
      Fixed@ xb = Fixed(state.xb.x, Add(state.xb.r, db.x), db.y);
      Fixed@ xc = Fixed(state.xc.x, Add(state.xc.r, dc.x), dc.y);
      State@(
        Over(state.drawing, Rect(xmin, y, Sub(xmax, xmin), 1, color)),
        xb, xc);
    });

  # Draw horizontal lines between line segments bc and ac starting from the
  # middle point b and going up to the top point c.
  Point@ db = Point@(Sub(c.x, b.x), Sub(c.y, b.y));
  Point@ dc = Point@(Sub(c.x, a.x), Sub(c.y, a.y));
  State@ initial = @(
    drawing: bottom.drawing,
    xb: Fixed@(b.x, 0),
    xc: bottom.xc);
  State@ top = For<Int@, State@>(Range(b.y, c.y), initial,
    (Int@ y, State@ state) {
      Int@ xmin = Min(state.xc.x, state.xb.x);
      Int@ xmax = Max(state.xc.x, state.xb.x);
      Fixed@ xc = Fixed(state.xc.x, Add(state.xc.r, dc.x), dc.y);
      Fixed@ xb = Fixed(state.xb.x, Add(state.xb.r, db.x), db.y);
      State@(
        Over(state.drawing, Rect(xmin, y, Sub(xmax, xmin), 1, color)),
        xb, xc);
    });
  top.drawing;
};

@(Triangle);
