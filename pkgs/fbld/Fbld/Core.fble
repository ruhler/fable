
<<@>@>@ Monad@ = /Core/Monad%.Monad@;

@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>% Length = /Core/List/Length%.Length;

@ Str@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;

@ Command@ = /Fbld/Types%.Command@;
@ String@ = /Fbld/Types%.String@;
<@>% Err = /Fbld/Types%.Err;

<<@>@ M@>(Monad@<M@> m) {
  % Invoke = /Fbld/Invoke%(m);

  @ MRU@ = M@</Fbld/Types%.Result@<Unit@>>;
  @ Invoke@ = /Fbld/Types%.Invoke@<M@>;

  % MarkupModule = /Fbld/Markup%(m);
  @ Markup@ = MarkupModule.Markup@;
  % Markup = MarkupModule.Markup;
  % Entry = MarkupModule.Entry;

  # Core document interface.
  @ Core@ = *(
    # @text[text]
    # An explicit tag for default inline text.
    # @param text  The text to unescape.
    (String@) { MRU@; } text,

    # @section[title][body]
    #  A top level section.
    #  @arg[title] The tile of the section.
    #  @arg[body] The contents of the section.
    (MRU@, MRU@) { MRU@; } section
  );

  ((String@) { MRU@; }) { Invoke@; }
  Text = ((String@) { MRU@; } text) {
    (Invoke@ inline, Invoke@ block, Command@ command) {
      Int@ num_args = Length(command.args);
      /Core/Int/Eq%.Eq(Int|1, num_args ).?(false: {
        m.return(Err<Unit@>(String@(Strs[
              Str|'expected 1 arg, but got ',
              /Core/Int/Show%.Show(num_args)], command.name.loc)));
      });

      String@ arg = command.args.cons.head;
      Str@ unescaped = /Fbld/Unescape%.Unescape(arg.str);
      text(String@(unescaped, arg.loc));
    };
  };

  ((MRU@, MRU@) { MRU@; }) { Invoke@; }
  Section = ((MRU@, MRU@) { MRU@; } section) {
    (Invoke@ inline, Invoke@ block, Command@ command) {
      Int@ num_args = Length(command.args);
      /Core/Int/Eq%.Eq(Int|2, num_args ).?(false: {
        m.return(Err<Unit@>(String@(Strs[
              Str|'expected 2 args, but got ',
              /Core/Int/Show%.Show(num_args)], command.name.loc)));
      });

      String@ title = command.args.cons.head;
      String@ body = command.args.cons.tail.cons.head;
      section(Invoke.Inline(inline, block, title), Invoke.Block(inline, block, body));
    };
  };

  (Core@) { Markup@; } InlineMarkup = (Core@ core) {
    Markup[
      Entry(Str|'', Text(core.text)),
      Entry(Str|'text', Text(core.text))
    ];
  };

  (Core@) { Markup@; } BlockMarkup = (Core@ core) {
    Markup[
      Entry(Str|'section', Section(core.section))
    ];
  };

  @(Core@, InlineMarkup, BlockMarkup);
};
