
* Add test case for suspected bug in type checking with
  L<T> = *(L<L<T>>);

* Add way to do inline code syntax highlighting in fbld?
  Because it looks a little funny in the tutorials for things to be
  highlighted in code blocks but not in inline text.

* Clean up specification of dependencies for fbld generated docs.
 - Fix missing dependency for .fbld processing on fbld.lang and fble.lang.
 - Maybe easiest to add a tcl proc for building fbld and encapsulate all the
   dependencies there.

* Rewrite polymorphism 'ad hoc' section in tutorial to be 'interface' based.
  Because thinking about it as interfaces instead of ad-hoc polymorphism is
  probably much simpler to understand.

* Improve exercises for Unions and Functions tutorials, and others.

* Fix dependencies in tutorials/build.tcl.
  In particular, they all depend on the core library implementation.

* Update usage help text with info about FBLE_PACKAGE_PATH, -p, and --package
  options.

* Set up default package path.
  Based on datadir configuration setting.

* Bug in type inference / type checking?
  If I don't pass a type argument explicitly to the Permutes function in 
  FannkuchRedux/Tests.fble permute test, it says there's a type error. But
  it's fine if I give an explicit type. So something funny is up.

* Something is wrong with doxygen build dependencies.
  It keeps remaking after all I change is .../FannkuchRedux/Tests.fble
  That makes no sense. There should be no dependency there at all.
  Unless build.ninja depends on that, and generating build.ninja runs
  configure, which updates Doxyfile?

* Stop using global variables in app.fble.c for gWindow and gTime.
 - We should be able to pass that via the executable somehow?

* Fix timeout with gdb-test
 - Just need to increase it a little in case of heavy CPU load?
 - Next time it happens, try to see where it got stuck?

* Fbld Cleanup
 - Come up with a more formal test suite for fbld.
 - Print line and column number on fbld usage errors.
   Instead of 'Index' number.
 - Print line and col number on fbld usage command errors
   Such as wrong number of args.

* Figure out how to customize usage for compiled binaries
 - for example, fble-invaders should say fble-invaders in the usage, not
   fble-app.

* Generate fbld based man pages for binaries.
  fble-app
  fble-md5
  fble-sat
  fble-graphics
  fble-perf-profile
  fble-stdio
  fble-invaders
  fble-pinball
  fble-test

* How to check errors from stale files in build directory?
  For example, sat/Sat/sat-tests still existed, even though now were compiling
  to sat/sat-tests, but accidentally referencing the old sat/Sat/sat-tests
  path.

* Rename FbleVectorFree and FbleVectorInit to FbleInitVector and
  FbleFreeVector?
 - Or something that makes sense from a consistency point of view.

* Error checking of arguments to configure
 - absolute path instead of relative?
 - duplicate options?

* Optimize code for generate_c for low gcc memory use:
 - Use shorter labels for function names?
 - Only output labels for pc aborts that are actually jumped to.

* Release
 - Clean up libfble interface.
 - Write man pages (fble.man.txt)
 See thoughts/fble.release.txt

* Add test that you can use a unicode character in a literal?

* Do something with .@ module value vs. type?
  - There's currently unexercised code for it.

* Do something with data type instruction?
  - There's currently unexercised code for it.

* Add tests that at least the compiled apps don't crash when you run them.
  
* Fix dependency issue of build.ninja on moved *.fble files
  For example, moving Md5.fble to Md5/Md5.fble didn't trigger rebuild of
  build.ninja file.

* [spec] Should empty path be allowed in package type?
 See spec/fble.fbld for more details.

* [modules]
 - Decide about .fble.@ files.
 - Split FbleLoad into FbleLoadProgram and FbleLoadModule.
 - Add support for loading .fble.@ files.
   And presumably some way to test this and something about it in the language
   spec?
 - Test all combinations of .fble/.fble.@, with all combinations of type
   errors in one or the other or both.

* [lib] Move more value conversion functions to separate object files.
 - Color, IO, etc.

* [debugger] Improve support for printing variables
 - Emit lexical scopes where appropriate.
   But what for? What value for printing lexical scopes?

* Consider running some of the tests under valgrind?
 - To catch memory issues that could otherwise go undetected?

* Implement support for packed data values.
 - Change the compiler to allocate FbleDataTypeValue when appropriate.
 - Pass type to struct and union construction and access functions.
 - Implement packing for struct and union values.

* Improve performance with profiling enabled?
 - Now that we removed the optimization for detecting duplicate call entries
   in the stack?
 - see thoughts/fble.profile.txt

* For loaded submodules, should the module profile block be the module file or
  the place where it was imported from?
 - Seems like it should be the module file, because it could be imported from
   multiple places?

* Change FbleProfile functions to accept NULL, and clean up code to take
  advantage of that where it makes sense?

* Use some way other than NULL to disable profiling?
 - To encourage all the apps to support optional profiling, including things
   like fble-md5 and fble-app?
 - Check we are passing meaningful block ids to FbleNewFuncValue.

* Add option for passing .so files to FbleLinkFromCompiledOrSource?

* Print full stack trace on abort instead of just the top stack trace?

* Run fble-test-compile-error tests in compilation mode?

* Consider having separate CALL_INSTR and TAIL_CALL_INSTR.
  Their implementations may be different enough now to warrant it?
  Regardless, we shouldn't switch at runtime on something known statically.
  The 'exit' part of the instruction should be part of the instruction tag.

* [compilation] Add support for .fble.@ files and modular compilation.

* [cleanup] For things like FbleValueAddRef, is it okay if dst is NULL?
 - It would be convenient for constructing things in case of error.
 - I'm not sure if there's any performance implications.
 - It would be nice to specify explicitly and be consistent with this kind of
   thing.
* [cleanup] Consistently document ownership of args to C functions?
 Borrowed: no transfer of ownership.
 Consumed: ownership transferred from caller to callee.
 Outlives: caller responsible for keeping alive as long as returned result is.

* [tests] Any way to improve memory growth tests?
 It feels wrong to me to have to do a full gc for the tests to pass. It feels
 too specific to the implementation of garbage collection. Anything we can do?
* [tests] Add coverage for tagged_type and tagged_expr parse destructors
 - if only I could figure out how to exercise them.

* [/*%] Follow style guide in fble.style.txt
  In particular, union field names should be lowercase: just, true, false, not
  Just, True, False.
* [/*%] Clean up fble library
 - Separate modules as appropriate to reduce false dependencies.
 - Document all functions.
 - Add tests for full code coverage of all functions.
 - Rename Str to String? Or to S?
 - Consider pulling ForEach and Map out into their own class?
* [/Int%] Add test coverage for the Int routines.
* [/Fble/Test%] Clean up fble test framework
 - Use AssertEquals for more of the tests.
 - Add an AssertLt or similar methods? Or generalize AssertEquals?
 - Properly test the test infra.
* [/GameOfLife%] Switch to a target 60 FPS?
* [/Map%] Add tests for balancing of /Map%?
* [/Snake%] Switch to a target 60 FPS?
* [/Snake%] Test and fix bug when snake eats its tail.
* [/Snake%] Ignore moves that aren't orthogonal to current snake direction.
* [/Snake%] Keep track of and report score.
* [/Snake%] Figure out why the background box gets lost some times.

* [libfble] Can fble-stdio check that the function has the right type?

* [spec] Add some way to catch or recover from errors at runtime?
* [spec] Clarify in spec: is it okay to retain a local variable until a function
  exits, even if that means retaining it longer than its lexical scope?
* [spec] Clarify spec on when (compile vs runtime) vacuous value error should be
  reported.
* [spec] Document the runtime memory model,
  - Including that tail recursive functions should not smash the stack.

* [typecheck] Be more consistent in FbleTc about use of vector versus FbleTc*[].
* [typecheck] We don't get a warning about an unused self recursive function.
  More generally, we don't get warnings about variables that are referenced
  only by unused variables.
* [typecheck] Better error messages on types that have the same name but different values?
* [typecheck] Quote funny names in types. For example, the field ',' should have
  quotes in type error messages.
* [typecheck] Better error message for importing something from a module that
  is not defined in the module?
* [typecheck] Test and fix error message for type of anonymous type let values.
 - The type should be the computed type for the value, not the introduced
   abstract type?
* [typecheck] Figure out why FbleNormalType is called so often
 - See if we can fix that to reduce the now annoyingly long compile times.
 - Profiling said its all in FbleTypesEqual. Maybe something pathological?

* [profile] Check if it's okay to add new blocks to a profile in progress.
 - either way, document that clearly.
