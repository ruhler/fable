
@ Bool@ = /Bool%.Bool@;

@ Drawing@ = /Drawing%.Drawing@;
@ Color@ = /Drawing%.Color@;
@ Point@ = /Drawing%.Point@;
% Blank = /Drawing%.Blank;
% Over = /Drawing%.Over;
% Rect = /Drawing%.Rect;

@ Int@ = /Int/Int%.Int@;
% Add = /Int/Int%.Add;
% Sub = /Int/Int%.Sub;
% Mul = /Int/Int%.Mul;
% Int = /Int/Int/Lit%.Int;
% Eq = /Int/Int/Eq%.Eq;
% Le = /Int/Int/Eq%.Le;
% Max = /Int/Int/Eq%.Max;
% Min = /Int/Int/Eq%.Min;
% Div = /Int/Int/Div%.Div;
% Range = /Int/Int/Iter%.Range;

<@,@>% For = /Iter%.For;

# RightOf -- 
#   Return true if the point 'x' is to the right of the line going in the
#   direction from point a to point b. False otherwise.
(Point@, Point@, Point@) { Bool@; }
RightOf = (Point@ a, Point@ b, Point@ x) {
  Int@ b_x = Sub(b.x, a.x);
  Int@ b_y = Sub(b.y, a.y);
  Int@ x_x = Sub(x.x, a.x);
  Int@ x_y = Sub(x.y, a.y);

  Int@ l = Mul(b_y, x_x);
  Int@ p = Mul(b_x, x_y);

  Le(p, l);
};

@ Sorted@ = *(Point@ 0, Point@ 1, Point@ 2);

(Point@, Point@, Point@) { Sorted@; }
SortByY = (Point@ a, Point@ b, Point@ c) {
  Le(a.y, b.y).?(
    true: Le(b.y, c.y).?(
      true: Sorted@(a, b, c),
      false: Le(a.y, c.y).?(
        true: Sorted@(a, c, b),
        false: Sorted@(c, a, b))),
    false: Le(a.y, c.y).?(
      true: Sorted@(b, a, c),
      false: Le(b.y, c.y).?(
        true: Sorted@(b, c, a),
        false: Sorted@(c, b, a))));
};

# Triangle --
#   Draw a filled triangle between the points a, b, and c.
#
# The points should be specified in order going clockwise around the triangle,
# otherwise nothing is drawn.
(Point@, Point@, Point@, Color@) { Drawing@; }
Triangle = (Point@ a, Point@ b, Point@ c, Color@ color) {
  # If the points don't go around in clockwise order, there is nothing to do.
  RightOf(a, b, c).?(false: Blank);

  Sorted@ s = SortByY(a, b, c);
  Point@ a = s.0;
  Point@ b = s.1;
  Point@ c = s.2;

  Drawing@ bottom = For<Int@, Drawing@>(Range(a.y, b.y), Blank,
    (Int@ y, Drawing@ d) {
      Int@ xb = Add(a.x, Div(Mul(Sub(y, a.y), Sub(b.x, a.x)), Sub(b.y, a.y)));
      Int@ xc = Add(a.x, Div(Mul(Sub(y, a.y), Sub(c.x, a.x)), Sub(c.y, a.y)));
      Int@ xmin = Min(xb, xc);
      Int@ xmax = Max(xb, xc);
      Over(d, Rect(xmin, y, Sub(xmax, xmin), Int|1, color));
    });

  Drawing@ top = For<Int@, Drawing@>(Range(b.y, c.y), Blank,
    (Int@ y, Drawing@ d) {
      Int@ xa = Add(c.x, Div(Mul(Sub(c.y, y), Sub(a.x, c.x)), Sub(c.y, a.y)));
      Int@ xb = Add(c.x, Div(Mul(Sub(c.y, y), Sub(b.x, c.x)), Sub(c.y, b.y)));
      Int@ xmin = Min(xa, xb);
      Int@ xmax = Max(xa, xb);
      Over(d, Rect(xmin, y, Sub(xmax, xmin), Int|1, color));
    });

  Drawing@ extra = {
    Eq(a.y, c.y).?(true: {
      Int@ xmin = Min(a.x, c.x);
      Int@ xmax = Max(a.x, c.x);
      Rect(xmin, a.y, Sub(xmax, xmin), Int|1, color);
    });

    Eq(b.y, c.y).?(true: {
      Int@ xmin = Min(b.x, c.x);
      Int@ xmax = Max(b.x, c.x);
      Rect(xmin, b.y, Sub(xmax, xmin), Int|1, color);
    });

    Blank;
  };

  Over(bottom, Over(top, extra));
};

@(Point@, Triangle);
