
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;

<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

@ Int@ = /Core/Int%.Int@;
% Decr = /Core/Int%.Decr;

% IsNegative = /Core/Int/Eq%.IsNegative;
% Int = /Core/Int/Lit%.Int;

<@>% Nil = /Core/List%.Nil;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

@ String@ = /Core/String%.String@;

@ TestResult@ = /Core/Test%.TestResult@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<<@>@>@ App@ = /App/App%.App@;
<<@>@>@ Main@ = /App/App%.Main@;
@ Event@ = /App/App%.Event@;
@ Effect@ = /App/App%.Effect@;

% State = /Core/Monad/State%<Int@>;

<@>@ M@ = State.State@;
<@>@ R@ = State.R@;
Monad@<M@> Monad = State.Monad;

# Benchmark --
#   Convenience function for turning apps into benchmarks. This works by
#   feeding the app with tick events for a given number of cycles, ignoring
#   any outputs from the app, and then sending it a quit event.
#
# Inputs:
#   app - the app to benchmark.
#   n - the number of iterations to run the benchmark.
#   quit - an event that will cause the app to quit when sent to the app.
(Main@, Int@, Event@, Unit@) { TestResult@; }
Benchmark = (Main@ app, Int@ n, Event@ quit, Unit@ _) {
  Int@ w = Int|640;
  Int@ h = Int|480;

  M@<Event@> Event = {
    Int@ n <- Monad.do(State.Get);
    IsNegative(n).?(true: Monad.return(quit));
    Unit@ _ <- Monad.do(State.Set(Decr(n)));
    Monad.return(Event@(tick: Unit));
  };

  (Effect@) { M@<Unit@>; } Effect = (Effect@ _) {
    Monad.return(Unit);
  };

  Stdio@<M@> stdio = /Core/Stdio/Stub%.Stdio<M@>(Monad);
  M@<Bool@> m = app<M@>(Monad, stdio, App@<M@>(Event, Effect), w, h, Nil<String@>);
  R@<Bool@> r = m(n);
  AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, True, r.x);
};

@(Benchmark);
