
@ Decimal@ = /Digits%.Decimal@;

@ Int@ = /Core/Int%.Int@;
% 0 = /Core/Int%.0;
% 1 = /Core/Int%.1;
% 2 = /Core/Int%.2;
% 3 = /Core/Int%.3;
% 4 = /Core/Int%.4;
% 5 = /Core/Int%.5;
% 6 = /Core/Int%.6;
% 7 = /Core/Int%.7;
% 8 = /Core/Int%.8;
% 9 = /Core/Int%.9;
% 10 = /Core/Int%.10;
% Add = /Core/Int%.Add;
% Mul = /Core/Int%.Mul;

<@>@ List@ = /Core/List%.List@;

(Decimal@) { Int@; } DtoI = (Decimal@ d) { 
  d.?(0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9);
};

# IntHelper --
#   Helper for Int function. Construct an int from a list of decimal digits,
#   assuming the most significant digits have already been turned into the
#   given integer.
(Int@, List@<Decimal@>) { Int@; } IntHelper = (Int@ msb, List@<Decimal@> ds) {
  ds.?(
    cons: IntHelper(Add(Mul(10, msb), DtoI(ds.cons.head)), ds.cons.tail),
    nil: msb);
};

# Int --
#   Create an Int@ from a positive decimal integer literal.
#
# For example: Int@ 42 = Int|42;
(List@<Decimal@>) { Int@; } Int = (List@<Decimal@> ds) {
  IntHelper(0, ds);
};

@(Int);
