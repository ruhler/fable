
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Drawing@ = /App/Drawing%.Drawing@;
% Blank = /App/Drawing%.Blank;
% Translate = /App/Drawing%.Translate;

@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;
% Lt = /Core/Int/Eq%.Lt;
% Int = /Core/Int/Lit%.Int;

% Graphics = /Invaders/Graphics%;
@ Ship@ = /Invaders/Ship%.Ship@;

@ Bullet@ = *(
  Int@ x,
  Int@ y,
  Bool@ live      # True if the bullet is on screen, false otherwise.
);

# BulletV --
#   The vertical velocity of a bullet in game coordinates per unit of game
#   time.
Int@ BulletV = Int|4;

# Height --
#   The height of a bullet.
Int@ Height = Int|4;

# Initial --
#   The initial state of the bullet.
Bullet@ Initial = Bullet@(Int|0, Int|0, False);

# Fire -- 
#   Fire the bullet from the ship.
#
# Args:
#   bullet - the bullet to update
#   ship - the ship to fire the bullet from
#
# Returns:
#   The updated bullet state.
(Bullet@, Ship@) { Bullet@; }
Fire = (Bullet@ bullet, Ship@ ship) {
  bullet.live.?(true: bullet);
  Bullet@(Add(ship.x, Int|7), Int|24, True);
};

# Advance the bullet one unit of game time.
(Bullet@) { Bullet@; } Tick = (Bullet@ bullet) {
  bullet.live.?(false: bullet);
  Bullet@(bullet.x, Add(bullet.y, BulletV), Lt(bullet.y, Int|210));
};

# Make a drawing of the bullet in its current location.
(Bullet@) { Drawing@; } Draw = (Bullet@ bullet) {
  bullet.live.?(false: Blank);
  Translate(bullet.x, bullet.y, Graphics.Bullet);
};

@(Bullet@, Height, Initial, Fire, Tick, Draw);
