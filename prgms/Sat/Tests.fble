@ Bool@ = /Bool%.Bool@;
% True = /Bool%.True;
% False = /Bool%.False;
% And = /Bool%.And;

@ Char@ = /Char%.Char@;
% Chars = /Char%.Chars;

<@>% List = /List%.List;
<@>% Append = /List%.Append;

<@>@ Maybe@ = /Maybe%.Maybe@;
<@>% Just = /Maybe%.Just;
<@>% Nothing = /Maybe%.Nothing;

@ String@ = /String%.String@;
% Str = /String%.Str;

@ Test@ = /Test%.Test@;
@ TestResult@ = /Test%.TestResult@;
@ TestSuite@ = /Test%.TestSuite@;
% TestSuite = /Test%.TestSuite;
<@>% AssertEquals = /Test%.AssertEquals;

@ Formula@ = /Sat%.Formula@;
@ Clause@ = /Sat%.Clause@;
@ VarId@ = /Sat%.VarId@;
@ Var@ = /Sat%.Var@;
@ Assignment@ = /Sat%.Assignment@;
% EqId = /Sat%.EqId;
% Solve = /Sat%.Solve;

VarId@ X = /Int/Int%.1;

(VarId@) { String@; } PrintId = (VarId@ x) {
  # TODO: Print variable ids properly.
  Str(Chars|'?');
};

(Var@) { String@; } PrintVar = (Var@ v) {
  String@ sign = Str(v.polarity.?(true: Chars|'+', false: Chars|'-'));
  Append<Char@>(sign, PrintId(v.id));
};

(Var@, Var@) { Bool@; } EqVar = (Var@ a, Var@ b) {
  And(EqId(a.id, b.id), /Bool/Eq%.Eq(a.polarity, b.polarity));
};

(Maybe@<Assignment@>, Maybe@<Assignment@>) { TestResult@; }
AssertEq = (Maybe@<Assignment@> a, Maybe@<Assignment@> b) {
  AssertEquals<Maybe@<Assignment@>>(
    /Maybe/Eq%.Eq<Assignment@>(/List/Eq%.Eq<Var@>(EqVar)),
    /Maybe/Show%.Show<Assignment@>(/List/Show%.Show<Var@>(PrintVar)),
    a, b);
};

TestSuite@ Tests = TestSuite(Chars|Sat, [
  Test@(Str(Chars|Sat), !({
    Formula@ f = List<Clause@>([
      List<Var@>([Var@(X, True)])
    ]);
    Maybe@<Assignment@> want = Just<Assignment@>(List<Var@>([Var@(X, True)]));
    Maybe@<Assignment@> got = Solve(f);
    AssertEq(want, got);
  })),

  Test@(Str(Chars|Unsat), !({
    Formula@ f = List<Clause@>([
      List<Var@>([Var@(X, True)]),
      List<Var@>([Var@(X, False)])
    ]);
    Maybe@<Assignment@> want = Nothing<Assignment@>;
    Maybe@<Assignment@> got = Solve(f);
    AssertEq(want, got);
  }))
]);

@(Tests);
