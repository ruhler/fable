

@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;

@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;

<<@>@>@ Main@ = /Core/Stdio%.Main@;

<@>@ Pure@ = /Core/Stdio/Pure%.Pure@;
<@>@ PureResult@ = /Core/Stdio/Pure%.PureResult@;
@ PureState@ = /Core/Stdio/Pure%.PureState@;
% Monad = /Core/Stdio/Pure%.Monad;
% Stdio = /Core/Stdio/Pure%.Stdio;
<@>% Run = /Core/Stdio/Pure%.Run;
<@>% PureResultEq = /Core/Stdio/Pure/Eq%.PureResultEq;
<@>% PureResultShow = /Core/Stdio/Pure/Show%.PureResultShow;

@ String@ = /Core/String%.String@;

@ Test@ = /Core/Test%.Test@;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;

(String@, Main@, String@, String@) { Test@; }
Test = (String@ name, Main@ game, String@ n, String@ expected) {
  List@<Int@> expected_bytes = /Core/List%.Map(expected, /Core/Char/Ascii%.Ord);

  /Core/Test%.Test(name, (Unit@ _) {
    PureResult@<Bool@> want = PureResult@<Bool@>(
      PureState@(Nil<Int@>, expected_bytes, Nil<Int@>), True);

    PureResult@<Bool@> got = Run(
      game<Pure@>(Monad, Stdio)(List<String@>[n]),
      Nil<Int@>);

    AssertEquals(
      PureResultEq(/Core/Bool/Eq%.Eq),
      PureResultShow(/Core/Bool/Show%.Show),
      want, got);
  });
};

@(Test);
