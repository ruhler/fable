
<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ String@ = /Core/String%.String@;

<@>@ Entry@ = <@ T@> { *(String@ key, T@ value); };
<@>@ Env@ = <@ T@> { List@<Entry@<T@>>; };

Env@ Empty = <@ T@> { Nil<Entry@<T@>>; };

<@ T@>(Env@<T@>, String@, T@) { Env@<T@>; }
Insert = <@ T@>(Env@<T@> e, String@ k, T@ v) {
  Cons(Entry@(k, v), e);
};

<@ T@>(Env@<T@>, String@) { Maybe@<T@>; }
Lookup = <@ T@>(Env@<T@> e, String@ k) {
  e.?(nil: Nothing<T@>);
  /Core/String/Eq%.Eq(e.cons.head.key, k).?(true: Just(e.cons.head.value));
  Lookup(e.cons.tail, k);
};

<@ T@>(Env@<T@>, String@) { Env@<T@>; }
Delete = <@ T@>(Env@<T@> e, String@ k) {
  e.?(nil: e);
  Env@<T@> tail = Delete(e.cons.tail, k);
  /Core/String/Eq%.Eq(e.cons.head.key, k).?(true: tail);
  Cons(e.cons.head, tail);
};

@(Env@, Empty, Insert, Lookup, Delete);
