Ninja Cleanup
=============
Idea is to refactor how the build.ninja file is structured, based on this
idea:
* any dir or file we read that is used to generate build rules should have a
  separate .ninja file associated with it.

That way, parts of the build.ninja that need to be rebuilt don't require all
of the build.ninja to be rebuilt.

Motivation? Not clear. Performance of rebuilding build.ninja isn't noticeably
an issue. It just feels less wasteful to clean up. And more scalable. And
maybe more modular.

It would be nice to fix all the missing dependencies too while I'm at it, but
that's much easier said than done.

Maybe: foo/build.tcl generates foo/build.ninja as a subninja file. The top
level build.ninja has the rules for generating the individual build.ninja
files. Whoever generates a build.ninja file is responsible for creating any
stub .ninja files that it may depend on if those have not already been
created.

Question: if generator touches subninja files, will they be considered up to
date when they aren't? Or is ninja smart enough to build anything it's never
built before? Let's try it out.

Ninja doesn't apply special smarts here. If the .ninja file is touched after
its source file, it will never be rebuilt. Perhaps best thing to do is to
generate it along with its parent ninja file? But doesn't that break all the
advantages we would get otherwise?

For example, assume I have build.ninja I want to depend on foo.ninja, where
foo.ninja is generated by foo.tcl. build.ninja and foo.ninja are generated
files. I have to generate them somehow. If the first time I generate foo.ninja
is when I generate build.ninja, that should be fine, but I need to use the full
command to generate it, not just an empty stub. If I use an empty stub, it will
almost certainly be newer than foo.tcl, so it will never get run. That means I
have to duplicate the command to rebuild foo.ninja: once in the foo.ninja file itself, and once again when we initially generate foo.ninja.

I have to generate foo.ninja at the same time I generate build.ninja. Otherwise build.ninja can't be run. But that means every time I generate build.ninja, I'm re-generating foo.ninja. Is that okay? If foo.tcl changes, do I need to regenerate build.ninja? No. So that's good.

Maybe the trick is to only generate foo.ninja if it doesn't already exist. If
it does already exist, we can rely on ninja to re-generate it if needed. It
would be great if there was some command to create a file if it doesn't already
exist.

---

Let's pick something to prototype having a separate .ninja file.

What are the things we use for auto-generating?

* lib/ => list of .c files.
* bin/ => list of .c files.
* include/ => list of .h files.

The include/ one looks pretty simple to start with. Let's try that.

