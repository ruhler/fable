
@ Int@ = /Int/Int%.Int@;
% AddI = /Int/Int%.Add;
% SubI = /Int/Int%.Sub;
% MulI = /Int/Int%.Mul;

# Rat@ --
#   A rational number: n / d.
#
# Fields:
#   n - the numerator
#   d - the denominator.
@ Rat@ = *(Int@ n, Int@ d);

(Rat@, Rat@) { Rat@; } Add = (Rat@ a, Rat@ b) {
  Rat@(AddI(MulI(a.n, b.d), MulI(b.n, a.d)), MulI(a.d, b.d));
};

(Rat@, Rat@) { Rat@; } Sub = (Rat@ a, Rat@ b) {
  Rat@(SubI(MulI(a.n, b.d), MulI(b.n, a.d)), MulI(a.d, b.d));
};

(Rat@, Rat@) { Rat@; } Mul = (Rat@ a, Rat@ b) {
  Rat@(MulI(a.n, b.n), MulI(a.d, b.d));
};

(Rat@) { Rat@; } Neg = (Rat@ a) {
  Rat@(/Int/Int%.Neg(a.n), a.d);
};

(Rat@, Rat@) { Rat@; } Div = (Rat@ a, Rat@ b) {
  Rat@(MulI(a.n, b.d), MulI(a.d, b.n));
};

@(Rat@, Add, Sub, Neg, Mul, Div);
