Fble 0.4 TODO
=============
Things to consider doing for the fble-0.4 release.

* Fbld C rewrite
 - Add tests for code coverage.

 - Assume markup could be NULL at any time during evaluation and handle it
   gracefully.
 - Separate out loc.h, text.h, markup.h, etc?
 - Change FbldMarkup type to more explicitly distinguish between the different
   kinds of markups.
 - Figure out how to associate a location with empty markup.
 - Avoid constructing markups with singleton sequences?

* Fbld Language
 - modularity
 - Better support for structs in fbld language, so its easier to write decent
   performing fbld code.
 - Have an 'if' primitive instead of 'ifeq' and 'ifneq'?
 - The @plain builtin is really strange. I had trouble coming up with a test
   case for it. Consider if there's some way we can get rid of that or make it
   more sensible.
 - Clarify in spec if @if[a@x][b@x] ... is an error or not.
   Or redesign semantics of fbld to avoid that question entirely.


* Fix potential GC gen overflow?
 - See thoughts/fble-0.3/stack_alloc.txt for details.

* Implement a custom debugger for fble
 - That works on all backends.
 - That supports single step through code.
 - That supports field access.

* Consider removing higher order kinds from the language.
  Make everything either kind @ or %. What would we lose?

* Make programs run twice as fast.

* Improving packing support for data values.
 - Taking advantage of explicit type info to pack and unpack.

* Modular compilation
 - Start using unused code for .@ module value vs type.
 - Split FbleLoad into FbleLoadProgram and FbleLoadModule.
 - Add support for loading .fble.@ files.
 - Test coverage of .fble/.fble.@ combinations.
 - Add option for loading modules from .so files?
 - Have fble-stdio check that the function has the right type?

* Add fble to rosettacode.org?
  Or at least implement all the tasks, perhaps in a separate RosettaCode
  package to start.
  Probably start with all the 'Simple' tasks.

* Design a standard library?
 - Separate modules as appropriate to reduce false dependencies.
 - Document all functions.
 - Add tests for full code coverage of all functions.
 - Proper support for unicode characters in /Core/Char%.

* New apps
 - IEEE floating point support.
 - More benchmark games.
 - Implement an image viewer.

* Fble Language Features
 - Add some way to catch or recover from errors at runtime?

* Fble Debugger
 - Add support for all backends.

Doc Comments
 - dccheck should require @type present in @value content?
 - Add support for @union and @enum doc comments?
 - Add support for abstract typedef struct doc comments?
 - Would be nice to have SEE ALSO section for library man pages.

Tutorials
 - Add exercises to exercise each main point in every tutorial.
 - C API
 - /App/App%
 - /Core/Test%
