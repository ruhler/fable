
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Int@ = /Core/Int%.Int@;
% 0 = /Core/Int%.0;
% 1 = /Core/Int%.1;
% 2 = /Core/Int%.2;
% Incr = /Core/Int%.Incr;
% Decr = /Core/Int%.Decr;
% Neg = /Core/Int%.Neg;
% Sub = /Core/Int%.Sub;

% Div = /Core/Int/Div%.Div;

% IsZero = /Core/Int/Eq%.IsZero;

% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;


<<@>@>@ App@ = /App/App%.App@;
<<@>@>@ Main@ = /App/App%.Main@;
@ Event@ = /App/App%.Event@;
@ Effect@ = /App/App%.Effect@;

@ Drawing@ = /App/Drawing%.Drawing@;
@ Color@ = /App/Drawing%.Color@;
@ Point@ = /App/Drawing%.Point@;
% Color = /App/Drawing%.Color;
% Rect = /App/Drawing%.Rect;
% Over = /App/Drawing%.Over;
% Affine = /App/Drawing%.Affine;


@ Coord@ = /Hwdg/Coord%.Coord@;

@ Data@ = /Hwdg/Data%.Data@;
% Data0 = /Hwdg/Data%.0;
% Data1 = /Hwdg/Data%.1;

@ Design@ = /Hwdg/Design%.Design@;
@ Rule@ = /Hwdg/Design%.Rule@;
<@>@ Ports@ = /Hwdg/Design%.Ports@;
<@>% ForEachRule = /Hwdg/Design%.ForEachRule;
% Step = /Hwdg/Design%.Step;

@ Memory@ = /Hwdg/Memory%.Memory@;
% Empty = /Hwdg/Memory%.Empty;
% Set = /Hwdg/Memory%.Set;

Int@ XMin = Neg(Int|20);
Int@ XMax = Int|20;
Int@ YMin = Neg(Int|20);
Int@ YMax = Int|20;
Int@ Width = Sub(XMax, XMin);
Int@ Height = Sub(YMax, YMin);

# Design --
#   The design to simulate.
Design@ Design = /Hwdg/Adder%.Adder4;

# Cells --
#   The initial data configuration of the hardware to simulate
Memory@ Cells = {
  Set(Set(Set(Set(Set(Set(Set(Set(Set(Empty,
    Coord@(Int|0, 0), Data1), # a3
    Coord@(Int|4, 0), Data1), # a2
    Coord@(Int|8, 0), Data1), # a1
    Coord@(Int|12, 0), Data1), # a0
    Coord@(Int|3, 0), Data1), # b3
    Coord@(Int|7, 0), Data0), # b2
    Coord@(Int|11, 0), Data1), # b1
    Coord@(Int|15, 0), Data1), # b0
    Coord@(Int|16, 2), Data0); # c
};

# Draw --
#   Draw the current hardware configuration.
(Design@, Memory@) { Drawing@; } Draw = (Design@ design, Memory@ cells) {
  # 1. Clear the background.
  Drawing@ clear = Rect(XMin, YMin, Width, Height, Color.Black);

  # 2. For each input or output port of a gate, draw a white unit square.
  Drawing@ io = ForEachRule<Drawing@>(design, clear,
   (Coord@ p, Rule@ r, Drawing@ d) {
     Ports@<Coord@> coords = Ports@(
       Coord@(p.x, p.y), Coord@(Incr(p.x), p.y),
       Coord@(p.x, Incr(p.y)), Coord@(Incr(p.x), Incr(p.y)));

     Ports@<Bool@> used = Ports@(
       { r.inputs.ul.?(just: True); r.outputs.ul.?(just: True); False; },
       { r.inputs.ur.?(just: True); r.outputs.ur.?(just: True); False; },
       { r.inputs.ll.?(just: True); r.outputs.ll.?(just: True); False; },
       { r.inputs.lr.?(just: True); r.outputs.lr.?(just: True); False; });

     Ports@<Drawing@> fills = Ports@(
       Rect(coords.ul.x, coords.ul.y, 1, 1, Color.White),
       Rect(coords.ur.x, coords.ur.y, 1, 1, Color.White),
       Rect(coords.ll.x, coords.ll.y, 1, 1, Color.White),
       Rect(coords.lr.x, coords.lr.y, 1, 1, Color.White));

     Drawing@ d_ul = used.ul.?(true: Over(d, fills.ul), false: d);
     Drawing@ d_ur = used.ur.?(true: Over(d_ul, fills.ur), false: d_ul);
     Drawing@ d_ll = used.ll.?(true: Over(d_ur, fills.ll), false: d_ur);
     Drawing@ d_lr = used.lr.?(true: Over(d_ll, fills.lr), false: d_ll);
     d_lr;
   });
    
  # 3. Draw a green square for 1 and a red square for 0.
  /Hwdg/Memory%.ForEach(cells, io,
    (Coord@ p, Data@ data, Drawing@ d) {
      Color@ color = data.?(0: Color.Red, 1: Color.Green);
      Over(d, Rect(p.x, p.y, 1, 1, color));
    });
};

@ Input@ = +(Unit@ quit, Unit@ step);

Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> _stdio, App@<M@> app, Int@ width, Int@ height, List@<String@> _args) {
  M@<Input@> GetInput = {
    Event@ e <- m.do(app.event);
    e.?(tick: m.return(Input@(step: Unit)),
        key_down: e.key_down.?(q: m.return(Input@(quit: Unit)), : GetInput),
        : GetInput);
  };

  # Map game coordinates into screen coordinate.
  Point@ a = @(x: Div(width, Width).q, y: Div(height, Height).q);
  Point@ b = @(x: Div(width, 2).q, y: Div(height, 2).q);
  Point@ d = @(x: Int|1, y: Int|1);

  (Effect@) { M@<Unit@>; } Output = (Effect@ e) {
    Effect@ transformed = e.?(
      tick: e,
      draw: Effect@(draw: Affine(a, b, d, e.draw)));
    app.effect(transformed);
  };

  (Int@, Design@, Memory@) { M@<Unit@>; }
  StepUI = (Int@ n, Design@ design, Memory@ cells) {
    Unit@ _ <- m.do(Output(Effect@(draw: Draw(design, cells))));
    Unit@ _ <- m.do(Output(Effect@(tick: Int|400)));
    Input@ x <- m.do(GetInput);
    x.?(quit: m.return(Unit),
        step: IsZero(n).?(
          true: m.return(Unit),
          false: StepUI(Decr(n), design, Step(design, cells))));
  };

  M@<Bool@> WaitForKeyPress = {
    Event@ e <- m.do(app.event);
    e.?(key_down: m.return(True), : WaitForKeyPress);
  };

  Unit@ _ <- m.do(Output(Effect@(draw: Draw(Design, Cells))));
  Bool@ _ <- m.do(WaitForKeyPress);
  Unit@ _ <- m.do(StepUI(Int|2000, Design, Cells));

  WaitForKeyPress;
};

/App/IO%.Run(Main);
