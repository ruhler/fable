
@ Int@ = /Core/Int%.Int@;
<@>% Nothing = /Core/Maybe%.Nothing;
<<@>@>@ Monad@ = /Core/Monad%.Monad@;
<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ IStream@ = /Core/Stream%.IStream@;
<<@>@>@ OStream@ = /Core/Stream%.OStream@;
@ String@ = /Core/String%.String@;

% Unit = /Core/Unit%.Unit;

# A stub implementation of the Stdio@ monad that ignores all IO.
<<@>@ M@>(Monad@<M@>) { Stdio@<M@>; } Stdio = <<@>@ M@>(Monad@<M@> m) {
  @(
    in: m.return(Nothing<Int@>),
    out: (Int@ _) { m.return(Unit); },
    err: (Int@ _) { m.return(Unit); },
    read: (String@ _) { m.return(Nothing<IStream@<M@>>); },
    write: (String@ _) { m.return(Nothing<OStream@<M@>>); },
    getenv: (String@ _) { m.return(Nothing<String@>); }
  );
};

@(Stdio);
