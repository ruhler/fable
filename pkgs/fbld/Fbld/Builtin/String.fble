
@ Char@ = /Core/Char%.Char@;

@ Int@ = /Core/Int%.Int@;
Int@ 0 = /Core/Int%.0;
Int@ 1 = /Core/Int%.1;

<@>% Get = /Core/List/Length%.Get;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;


% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;


% Eval = /Fbld/Eval%.Eval;
% AssertArgCount = /Fbld/Eval%.AssertArgCount;

@ Markup@ = /Fbld/Markup%.Markup@;
@ Impl@ = /Fbld/Markup%.Impl@;
@ Command@ = /Fbld/Markup%.Command@;
% Plain = /Fbld/Markup%.Plain;
% Append = /Fbld/Markup%.Append;

@ Env@ = /Fbld/Env%.Env@<Impl@>;

<@>@ Result@ = /Fbld/Result%.Result@;
<@>% Error = /Fbld/Result%.Error;
% r = /Fbld/Result%.Monad;

(Markup@) { Result@<Maybe@<Char@>>; } HeadOf = (Markup@ markup) {
  markup.?(
    empty: r.return(Nothing<Char@>),
    plain: r.return(Just(markup.plain.text.cons.head)),
    command: {
      Error<Maybe@<Char@>>(markup.command.name.loc, Strs[
          Str|'expected plain text, but found command @',
          markup.command.name.text]);
    },
    sequence: HeadOf(markup.sequence.a));
};

Impl@ Head = (Env@ env, Command@ cmd) {
  Unit@ _ <- r.do(AssertArgCount(1, cmd));
  Markup@ arg <- r.do(Eval(env, Get(cmd.args, 0)));
  Maybe@<Char@> mc <- r.do(HeadOf(arg));
  mc.?(nothing: r.return(arg));

  # TODO: What to use for the location of the result?
  r.return(Plain(cmd.name.loc, Str[mc.just]));
};

(Markup@) { Result@<Markup@>; } TailOf = (Markup@ markup) {
  markup.?(
    empty: r.return(markup),
    plain: {
      # TODO: What to use for the location of the result?
      r.return(Plain(markup.plain.loc, markup.plain.text.cons.tail));
    },
    command: {
      Error<Markup@>(markup.command.name.loc, Strs[
          Str|'expected plain text, but found command @',
          markup.command.name.text]);
    },
    sequence: {
      Markup@ a <- r.do(TailOf(markup.sequence.a));
      r.return(Append(a, markup.sequence.b));
    });
};

Impl@ Tail = (Env@ env, Command@ cmd) {
  Unit@ _ <- r.do(AssertArgCount(1, cmd));
  Markup@ arg <- r.do(Eval(env, Get(cmd.args, 0)));
  TailOf(arg);
};

@(Head, Tail, HeadOf, TailOf);
