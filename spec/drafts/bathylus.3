Bathylus
========
Richard Uhler <ruhler@degralder.com>
April 2015

Introduction
------------
Bathylus is a computer programming language from the Fable collection. It is a
simple, Turing-complete functional language for general data manipulation and
compilation tasks.

For those familiar with the Androcles language, Bathylus has the same syntax
and evaluation semantics as Androcles. The only difference between Bathylus
and Androcles is that Bathylus allows data type and functions to be recursive.

This document defines and explains the Bathylus programming language.

Data
----
Bathylus is a language for general data manipulation and compilation tasks.
At the heart of the Bathylus language is how data is represented and
manipulated. Data in Bathylus is organized using structures and unions.
Structures represent a grouping of data items, and unions represent a choice
among data items.

Unlike many programming language, Bathylus has no primitive data types. All
types are made up solely of structs and unions. For the purposes of
illustration, it will be useful to assume some types have already been
defined. Assume int is the type of signed 32-bit integers, char is the type
of characters, and bool is the type of a boolean values. We will show later
how these types can be defined using structures and unions.

Structures
~~~~~~~~~~
A structure is a bundle (or grouping) of data values. The items of a structure
are organized into a finite number of fields. Each field has a name, used to
identify the field, and a type, specifying the type of value for that field.

For example, a two-dimensional Cartesian coordinate would be represented as a
structure with two fields, an 'x' component, and a 'y' component.

Declaration
^^^^^^^^^^^
  decl ::= 'struct' tname '(' [tname fname [',' tname fname [...]]] ')' ';'
        |  ...

Assuming the 'int' type has been defined, the coordinate structure could be
defined using the following syntax:

-----------
struct Coord(int x, int y);
-----------

The Coord struct type has two fields, 'int x', and 'int y'. In general, a
struct type can have any non-negative, fixed number of fields.

A field can have any type that is defined. For example, the following shows a
contrived struct type with many fields of different type:

-----------
struct Crazy(int a, bool b, bool c, char d);
-----------

A struct may contain fields of that struct type itself, or other structs that
depend on the struct type being defined in a mutually recursive way.
Recursively defined data types are used to represent data that is unbounded in
size. We will show examples of useful recursively defined data types after
unions have been introduced.

Each field of a struct type must have a different name. For example, the
following is not a legal struct type definition:

--------------
struct Foo(int x, bool x);
--------------

The order of fields is important, because it is the order that will be used
when construction values of the type.

Two struct types with different names may have the same fields.
These struct types are considered different, incompatible types.

Construction
^^^^^^^^^^^^
  expr ::= tname '(' [expr [',' expr [...]]] ')'
        | ...

A structure value is constructed by specifying the contents of each component
of the structure. For example, to construct a value of type Coord with x
component 5 and y component 6, use the following expression [TODO: note that
this assumes 5 and 6 were legal constructors of the int type]:

-------
Coord(5, 6)
-------

Member Access
~~~~~~~~~~~~~
  expr ::= expr '.' fname
        | ...
        
The fields of a structure are accessed using the dot notation:

---------
Coord coord = Coord(5, 6);
int xval = coord.x;   [TODO: Defining variables requires a let!]
int yval = coord.y;
---------

A value of a structure type, followed by a '.' then a field name, refers to
the value of the field of the structure with that name. The field name must
refer to a field declared to be part of the structure.

It is legal for a structure to be defined that has no fields. This turns out
to be a very useful type for describing enumerations, as we will see later. It
is commonly defined as the Unit type:

--------------
struct Unit();
--------------

Unions
~~~~~~
The union type is used to describe a choice among named values of different
type.

Declaration
~~~~~~~~~~~
  decl ::= 'union'  tname '(' [tname fname [',' tname fname [...]]] ')' ';'
        | ...

The simplest case of a union type is an enumeration:

----------
union Fruit(Unit apple, Unit banana, Unit kiwi);
----------

A value of type 'Fruit' can be either 'apple', 'banana', or 'kiwi'. More
generally, the choices for a data value may have non-trivial data associated
with them. For example, consider the definition of a calculator instruction
type. Perhaps the calculator has binary operations Add and Subtract, a unary
Negate operation, and a Clear operation. The calculator instruction type could
be defined as:

-------------
struct Unary(int a);
struct Binary(int a, int b);
union CalcInstr(Binary add, Binary sub, Unary negate, Unit clear);
-------------

When CalcInstr is 'add', the Binary value corresponding to the 'add' field,
with operands 'a' and 'b', can be accessed. When the instruction is 'negate',
the Unary value with operand 'a' can be accessed, and so on.

As with structures, the names of the union's fields must be distinct, and
union types with different names are considered distinct and incompatable.
It is legal to declare a union with zero or one choices, but it's not
clear such a union would be very useful.

Construction
~~~~~~~~~~~~
 expr ::= tname ':' fname '(' expr ')'
       | ...

A value of a union type is constructed by providing the name of the field to
construct the union with, and the value to use for that field. For example:

----------------
Fruit fruit = Fruit:banana(Unit());
CalcInstr 2_minus_6 = CalcInstr:subtract(Binary(2, 6));
----------------

Member Access
~~~~~~~~~~~~~
 expr ::= expr '.' fname
       | ...

Member access can be used for unions to access fields using the same syntax as
member access for structures. The key difference is a member access is
considered illegal and produces undefined results if the union does not
contain a value of that field. Consider the following example:

-----------------------
Binary x = 2_minus_6.subtract;  [TODO: Variable declarations again!]
Unary y = 2_minus_6.negate;
-----------------------

Here, the variable 'x' is well defined, because the calculator instruction is
a subtract instruction. The behavior of the expression to compute 'y',
however, is undefined.

A Note on Undefined Behavior
----------------------------
An implementation may do what it likes in the case of undefined behavior. It
could return an arbitrary result and continue computing, it could halt
computation with an error message, or anything else. The user must not rely on
undefined behavior, compilers should try to warn whenever possible about
undefined behavior detected in programs, and interpreters should offer a debug
mode that explicitly halts the program and reports undefined behavior when it
occurs.

There is some concern about having undefined behavior, because of the fear
that the actual behavior of whatever the dominant interpreter/compiler will
come to be relied on, and hence defined. We could force the user to define the
behavior explicitly, but that would clutter the code, they probably wouldn't
have a good way to define the behavior anyway, and it could hurt performance.
For that reason, we say the behavior is undefined.


Conditional
~~~~~~~~~~~
  expr ::= expr '?' '(' [fname ':' expr
                   [',' fname ':' expr [...]]] ')'
        | ...

A conditional expression is used to select a value based on the active field
of a union. For example:

-----------------
CalcInstr instr = ...;
int result = instr ? (
    Adder(instr.add.a, instr.add.b),
    Subtracter(instr.sub.a, instr.sub.b),
    Negate(instr.negate.a),
    0);
------------------

The conditional expression should have a branch for each field of the union
value, and all choices must have the same type. The fields should be listed in
the order defined in the union declaration.

Functions
---------
Functions describe transformations of data. This is where computation takes
place. A function takes a finite set of typed values as inputs and produces a
single typed value as a result, using the methods for manipulating data values
already discussed.

Declaration
~~~~~~~~~~~
  decl ::= 'funct'  tname '('
              [tname vname [',' tname vname [...]]] ';' tname ')' '{' 
                vdecl [vdecl [...]]
                'return' '(' expr ')' ';'
           '}'
        | ...

For example, here is a function that returns the number of arguments a
calculator instruction contains:

-----------------
funct NumArgs(CalcInstr instr; int) = {
  @ (instr ? (2, 2, 1, 0));   [TODO: Numeric literals not supported]
}
-----------------

The inputs and output are separated by a semicolon in the argument list. The
output is unnamed.

Variables [TODO: This is out of date! Use let expressions instead]
^^^^^^^^^
  vdecl ::= tname vname '=' expr ';' ;
        | ...
  expr ::= vname
        | ...

The body of a function may also contain variable declarations. These declare
variables with value equal to the expression they are declared with. For
example:

-------------
struct FullAdderOut(Bit z, Bit cout);

funct FullAdder(Bit a, Bit b, Bit cin; FullAdderOut) {
  Bit 0 = Bit:0(Unit());
  Bit 1 = Bit:1(Unit());
  Bit z = a ? (0: b ? (0: c, 1: c ? (0: 1, 1: 0)),
               1: b ? (0: c ? (0: 1, 1: 0), 1: c));
  Bit cout = a ? (0: b ? (0: 0, 1: c),
                  1: b ? (0: c, 1: 1));
  return(FullAdderOut(z, cout));
}
-------------

Each variable within a function must have a unique name. The type of the
variable must equal the type of the expression the variable is declared with.

Function Call
~~~~~~~~~~~~~
    expr ::= tname '(' [expr [',' expr [...]]] ')'

A function can be called by passing arguments after the name. For example:

------------
int numargs = NumArgs(instr);
------------

The number of arguments passed must match the number and type of input
arguments declared in the function declaration.

Program
-------
  prog ::= decl [decl [...]] ;

A program is a collection of type and function declarations. An interpreter or
compiler should have an implementation-specific mechanism for selecting the
main function to interpret or compile.

Evaluation [TODO: merge this into the Functions section]
----------
Evaluation is reasoned about using a sequential interpretation.

Expression evaluation computes a value from an expression.
Because Bathylus is Turing-complete, expression evaluation may fail to
terminate. If expression evaluation fails to terminate, no value is returned.
Otherwise a value is returned and there are no other side effects.

Struct Expression
~~~~~~~~~~~~~~~~~
  expr ::= tname '(' [expr [',' expr [...]]] ')'
        | ...

When tname is the name of a declared struct type, this expression first
evaluates all arguments to values, then forms a struct value by setting the
corresponding fields of the struct to the argument values.

Because expression evaluation either returns a value without side effects, or
results in non-terminating computation, it does not matter what order
evaluation of the arguments is performed.

Application
~~~~~~~~~~~
  expr ::= tname '(' [expr [',' expr [...]]] ')'
        | ...

When tname is the name of a declared function, this expression first
evaluates all arguments to values, then calls the named function, using the
argument values in place of the named argument variables in the function.
Functions are lexically scoped; no variables in the current scope are visible
while executing the body of the called function.

Because expression evaluation either returns a value without side effects, or
results in non-terminating computation, it does not matter what order
evaluation of the arguments is performed.

Union Expression
~~~~~~~~~~~~~~~~
  expr ::= tname ':' fname '(' expr ')'                 (* union *)
        | ...

This expression computes the value for the given expr, then forms a union
value of the given type, whose contents are set for the given field and
computed value.

Var Expression
~~~~~~~~~~~~~~
  expr ::= vname                                        (* variable *)
        | ...

Returns the value of the variable with given name in scope.

Let Expression
~~~~~~~~~~~~~~
  vdecl ::= tname vname '=' expr ';' ;

  expr :: = '{' [vdecl [vdecl [...]]] '@' expr ';' '}'   (* let *)
        | ...

Each variable declaration is evaluated in turn. First the variable
declaration's expression is evaluated to a value. Then the scope is updated
such that the variable name points to the evaluated value. Each subsequent
variable declaration has access to the variables declared in previous
declarations. Finally, the final expression is evaluated to a value in the
scope of the preceding variable declarations and that value is returned.

Evaluation fails to terminate if any of the expression fail to terminate.

Field Access
~~~~~~~~~~~~
  expr ::= expr '.' fname                               (* access *)
        | ...

First the expression is evaluated to a value. Then the named field is read
from it. If the value is a union that contains a different field, then the
behavior is undefined.

Case Expression
~~~~~~~~~~~~~~~
  expr ::= expr '?' '(' expr [',' expr [...]] ')'       (* case *)
        | ...

Evaluate the argument to a value. Select the branch to evaluate based on the
tag of the evaluated argument. Then evaluate the selected branch. This has
undefined behavior only if evaluation of the argument has undefined behavior or
evaluation of the selected branch has undefined behavior. It will not have
undefined behavior if only evaluation of unselected branches would have
undefined behavior.

Syntax Reference
----------------
prog ::= decl [decl [...]] ;

decl ::= 'struct' tname ['(' [tname fname [',' tname fname [...]]] ')'] ';'
      |  'union'  tname ['(' [tname fname [',' tname fname [...]]] ')'] ';'
      |  'funct'  tname '(' [tname vname [',' tname vname [...]]] ';' tname ')'
            ['=' expr] ';'
      ;

vdecl ::= tname vname '=' expr ';' ;

expr ::= tname '(' [expr [',' expr [...]]] ')'        (* struct / application *)
      |  tname ':' fname '(' expr ')'                 (* union *)
      |  vname                                        (* variable *)
      |  '{' [vdecl [vdecl [...]]] '@' expr ';' '}'   (* let *)
      |  expr '.' fname                               (* access *)
      |  expr '?' '(' expr [',' expr [...]] ')'       (* case *)

fname ::= name    (* A name of a field *)
tname ::= name    (* A name referring to a type or function *)
vname ::= name    (* A name referring to a value *)


TODO
----
* Make it clear that, though we give a concrete syntax, that's only for
  illustration purposes. For example, you don't need to use a string of
  characters for an identifier, you could use whatever you want.
* The examples for data assume you can declare variables, but we need let
  expressions to do that. Figure out some other way to deal with that.
* Add an example of recursively defined data types to the Unions section.
* Show how the types bool, char, and int can be defined in the Unions
  section.
* Add a section on functions.
* Talk about forward declarations of types and functions?
* Mention for struct and union constructors that the arguments are all
  evaluated first, which matters for undefined behavior and infinite
  recursion.
* Separate 'Undefined Behavior' into a different section, so it can easily
  encompass both illegal union member access and non-terminating computation?
* Note for undefined behavior that it's NP-hard to statically check for
  illegal union member access in the finite case, and it's undecidable to
  statically test for in the recursive case?
* update the section on Functions and Evaluation given that we have let
  expressions instead of function bodies now.

