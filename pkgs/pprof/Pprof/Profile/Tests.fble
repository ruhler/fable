
<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;

@ Profile@ = /Pprof/Profile%.Profile@;
@ Location@ = /Pprof/Profile%.Location@;
@ LocId@ = /Pprof/Profile%.LocId@;
@ Sequence@ = /Pprof/Profile%.Sequence@;

% LM = /Pprof/Profile/LocationMap%;

@ Count@ = /Pprof/Profile/Count%.Count@;
% Count = /Pprof/Profile/Count%.Count;
% Counts = /Pprof/Profile/Count%.Counts;

@ Samples@ = /Pprof/Profile/Samples%.Samples@;
% Empty = /Pprof/Profile/Samples%.Empty;
% Insert = /Pprof/Profile/Samples%.Insert;

@ Value@ = /Pprof/Profile/Value%.Value@;


@ Sample@ = *(Value@ metrics, Sequence@ path);

(List@<Sample@>) { Samples@; }
Inserts = (List@<Sample@> xs) {
  xs.?(nil: Empty);
  Insert(Inserts(xs.cons.tail), xs.cons.head.path,xs.cons.head.metrics);
};


# P_Basic
#   10: 1 
#   20: 1,2
#   30: 1,2,3
#   40: 1,2,4
#   31: 1,3
Profile@ P_Basic = @(
  metrics: List[Str|'time'],

  samples: Inserts[
    @(metrics: List[Int|10], path: List[Int|1]),
    @(metrics: List[Int|20], path: List[Int|1, Int|2]),
    @(metrics: List[Int|30], path: List[Int|1, Int|2, Int|3]),
    @(metrics: List[Int|40], path: List[Int|1, Int|2, Int|4]),
    @(metrics: List[Int|31], path: List[Int|1, Int|3])
  ],

  locations: List[
    Location@(Int|1, Str|'_1', Str|'foo.txt', Int|1, Int|1),
    Location@(Int|2, Str|'_2', Str|'foo.txt', Int|2, Int|1),
    Location@(Int|3, Str|'_3', Str|'foo.txt', Int|3, Int|1),
    Location@(Int|4, Str|'_4', Str|'foo.txt', Int|4, Int|1)
  ]
);

Test@ Tests = TestSuite(Str|Profile, List[
  Test(Str|Count, (Unit@ _) {
    Count@ wnt = @(self: List[Int|20], total: List[Int|90]);
    Count@ got = Count(List[Int|2], P_Basic);
    AssertEquals(
      /Pprof/Profile/Count/Eq%.Eq,
      /Pprof/Profile/Count/Show%.Show,
      wnt, got);
  }),

  Test(Str|Counts, (Unit@ _) {
    LM.Map@<Count@> wnt = LM.Insert(LM.Insert(LM.Insert(LM.Insert(LM.Empty<Count@>,
      Int|1, @(self: List[Int|10], total: List[Int|131])),
      Int|2, @(self: List[Int|20], total: List[Int|90])),
      Int|3, @(self: List[Int|61], total: List[Int|61])),
      Int|4, @(self: List[Int|40], total: List[Int|40]));
    LM.Map@<Count@> got = Counts(Nil<LocId@>, Nil<LocId@>, P_Basic);
    AssertEquals(
      /Core/Int/Map/Eq%.Eq(/Pprof/Profile/Count/Eq%.Eq),
      /Core/Map/Show%.Show<LM.Map@, LocId@>(LM, /Core/Int/Show%.Show, /Pprof/Profile/Count/Show%.Show),
      wnt, got);
  })
]);

@(Tests);
