
@ Drawing@ = /App/Drawing%.Drawing@;
@ Color@ = /App/Drawing%.Color@;
% Color = /App/Drawing%.Color;
% Drawings = /App/Drawing%.Drawings;
% Rect = /App/Drawing%.Rect;
% Over = /App/Drawing%.Over;
% Translate = /App/Drawing%.Translate;

@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% Nil = /Core/List%.Nil;
<@>% Cons = /Core/List%.Cons;
<@>% List = /Core/List%.List;

@ ImagePair@ = *(Drawing@ a, Drawing@ b);

Color@ BackgroundColor = Color@(Int|208, Int|208, Int|208);

Drawing@ TileBackground = Rect(Int|0, Int|0, Int|48, Int|48, BackgroundColor);

(Drawing@) { Drawing@; }
Tile = (Drawing@ image) {
  Drawings[TileBackground, Translate(Int|8, Int|8, image)];
};

ImagePair@ S1x1 = {
  Drawing@ left = Rect(Int|0, Int|0, Int|2, Int|32, Color.Black);
  Drawing@ right = Rect(Int|30, Int|0, Int|2, Int|32, Color.Black);
  Drawing@ top = Rect(Int|0, Int|30, Int|32, Int|2, Color.Black);
  Drawing@ bottom = Rect(Int|0, Int|0, Int|32, Int|2, Color.Black);
  Drawing@ outline = Drawings[left, right, top, bottom];

  Drawing@ a = outline;
  Drawing@ b = Drawings[Rect(Int|0, Int|0, Int|32, Int|32, Color.Yellow), outline];
  @(a, b);
};

ImagePair@ S2x2 = {
  Drawing@ left = Rect(Int|0, Int|0, Int|2, Int|14, Color.Black);
  Drawing@ right = Rect(Int|12, Int|0, Int|2, Int|14, Color.Black);
  Drawing@ top = Rect(Int|0, Int|12, Int|14, Int|2, Color.Black);
  Drawing@ bottom = Rect(Int|0, Int|0, Int|14, Int|2, Color.Black);
  Drawing@ outline = Drawings[left, right, top, bottom];

  Drawing@ a1 = outline;
  Drawing@ b1 = outline;

  Drawing@ a = Drawings[
    Translate(Int|0, Int|0, a1),
    Translate(Int|0, Int|18, a1),
    Translate(Int|18, Int|18, a1),
    Translate(Int|18, Int|0, a1)];
  Drawing@ b = Drawings[
    Rect(Int|0, Int|0, Int|32, Int|32, Color.Yellow),
    Translate(Int|0, Int|0, b1),
    Translate(Int|0, Int|18, b1),
    Translate(Int|18, Int|18, b1),
    Translate(Int|18, Int|0, b1)];
  @(a, b);
};

ImagePair@ S3x3 = {
  Drawing@ left = Rect(Int|0, Int|0, Int|2, Int|10, Color.Black);
  Drawing@ right = Rect(Int|8, Int|0, Int|2, Int|10, Color.Black);
  Drawing@ top = Rect(Int|0, Int|8, Int|10, Int|2, Color.Black);
  Drawing@ bottom = Rect(Int|0, Int|0, Int|10, Int|2, Color.Black);
  Drawing@ outline = Drawings[left, right, top, bottom];

  Drawing@ a1 = outline;

  Drawing@ a = Drawings[
    Translate(Int|0, Int|0, a1),
    Translate(Int|0, Int|11, a1),
    Translate(Int|0, Int|22, a1),
    Translate(Int|11, Int|0, a1),
    Translate(Int|11, Int|11, a1),
    Translate(Int|11, Int|22, a1),
    Translate(Int|22, Int|0, a1),
    Translate(Int|22, Int|11, a1),
    Translate(Int|22, Int|22, a1)];

  Drawing@ b = Drawings[Rect(Int|0, Int|0, Int|32, Int|32, Color.Yellow), a];
  @(a, b);
};

List@<ImagePair@> Images = List[
  S1x1, S2x2, S3x3
];

Drawing@ Background = Rect(Int|0, Int|0, Int|640, Int|480, Color.Black);

# Splits a list of image pairs into a list of 6 element drawing lists.
# For the purposes of displaying all the drawings in a single screenshot.
(List@<ImagePair@>) { List@<List@<Drawing@>>; }
Split6 = (List@<ImagePair@> pairs) {
  pairs.?(nil: Nil<List@<Drawing@>>);

  List@<Drawing@> head = /Core/List%.ForEach(
    /Core/List/Length%.Take(Int|3, pairs), Nil<Drawing@>,
    (ImagePair@ p, List@<Drawing@> l) {
      Cons(p.a, Cons(p.b, l));
    });
    
  List@<List@<Drawing@>> tail = Split6(/Core/List/Length%.Drop(Int|3, pairs));
  Cons(head, tail);
};
      
Drawing@ Screenshot = {
  List@<List@<Drawing@>> images = Split6(Images);

  @ S@ = *(Int@ x, Drawing@ d);
  /Core/List%.ForEach(images, S@(Int|4, Background),
    (List@<Drawing@> drawings, S@ s) {
      Int@ y = s.x;
      S@(Add(Int|48, y), /Core/List%.ForEach(drawings, s.@(x: Int|4),
          (Drawing@ i, S@ r) {
            S@(Add(Int|48, r.x), Over(r.d, Translate(r.x, y, Tile(i))));
          }).d);
      }).d;
};

@(Screenshot);
