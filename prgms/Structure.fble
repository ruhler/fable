
@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

# Structure@ --
#   A generic data type representation that can be used to described the
#   structure of many data types.
#
# This is useful for generic defining functions that only care about the
# structure of a particular data type and not the specific meaning associated
# with the fields of the data type. For example, you could write a function
# that compares two values structurally, or use Structure@ to capture the
# information about a data type needed to use it as a key in a map data
# structure.
@ Structure@ = +(
  Unit@ unit,
  +(Structure@ a, Structure@ b) either,
  *(Structure@ a, Structure@ b) pair
);

# UnitS --
#   The unit structure.
Structure@ UnitS = Structure@(unit: Unit);

# LeftS --
#   Left choice structure.
(Structure@) { Structure@; } LeftS = (Structure@ d) {
  Structure@(either: +(Structure@ a, Structure@ b)(a: d));
};

# RightS --
#   Right choice structure.
(Structure@) { Structure@; } RightS = (Structure@ d) {
  Structure@(either: +(Structure@ a, Structure@ b)(b: d));
};

# PairS --
#   The pair structure.
(Structure@, Structure@) { Structure@; } PairS = (Structure@ a, Structure@ b) {
  Structure@(pair: *(Structure@ a, Structure@ b)(a, b));
};
  
@(Structure@, UnitS, LeftS, RightS, PairS);

