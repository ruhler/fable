
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;

<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

<@>% List = /Core/List%.List;

<@>@ Pure@ = /Core/Monad/Pure%.Pure@;
% Monad = /Core/Monad/Pure%.Monad;
<@>% Run = /Core/Monad/Pure%.Run;

<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
@ TestResult@ = /Core/Test%.TestResult@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;

% Stdio = /Core/Stdio/Stub%.Stdio<Pure@>(Monad);

(Main@, String@, Unit@) { TestResult@; }
RunBench = (Main@ game, String@ n, Unit@ _) {
  Bool@ got = Run(game<Pure@>(Monad, Stdio, List[n]));
  AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, True, got);
};

# Benchmark for the benchmark games that takes about 1 minute to run.
Test@ Bench = TestSuite(Str|BenchmarkGame, List[
  Test(Str|BinaryTrees, RunBench(/Games/BenchmarkGame/BinaryTrees%.Main, Str|14)),
  Test(Str|FannkuchRedux, RunBench(/Games/BenchmarkGame/FannkuchRedux/Main%.Main, Str|8)),
  Test(Str|PiDigits, RunBench(/Games/BenchmarkGame/PiDigits%.Main, Str|22))]
);

@(Bench);
