Fable E
=======
Richard Uhler <ruhler@degralder.com>

1. Introduction
---------------
Fble is a general purpose, Turing-complete functional programming language
with support for polymorphism and concurrent processes.

1.1 Goals
---------
The primary design goals of fble are:

* Fble should be as simple a language as possible while still being useful.
  A simple language should hopefully be simple to specify, simple to learn,
  simple to understand, simple to program, powerful, and low cost to develop
  high quality tools for.

* Fble should support high performance, low overhead computing. This is
  achieved by using a static type system and having a very clear performance
  model that a developer can optimize for.

* Fble should be a joy to program in. It should be easy to describe the
  majority of programs we want to describe, not tediously difficult. To
  accomplish this, fble allows functions to be declared locally with access to
  variables in the context where they are declared, and fble supports
  polymorphic types and functions.

* Fble, or an extension thereof, should support programming at scale. That is,
  namespace control and composition of modules developed by different
  individual developers or organizations.

2. Language Overview
--------------------
The primitive data types of fble are structs, unions, functions, and
processes.

Data values and the expressions that describe them are strongly typed. A
value's type describes the kinds of operations that can legally be performed
on that value. Types are used to check that an fble programs is well formed
statically. Types do not take part in the dynamic execution of an fble program
after it has been statically checked.

Local variables allow data values to be reused throughout a program, including
recursively. Analogously, type variables allow types to be reused throughout a
program and recursively.

Both expressions and types can be polymorphic, which is to say they can be
made abstract with respect to type parameters. To facilitate more advanced use
of polymorphism, types themselves are strongly typed; we call the type of a
type its kind.

3. Structs
----------
A struct value is a grouping of other values. The items of a struct are
organized into a finite number of fields. Each field has a name, used to
identify the field, and a type, specifying the type of value for that field.

Struct values are constructed by supplying values for all fields of the
struct. Individual components of a struct can be accessed by field name.

3.1 Struct Type
---------------
Abstract Syntax:
  Type ::= struct_type (fields :: [(Type, Name)])

Concrete Syntax:
  type ::= '*(' [type name [',' type name [...]]] ')'

Examples:
  *()                 is the Unit type
  *(Int@ x, Int@ y)   is the type of a pair of ints x, y.

Struct types are considered equal if their fields are equal, including field
types, field names, and the order of the fields.

3.2 Struct Value
----------------
Abstract Syntax:
  Expr ::= struct_value (type :: Type) (args :: [Expr])

Concrete Syntax:
  expr ::= type '(' [expr [',' expr [...]]] ')'

Example:
  Coord@(3, 5)

3.3 Struct Access
-----------------
Abstract Syntax:
  Expr ::= struct_access (object :: Expr) (field :: Name)

Concrete Syntax:
  expr '.' name

Example:
  x.first

Returns the value passed to the struct at the corresponding field position
when the struct was constructed.

4. Unions
---------
A union value is a particular value chosen amongst a group of possible values.
The possible choices are organized into a finite number of fields. Each field
has a name, used to identify the field, and a type, specifying the type of
value for that field.

Union values are constructed by supplying a value for a particular field of
the union. The particular value for the union can be accessed by field name,
and the union can be used to select among other values and expressions based
on the field present in the union value.

4.1 Union Type
--------------
Abstract Syntax:
  Type ::= union_type (fields :: [(Type, Name)])

Concrete Syntax:
  type ::= '+(' type name [',' type name [...]] ')'

Example:
  +(Unit@ true, Unit@ false)

Union types are considered equal if their fields are equal, including field
types, field names, and the order of the fields.

4.2 Union Value
---------------
Abstract Syntax:
  Expr ::= union_value (type :: Type) (field :: Name) (arg :: Expr)

Concrete Syntax:
  expr ::= type '(' name ':' expr ')'

Example:
  Maybe@(Just: 3)

4.3 Union Access
----------------
Abstract Syntax:
  Expr ::= union_access (object :: Expr) (field :: Name)

Concrete Syntax:
  expr ::= expr '.' name

Example:
  x.Just

Returns the value passed to the union at the corresponding field position when
the union was constructed. Behavior is undefined if the union tag does not
match the field being accessed.

4.4 Conditional
---------------
Abstract Syntax:
  Expr ::= cond (condition :: Expr) (choices :: [(Name, Expr)])

Concrete Syntax:
  expr ::= '?(' expr ';' name ':' expr [',' name ':' expr [...]] ')'

Example:
  ?(mfoo; Just: mfoo.Just, Nothing: 3)

The condition must have union type. Returns the value of the choice selected
by the tag of the condition, without causing any other choices to be
evaluated.

5. Functions
------------
A function is a mapping from argument values to result value. The arguments
are organized into a finite number of args. Each arg has a name, used to
identify the argument in the body of the function, and a type, specifying the
type of value that can be supplied for that argument. A function has a return
type, specifying the type of value that will result when applying the
function.

Functions are described using the fble expression language. A function can be
applied to a set of arguments of appropriate type to produce a value with the
return type of the function.

5.1 Function Type
-----------------
Abstract Syntax:
  Type ::= func_type (args :: [(Type, Name)]) (return :: Type)

Concrete Syntax:
  type ::= '\(' type name [',' type name [...]] ';' type ')'

Examples:
  \(Int@ a, Int@ b; Bool@)

The function type describes the type of a function value by specifying the
function value's type and name of input arguments and return type.

Function arguments can be structs, unions, functions, or processes.

Two function types are equal if they take the same args and return type, with
possible renaming of argument names. For example, the following two function
types are equal:
  \(Int x; Int)
  \(Int y; Int)

The rationale for including argument names in the function type when they are
not involved in the equality check is because argument names often, but not
always, serve as documentation suggestive to the programmer as to the intent
of when the function should be called.

5.2 Function Value
------------------
Abstract Syntax:
  Expr ::= func_value (args :: [(Type, Name)]) (body :: Expr)

Concrete Syntax:
  expr ::= '\(' type name [',' type name [...]] ')' '{' stmt '}'

Example:
  \(Bool@ a) ?(a; true: False, false: True)

The function value expression is used to describe a primitive function value
given the list of arguments and the body of the function. The return type of
the function is inferred to be the type of the body of the function.

Rationale for Concrete Syntax: The body of the function requires use of braces
to avoid ambiguity that would arise otherwise with an expression such as:

  \(T@ x) f (y)

In this case it isn't clear if the argument 'y' is being applied to the
function \(T@ x) f, or to the function f.

5.3 Application
---------------
Abstract Syntax:
  Expr ::= apply (func :: Expr) (args :: [Expr])

Concrete Syntax:
  expr ::= expr '(' [expr [',' expr [...]]] ')'

Example:
  foo(x, 3)

The application expression is used to apply a function to arguments. Partial
application of arguments are allowed. The supplied arguments must match the
types of arguments specified for the function. If not all arguments are
supplied, the resulting value is a function value parameterized by the
remaining arguments.

If all arguments are supplied, the application expression evaluates to the
value of the body of the function in the context of the supplied arguments.

TODO: Can extra arguments be supplied to a function if the function returns a
function, thus causing the returned function to be called with those extra
arguments supplied as well?

5.4 Bind
--------
Abstract Syntax:
  Expr ::= bind (args :: [(Type, Name)]) (func :: Expr) (body :: Expr)

Concrete Syntax:
  stmt ::= type name [',' type name [...]] '<-' expr ';' stmt

Example
  Int@ x <- map(l); f(x, y)

Bind is syntactic sugar for applying a function to a function value. It is
equivalent to:

  apply func (func_value args body)

6 Processes
-----------
A process is a computation with side effects that produces a value. Side
effects take the form of getting and putting values to and from links that can
be accessed by other running processes.

There are primitive processes for getting a value from a link, putting a value
to a link, and creating and using a new link. Processes can be combined by
executing them in parallel and serial.

We make a distinction between when a process is evaluated and when a process
is executed. Evaluating a process means evaluating the fble expression that
describes the process, producing a process value. Executing a process means
executing the process described by a process value, producing the result of
the process.

6.1 Process Type
----------------
Abstract Syntax:
  Type ::= proc_type (return :: Type)

Concrete Syntax:
  type ::= type '!'

Example:
  Int@!

6.2 Input Type
--------------
Abstract Syntax:
  Type ::= input_type (type :: Type)

Concrete Syntax:
  type ::= type '-'

Example:
  Int@-

An input port is a handle to a link that can be used to get values from
the link. An input port is typed, so that only values of the given type can be
taken from the port.

An input port is created for every link that is created. An input port can be
used as a process that takes a value off its link.

6.3 Output Type
---------------
Abstract Syntax:
  Type ::= output_type (type :: Type)

Concrete Syntax:
  type ::= type '+'

Example:
  Int@+

An output port is a handle to a link that can be used to put values onto the
link. An output port is typed, so that only values of the given type can be
put onto the link.

An output port is created for every link that is created. An output port can
be used as a process that puts a value onto its link.

6.4 Get
-------
Abstract Syntax:
  Expr ::= get (port :: Expr)

Concrete Syntax:
  expr ::= expr '()'

Example:
  input()

The port must have type input_type. If the port has type T@-, evaluates to a
process value of type T@! that when executed gets the next value from the port.

6.5 Put
-------
Abstract Syntax:
  Expr ::= put (port :: Expr) (value :: Expr)

Concrete Syntax:
  expr ::= expr '(' expr ')'

Example:
  output(3)

The port must have type output_type. If the port has type T@+, evaluates to a
process value of type T@! that when executed puts the given value onto the
port and returns that same value. The value put onto the port is evaluated
as part of evaluation of the process.

The rationale for having put return its argument value is to
avoid the complexity of introducing a builtin notion of a unit type or a
process that doesn't return anything. In most cases we expect the return value
of a put process to be ignored.

6.6 Eval
--------
Abstract Syntax:
  Expr ::= eval (expr :: Expr)

Concrete Syntax:
  expr ::= '$(' expr ')'

Example:
  $(3)

A process that returns the value of expr without performing any other
actions. The value to return is evaluated as part of evaluating the process.

6.7 Link
--------
Abstract Syntax:
  Expr ::= link (type :: Type) (get :: Name) (put :: Name) (body :: Expr)

Concrete Syntax:
  stmt ::= type '~' name ',' name ';' expr

Example:
  Int@ ~ input, output; f(input, output)

The body must have type process_type. When executed, creates a new link, then
evaluates and executes the body with get and put ports of type type- and type+
respectively added to the context.

6.8 Exec
--------
Abstract Syntax:
  Expr ::= exec (bindings :: [(Type, Name, Expr)]) (body :: Expr)

Concrete Syntax:
  stmt ::= type name ':=' expr [',' type name ':=' expr [...]] ';' stmt

Example:
  Int@ x := getx(), Int@ y := gety(); $(add(x, y))

Executes each process in parallel, then evaluates and executes the body with
the results of the processes assigned to variables in scope. The binding
processes are evaluated at the same time the overall exec process is
evaluated.

7. Local Variables
------------------
Let expressions can be used to define local variables that allow values to be
reused in multiple places in a program. Let expressions support recursive
definitions of variables, which makes it possible to define recursive values.

In the same way, type variables can be defined to allow types to be reused in
multiple places in a program. Recursive definitions of type variables makes it
possible to define recursive types.

Type variables are distinguished syntactically from regular variables by
adding the '@' character as a suffix to the variable name:

7.1 Variable
------------
Abstract Syntax:
  Expr ::= var (name :: Name)

Concrete Syntax:
  expr ::= name

Example:
  x

Expressions are evaluated in a context that maps variable names to values and
the types of those values. The value of the variable expression is the value
associated with the variable name in the context. The type of the variable
expression is the type associated with the variable name in the context.

7.2 Let
-------
Abstract Syntax:
  Expr ::= let (bindings :: [(Type, Name, Expr)]) (body :: Expr)

Concrete Syntax:
  stmt ::= type name '=' expr [',' type name = expr [...]] ';' stmt

Example:
  Int@ x = mul(3, 3); mul(x, x)

The let expression is used to define variables. For each binding, a new
variable is defined. The value of the variable is the result of evaluating the
expression for the variable's binding.

The defined variables are visible in the body of the let expression. To
support self and mutually recursive values, the defined variables
are also visible in all of the bindings expressions.

TODO: Are bindings allowed to defined variables with the same name as
variables already in scope, thus shadowing the variable already in scope?

The value of the let expression is the value of its body.

7.3 Type Variable
-----------------
Abstract Syntax:
  Type ::= type_var (name :: Name)

Concrete Syntax:
  type_name ::= name '@'
  type ::= type_name

Example:
  Int@

Types and expressions are evaluated in a context that maps type variable names
to types and the kinds of those types. The type of the type variable is
the type associated with the type variable name in the context. The kind of
the type variable is the kind associated with the type variable name in the
context.

7.4 Type Let
------------
Abstract Syntax:
  Kind ::= basic_kind
  Type ::= type_let_type (bindings :: [(Kind, Name, Type)]) (body :: Type)
  Expr ::= type_let_expr (bindings :: [(Kind, Name, Type)]) (body :: Expr)

Concrete Syntax:
  kind ::= '@'
  type_stmt ::= kind type_name '=' type [',' kind type_name = type [...]] ';' type_stmt
  stmt ::= kind type_name '=' type [',' kind type_name = type [...]] ';' stmt

Example:
  @ Unit@ = *(); Unit@();
  @ Unit@ = *(); +(Unit@ true, Unit@ false);
  @ P@ = *(Int@ head, S@ tail), @ S@ = +(Unit@ nil, P@ cons); P@(3, S@:nil(Unit@()))

The type let is used to define type variables, when describing either types or
expressions. For each binding, a new type variable is defined. The type of the
type variable is the result of evaluating the type for the variable's binding.

The defined type variables are visible in the body of the let. To support self
and mutually recursive types, the defined type variables are also visible in
all of the bindings expressions.

TODO: Are bindings allowed to defined variables with the same name as
variables already in scope, thus shadowing the variable already in scope?

The value of the type let is the value of its body.

8. Polymorphism
---------------
Polymorphism allows expressions and types to be parameterized by abstract
types.

8.1 Poly Kind
-------------
Abstract Syntax:
  Kind ::= poly_kind (args :: [Kind]) (return :: Kind)

Concrete Syntax:
  kind ::= '\<' kind [',' kind [...]] ';' kind '>'

Examples:
  \<@ ; @>

A poly kind describes the kind of a polymorphic type, analogous to the way
function types describe the type of functions.

Two poly kinds are equal if they have the same args and return kinds.

The rationale for not including argument names in the poly kind the way they
are included in function types is that poly kinds are much less common and the
name of the arguments typically does not convey much useful information for
how to use the corresponding polymorphic type.

8.2 Poly
--------
Abstract Syntax:
  Type ::= poly_type (args :: [(Kind, Name)]) (body :: Type)
  Expr ::= poly_expr (args :: [(Kind, Name)]) (body :: Expr)

Concrete Syntax:
  type ::= '\<' kind type_name [',' kind type_name [...]] '>' '{' type_stmt '}'
  expr ::= '\<' kind type_name [',' kind type_name [...]] '>' '{' stmt '}'
 
Examples:
  \<@ T@> { +(T@ just, Unit@ nothing); }
  \<@ T@> { \(T@ x; Maybe@<T@>) { Maybe@<T@>(just: x); }; }

8.3 Poly Application
--------------------
Abstract Syntax:
  Type ::= poly_type_apply (poly :: Type) (args :: [Type])
  Expr ::= poly_expr_apply (poly :: Expr) (args :: [Type])

Concrete Syntax:
  type ::= type '<' type [',' type [...]] '>'
  expr ::= expr '<' type [',' type [...]] '>'

Examples:
  Maybe@<Int@>
  fromJust<Int@>(3)

9. Namespaces
-------------
Namespaces provide a means to support programming at scale, where parts of a
program are developed by different organizations and reused in multiple
different programs.

Namespaces allow a developer to have full control over the names of variables
visible in a module of a program, regardless of what programs that module is
used in. They also allow development of libraries of types and values, so that
a developer, instead of describing a program to be executed, describes a
namespace whose members can be reused by other programmers.

The idea behind namespace support in fble is to recognize that a struct value
already acts as a namespace of values. We generalize structs to support type
fields in addition regular value fields. Then we provide syntax for
manipulating the current namespace based on struct values.

9.1 Struct Type Fields
----------------------
Abstract Syntax:
  Type ::= struct_type (type_fields :: [(Kind, Name, Type)]) (fields :: [(Type, Name)])

Concrete Syntax:
  type ::= '*(' [type name [',' type name [...]]] ')'
        |  '*(' kind type_name '=' type [',' kind type_name '=' type [',' ...]
                [',' type name [',' type name [...]]] ')'

Examples:
  *(@ Bool@ = Bool@, Bool@ True, Bool@ False)

To support namespaces, we augment struct types to support type fields in
addition to normal fields. As with other uses of types in fble, type fields
are used only during the type checking phase. They otherwise take up no space
and are inaccessible at runtime.

Type fields allow a struct to be defined with fields describing both types and
values, which makes the struct suitable as the representation for namespaces.

All type fields are grouped together and come before all normal fields. The
rationale for this is that native code accesses normal fields by index but
can't access type fields, and we would like those normal field indices to be
contiguous.

To construct value of a struct with type fields, you can use the normal struct
value expression. You do not need to provide type field values when you create
a struct value, because their values are already specified as part of the type
itself.

Struct types with type fields are equal only if they have the same type fields
and type field values in the same order.

9.2 Struct Type Field Access
----------------------------
Abstract Syntax:
  Type ::= type_field_access (obj :: Expr) (field :: Name)

Concrete Syntax:
  type ::= expr '.' type_name

Examples:
  Bool.Bool@

Allows you to access a type field. The object being accessed should be of a
struct type. Type field access gives the value of the type field of the type
of the object. Note that the object of type field access is never evaluated.
Its expression is used solely to determine the type from which the type field
is read.

9.3 Anonymous Struct Value
--------------------------
Abstract Syntax:
  Expr ::= anon_struct (type_args :: [(Name, Type)]) (args :: [(Name, Expr)])

Concrete Syntax:
  expr ::= '@' '(' [name [':' expr] [',' ...]] ')'
        |  '@' '(' type_name [':' type] [',' ...]
                   [',' name [':' expr] [',' ...]] ')'

Example:
  @(Bool@, True, False, Not: NotInternal)

Allows you to construct a struct value with an anonymous type. When defining
namespaces, it is tedious to have to repeat the types of the entities being
defined and to worry about what order they are defined in. The anoymous struct
value makes it more convenient to define structs used as namespaces.

If no value for a field is provided, it's value is assumed to be the type
variable or normal variable with same name as the field. For example, the
above example is equivalent to:

  @(Bool@: Bool@, True: True, False: False, Not: NotInternal)
  

9.4 Namespace Eval
------------------
Abstract Syntax:
  Expr ::= namespace_eval (namespace :: Expr) (body :: Expr)

Concrete Syntax:
  expr ::= expr '{' stmt '}'

Example:
  @(True, False, And) { And(True, False); }

Namespace eval allows you to hide names in the current namespace when
evaluating an expression. The namespace must evaluate to a struct value. Then
the body of the namespace_eval will be evaluated in a scope of variables which
are the fields of the namespace value and no others.

Namespace eval is typically used when defining a module to hide all external
variables except those you need for the module. This allows the module to be
reused many different contexts. For example, a module that only requires use
of the StdLib library would be written:

@(StdLib) {
  ...
};

That way, regardless of what other libraries are in scope, there will be no
name conflicts between what is already in scope and what is being defined by
the module itself.

9.5 Namespace Import
--------------------
Abstract Syntax:
  Expr ::= namespace_import (namespace :: Expr) (body :: Expr)

Concrete Syntax:
  stmt ::= expr ';' stmt

Example:
  @(And); And(True, False);

Namespace import is a short hand form of let expression that allows you to
introduce new variables in scope. The namespace must evaluate to a struct
type. Then the body of import is evaluated in a namespace augmented with the
fields of the namespace struct.

The advantage of using namespace import over using a regular let expression is
the convenience of not having to explicitly write the types of the variables
being defined and being able to define a group of variables concisely.

For example, assuming a namespace of boolean operations:
  @ BoolOps@ = *(Bool@ True, Bool@ False, \(Bool@ x; Bool@) Not);
  BoolOps@ ops = ...

The following two are equivalent:
1. Bool@ True = ops.True;
   Bool@ False = ops.False;
   \(Bool@ x; Bool@) Not = ops.Not;
   ...

2. ops;
   ...
  
The typical use of namespace import is to import values from an existing
namespace into the current namespace using a combination of namespace
import, namespace eval, and anonymous struct construction. For example:

  StdLib { @(Bool, Maybe, List); };
  ...

Has the effect of importing just Bool, Maybe, and List from StdLib.

Note that you can also make use of this construct with anonymous struct values
for defining a variable without having to explicitly specify its type. This
is useful for referring to a namespace without having to provide an explicit
type for the namespace. For example:

  @(StdLib: &StdLib); ...

Or, as another example, the following two are equivalent:

1. Bool@ True = Bool@(true: Unit@()); ...
2. @(True: Bool@(true: Unit@())); ...

9.6 Include
-----------
Abstract Syntax:
  Type ::= type_include (name :: Name)
  Expr ::= include (name :: Name)

Concrete Syntax:
  type ::= '&' type_name
  expr ::= '&' name

Example:
  &StdLib

Syntactically includes the named module in place of the thing. The definition
of the module is located in a platform dependent way relative to the current
module. This allows an fble program to be split across multiple files that are
reused in multiple programs.

For example, assuming the current include search path is "lib", a program
Foo.fble can include module StdLib as follows:

  @(StdLib = &StdLib);
  ...

This would read StdLib from the file "lib/StdLib.fble". When reading
StdLib.fble, the include search path is adjusted to "lib/StdLib" for any child
modules included in StdLib.fble.

10. Program
-----------
A program is an fble expressions that creates a value that is used however is
deemed suitable by whoever is executing the program. Commonly this could be:

* struct: evaluate and output the value
* union: evaluate and output the value
* function: apply the function to arguments provided on the command line,
  evaluate and output the resulting value
* process: run the process, evaluate and output the resulting value.
  
11. Abstract Syntax Reference
-----------------------------
Name ::= (* A string of characters *)

Kind ::=
   basic_kind
 | poly_kind (args :: [Kind]) (return :: Kind)
 ;

Type ::=
   struct_type (type_fields :: [(Kind, Name, Type)]) (fields :: [(Type, Name)])
 | union_type (fields :: [(Type, Name)])
 | func_type (args :: [(Type, Name)]) (return :: Type)
 | proc_type (return :: Type)
 | input_type (type :: Type)
 | output_type (type :: Type)
 | type_var (name :: Name)
 | type_let_type (bindings :: [(Kind, Name, Type)]) (body :: Type)
 | poly_type (args :: [(Kind, Name)]) (body :: Type)
 | poly_type_apply (poly :: Type) (args :: [Type])
 | type_include (name :: Name)
 | type_field_access (obj :: Expr) (field :: Name)
 ;

Expr ::=
   struct_value (type :: Type) (args :: [Expr])
 | anon_struct (type_args :: [(Name, Type)]) (args :: [(Name, Expr)])
 | struct_access (object :: Expr) (field :: Name)
 | union_value (type :: Type) (field :: Name) (arg :: Expr)
 | union_access (object :: Expr) (field :: Name)
 | cond (condition :: Expr) (choices :: [(Name, Expr)])
 | func_value (args :: [(Type, Name)]) (body :: Expr)
 | apply (func :: Expr) (args :: [Expr])
 | bind (args :: [(Type, Name)]) (func :: Expr) (body :: Expr)
 | get (port :: Expr)
 | put (port :: Expr) (value :: Expr)
 | eval (expr :: Expr)
 | link (type :: Type) (get :: Name) (put :: Name) (body :: Expr)
 | exec (bindings :: [(Type, Name, Expr)]) (body :: Expr)
 | var (name :: Name)
 | let (bindings :: [(Type, Name, Expr)]) (body :: Expr)
 | type_let_expr (bindings :: [(Kind, Name, Type)]) (body :: Expr)
 | poly_expr (args :: [(Kind, Name)]) (body :: Expr)
 | poly_expr_apply (poly :: Expr) (args :: [Type])
 | namespace_eval (namespace :: Expr) (body :: Expr)
 | namespace_import (namespace :: Expr) (body :: Expr)
 | include (name :: Name)
 ;

12. Concrete Syntax Reference
-----------------------------
name ::= (* [a-zA-Z--9_]+ *)

type_name ::= name '@'

kind ::=
   '@'                                        (* basic_kind *)
 | '\<' kind [',' kind [...]] ';' kind '>'    (* poly_kind *)
 ;

type ::= 
   '*(' [type name [',' type name [...]]] ')'                            (* struct_type *)
 | '*(' kind type_name '=' type [',' kind type_name '=' type [',' ...]   (* struct_type with type fields *)
        [',' type name [',' type name [...]]] ')'
 | '+(' type name [',' type name [...]] ')'                              (* union_type *)
 | '\(' type name [',' type name [...]] ';' type ')'                     (* func_type *)
 | type '!'                                                              (* proc_type *)
 | type '-'                                                              (* input_type *)
 | type '+'                                                              (* output_type *)
 | type_name                                                             (* type_var *)
 | '\<' kind type_name [',' kind type_name [...]] '>' '{' type_stmt '}'  (* poly_type *)
 | type '<' [type [',' type [...]]] '>'                                  (* poly_type_apply *)
 | '{' type_stmt '}'                                                     (* type_stmt *)
 | '&' type_name                                                         (* type_include *)
 | expr '.' type_name                                                    (* type_field_access *)
 ;

type_stmt ::=
   type ';'                                                                   (* type *)
 | kind type_name '=' type [',' kind type_name '=' type [...]] ';' type_stmt  (* type_let_type *)
 ;

expr ::=
   type '(' [expr [',' expr [...]]] ')'                             (* struct_value *)
 | '@' '(' [name [':' expr] [',' ...]] ')'                          (* anon_struct *)
 | '@' '(' type_name [':' type] [',' ...]                           (* anon_struct with type fields *)
           [',' name [':' expr] [',' ...]] ')'
 | type '(' name ':' expr ')'                                       (* union_value *)
 | expr '.' name                                                    (* access *)
 | '?(' expr ';' name ':' expr [',' name ':' expr [...]] ')'        (* cond *)
 | '\(' [type name [',' type name [...]]] ')' '{' stmt '}'          (* func_value *)
 | expr '(' [expr [',' expr [...]]] ')'                             (* apply *)
 | '$(' expr ')'                                                    (* eval *)
 | name                                                             (* var *)
 | '\<' kind type_name [',' kind type_name [...]] '>' '{' stmt '}'  (* poly_expr *)
 | expr '<' [type [',' type [...]]] '>'                             (* poly_expr_apply *)
 | '{' stmt '}'                                                     (* statement *)
 | expr '{' stmt '}'                                                (* namespace_eval *)
 | '&' name                                                         (* include *)
 ;

stmt ::=
   expr ';'                                                             (* expr *)
 | type name [',' type name [...]] '<-' expr ';' stmt                   (* bind *)
 | type '~' name ',' name ';' stmt                                      (* link *)
 | type name ':=' expr [',' type name ':=' expr [...]] ';' stmt         (* exec *)
 | type name '=' expr [',' type name = expr [...]] ';' stmt             (* let *)
 | kind type_name '=' type [',' kind type_name '=' type [...]] ';' stmt (* type_let_expr *)
 | stmt ::= expr ';' stmt                                               (* namespace_import *)
 ;

Notes:
* struct and union access share the same form. The type of the object is used
  to distinguish between the two kinds of expressions.
* apply, get, and put share the same form. The type of the expr is used to
  distinguish between the three kinds of expressions.

13. Thoughts
------------
* Is there really any need for a type let type? It seems like you could always
  use either a type let expression or a polymorphic type function.

  On related notes: should there be a namespace_import or namespace_eval for
  types? I honestly can't imagine it would ever be necessary, but it somehow
  feels incomplete to leave those out.

  Perhaps we should allow both type and expr lets in both types and
  expressions? Maybe combine type and expr let into a single thing where you
  can mix both type and expr bindings?

* Should we all type field access on struct type in addition to its value?
  It seems like a good thing to have generally speaking, but I don't know when
  you would actually use it. Similar to previous thought on whether we should
  have a type let type.

* TODO: Add program and module to the syntax reference to answer the question:
  is a program / module an expr or a stmt or a type or a type_stmt?

* Function definitions can be really hard to read. Consider adding a syntactic
  sugar to make it easier? For example, instead of:

  \<@ T@> { \(S@<T@> a, S@<T@> b; S@<T@>); } Append = \<@ T@> {
    \(S@<T@> a, S@<T@> b) {
      ?(a; cons: ConsS<T@>(a.cons.head, Append<T@>(a.cons.tail, b)), nil: b);
    };
  };

  Perhaps something like:
  Append<@ T@>(S@<T@> a, S@<T@> b; S@<T@>) {
    ?(a; cons: ConsS<T@>(a.cons.head, Append<T@>(a.cons.tail, b)), nil: b);
  };

* Need to figure out better support for partial application of functions.

* Vague concern: will fble support static evaluation / compilation to
  hardware? Is it bad to support structs and links that can hold functions and
  processes?

  I envision static evaluation as follows: you evaluate a program to, say, a
  function. That's the static evaluation pass. The result will be based on the
  interpreter you are using. If you have a hardware interpreter, for example,
  the resulting function will be a description of a hardware circuit.

* Vague concern: how to support abstract data types?
  If a user guesses the type of something, they can access internals. How to
  prevent that?

  Imagine I want an abstract collection data type, that supports the following
  operations:
    empty - the empty collection.
    append(x) - appends the value x to the collection.
    contains(x) - checks if the collection contains the value x.

  Maybe we could implement that as:
    @ Internal@ = ...
    @ Collection@ = *(\(X@ x ; Collection@) append, \(X@ x ; Bool@) contains);

    \(Internal@ i; Collection@) mkCollection = \(Internal@ i) {
      Collection@(appendInternal(i), containsInternal(i));
    }

  etc... In other words, the type becomes the struct with the abstract
  interface, and we hide the internal type inside of functions. I think that
  could work. It's just a question of whether we want to provide common syntax
  or language features to support this if it is desired.

