
% True = /Core/Bool%.True;

<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;

<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ MainResult@ = /Core/Stdio/Pure%.MainResult@;
% RunMain = /Core/Stdio/Pure%.RunMain;

@ String@ = /Core/String%.String@;

@ Test@ = /Core/Test%.Test@;

@ Unit@ = /Core/Unit%.Unit@;

(String@, Main@, String@, String@, String@) { Test@; }
Test = (String@ name, Main@ game, String@ n, String@ input, String@ expected) {
  List@<Int@> input_bytes = /Core/List%.Map(input, /Core/Char/Ascii%.Ord);
  List@<Int@> expected_bytes = /Core/List%.Map(expected, /Core/Char/Ascii%.Ord);

  /Core/Test%.Test(name, (Unit@ _) {
    MainResult@ want = @(
      exit: True,
      in: Nil<Int@>,
      out: expected_bytes,
      err: Nil<Int@>
    );

    MainResult@ got = RunMain(game, List[n], input_bytes);

    AssertEquals(
      /Core/Stdio/Pure/Eq%.MainResult,
      /Core/Stdio/Pure/Show%.MainResult,
      want, got);
  });
};

@(Test);
