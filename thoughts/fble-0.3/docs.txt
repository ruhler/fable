Fble 0.3 Miscellaneous Docs Topics
==================================

Be able to write doc comments for extern values and types as well as
functions?

Let's find some concrete examples.

Extern: fble-value.h FbleGenericTypeValue.

/**
 * FbleValue instance for types.
 *
 * Used as an instance of an fble type for those types that don't need any
 * extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

What do we want to turn it into?

There are 4 pieces of information:
* name
* brief
* type
* description

Call it @value.

The only real question is how we want to pass the type. Probably as an
argument, but that might make brief slightly annoying. For example:

/**
 * @value[FbleGenericTypeValue][FbleValue*] FbleValue instance for types.
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

/**
 * @value[FbleGenericTypeValue] FbleValue instance for types.
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 *  
 *  @type FbleValue*
 */
extern FbleValue* FbleGenericTypeValue;

/**
 * @value[FbleValue*][FbleGenericTypeValue] FbleValue instance for types.
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

/**
 * @value[FbleGenericTypeValue] FbleValue instance for types.
 * @[FbleValue*]
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

Honestly, I think @value[type][name][brief][description] makes sense. Except
that doesn't work as well with dcget.

Otherwise, @value[name][brief][description], where description contains @type
tag is okay I guess. Consistent with function. Except what does it mean of
@type isn't provided? Dunno. Anyway, let's give that a try to start.

We want to generate a man page and run dc check. Should be straight forward.

Can we require @type in dc check? That would be nice. We can probably do that.

---

Next step: types. Probably @struct to start.

For example:

/**
 * Source file location.
 *
 * Pass by value. Explicit copy and free required.
 */
typedef struct {
  /**
   * Source file name. Or other description of the source of the program text.
   * Owned by this FbleLoc.
   */
  FbleString* source;

  /**
   * The line number.
   */
  size_t line;

  /**
   * The column number.
   */
  size_t col;
} FbleLoc;

This is just like function, except no return value and rename @arg to @field,
right?

/**
 * @struct[FbleLoc] Source file location.
 *  Pass by value. Explicit copy and free required.
 * 
 *  @field[FbleString*][source]
 *   Source file name or other description of the source of the program text.
 *   Owned by this FbleLoc.
 *  @field[size_t][line] The line number.
 *  @field[size_t][col] The column number.
 */
typedef struct {
  FbleString* source;
  size_t line;
  size_t col;
} FbleLoc;

Great. That should be easily doable, right?

---

List of files to go through for @struct conversion.

lib/aarch64.c     DONE
lib/code.h        DONE
lib/compile.c     DONE
lib/expr.h        DONE
lib/heap.c        DONE
lib/kind.h        DONE
lib/load.c        DONE
lib/parse.y       DONE
lib/profile.c     DONE
lib/tag.h         DONE
lib/tc.h          DONE
lib/type.c        DONE
lib/typecheck.c   DONE
lib/type.h        DONE
lib/unused.c      DONE
lib/value.c       DONE
lib/var.h         DONE
pkgs/app/app.c    DONE

---

I'm going to punt some doc comment stuff to the next release. We made good
incremental progress by adding @struct. I want to let it sit and see how I
feel about having the documentation before the struct instead of inline with
it, because it feels a little more silly for the @enum use case.

