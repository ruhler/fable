
@ Bool@ = /Core/Bool%.Bool@;

<@>@ List@ = /Core/List%.List@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ TestResult@ = +(Unit@ pass, String@ fail, Unit@ xfail);
@ TestCase@ = *(String@ name, (Unit@) { TestResult@; } test);
@ TestSuite@ = *(String@ name, List@<Test@> tests),
@ Test@ = +(TestCase@ case, TestSuite@ suite);

# Test --
#   Creates an individual test.
#
# Inputs:
#   name - the name of the test
#   test - a function that returns the result of the test
(String@, (Unit@) { TestResult@; }) { Test@; }
Test = (String@ name, (Unit@) { TestResult@; } test) {
  Test@(case: TestCase@(name, test));
};

# TestSuite --
#   Creates a suite of tests.
#
# Inputs:
#   name - the name of the test suite.
#   tests - the list of tests in the test suite.
(String@, List@<Test@>) { Test@; }
TestSuite = (String@ name, List@<Test@> tests) {
  Test@(suite: TestSuite@(name, tests));
};

<@ T@>((T@, T@) { Bool@; }, (T@) { String@; }, T@, T@) { TestResult@; }
AssertEquals = <@ T@>(/Core/Eq%.Eq@<T@> eq, /Core/Show%.Show@<T@> show, T@ expected, T@ actual) {
  eq(expected, actual).?(
    true: TestResult@(pass: Unit),
    false: TestResult@(fail: Strs[
      Str|'expected: ', show(expected),
      Str|', but got: ', show(actual)]));
};

# ExpectFails --
#   Change the test result to expected failure if the given test result is
#   failing and msg is contained somewhere in the failure message.
(TestResult@, String@) { TestResult@; }
ExpectFails = (TestResult@ result, String@ msg) {
  result.?(
    pass: TestResult@(fail: Str|'Expected failure, but test passed'),
    fail: /Core/String/Eq%.Contains(result.fail, msg).?(
      true: TestResult@(xfail: Unit),
      false: TestResult@(fail: Strs[
        Str|'Expected failure containing "', msg,
        Str|'", but failed with "', result.fail, Str|'"'])),
    xfail: TestResult@(fail: Str|'Expected failure, but was xfail'));
};

@(TestResult@, Test@, TestSuite@, TestCase@,
  AssertEquals, ExpectFails, Test, TestSuite);
