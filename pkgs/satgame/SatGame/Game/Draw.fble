
@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;
% Sub = /Core/Int%.Sub;
% Mul = /Core/Int%.Mul;
% Gt = /Core/Int/Eq%.Gt;
@ QR@ = /Core/Int/Div%.QR@;
% Div = /Core/Int/Div%.Div;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% Length = /Core/List/Length%.Length;
% Take = /Core/List/Length%.Take;
% Drop = /Core/List/Length%.Drop;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ Drawing@ = /App/Drawing%.Drawing@;
@ Color@ = /App/Drawing%.Color@;
% Drawings = /App/Drawing%.Drawings;
% Rect = /App/Drawing%.Rect;
% Blank = /App/Drawing%.Blank;
% Translate = /App/Drawing%.Translate;

@ Game@ = /SatGame/Game%.Game@;
@ Group@ = /SatGame/Game%.Group@;
@ Tile@ = /SatGame/Game%.Tile@;

@ Params@ = /SatGame/Puzzle%.Params@;

Int@ VarWidth = Int|32;
Int@ TileWidth = Int|48;
Int@ GroupPad = Int|4;
Int@ VarShift = Div(Sub(TileWidth, VarWidth), Int|2).q;

(Tile@) { Drawing@; }
Tile = (Tile@ tile) {
  Color@ bg_color = Color@(Int|208, Int|208, Int|208);
  Drawing@ bg = Rect(Int|0, Int|0, TileWidth, TileWidth, bg_color);

  Color@ fill_color = tile.state.?(
    normal: Color@(Int|0, Int|0, Int|0),
    selected: Color@(Int|0, Int|156, Int|0),
    dismissed: Color@(Int|172, Int|172, Int|172));

  Drawing@ v = /SatGame/Var/Draw%.Draw(tile.var, tile.pos, fill_color);
  Drawings[bg, Translate(VarShift, VarShift, v)];
};

(List@<Tile@>) { Drawing@; }
Group = (List@<Tile@> tiles) {
  tiles.?(nil: Blank);
  Drawing@ head = Tile(tiles.cons.head);
  Drawing@ tail = Group(tiles.cons.tail);
  Drawings[head, Translate(TileWidth, Int|0, tail)];
};

(List@<Group@>) { Drawing@; }
Row = (List@<Group@> groups) {
  groups.?(nil: Blank);
  Drawing@ head = Group(groups.cons.head);
  Drawing@ tail = Row(groups.cons.tail);
  Drawings[
    head,
    Translate(Add(Mul(TileWidth, Length(groups.cons.head)), GroupPad), Int|0, tail)
  ];
};

# Draws a game.
#  @args[Int@][cols] The number of groups per column.
#  @args[Game@][game] The game to draw.
(Int@, Game@) { Drawing@; }
Draw = (Int@ cols, Game@ game) {
  game.?(nil: Blank);
  Drawing@ head = Row(Take(cols, game));
  Drawing@ tail = Draw(cols, Drop(cols, game));
  Drawings[head, Translate(Int|0, Add(TileWidth, GroupPad), tail)];
};

@ TileIndex@ = *(Int@ group, Int@ tile);

# Returns the tile associated with the given (x, y) coordinate, if any.
(Params@, Int@, Int@, Int@) { Maybe@<TileIndex@>; }
TileOf = (Params@ params, Int@ cols, Int@ x, Int@ y) {
  QR@ row = Div(y, Add(TileWidth, GroupPad));
  Gt(row.r, TileWidth).?(true: Nothing<TileIndex@>);

  Int@ group_width = Mul(TileWidth, params.num_literals_per_clause);
  QR@ col = Div(x, Add(group_width, GroupPad));
  Gt(col.r, group_width).?(true: Nothing<TileIndex@>);

  Int@ group = Add(Mul(cols, row.q), col.q);
  Gt(group, params.num_clauses).?(true: Nothing<TileIndex@>);

  Int@ tile = Div(col.r, TileWidth).q;
  Just(TileIndex@(group, tile));
};

@(Draw, TileIndex@, TileOf);
