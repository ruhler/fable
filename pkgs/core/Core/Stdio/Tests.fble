
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<@>@ PureResult@ = /Core/Stdio/Pure%.PureResult@;
@ PureState@ = /Core/Stdio/Pure%.PureState@;
% Monad = /Core/Stdio/Pure%.Monad;
% Stdio = /Core/Stdio/Pure%.Stdio;
<@>% Run = /Core/Stdio/Pure%.Run;
<@>% PureResultEq = /Core/Stdio/Pure/Eq%.PureResultEq;
<@>% PureResultShow = /Core/Stdio/Pure/Show%.PureResultShow;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

# Import to test compilation.
% _ = /Core/Stdio/Cat%;
% _ = /Core/Stdio/Test%;

# Tests --
#  A test suite to test the /Stdio% module and friends.
Test@ Tests = TestSuite(Str|Stdio, List<Test@>[
  Test(Str|Return, (Unit@ _) {
    List@<String@> inputs = List[Str|Hello, Str|World];
    PureResult@<Bool@> wnt = PureResult@<Bool@>(
      PureState@(inputs, Nil<String@>, Nil<String@>), True);
    PureResult@<Bool@> got = Run(Monad.return(True), inputs);
    AssertEquals(
      PureResultEq(/Core/Bool/Eq%.Eq),
      PureResultShow(/Core/Bool/Show%.Show),
      wnt, got);
  }),

  Test(Str|In, (Unit@ _) {
    List@<String@> inputs = List[Str|Hello, Str|World];
    PureResult@<Maybe@<String@>> wnt = PureResult@<Maybe@<String@>>(
      PureState@(List[Str|World], Nil<String@>, Nil<String@>), Just(Str|Hello));
    PureResult@<Maybe@<String@>> got = Run(Stdio.in, inputs);
    AssertEquals(
      PureResultEq(/Core/Maybe/Eq%.Eq(/Core/String/Eq%.Eq)),
      PureResultShow(/Core/Maybe/Show%.Show(/Core/String/Show%.Show)),
      wnt, got);
  }),

  Test(Str|InEnd, (Unit@ _) {
    List@<String@> inputs = Nil<String@>;
    PureResult@<Maybe@<String@>> wnt = PureResult@<Maybe@<String@>>(
      PureState@(Nil<String@>, Nil<String@>, Nil<String@>), Nothing<String@>);
    PureResult@<Maybe@<String@>> got = Run(Stdio.in, inputs);
    AssertEquals(
      PureResultEq(/Core/Maybe/Eq%.Eq(/Core/String/Eq%.Eq)),
      PureResultShow(/Core/Maybe/Show%.Show(/Core/String/Show%.Show)),
      wnt, got);
  }),

  Test(Str|Out, (Unit@ _) {
    List@<String@> inputs = List[Str|Hello, Str|World];
    PureResult@<Unit@> wnt = PureResult@<Unit@>(
      PureState@(inputs, List[Str|There], Nil<String@>), Unit);
    PureResult@<Unit@> got = Run(Stdio.out(Str|There), inputs);
    AssertEquals(
      PureResultEq(/Core/Unit/Eq%.Eq),
      PureResultShow(/Core/Unit/Show%.Show),
      wnt, got);
  }),

  Test(Str|Err, (Unit@ _) {
    List@<String@> inputs = List[Str|Hello, Str|World];
    PureResult@<Unit@> wnt = PureResult@<Unit@>(
      PureState@(inputs, Nil<String@>, List[Str|There]), Unit);
    PureResult@<Unit@> got = Run(Stdio.err(Str|There), inputs);
    AssertEquals(
      PureResultEq(/Core/Unit/Eq%.Eq),
      PureResultShow(/Core/Unit/Show%.Show),
      wnt, got);
  }),

  Test(Str|DoOuts, (Unit@ _) {
    List@<String@> inputs = List[Str|Hello, Str|World];

    PureResult@<Unit@> wnt = PureResult@<Unit@>(
      PureState@(inputs, List[Str|A, Str|B], Nil<String@>), Unit);

    PureResult@<Unit@> got = Run({
      Unit@ _ <- Monad.do(Stdio.out(Str|A));
      Unit@ _ <- Monad.do(Stdio.out(Str|B));
      Monad.return(Unit);
    }, inputs);

    AssertEquals(
      PureResultEq(/Core/Unit/Eq%.Eq),
      PureResultShow(/Core/Unit/Show%.Show),
      wnt, got);
  }),

  Test(Str|DoErrs, (Unit@ _) {
    List@<String@> inputs = List[Str|Hello, Str|World];

    PureResult@<Unit@> wnt = PureResult@<Unit@>(
      PureState@(inputs, Nil<String@>, List[Str|A, Str|B]), Unit);

    PureResult@<Unit@> got = Run({
      Unit@ _ <- Monad.do(Stdio.err(Str|A));
      Unit@ _ <- Monad.do(Stdio.err(Str|B));
      Monad.return(Unit);
    }, inputs);

    AssertEquals(
      PureResultEq(/Core/Unit/Eq%.Eq),
      PureResultShow(/Core/Unit/Show%.Show),
      wnt, got);
  })
]);

@(Tests);
