@tutorial Core Library
 This tutorial goes over some of the types and functions available from the
 core library.

 You've learned about all the fble language features already. The core library
 is implemented on top of those language features as a common set of types and
 functions useful in programming with fble. Making use of the core library
 saves you the effort of defining and implementing these types yourself.

 The core library is not part of the language specification. Thus far it has
 grown organically based on the needs of the sample applications included with
 the fble release.
 
 The following sections highlight various useful parts of the core library.

 @section @L{/Core/Unit%}
  The @L{/Core/Unit%} module defines type @L{Unit@} and value @L{Unit}
  that we have seen many times in this series of tutorials:
 
  @code[fble] @
   @ Unit@ = *();
 
   Unit@ Unit = Unit@();
 
  By itself @L{Unit@} is not very interesting, but it's a building block used
  in all other data types.
 
 @section @L{/Core/Bool%}
  The @L{/Core/Bool%} module defines a boolean type @L{Bool@}, values @L{True}
  and @L{False}, and a few functions that operate on booleans, such as
  @L{And}, @L{Or}, and @L{Not}:
 
  @code[fble] @
   @ Bool@ = +(Unit@ true, Unit@ false);
   
   Bool@ True = Bool@(true: Unit);
   Bool@ False = Bool@(false: Unit);
   
   (Bool@) { Bool@; } Not = ...;
   (Bool@, Bool@) { Bool@; } And = ...;
   (Bool@, Bool@) { Bool@; } Or = ...;

 @section @L{/Core/Eq%}
  The @L{/Core/Eq%} module defines an @L{Eq@} interface for types that can be
  compared for equality or other kinds of relationships.

  @code[fble] @
   <@>@ Eq@ = <@ T@>(T@, T@) { /Core/Bool%.Bool@; };

 @section @L{/Core/Maybe%}
  The @L{/Core/Maybe%} module defines a @L{Maybe@} type for representing
  optional values. It defines functions @L{Just} and @L{Nothing} for
  constructing these optional values.

  @code[fble] @
   <@>@ Maybe@ = <@ T@> { +(T@ just, Unit@ nothing); };

   <@ T@>(T@){ Maybe@<T@>; } Just = <@ T@>(T@ x) { Maybe@(just: x); };
   Maybe@ Nothing = <@ T@> { Maybe@<T@>(nothing: Unit); };
 
 @section @L{/Core/Char%}
  The @L{/Core/Char%} module defines a @L{Char@} type representing characters.
  The @L{Char@} type is implemented as a union type with a separate field of
  type @L{Unit@} for each different character which is suitable for use as a
  letter type in a literal expression.
 
  Characters include digits, upper and lower case letters, punctuation, and
  some whitespace characters.
 
  The @L{/Core/Char%} module defines a struct @L{Chars} that holds all the
  different characters. For example, you could refer to the letter @L{A} using
  @L{/Core/Char%.Chars.A}. It provides some more convenient names
  @L{Chars.tab} and @L{Chars.nl} for tab and newline characters, which are
  otherwise slightly awkward to refer to in fble.
 
  There is also a @L{/Core/Char/Show%} module that defines a @L{Show} function
  to convert a character to a string.
 
 @section @L{/Core/Int%}
  The @L{/Core/Int%} module defines an @L{Int@} type, representing unbounded
  integers. It's implemented on top of an @L{IntP@} type representing positive
  integers.
 
  Positive integers are described using a recursive union data type:
 
  @code[fble] @
   @ IntP@ = +(
     Unit@ 1, 
     IntP@ 2p0,
     IntP@ 2p1
   );
 
  The @L{Int@} type is a union with positive, zero, and negative fields:
 
  @code[fble] @
   @ Int@ = +(
     IntP@ n,   # Negative integers
     Unit@ 0,
     IntP@ p    # Positive integers
   );
 
  The @L{/Core/Int%} module provides standard integer arithmetic operations:
  @L{Inc}, @L{Dec}, @L{Add}, @L{Sub}, @L{Neg}, @L{Mul}, @L{Exp2}, @L{Abs}.
  Other operations are defined in submodules:
 
  @definition @L{/Core/Int/Eq%}
   Defines comparison operations @L{IsZero}, @L{Eq}, @L{Lt}, @L{Le}, @L{Gt},
   @L{Ge}, @L{Max}, and @L{Min}.
 
  @def @L{/Core/Int/Lit%}
   Defines an @L{Int} function that can be used for non-negative integer
   literals.
 
  @def[@L{/Core/Int/Div%}] Defines a @L{Div} operation for integers.
  @def[@L{/Core/Int/Sqrt%}] Defines a @L{Sqrt} operation for integers.
  @def[@L{/Core/Int/Show%}] Defines a @L{Show} function for integers.
 
 @section @L{/Core/List%}
  The @L{/Core/List%} module defines a polymorphic list type like the one we
  have already seen in this tutorial series:
 
  @code[fble] @
   <@>@ List@ = <@ T@> { +(*(T@ head, List@<T@> tail) cons, Unit@ nil); };
 
  It defines a number of functions for working with lists:
 
  @def[@L{List}] For constructing lists using list expressions.
  @def[@L{Cons}] For adding a value to the front of a list.
  @def[@L{Nil}] For the empty list.
  @def[@L{Append}] For appending a list to another list.
  @def[@L{Last}] For getting the last element of a list.
  @def[@L{Init}] For getting all but the last element of a list.
  @def[@L{Concat}] For flattening a list of lists into a single list.
  @def[@L{Map}] For applying a function to each element of a list.
  @def[@L{ForEach}] For iterating over elements of a list.
  @def[@L{Reverse}] For reversing the elements of a list.
 
  There is a @L{/Core/List/Show%} module that defines a @L{Show} function for
  lists. It takes a function for showing an element of a list, and returns a
  function for showing a given list.
 
 @section @L{/Core/String%}
  The @L{/Core/String%} module defines the type @L{String@} as list of
  characters:
 
  @code[fble] @
   @ String@ = List@<Char@>;
 
  It defines a @L{Str} function that you can use for string literals:
 
  @code[fble] @
   # Example Use:
   #   String@ s = Str|'hello, world'
   (List@<Char@>) { String@; } Str = List<Char@>;
 
  And a helper function @L{Strs} for concatenating a bunch of strings together:
 
  @code[fble] @
   (List@<String@>) { String@; } Strs = /Core/List%.Concat<Char@>;

 @section @L{/Core/Show%}
  The @L{/Core/Show%} module defines a @L{Show@} interface for types that can
  be converted to strings.

  @code[fble] @
   <@>@ Show@ = <@ T@>(T@) { /Core/String%.String@; };

 @section @L{/Core/Ord%}
  The @L{/Core/Ord%} module defines an @L{Ordering@} type and @L{Ord@}
  interface for types that can be compared.

  @code[fble] @
   @ Ordering@ = +(Unit@ lt, Unit@ eq, Unit@ gt);

   Ordering@ Lt = Ordering@(lt: Unit);
   Ordering@ Eq = Ordering@(eq: Unit);
   Ordering@ Gt = Ordering@(gt: Unit);

   <@>@ Ord@ = <@ T@>(T@, T@) { Ordering@; };

 @section @L{/Core/Map%}
  The @L{/Core/Map%} module defines the type @L{Map@}, which maps from keys to
  values using a self balancing tree data structure. It provides functions for
  inserting, looking up, and removing values from the map.

  Any type can be used for the key, as long as there is an ordering relation
  defined on the type via the @L{Ord@} interface.

  @code[fble] @
   <@,@>@ Map@ = <@ K@, @ V@> { ... };

   Map@ Empty = ...;
   <@ K@, @ V@>(Map@<K@, V@>) { Bool@; } IsEmpty = ...;
   <@ K@>(Ord@<K@>)<@ V@>(Map@<K@, V@>, K@) { Maybe@<V@>; } Lookup = ...;
   <@ K@>(Ord@<K@>)<@ V@>(Map@<K@, V@>, K@, V@) { Map@<K@, V@>; } Insert = ...;
   <@ K@>(Ord@<K@>)<@ V@>(Map@<K@, V@>, K@) { Map@<K@, V@>; } Delete = ...;
   <@ K@, @ V@>(Map@<K@, V@>)<@ B@>(B@, (K@, V@, B@) { B@; }) { B@; } ForEach = ...;

 @section @L{/Core/Set%}
  The @L{/Core/Set%} module defines a @L{Set@} type for describing a set of
  values. It's a special case of the @L{Map@} type.

  @code[fble] @
   <@>@ Set@ = <@ T@> { Map@<T@, Unit@>; };

   Set@ Empty = ...;
   <@ T@>(Set@<T@>) { Bool@; } IsEmpty = ...;
   <@ T@>(Ord@<T@>, Set@<T@>, T@) { Bool@; } Contains = ...;
   <@ T@>(Ord@<T@>, Set@<T@>, T@) { Set@<T@>; } Insert = ...;
   <@ T@>(Ord@<T@>, Set@<T@>, T@) { Set@<T@>; } Delete = ...;
   <@ T@>(Set@<T@>)<@ B@>(B@, (T@, B@) { B@; }) { B@; } ForEach = ...;

 @section @L{/Core/Test%}
  The @L{/Core/Test%} module defines types @L{Test@}, @L{TestSuite@} and
  others for writing and running unit tests.
 
 @section @L{/Core/Monad%}
  The @L{/Core/Monad%} module defines a monad interface like the one we saw in
  the @fbld[Bind.fbld][Bind] tutorial:
 
  @code[fble] @
   <<@>@>@ Monad@ = <<@>@ M@> {
     *(
       <@ A@>(A@) { M@<A@>; } return,
       <@ A@>(M@<A@>)<@ B@>((A@) { M@<B@>; }) { M@<B@>; } do
     );
   };
 
 @section @L{/Core/Stdio%}
  The @L{/Core/Stdio%} module defines the @L{Stdio@} interface for accessing
  standard input, output, and error streams for an arbitrary monadic type
  @L{M@}. It can also be used to read and write files and read environment
  variables.
 
  Stream types are defined in the @L{/Core/Stream%} module. They describe an
  interface for reading and writing sequence of bytes represented using the
  @L{Int@} type. You can interact with output streams most easily using the
  @L{/Core/Stream/OStream%} module, which defines @L{PutChar}, @L{PutStr}, and
  @L{PutLine} functions for operating on streams in terms of the @L{Char@}
  type.
  
  The @L{/Core/Stdio%} module defines the @L{Main@} type, as a type of a main
  function that takes a list of arguments and returns a boolean result. The
  @L{/Core/Stdio/IO%} module defines a @L{Run} function for running a
  @L{Main@} function with the @l{fble-stdio} program.
 
 @section Next Steps
  Head over to the @fbld[Stdio.fbld][Standard IO] tutorial to learn about
  writing command line fble programs that can interact with their environment.
