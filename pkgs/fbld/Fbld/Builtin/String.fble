
@ Char@ = /Core/Char%.Char@;

@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% Length = /Core/List/Length%.Length;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Command@ = /Fbld/Command%.Command@;

<@>@ Fbld@ = /Fbld/Fbld%.Fbld@;
<@>% Do = /Fbld/Fbld%.Do;
<@>% Return = /Fbld/Fbld%.Return;
<@>% Error = /Fbld/Fbld%.Error;

@ Loc@ = /Fbld/Loc%.Loc@;

@ Markup@ = /Fbld/Markup%.Markup@;
% Entries = /Fbld/Markup%.Entries;
% Entry = /Fbld/Markup%.Entry;

@ Text@ = /Fbld/Text%.Text@;
% LocOf = /Fbld/Text%.LocOf;
% StringOf = /Fbld/Text%.StringOf;
% Head = /Fbld/Text%.Head;
% Tail = /Fbld/Text%.Tail;
% IsEmpty = /Fbld/Text%.IsEmpty;

(Loc@, String@, List@<Text@>) { Fbld@<Text@>; }
Switch = (Loc@ loc, String@ arg, List@<Text@> branches) {
  branches.?(nil: Error<Text@>(loc, Str|'no match found'));
  branches.cons.tail.?(nil: Return(branches.cons.head));

  String@ key = StringOf(branches.cons.head);
  Text@ value = branches.cons.tail.cons.head;
  /Core/String/Eq%.Eq(arg, key).?(true: Return(value));

  Switch(loc, arg, branches.cons.tail.cons.tail);
};

Markup@ Markup = Entries[
  # @head[str]
  #  Returns the first character of str, or empty if str is empty.
  Entry(Str|'head', (Command@ cmd) {
    Int@ num_args = Length(cmd.args);
    /Core/Int/Eq%.Eq(num_args, Int|1).?(false: {
      Error<Text@>(LocOf(cmd.name), Str|'expected 1 arg');
    });

    Text@ str = cmd.args.cons.head;
    Return({
      IsEmpty(str).?(true: str);
      Loc@ l = LocOf(str);
      Char@ h = Head(str);
      /Fbld/Text%.Cons(h, l, /Fbld/Text%.Empty(l));
    });
  }),

  # @tail[str]
  #  Returns the tail of str.
  Entry(Str|'tail', (Command@ cmd) {
    Int@ num_args = Length(cmd.args);
    /Core/Int/Eq%.Eq(num_args, Int|1).?(false: {
      Error<Text@>(LocOf(cmd.name), Str|'expected 1 arg');
    });

    Return(Tail(cmd.args.cons.head));
  }),

  # @switch[arg][k1][v1][k2][v2]...[def]
  #  Select the value whose key matches arg and run it as block structured
  #  text.
  Entry(Str|'switch', (Command@ cmd) {
    Int@ num_args = Length(cmd.args);
    /Core/Int/Eq%.Le(num_args, Int|1).?(true: {
      Error<Text@>(LocOf(cmd.name), Str|'expected more than 1 arg');
    });
    Text@ arg = cmd.args.cons.head;
    List@<Text@> branches = cmd.args.cons.tail;
    Text@ result <- Do(Switch(LocOf(cmd.name), StringOf(arg), branches));
    /Fbld/Run%.Block(result);
  })
];

@(Markup);
