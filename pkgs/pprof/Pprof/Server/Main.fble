
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

% Chars = /Core/Char%.Chars;

@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;
% Mul = /Core/Int%.Mul;

@ QR@ = /Core/Int/Div%.QR@;
% Div = /Core/Int/Div%.Div;

% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Last = /Core/List%.Last;
<@>% Append = /Core/List%.Append;
<@>% Get = /Core/List/Length%.Get;
% Drop = /Core/List/Length%.Drop;
<@>% Length = /Core/List/Length%.Length;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ IOStream@ = /Core/Stream%.IOStream@;
<<@>@>@ OStream@ = /Core/Stream%.OStream@;

% Split = /Core/String/Eq%.Split;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;

@ String@ = /Core/String%.String@;
% Lines = /Core/String%.Lines;
% Str = /Core/String%.Str;
% StrE = /Core/String%.StrE;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<<@>@>@ Main@ = /Network/Sockets%.Main@;
<<@>@>@ Server@ = /Network/Sockets%.Server@;
<<@>@>@ Sockets@ = /Network/Sockets%.Sockets@;

<<@>@>% Parse = /Pprof/Parser%.Parse;

@ BlockId@ = /Pprof/Profile%.BlockId@;
@ Block@ = /Pprof/Profile%.Block@;
@ Sequence@ = /Pprof/Profile%.Sequence@;
@ Profile@ = /Pprof/Profile%.Profile@;
% Blocks = /Pprof/Profile%.Blocks;

<@>@ Result@ = /Pprof/Result%.Result@;

@ Entry@ = /Pprof/Query%.Entry@;
@ Table@ = /Pprof/Query%.Table@;

% Overall = /Pprof/Query/Overall%;
% Self = /Pprof/Query/Self%;
% Sequences = /Pprof/Query/Sequences%;
% Sequence = /Pprof/Query/Sequence%;
% Total = /Pprof/Query/Total%;

@ Args@ = *(
  Bool@ help,
  String@ error,
  String@ hostname,
  Int@ port,
  String@ file,
  Bool@ benchmark
);

Args@ DefaultArgs = @(
  help: False,
  error: Str|'',
  hostname: Str|'localhost',
  port: Int|8123,
  file: Str|'',
  benchmark: False
);

(List@<String@>, Args@) { Args@; }
GetArgs = (List@<String@> args, Args@ default) {
  args.?(nil: default);

  String@ arg = args.cons.head;
  /Core/List/Eq%.Contains(/Core/String/Eq%.Eq,
    List[Str|'-h', Str|'--help'], arg).?(true: {
    default.@(help: True);
  });

  /Core/List/Eq%.Contains(/Core/String/Eq%.Eq,
    List[Str|'--benchmark'], arg).?(true: {
    GetArgs(args.cons.tail, default.@(benchmark: True));
  });

  /Core/Char/Eq%.Eq(arg.cons.head, Chars.'-').?(false: {
    GetArgs(args.cons.tail, default.@(file: arg));
  });

  args.cons.tail.?(nil: {
    default.@(error: Strs[Str|'missing arg to option ', arg]);
  });

  String@ value = args.cons.tail.cons.head;
  List@<String@> nargv = args.cons.tail.cons.tail;

  Args@ nargs = {
    /Core/List/Eq%.Contains(/Core/String/Eq%.Eq,
      List[Str|'--host'], arg).?(true: {
        default.@(hostname: value);
      });

    /Core/List/Eq%.Contains(/Core/String/Eq%.Eq,
      List[Str|'-p', Str|'--port'], arg).?(true: {
        default.@(port: /Core/Int/Show%.Read(value));
      });

    default.@(error: Strs[Str|'unrecognized option ', arg]);
  };

  nargs.error.?(cons: nargs);
  GetArgs(nargv, nargs);
};

(Int@, Int@) { String@; }
Percent = (Int@ numerator, Int@ denominator) {
  Int@ s = Div(Mul(Int|10000, numerator), denominator).q;
  QR@ qr = Div(s, Int|100);
  Strs[/Core/Int/Show%.Show(qr.q), Str|'.',
    /Core/Int/Show%.Show(Add(Int|100, qr.r)).cons.tail, Str|'%'];
};

Main@ Main = <<@>@ M@>(Sockets@<M@> sockets, Stdio@<M@> stdio, Monad@<M@> m, List@<String@> argv) {
  % I = /Core/Stream/IStream%(m);
  % O = /Core/Stream/OStream%(m);

  (OStream@<M@>, Profile@, Table@, Int@, (Sequence@) { Sequence@; }) { M@<Unit@>; }
  Table = (OStream@<M@> out, Profile@ profile, Table@ table, Int@ total,
    (Sequence@) { Sequence@; } link) {
    Unit@ _ <- m.do(O.PutLine(out, Str|'<table>'));

    (Sequence@) { M@<Unit@>; }
    SeqNames = (Sequence@ seq) {
      seq.?(nil: m.return(Unit));

      BlockId@ block = seq.cons.head;
      Maybe@<Block@> mname = Blocks.Lookup(profile.blocks, block);
      String@ name = { 
        mname.?(just: mname.just.name);
        Unit@ _ = /Core/Debug%.TraceLn(Strs[Str|'block ', /Core/Int/Show%.Show(block), Str|' not found']);
        Strs[Str|'??', /Core/Int/Show%.Show(block), Str|'??'];
      };
      Unit@ _ <- m.do(O.PutStr(out, name));
      seq.cons.tail.?(nil: m.return(Unit));

      Unit@ _ <- m.do(O.PutChar(out, Chars.';'));
      SeqNames(seq.cons.tail);
    };

    (Sequence@) { M@<Unit@>; }
    SeqBlocks = (Sequence@ seq) {
      seq.?(nil: m.return(Unit));

      BlockId@ block = seq.cons.head;
      String@ name = /Core/Int/Show%.Show(block);
      Unit@ _ <- m.do(O.PutStr(out, name));
      seq.cons.tail.?(nil: m.return(Unit));

      Unit@ _ <- m.do(O.PutChar(out, Chars.','));
      SeqBlocks(seq.cons.tail);
    };

    (Entry@) { M@<Unit@>; }
    Row = (Entry@ entry) {
      Unit@ _ <- m.do(O.PutStr(out, Strs[
        Str|'<tr><td>', Percent(entry.value, total),
        Str|'</td><td>', /Core/Int/Show%.Show(entry.value),
        Str|'</td><td><a href="/seq/']));
      Unit@ _ <- m.do(SeqBlocks(link(entry.seq)));
      Unit@ _ <- m.do(O.PutStr(out, Str|'">'));
      Unit@ _ <- m.do(SeqNames(entry.seq));
      O.PutLine(out, Str|'</a></td></tr>');
    };

    (List@<Entry@>) { M@<Unit@>; }
    Rows = (List@<Entry@> entries) {
      entries.?(nil: m.return(Unit));
      Unit@ _ <- m.do(Row(entries.cons.head));
      Rows(entries.cons.tail);
    };

    Unit@ _ <- m.do(Rows(table));
    O.PutLine(out, Str|'</table>');
  };

  Args@ args = GetArgs(argv, DefaultArgs);
  args.help.?(true: {
    Unit@ _ <- m.do(O.PutStr(stdio.out, /Pprof/Usage%));
    m.return(True);
  });

  args.file.?(nil: {
    Unit@ _ <- m.do(O.PutStr(stdio.err, StrE|'missing input file'));
    Unit@ _ <- m.do(O.PutStr(stdio.err, StrE|'\ntry --help for help\n'));
    m.return(False);
  });

  args.error.?(cons: {
    Unit@ _ <- m.do(O.PutStr(stdio.err, args.error));
    Unit@ _ <- m.do(O.PutStr(stdio.err, StrE|'\ntry --help for help\n'));
    m.return(False);
  });

  Maybe@<Server@<M@>> ms <- m.do(sockets.server(args.hostname, args.port));
  ms.?(nothing: {
    Unit@ _ <- m.do(O.PutLine(stdio.err, Str|'unable to serve'));
    m.return(False);
  });

  Server@<M@> s = ms.just;

  Unit@ _ <- m.do(O.PutLine(stdio.out, Strs[
    Str|'parsing ', args.file, Str|'...'
  ]));

  Maybe@<IStream@<M@>> fin <- m.do(stdio.read(args.file));
  fin.?(nothing: {
    Unit@ _ <- m.do(O.PutLine(stdio.err, Strs[
        Str|'unable to open ''', args.file, Str|''''
    ]));
    m.return(False);
  });

  Result@<Profile@> parsed <- m.do(Parse(fin.just, m));
  parsed.?(error: {
    Unit@ _ <- m.do(O.PutLine(stdio.err, Strs[
        Str|'error:', parsed.error
    ]));
    m.return(False);
  });
  
  Unit@ _ <- m.do(O.PutLine(stdio.out, Strs[
    Str|'serving at http://',
    args.hostname,
    Str|':',
    /Core/Int/Show%.Show(args.port)
  ]));

  Profile@ profile = parsed.ok;

  (OStream@<M@>) { M@<Unit@>; }
  OverviewPage = (OStream@<M@> out) {
    Int@ total = Total.Total(profile);
    O.PutStr(out, Lines[
      Str|'<h1>Overview</h1>',
      Str|'Profile: ', args.file, Str|'<br />',
      Str|'Samples: ', /Core/Int/Show%.Show(total), Str|'<br />',
      Str|'Sequences: ', /Core/Int/Show%.Show(Length(profile.samples)), Str|'<br />']);
  };

  (OStream@<M@>) { M@<Unit@>; }
  OverallPage = (OStream@<M@> out) {
    Unit@ _ <- m.do(O.PutLine(out, Str|'<h1>Frames by overall time</h1>'));
    Table@ table = Overall.Query(profile);
    Int@ total = Total.Total(profile);
    Table(out, profile, table, total, (Sequence@ s) { s; });
  };

  (OStream@<M@>) { M@<Unit@>; }
  SelfPage = (OStream@<M@> out) {
    Unit@ _ <- m.do(O.PutLine(out, Str|'<h1>Frames by self time</h1>'));
    Table@ table = Self.Query(profile);
    Int@ total = Total.Total(profile);
    Table(out, profile, table, total, (Sequence@ s) { s; });
  };

  (OStream@<M@>) { M@<Unit@>; }
  SeqsPage = (OStream@<M@> out) {
    Unit@ _ <- m.do(O.PutLine(out, Str|'<h1>Full Sequences</h1>'));
    Table@ table = Sequences.Query(profile);
    Int@ total = Total.Total(profile);
    Table(out, profile, table, total, (Sequence@ s) { s; });
  };

  (OStream@<M@>, Sequence@) { M@<Unit@>; }
  SeqPage = (OStream@<M@> out, Sequence@ seq) {
    Unit@ _ <- m.do(O.PutLine(out, Str|'<h1>Sequence</h1>'));
    Int@ total = Total.Total(profile);
    Table@ sequence = Sequence.Sequence(seq, profile);
    Unit@ _ <- m.do(Table(out, profile, sequence, total, (Sequence@ s) { s; }));

    Unit@ _ <- m.do(O.PutLine(out, Str|'<h1>Incoming</h1>'));
    Int@ ss_total = Total.Contains(profile, seq);
    Table@ incoming = Sequence.Incoming(seq, profile);
    Unit@ _ <- m.do(Table(out, profile, incoming, ss_total,
        (Sequence@ s) { Append(s, seq); }));

    Unit@ _ <- m.do(O.PutLine(out, Str|'<h1>Outgoing</h1>'));
    Table@ outgoing = Sequence.Outgoing(seq, profile);
    Table(out, profile, outgoing, ss_total,
      (Sequence@ s) { Append(seq, s); });
  };

  (IOStream@<M@>) { M@<Unit@>; }
  HandleConnection = (IOStream@<M@> ios) {
    # Get the start line
    String@ start <- m.do(I.GetLine(ios.in));

    # Skip past the request headers. We don't care about those.
    M@<Unit@> SkipHeaders = {
      String@ line <- m.do(I.GetLine(ios.in));
      /Core/String/Eq%.Eq(StrE|'\r\n', line).?(true: m.return(Unit));
      SkipHeaders;
    };
    Unit@ _ <- m.do(SkipHeaders);

    List@<String@> start_split = Split(start, Chars.' ');
    String@ method = Get(start_split, Int|0);
    String@ uri = Get(start_split, Int|1);
    String@ version = Get(start_split, Int|2);

    List@<String@> uri_split = Split(uri, Chars.'?');
    String@ path = uri_split.cons.head;
    String@ query = {
      uri_split.cons.tail.?(nil: Str|'');
      uri_split.cons.tail.cons.head;
    };

    Unit@ _ <- m.do(O.PutStr(ios.out, Lines[
      StrE|'HTTP/1.1 200 OK',
      StrE|'Content-Type: text/html\r',
      StrE|'Cache-Control: no-cache\r',
      StrE|'\r']));

    Unit@ _ <- m.do(O.PutStr(ios.out, Lines[/Pprof/Server/Menu%.Menu]));

    /Core/String/Eq%.Eq(Str|'/', path).?(true: OverviewPage(ios.out));
    /Core/String/Eq%.Eq(Str|'/overall', path).?(true: OverallPage(ios.out));
    /Core/String/Eq%.Eq(Str|'/self', path).?(true: SelfPage(ios.out));
    /Core/String/Eq%.Eq(Str|'/seqs', path).?(true: SeqsPage(ios.out));

    /Core/String/Eq%.StartsWith(path, Str|'/seq/').?(true: {
      List@<String@> ids = Split(Drop(Int|5, path), Chars.',');
      SeqPage(ios.out, /Core/List%.Map(ids, /Core/Int/Show%.Read));
    });

    O.PutStr(ios.out, Lines[
      StrE|'<h1>Unsupported Request</h1>',
      StrE|'<h2>Request Info</h2>',
      Strs[StrE|'Method: ', method, StrE|' <br/>'],
      Strs[StrE|'Path: ', path, StrE|' <br/>'],
      Strs[StrE|'Query: ', query, StrE|' <br/>'],
      Strs[StrE|'Version: ', version, StrE|' <br/>']]);
  };

  args.benchmark.?(true: {
    # Run through a few different queries to act as a benchmark.
    Unit@ _ <- m.do(OverviewPage(stdio.out));
    Unit@ _ <- m.do(OverallPage(stdio.out));
    Unit@ _ <- m.do(SelfPage(stdio.out));
    Unit@ _ <- m.do(SeqsPage(stdio.out));

    profile.samples.?(nil: m.return(True));
    Sequence@ seq = List[Last(profile.samples.cons.head.sequence)];
    Unit@ _ <- m.do(SeqPage(stdio.out, seq));
    m.return(True);
  });

  M@<Unit@> Serve = {
    IOStream@<M@> ios <- m.do(s);
    Unit@ _ <- m.do(HandleConnection(ios));
    Unit@ _ <- m.do(O.Close(ios.out));
    Serve;
  };

  Unit@ _ <- m.do(Serve);
  m.return(True);
};

/Network/Sockets/IO%.Run(Main);
