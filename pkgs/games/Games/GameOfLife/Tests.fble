
@ Int@ = /Core/Int%.Int@;
% 0 = /Core/Int%.0;
% 1 = /Core/Int%.1;
% 2 = /Core/Int%.2;
% 3 = /Core/Int%.3;
% 4 = /Core/Int%.4;
% 5 = /Core/Int%.5;
% 6 = /Core/Int%.6;

<@>% List = /Core/List%.List;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;

@ Coord@ = /Games/GameOfLife%.Coord@;
@ World@ = /Games/GameOfLife%.World@;
% World = /Games/GameOfLife%.World;
% EqWorld = /Games/GameOfLife%.EqWorld;
% ShowWorld = /Games/GameOfLife%.ShowWorld;
% Step = /Games/GameOfLife%.Step;

# Imports to test compilation.
% _ = /Games/GameOfLife/AppIO%;
% _ = /Games/GameOfLife/Bench%;

Test@ Tests = TestSuite(Str|GameOfLife, List[
  Test(Str|AcornStep, (Unit@ _) {
    # Do a sigle step of the acorn configuration.
    # Generation 0:      Generation 1:
    #   .O.....            .......
    #   ...O...            OOO.OO.
    #   OO..OOO            ....OO.
    #   .......            .....O.
    (Int@, Int@) { Coord@; } C = (Int@ x, Int@ y) { Coord@(x, y); };

    World@ g0 = World(List[
      C(0, 1),
      C(1, 3),
      C(2, 0), C(2, 1), C(2, 4), C(2, 5), C(2, 6)
    ]);

    World@ g1 = World(List[
      C(1, 0), C(1, 1), C(1, 2), C(1, 4), C(1, 5),
      C(2, 4), C(2, 5),
      C(3, 5)
    ]);

    AssertEquals(EqWorld, ShowWorld, g1, Step(g0));
  })
]);

@(Tests);
