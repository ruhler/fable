
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;

% Chars = /Core/Char%.Chars;

@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;
% Neg = /Core/Int%.Neg;
% Mul = /Core/Int%.Mul;
% Div = /Core/Int/Div%.Div;
% Eq = /Core/Int/Eq%.Eq;
% Int = /Core/Int/Lit%.Int;
% Incr = /Core/Int%.Incr;

<@>@ List@ = /Core/List%.List@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;


@ LFT@ = *(Int@ q, Int@ r, Int@ s, Int@ t);

# State@ --
#   The state of computation of digits of pi
#
# Fields:
#   k - The index of the next input to consume.
#   z - The streaming state.
@ State@ = *(Int@ k, LFT@ z);

State@ Initial = State@(Int|1, LFT@(Int|1, Int|0, Int|0, Int|1));

# Input -- 
#   Compute the 'k'th input, starting at k = 1.
(Int@) { LFT@; } Input = (Int@ k) {
  LFT@(k, Add(Mul(Int|4, k), Int|2), Int|0, Add(Mul(Int|2, k), Int|1));
};

@ Rational@ = *(Int@ n, Int@ d);

(LFT@, Int@) { Rational@; } Extract = (LFT@ z, Int@ x) {
  Rational@(Add(Mul(z.q, x), z.r), Add(Mul(z.s, x), z.t));
};

(Rational@) { Int@; } Floor = (Rational@ r) {
  Div(r.n, r.d).q;
};

# Compose --
#   Streaming state composition.
(LFT@, LFT@) { LFT@; } Compose = (LFT@ a, LFT@ b) {
  LFT@(
    Add(Mul(a.q, b.q), Mul(a.r, b.s)),
    Add(Mul(a.q, b.r), Mul(a.r, b.t)),
    Add(Mul(a.s, b.q), Mul(a.t, b.s)),
    Add(Mul(a.s, b.r), Mul(a.t, b.t)));
};

(LFT@) { Int@; } Next = (LFT@ z) {
  Floor(Extract(z, Int|3));
};

(LFT@, Int@) { Bool@; } Safe = (LFT@ z, Int@ n) {
  Eq(n, Floor(Extract(z, Int|4)));
};

# Produce --
#   Produce the next streaming state, given the current streaming state and
#   output.
(LFT@, Int@) { LFT@; } Produce = (LFT@ z, Int@ n) {
  Compose(LFT@(Int|10, Neg(Mul(Int|10, n)), Int|0, Int|1), z);
};

# Consume --
#   Consume the next input.
(LFT@, LFT@) { LFT@; } Consume = Compose;

# StreamResult@ --
#   The result of calling the Stream function.
#
# Fields:
#   state - the updated computation state.
#   output - the next output digit.
@ StreamResult@ = *(State@ state, Int@ output);

# Stream --
#   Get the next output from the streaming computation.
(State@) { StreamResult@; } Stream = (State@ s) {
  Int@ y = Next(s.z);
  Safe(s.z, y).?(
    true: StreamResult@(State@(s.k, Produce(s.z, y)), y),
    false: Stream(State@(Add(s.k, Int|1), Consume(s.z, Input(s.k)))));
};

# Output the digits of pi, one digit output for each input string, starting
# from state 's'.
Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio) {
  % O = /Core/Stream/OStream%(m);

  (String@) { M@<Unit@>; } PutS = (String@ str) {
    O.PutStr(stdio.out, str);
  };

  (List@<String@> args) {
    Int@ n = /Core/Int/Show%.Read(args.cons.head);
    Int@ l = Int|10;
    (Int@, State@) { M@<Bool@>; } PiDigits = (Int@ i, State@ s) {
      Eq(i, n).?(true: m.return(True));

      StreamResult@ r = Stream(s);
      Unit@ _ <- m.do(PutS(/Core/Int/Show%.Show(r.output)));

      Int@ ni = Incr(i);
      Unit@ _ <- m.do(Eq(Int|0, Div(ni, l).r).?(true: {
        Unit@ _ <- m.do(PutS[Chars.tab, Chars.':']);
        Unit@ _ <- m.do(PutS(/Core/Int/Show%.Show(ni)));
        PutS[Chars.nl];
      }, false: m.return(Unit)));

      PiDigits(ni, r.state);
    };

    PiDigits(Int|0, Initial);
  };
};

@(Main);
