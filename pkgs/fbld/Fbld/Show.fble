
@ Char@ = /Core/Char%.Char@;

<@>@ List@ = /Core/List%.List@;
<@>% Append = /Core/List%.Append;

<@>@ Show@ = /Core/Show%.Show@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Command@ = /Fbld/Command%.Command@;
@ Loc@ = /Fbld/Loc%.Loc@;
<@>@ Result@ = /Fbld/Result%.Result@;

@ Text@ = /Fbld/Text%.Text@;
% Head = /Fbld/Text%.Head;
% Tail = /Fbld/Text%.Tail;
% IsEmpty = /Fbld/Text%.IsEmpty;
% LocOf = /Fbld/Text%.LocOf;

Show@<Loc@> Loc = (Loc@ x) {
  Strs[x.file,
    Str|':', /Core/Int/Show%.Show(x.line),
    Str|':', /Core/Int/Show%.Show(x.col)];
};

Show@<Text@> Text = {
  (Loc@, Text@) { String@; } text = (Loc@ expected_loc, Text@ t) {
    IsEmpty(t).?(true: Str|'');

    Loc@ loc = LocOf(t);
    String@ sloc = /Fbld/Eq%.Loc(expected_loc, loc).?(
      true: Str|'',
      false: Strs[Str|'{', Loc(loc), Str|'}']
    );

    Char@ h = Head(t);
    String@ head = Strs[sloc, /Core/Char/Show%.Show(h)];
    Append(head, text(/Fbld/Loc%.Advance(loc, h), Tail(t)));
  };

  (Text@ x) {
    text(/Fbld/Loc%.Unknown, x);
  };
};

<@ T@>(Show@<T@>) { Show@<Result@<T@>>; }
Result = <@ T@>(Show@<T@> show)(Result@<T@> r) {
  r.?(err: Strs[Str|'error:', Text(r.err)]);
  Strs[Str|'ok:', show(r.ok)];
};

Show@<Command@> Command = (Command@ c) {
  Strs[Text(c.name), /Core/List/Show%.Show(Text)(c.args)];
};

Show@<List@<Command@>> Commands = /Core/List/Show%.Show(Command);

@(Loc, Text, Result, Command, Commands);
