
@ App@ = /App%.App@;
@ Event@ = /App%.Event@;
@ Effect@ = /App%.Effect@;

@ Bool@ = /Bool%.Bool@;
% True = /Bool%.True;
% False = /Bool%.False;
% And = /Bool%.And;
% Or = /Bool%.Or;

@ Color@ = /Drawing%.Color@;
@ Drawing@ = /Drawing%.Drawing@;
@ Point@ = /Drawing%.Point@;
% Blank = /Drawing%.Blank;
% Drawings = /Drawing%.Drawings;
% Rect = /Drawing%.Rect;
% Over = /Drawing%.Over;
% Transform = /Drawing%.Transform;

<@>@ S@ = /List%.S@;
<@>% S = /List%.S;
<@>% InitS = /List%.InitS;
<@>% Cons = /List%.Cons;
<@,@>% ForEach = /List%.ForEach;

<@>@ Get@ = /Process%.Get@;
<@>@ Put@ = /Process%.Put@;

@ Int@ = /Int/Int%.Int@;
% 0 = /Int/Int%.0;
% 1 = /Int/Int%.1;
% 2 = /Int/Int%.2;
% 3 = /Int/Int%.3;
% Inc = /Int/Int%.Inc;
% Dec = /Int/Int%.Dec;
% Add = /Int/Int%.Add;
% Mul = /Int/Int%.Mul;
% Neg = /Int/Int%.Neg;
% Sub = /Int/Int%.Sub;

% Eq = /Int/Int/Eq%.Eq;
% Lt = /Int/Int/Eq%.Lt;
% Abs = /Int/Int/Eq%.Abs;

% I = /Int/Int/Lit%.I;
% D = /Int/Int/Lit%.D;

% Div = /Int/Int/Div%.Div;
% Mod = /Int/Int/Div%.Mod;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

Int@ MinRow = 0;
Int@ MaxRow = I(D|20);
Int@ MinCol = 0;
Int@ MaxCol = I(D|60);

@ Pos@ = *(Int@ row, Int@ col);

(Pos@, Pos@) { Bool@; } EqPos = (Pos@ a, Pos@ b) {
  And(Eq(a.row, b.row), Eq(a.col, b.col));
};

@ Dir@ = +(Unit@ up, Unit@ down, Unit@ left, Unit@ right);
@ Input@ = +(Dir@ dir, Unit@ quit, Unit@ tick);

(Dir@, Dir@) { Bool@; } EqDir = (Dir@ a, Dir@ b) {
  a.?(
    up: b.?(up: True, : False),
    down: b.?(down: True, : False),
    left: b.?(left: True, : False),
    right: b.?(right: True, : False));
};


@ Cell@ = +(Unit@ empty, Unit@ snake, Unit@ food);

(Pos@, Cell@) { Drawing@; } DrawCell = (Pos@ pos, Cell@ cell) {
  Color@ c = cell.?(
    empty: Color@(blue: Unit),
    snake: Color@(cyan: Unit),
    food: Color@(green: Unit));
  Rect(pos.col, pos.row, 1, 1, c);
};

# State --
#   The state of the game.
# 
# Fields:
#   dir - The current direction of the snake.
#   food - The current position of the food.
#   rand - Random bits for use in determining the next food position.
#   snake - The positions of the snake, in order from head to tail.
#   speed - The number of milliseconds to wait between each tick.
@ State@ = *(
  Dir@ dir,
  Pos@ food,
  Int@ rand,
  S@<Pos@> snake,
  Int@ speed
);

(S@<Pos@>) { Drawing@; } DrawSnakeS = (S@<Pos@> s) {
  ForEach<Pos@, Drawing@>(s, Blank, (Pos@ p, Drawing@ d) {
    Over(DrawCell(p, Cell@(snake: Unit)), d);
  });
};

(State@) { Drawing@; } Draw = (State@ s) {
  Drawings([
    Rect(0, 0, Inc(MaxCol), Inc(MaxRow), Color@(blue: Unit)),
    DrawSnakeS(s.snake),
    DrawCell(s.food, Cell@(food: Unit))
  ]);
};

State@ InitialState = {
  Int@ c0 = MinCol;
  Int@ c1 = Inc(c0); Int@ c2 = Inc(c1);
  Int@ c3 = Inc(c2); Int@ c4 = Inc(c3);
  Int@ r0 = MinRow;
  Int@ r1 = Inc(r0); Int@ r2 = Inc(r1);
  Int@ r3 = Inc(r2); Int@ r4 = Inc(r3);
  State@(
    Dir@(right: Unit),
    Pos@(r4, c1),
    I(D|1),
    S<Pos@>([Pos@(r1, c4), Pos@(r1, c3), Pos@(r1, c2), Pos@(r1, c1)]),
    I(D|40));
};

@ MoveResultM@ = +(Unit@ dead, State@ state);
@ PosM@ = +(Unit@ dead, Pos@ pos);

# Return true if the given position is found in the list of positions.
(S@<Pos@>, Pos@) { Bool@; } InPosS = (S@<Pos@> s, Pos@ p) {
  s.?(
    cons: EqPos(s.cons.head, p).?(true: True, false: InPosS(s.cons.tail, p)),
    nil: False);
};

# Update the random number for where the next food will be generate.
# Takes the current direction of the snake to add some randomness to the
# update.
Int@ Max64 = I(D|18446744073709551616);
(Dir@, Int@) { Int@; } StepRand = (Dir@ d, Int@ s) {
  Int@ offset = d.?(up: 0, down: 1, left: 2, right: 3);
  Mod(Add(Mul(s, I(D|1103515245)), Add(I(D|12345), offset)), Max64);
};

# Pick the position of the next food randomly, given the random bits and the
# snakes position.
(Int@, S@<Pos@>) { Pos@; } GetNextFood = (Int@ rand, S@<Pos@> snake) {
  Int@ x = Mod(Div(rand, I(D|65536)), I(D|32768));
  Int@ row = Inc(Mod(x, Dec(MaxRow)));
  Int@ col = Inc(Mod(Div(x, MaxRow), Dec(MaxCol)));
  Pos@ pos = Pos@(row, col);
  InPosS(snake, pos).?(
    true: GetNextFood(StepRand(Dir@(up: Unit), rand), snake),
    false: pos
  );
};

(State@) { MoveResultM@; } Move = (State@ s) {
  Int@ nrand = StepRand(s.dir, s.rand);
  PosM@ pm = s.dir.?(
    up: Eq(s.snake.cons.head.row, MaxRow).?(
      true: PosM@(dead: Unit),
      false: PosM@(pos: Pos@(Inc(s.snake.cons.head.row), s.snake.cons.head.col))),
    down: Eq(s.snake.cons.head.row, MinRow).?(
      true: PosM@(dead: Unit),
      false: PosM@(pos: Pos@(Dec(s.snake.cons.head.row), s.snake.cons.head.col))),
    left: Eq(s.snake.cons.head.col, MinCol).?(
      true: PosM@(dead: Unit),
      false: PosM@(pos: Pos@(s.snake.cons.head.row, Dec(s.snake.cons.head.col)))),
    right: Eq(s.snake.cons.head.col, MaxCol).?(
      true: PosM@(dead: Unit),
      false: PosM@(pos: Pos@(s.snake.cons.head.row, Inc(s.snake.cons.head.col)))));

  pm.?(
    dead: MoveResultM@(dead: Unit),
    pos: EqPos(pm.pos, s.food).?(
      true: {
        # TODO: Properly handle the case where the snake eats food at its
        # tail.
        S@<Pos@> nsnake = Cons<Pos@>(s.food, s.snake);
        Pos@ nfood = GetNextFood(nrand, nsnake);
        Int@ nspeed = s.speed; # s.speed.?(n: 0, 0: 0, p: Sub(s.speed, 4));
        State@ ns = State@(s.dir, nfood, nrand, nsnake, nspeed);
        MoveResultM@(state: ns);
      },
      false: InPosS(s.snake, pm.pos).?(
        true: MoveResultM@(dead: Unit),
        false: {
          # TODO: Combine calls to Init and Last so we only have to
          # iterate over the list of elements once instead of twice?
          S@<Pos@> nsnake = Cons<Pos@>(pm.pos, InitS<Pos@>(s.snake));
          State@ ns = State@(s.dir, s.food, nrand, nsnake, s.speed);
          MoveResultM@(state: ns);
         })));
};

# Computer controlled choice of next direction.
(State@) { Dir@; } AI = (State@ s) {
  # There are 4 possible next positions. Pick the one closest to the next food
  # that will not kill us. All else equal, keep going the same direction we
  # were going before.
  @ Choice@ = *(
    Dir@ dir,
    Int@ cost
  );
  
  (Choice@, Choice@) { Choice@; } Best = (Choice@ a, Choice@ b) {
    Lt(a.cost, b.cost).?(true: a, false: b);
  };

  (Dir@) { Choice@; } Choice = (Dir@ dir) {
    Pos@ pos = dir.?(
      up: Pos@(Inc(s.snake.cons.head.row), s.snake.cons.head.col),
      down: Pos@(Dec(s.snake.cons.head.row), s.snake.cons.head.col),
      left: Pos@(s.snake.cons.head.row, Dec(s.snake.cons.head.col)),
      right: Pos@(s.snake.cons.head.row, Inc(s.snake.cons.head.col)));

    Bool@ dead =
      Or(Or(Or(Eq(pos.row, MinRow), Eq(pos.row, MaxRow)),
            Or(Eq(pos.col, MinCol), Eq(pos.col, MaxCol))),
         InPosS(s.snake, pos));

    # The cost of death is very high.
    Int@ death = dead.?(true: I(D|100000), false: 0);

    # The further away from the food, the worse we are.
    Int@ food = Mul(2, Add(Abs(Sub(pos.row, s.food.row)),
                           Abs(Sub(pos.col, s.food.col))));

    # We would prefer to go straight, all else equal. That way the human can
    # sort of influence the snakes behavior.
    Int@ turn = EqDir(s.dir, dir).?(true: 0, false: 1);

    Int@ cost = Add(death, Add(food, turn));
    Choice@(dir, cost);
  };

  Choice@ up = Choice(Dir@(up: Unit));
  Choice@ down = Choice(Dir@(down: Unit));
  Choice@ left = Choice(Dir@(left: Unit));
  Choice@ right = Choice(Dir@(right: Unit));
  Best(Best(up, down), Best(left, right)).dir;
};

(Get@<Input@>, Put@<Effect@>, State@) { Unit@!; }
Snake = (Get@<Input@> in, Put@<Effect@> out, State@ s) {
  Input@ x := in;
  x.?(
    dir: Snake(in, out, State@(x.dir, s.food, s.rand, s.snake, s.speed)),
    quit: !(Unit),
    tick: {
      Dir@ dir = AI(s);
      State@ ns = State@(dir, s.food, s.rand, s.snake, s.speed);
      MoveResultM@ m = Move(ns);
      m.?(
        dead: !(Unit),
        state: {
           Unit@ _ := out(Effect@(draw: Draw(ns)));
           Unit@ _ := out(Effect@(tick: ns.speed));
           Snake(in, out, m.state);
        });
    });
};

(Get@<Event@>) { Get@<Input@>; } GetInput = (Get@<Event@> in) {
  Event@ e := in;
  e.?(
    tick: !(Input@(tick: Unit)),
    key_down: e.key_down.?(
      h: !(Input@(dir: Dir@(left: Unit))),
      j: !(Input@(dir: Dir@(down: Unit))),
      k: !(Input@(dir: Dir@(up: Unit))),
      l: !(Input@(dir: Dir@(right: Unit))),
      q: !(Input@(quit: Unit)),
      : GetInput(in)),
    key_up: GetInput(in)
  );
};

App@ Main = (Int@ width, Int@ height, Get@<Event@> in, Put@<Effect@> out) {
  State@ s = InitialState;
  
  # Map game coordinates into screen coordinates.
  Int@ ax = Div(width, Add(3, MaxCol));
  Int@ bx = ax;
  Int@ ay = Neg(Div(height, Add(3, MaxRow)));
  Int@ by = Add(height, ay);

  (Point@) { Point@; } f = (Point@ p) {
    @(x: Add(Mul(ax, p.x), bx), 
      y: Add(Mul(ay, p.y), by));
  };

  Put@<Effect@> game_out = (Effect@ e) {
    Effect@ transformed = e.?(
      tick: e,
      draw: Effect@(draw: Transform(f, e.draw)));
    out(transformed);
  };

  Unit@ _ := game_out(Effect@(draw: Rect(0, 0, Inc(MaxCol), Inc(MaxRow), Color@(blue: Unit))));
  Unit@ _ := game_out(Effect@(draw: Draw(s)));
  Unit@ _ := out(Effect@(tick: I(D|16)));
  Unit@ _ := Snake(GetInput(in), game_out, s);

  Unit@! WaitForKeyPress = {
    Event@ e := in;
    e.?(tick: WaitForKeyPress, key_down: !(Unit), key_up: WaitForKeyPress);
  };
  WaitForKeyPress;
};

Main;
