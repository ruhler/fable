
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

% Chars = /Core/Char%.Chars;

<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

<@>% List = /Core/List%.List;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% StrE = /Core/String%.StrE;
% Strs = /Core/String%.Strs;
% Join = /Core/String%.Join;
% Lines = /Core/String%.Lines;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;

# Tests --
#  A test suite to test the /Core/String% module and friends.
Test@ Tests = TestSuite(Str|String, List[
  Test(Str|StrE, (Unit@ _) {
    String@ wnt = List[
      Chars.a, Chars.nl,
      Chars.b, Chars.tab,
      Chars.c, Chars.'\',
      Chars.d];
    String@ got = StrE|'a\nb\tc\\d';
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|Strs, (Unit@ _) {
    String@ wnt = Str|'hellothere';
    String@ got = Strs[Str|'hello', Str|'there'];
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|Lines, (Unit@ _) {
    String@ wnt = StrE|'hello\nthere\n';
    String@ got = Lines[Str|'hello', Str|'there'];
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|Join, (Unit@ _) {
    String@ wnt = Str|'abcXYdeXYfgh';
    String@ got = Join(List[Str|'abc', Str|'de', Str|'fgh'], Str|'XY');
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|Eq, (Unit@ _) {
    Bool@ wnt = True;
    Bool@ got = /Core/String/Eq%.Eq(Str|'A string!', Str|'A string!');
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|Ne, (Unit@ _) {
    Bool@ wnt = False;
    Bool@ got = /Core/String/Eq%.Eq(Str|'A string!', Str|'nope');
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  TestSuite(Str|StartsWith, List[
    Test(Str|NulNul, (Unit@ _) {
      Bool@ wnt = True;
      Bool@ got = /Core/String/Eq%.StartsWith(Str|'', Str|'');
      AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    }),

    Test(Str|NulNonNul, (Unit@ _) {
      Bool@ wnt = False;
      Bool@ got = /Core/String/Eq%.StartsWith(Str|'', Str|'hello');
      AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    }),

    Test(Str|NonNulNul, (Unit@ _) {
      Bool@ wnt = True;
      Bool@ got = /Core/String/Eq%.StartsWith(Str|'hello', Str|'');
      AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    }),

    Test(Str|No, (Unit@ _) {
      Bool@ wnt = False;
      Bool@ got = /Core/String/Eq%.StartsWith(Str|'hello', Str|'there');
      AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    }),

    Test(Str|Yes, (Unit@ _) {
      Bool@ wnt = True;
      Bool@ got = /Core/String/Eq%.StartsWith(Str|'hello', Str|'hel');
      AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    }),

    Test(Str|Contains, (Unit@ _) {
      Bool@ wnt = False;
      Bool@ got = /Core/String/Eq%.StartsWith(Str|'xhello', Str|'hello');
      AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    })
  ]),

  TestSuite(Str|Contains, List<Test@>[
    Test(Str|NulNul, (Unit@ _) {
      Bool@ wnt = True;
      Bool@ got = /Core/String/Eq%.Contains(Str|'', Str|'');
      AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    }),

    Test(Str|NulNonNul, (Unit@ _) {
      Bool@ wnt = False;
      Bool@ got = /Core/String/Eq%.Contains(Str|'', Str|'hello');
      AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    }),

    Test(Str|NonNulNul, (Unit@ _) {
      Bool@ wnt = True;
      Bool@ got = /Core/String/Eq%.Contains(Str|'hello', Str|'');
      AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    }),

    Test(Str|No, (Unit@ _) {
      Bool@ wnt = False;
      Bool@ got = /Core/String/Eq%.Contains(Str|'hello', Str|'there');
      AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    }),

    Test(Str|Yes, (Unit@ _) {
      Bool@ wnt = True;
      Bool@ got = /Core/String/Eq%.Contains(Str|'xhello', Str|'hello');
      AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    })
  ]),

  Test(Str|Show, (Unit@ _) {
    String@ wnt = Str|'"hello"';
    String@ got = /Core/String/Show%.Show(Str|hello);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  /Core/String/Map/Tests%.Tests

]);

@(Tests);
