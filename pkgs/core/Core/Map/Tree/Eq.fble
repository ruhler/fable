
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% And = /Core/Bool%.And;

<@>@ Eq@ = /Core/Eq%.Eq@;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;

% Map = /Core/Map/Tree/Map%;

<@,@>@ Map@ = /Core/Map/Tree%.Map@;
@ _@ = /Core/Map/Tree%._@;
<@,@>@ Entry@ = /Core/Map/Tree%.Entry@;
<@,@>% ForEach = /Core/Map/Tree%.ForEach;


# IsEmpty --
#   Returns true if the map is empty.
#
# Type Parameters:
#   K@ - the type of keys in the map.
#   V@ - the type of values in the map.
#
# Inputs:
#   map - the map to test.
#
# Returns:
#   True if the map is empty, false otherwise.
<@ K@, @ V@>(Map@<K@, V@>) { Bool@; } IsEmpty = <@ K@, @ V@>(Map@<K@, V@> map) {
  _@.<Map.Map@<K@, V@>>(map).?(empty: True, map: False);
};

<@ K@>(Eq@<K@>)<@ V@>(Eq@<V@>) { Eq@<Entry@<K@, V@>>; }
EqEntry = <@ K@>(Eq@<K@> keq)<@ V@>(Eq@<V@> veq, Entry@<K@, V@> a, Entry@<K@, V@> b) {
  And(keq(a.key, b.key), veq(a.value, b.value));
};

# Eq --
#   Implementation of Eq@ for Map@. See documentation of /Eq%.Eq@.
<@ K@>(Eq@<K@>)<@ V@>(Eq@<V@>) { Eq@<Map@<K@, V@>>; }
Eq = <@ K@>(Eq@<K@> keq)<@ V@>(Eq@<V@> veq, Map@<K@, V@> a, Map@<K@, V@> b) {
  List@<Entry@<K@, V@>> aes = ForEach(a, Nil<Entry@<K@, V@>>,
    (K@ k, V@ v, List@<Entry@<K@, V@>> b) {
      Cons(Entry@(k, v), b);
    });

  List@<Entry@<K@, V@>> bes = ForEach(b, Nil<Entry@<K@, V@>>,
    (K@ k, V@ v, List@<Entry@<K@, V@>> b) {
      Cons(Entry@(k, v), b);
    });

  /Core/List/Eq%.Eq(EqEntry(keq, veq), aes, bes);
};

@(IsEmpty, Eq);
