
% Chars = /Char%.Chars;

% B = /Digits%.Bit;
% I = /Int/Int/Lit%.I;
% D = /Int/Int/Lit%.D;

@ Test@ = /Test%.Test@;
% Test = /Test%.Test;
% TestSuite = /Test%.TestSuite;
<@>% AssertEquals = /Test%.AssertEquals;

@ Addr@ = /Fblf/Program%.Addr@;
@ Program@ = /Fblf/Program%.Program@;
% Assign = /Fblf/Program%.Assign;
% Const = /Fblf/Program%.Const;
% Seq = /Fblf/Program%.Seq;

<@>@ Instance@ = /Fblf/Module%.Instance@;
<@>% Instantiate = /Fblf/Module%.Instantiate;

% AddM = /Fblf/Lib/Add%.AddM;
% IncM = /Fblf/Lib/Add%.IncM;
% DecM = /Fblf/Lib/Add%.DecM;
% AndM = /Fblf/Lib/Bitwise%.AndM;
% OrM = /Fblf/Lib/Bitwise%.OrM;
% XorM = /Fblf/Lib/Bitwise%.XorM;
% NotM = /Fblf/Lib/Bitwise%.NotM;
% ClsM = /Fblf/Lib/Bitwise%.ClsM;

@ Heap@ = /Fblf/Heap%.Heap@;
@ Ptr@ = /Fblf/Heap%.Ptr@;
% Heap = /Fblf/Heap%.Heap;
% HeapFromBitStr = /Fblf/Heap%.HeapFromBitStr;
% HeapFromPtr = /Fblf/Heap%.HeapFromPtr;

% Exec = /Fblf/Exec%.Exec;

Test@ Tests = TestSuite(Chars|Fblf, [
  /Fblf/Heap/Tests%.Tests,

  Test(Chars|AddM, !({
    Addr@ a = I(D|0);
    Addr@ b = I(D|5);
    Addr@ z = I(D|10);
    Addr@ free = I(D|15);

    Instance@<Program@> add = Instantiate<Program@>(AddM(I(D|4), a, b, z), free);

    # Note: we put an extra '1' bit after each value as a regression test for
    # a bug we had where it was reading one bit off the end of the values.
    Program@ prgm = Seq([
      Assign(a, Const(B|00101), I(D|5)),
      Assign(b, Const(B|10111), I(D|5)),
      Assign(z, Const(B|11111), I(D|5)),
      add.instance
    ]);

    Heap@ heap = Heap(add.heap);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt_ = HeapFromBitStr(B|001011011111011);
    Heap@ got_ = HeapFromPtr(Ptr@(got, I(D|0)), I(D|15));
    AssertEquals<Heap@>(/Fblf/Heap/Eq%.Eq, /Fblf/Heap/Show%.Show, wnt_, got_);
  })),

  Test(Chars|IncM, !({
    Addr@ a = I(D|0);
    Addr@ free = I(D|5);

    Instance@<Program@> inc = Instantiate<Program@>(IncM(I(D|5), a), free);

    Program@ prgm = Seq([Assign(a, Const(B|10011), I(D|5)), inc.instance]);

    Heap@ heap = Heap(inc.heap);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt_ = HeapFromBitStr(B|10100);
    Heap@ got_ = HeapFromPtr(Ptr@(got, I(D|0)), I(D|5));
    AssertEquals<Heap@>(/Fblf/Heap/Eq%.Eq, /Fblf/Heap/Show%.Show, wnt_, got_);
  })),

  Test(Chars|'IncM Overflow', !({
    Addr@ a = I(D|0);
    Addr@ free = I(D|5);

    Instance@<Program@> inc = Instantiate<Program@>(IncM(I(D|5), a), free);

    Program@ prgm = Seq([Assign(a, Const(B|11111), I(D|5)), inc.instance]);

    Heap@ heap = Heap(inc.heap);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt_ = HeapFromBitStr(B|00000);
    Heap@ got_ = HeapFromPtr(Ptr@(got, I(D|0)), I(D|5));
    AssertEquals<Heap@>(/Fblf/Heap/Eq%.Eq, /Fblf/Heap/Show%.Show, wnt_, got_);
  })),

  Test(Chars|DecM, !({
    Addr@ a = I(D|0);
    Addr@ free = I(D|5);

    Instance@<Program@> dec = Instantiate<Program@>(DecM(I(D|5), a), free);

    Program@ prgm = Seq([Assign(a, Const(B|10100), I(D|5)), dec.instance]);

    Heap@ heap = Heap(dec.heap);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt_ = HeapFromBitStr(B|10011);
    Heap@ got_ = HeapFromPtr(Ptr@(got, I(D|0)), I(D|5));
    AssertEquals<Heap@>(/Fblf/Heap/Eq%.Eq, /Fblf/Heap/Show%.Show, wnt_, got_);
  })),

  Test(Chars|AndM, !({
    Addr@ a = I(D|0);
    Addr@ b = I(D|4);
    Addr@ z = I(D|8);
    Addr@ free = I(D|12);

    Instance@<Program@> and = Instantiate<Program@>(AndM(I(D|4), a, b, z), free);

    Program@ prgm = Seq([
      Assign(a, Const(B|0011), I(D|4)),
      Assign(b, Const(B|0110), I(D|4)),
      Assign(z, Const(B|0000), I(D|4)),
      and.instance
    ]);

    Heap@ heap = Heap(and.heap);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt_ = HeapFromBitStr(B|001101100010);
    Heap@ got_ = HeapFromPtr(Ptr@(got, I(D|0)), I(D|12));
    AssertEquals<Heap@>(/Fblf/Heap/Eq%.Eq, /Fblf/Heap/Show%.Show, wnt_, got_);
  })),

  Test(Chars|OrM, !({
    Addr@ a = I(D|0);
    Addr@ b = I(D|4);
    Addr@ z = I(D|8);
    Addr@ free = I(D|12);

    Instance@<Program@> or = Instantiate<Program@>(OrM(I(D|4), a, b, z), free);

    Program@ prgm = Seq([
      Assign(a, Const(B|0011), I(D|4)),
      Assign(b, Const(B|0110), I(D|4)),
      Assign(z, Const(B|0000), I(D|4)),
      or.instance
    ]);

    Heap@ heap = Heap(or.heap);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt_ = HeapFromBitStr(B|001101100111);
    Heap@ got_ = HeapFromPtr(Ptr@(got, I(D|0)), I(D|12));
    AssertEquals<Heap@>(/Fblf/Heap/Eq%.Eq, /Fblf/Heap/Show%.Show, wnt_, got_);
  })),

  Test(Chars|XorM, !({
    Addr@ a = I(D|0);
    Addr@ b = I(D|4);
    Addr@ z = I(D|8);
    Addr@ free = I(D|12);

    Instance@<Program@> xor = Instantiate<Program@>(XorM(I(D|4), a, b, z), free);

    Program@ prgm = Seq([
      Assign(a, Const(B|0011), I(D|4)),
      Assign(b, Const(B|0110), I(D|4)),
      Assign(z, Const(B|0000), I(D|4)),
      xor.instance
    ]);

    Heap@ heap = Heap(xor.heap);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt_ = HeapFromBitStr(B|001101100101);
    Heap@ got_ = HeapFromPtr(Ptr@(got, I(D|0)), I(D|12));
    AssertEquals<Heap@>(/Fblf/Heap/Eq%.Eq, /Fblf/Heap/Show%.Show, wnt_, got_);
  })),

  Test(Chars|NotM, !({
    Addr@ a = I(D|0);
    Addr@ z = I(D|4);
    Addr@ free = I(D|8);

    Instance@<Program@> not = Instantiate<Program@>(NotM(I(D|4), a, z), free);

    Program@ prgm = Seq([
      Assign(a, Const(B|0011), I(D|4)),
      Assign(z, Const(B|0000), I(D|4)),
      not.instance
    ]);

    Heap@ heap = Heap(not.heap);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt_ = HeapFromBitStr(B|00111100);
    Heap@ got_ = HeapFromPtr(Ptr@(got, I(D|0)), I(D|8));
    AssertEquals<Heap@>(/Fblf/Heap/Eq%.Eq, /Fblf/Heap/Show%.Show, wnt_, got_);
  })),

  Test(Chars|ClsM, !({
    Addr@ a = I(D|0);
    Addr@ z = I(D|5);
    Addr@ free = I(D|10);

    Instance@<Program@> cls = Instantiate<Program@>(ClsM(I(D|5), I(D|3), a, z), free);

    Program@ prgm = Seq([
      Assign(a, Const(B|10011), I(D|5)),
      Assign(z, Const(B|00000), I(D|5)),
      cls.instance
    ]);

    Heap@ heap = Heap(cls.heap);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt_ = HeapFromBitStr(B|1001111100);
    Heap@ got_ = HeapFromPtr(Ptr@(got, I(D|0)), I(D|10));
    AssertEquals<Heap@>(/Fblf/Heap/Eq%.Eq, /Fblf/Heap/Show%.Show, wnt_, got_);
  })),

  /Fblf/Lib/Md5/Tests%.Tests
]);

@(Tests);
