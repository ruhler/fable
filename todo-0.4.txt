Fble 0.4 TODO
=============
Things to consider doing for the fble-0.4 release.

* Install fble-network-echo, clean up and document command line options.
* Install fble-network-client, clean up and document command line options.
  Replaces /Network/Sockets/Hello%.
* Write fble-network-discard, fble-network-chargen servers.
* Add test case for TCP client/server connection.
* Test and fix windows TCP sockets support.

* Return error messages in Sockets interface on failure to connect, serve, accept?

* Reorder /Core/Stdio%.Main@ function args to: Stdio, List, Monad@?
  Seems more natural to compose by adding extra things to the front.
  See /Network/Sockets/Hello% for example.

* Rename /Debug/Native% to /Debug/Builtin%?

* Make sure we are using the right profile block id for /SpecTests/Builtin%
  and /Core/Debug/Native%. It should be function->profile_block_id + X, not X.
  I think.

* Add helper macros for defining static FbleString and FbleModulePath?

* Add spec tests for full coverage.

* Update tutorials for changes since last release
 - modular compilation in particular

* Get rid of fble-deps, in favor of a generic --make-deps option to fble
  binaries?
  Remove use of fbledeps in spec tests?
* Add --compile option to fble-deps?
* Figure out how to make generated c for fble modules satisfy -Wpedantic?
  - FbleString static initialization is one issue.

* export builtin modules in a header file somewhere?
  Instead of having users export themselves?

* Add test and fix for this case:
 1. We load builtin A, which loads dependent builtin B
 2. We load .fble C, which depends on builtin B
 At what point do we check and load the type information for B?

* Fix exit status in fble-stdio.fbld
  And maybe others since changing to FbleMain?

* Add test for .fble vs. .fble.@ type for main module as well as dependant
  module.
* Test for .fble.@ of dependant file present but with bad syntax.
* Test for malformed .fble of dependant file gives no error when well formed
  .fble.@ is there and we are just compiling the module.

* Install the C version of fbld, not the fble version.
* Clean up stray reference to FbleExecutableModule in aarch64.c or c.c

* http profiler server
 - Add support for HEAD method.
 - Return (501) NOT IMPLEMENTED for any method other than GET, HEAD.
 - port to fble

* Fbld C rewrite
 - Separate out loc.h, text.h, markup.h, etc?
 - Change FbldMarkup type to more explicitly distinguish between the different
   kinds of markups.
 - Figure out how to associate a location with empty markup.
 - Avoid constructing markups with singleton sequences?

* Fbld Language
 - modularity
 - Better support for structs in fbld language, so its easier to write decent
   performing fbld code.
 - Have an 'if' primitive instead of 'ifeq' and 'ifneq'?
 - The @plain builtin is really strange. I had trouble coming up with a test
   case for it. Consider if there's some way we can get rid of that or make it
   more sensible.
 - Clarify in spec if @if[a@x][b@x] ... is an error or not.
   Or redesign semantics of fbld to avoid that question entirely.


* Fix potential GC gen overflow?
 - See thoughts/fble-0.3/stack_alloc.txt for details.

* Implement a custom debugger for fble
 - That works on all backends.
 - That supports single step through code.
 - That supports field access.

* Consider removing higher order kinds from the language.
  Make everything either kind @ or %. What would we lose?

* Make programs run twice as fast.

* Improving packing support for data values.
 - Taking advantage of explicit type info to pack and unpack.

* Modular compilation
 - Test coverage of .fble/.fble.@ combinations.
 - Add option for loading modules from .so files?
 - Have fble-stdio check that the function has the right type?

* Add fble to rosettacode.org?
  Or at least implement all the tasks, perhaps in a separate RosettaCode
  package to start.
  Probably start with all the 'Simple' tasks.

* Design a standard library?
 - Separate modules as appropriate to reduce false dependencies.
 - Document all functions.
 - Add tests for full code coverage of all functions.
 - Proper support for unicode characters in /Core/Char%.

* New apps
 - IEEE floating point support.
 - More benchmark games.
 - Implement an image viewer.

* Fble Language Features
 - Add some way to catch or recover from errors at runtime?

* Fble Debugger
 - Add support for all backends.

Doc Comments
 - dccheck should require @type present in @value content?
 - Add support for @union and @enum doc comments?
 - Add support for abstract typedef struct doc comments?
 - Would be nice to have SEE ALSO section for library man pages.

Tutorials
 - Add exercises to exercise each main point in every tutorial.
 - C API
 - /App/App%
 - /Core/Test%
