
{ Char%; @(Char@); };
{ List%; @(S@, S); };
{ String%; @(Str); };
{ Test%; @(Test@, TestResult@); };
{ Unit%; @(Unit@, Unit); };

{ AI%; @(MemoState@, MemoTable@, PositionResult@, ChooseBestMove); };
{ Board%; @(Board@, Player@, Position@, Square@, Status@, BoardStatus); };

TestResult@! TestBoardStatus = {
  Unit@ _ := $(Unit); # Delay the test until we execute the process
  Status@ status = BoardStatus(Board@(
        Square@(X: Unit), Square@(O: Unit), Square@(O: Unit),
        Square@(E: Unit), Square@(O: Unit), Square@(X: Unit),
        Square@(O: Unit), Square@(X: Unit), Square@(X: Unit)));
  $(?(status ;
        O: TestResult@(pass: Unit),
        : TestResult@(fail: Str(Char@|failed))));
};

# TODO: Use PositionEquals for test result, and report position when failed?
TestResult@! TestChooseBestMoveWin = {
  Unit@ _ := $(Unit); # Delay the test until we execute the process
  MemoState@<PositionResult@> mp = ChooseBestMove(MemoTable@(empty: Unit),
    Board@(
        Square@(X: Unit), Square@(X: Unit), Square@(E: Unit),
        Square@(O: Unit), Square@(O: Unit), Square@(E: Unit),
        Square@(E: Unit), Square@(E: Unit), Square@(E: Unit)), Player@(X: Unit));
  Position@ position = mp.data.position;
  $(?(position ;
        UR: TestResult@(pass: Unit),
          : TestResult@(fail: Str(Char@|failed))));
};

TestResult@! TestChooseBestMoveNoLose = {
  Unit@ _ := $(Unit); # Delay the test until we execute the process
  MemoState@<PositionResult@> mp = ChooseBestMove(MemoTable@(empty: Unit),
    Board@(
        Square@(E: Unit), Square@(E: Unit), Square@(E: Unit),
        Square@(X: Unit), Square@(X: Unit), Square@(O: Unit),
        Square@(E: Unit), Square@(E: Unit), Square@(O: Unit)), Player@(X: Unit));
  Position@ position = mp.data.position;
  $(?(position ;
        UR: TestResult@(pass: Unit),
          : TestResult@(fail: Str(Char@|failed))));
};


S@<Test@> Tests = S<Test@>([
  Test@(Str(Char@|'TicTacToe.TestBoardStatus'), TestBoardStatus),
  Test@(Str(Char@|'TicTacToe.TestChooseBestMoveWin'), TestChooseBestMoveWin),
  Test@(Str(Char@|'TicTacToe.TestChooseBestMoveNoLose'), TestChooseBestMoveNoLose)
  ]);

@(Tests);
