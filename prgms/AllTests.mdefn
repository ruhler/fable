mdefn AllTests< ; ; AllTests<>> {
  using Unit<;> { Unit; };
  using List<TestFailure;> { TestFailureS = S; TestFailureP = P; Append; };

  union TestFailure(
      TestFailure@UBNatTest<;> UBNatTest,
      TestFailure@PrimesTest<;> PrimesTest
  );

  func UBNatTestFailureS(S@List<TestFailure@UBNatTest<;>;> l ; TestFailureS) {
    ?(l ; TestFailureS:nil(Unit()),
          TestFailureS:cons(UBNatTestFailureP(l.cons)));
  };

  func UBNatTestFailureP(P@List<TestFailure@UBNatTest<;>;> l ; TestFailureP) {
    TestFailureP(TestFailure:UBNatTest(l.head), UBNatTestFailureS(l.tail));
  };

  func PrimesTestFailureS(S@List<TestFailure@PrimesTest<;>;> l ; TestFailureS) {
    ?(l ; TestFailureS:nil(Unit()),
          TestFailureS:cons(PrimesTestFailureP(l.cons)));
  };

  func PrimesTestFailureP(P@List<TestFailure@PrimesTest<;>;> l ; TestFailureP) {
    TestFailureP(TestFailure:PrimesTest(l.head), PrimesTestFailureS(l.tail));
  };

  func Test( ; TestFailureS) {
    Append(UBNatTestFailureS(Test@UBNatTest<;>()),
           PrimesTestFailureS(Test@PrimesTest<;>()));
  };
};
