Arrays
======
We have a good case study here about arrays.

pprof parsing is super slow, in large part due to high cost of converting
ascii Int@ to Char@. It's spending a lot of time in Int Ord used to lookup in
my map.

Feels like a perfect use case for arrays in fble, if we had such a thing.
Let's experiment.

Baseline use of Map with Int ord:

  /usr/bin/time -v ./out/pkgs/pprof/fble-pprof-report < scratch/perf.raw.short.txt

  Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.93
  Maximum resident set size (kbytes): 320156

Rewriting the lookup to be a single large function (600 lines of tedious to
write fble code):

  /usr/bin/time -v ./out/pkgs/pprof/fble-pprof-report < scratch/perf.raw.short.txt

  Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.93 ==> 0:40.61
  Maximum resident set size (kbytes): 320156 ==> 328104

That's a pretty nice improvement. 15 seconds saved. The time to do the
conversion has basically gone to zero with this change.

The next thing to try is writing a custom Int@ map that organizes by 1,2p0,2p1
and see how that compares.

It was very easy to implement an Int@ map. The code is quite simple. That's
good.

  /usr/bin/time -v ./out/pkgs/pprof/fble-pprof-report < scratch/perf.raw.short.txt

  Elapsed (wall clock) time (h:mm:ss or m:ss): 0:41.58
  Maximum resident set size (kbytes): 341292


And performance is not too bad at all. That's awesome. No need to implement
support for builtin arrays yet. I can code them up by hand as needed.

---

This is interesting actually. The same technique I used to optimize Int Map I
could use, for example, for maps with String keys or List keys. Let's see how
things shape up. If I end up re-implementing the same kind of logic over and
over for maps, maybe it's worth adding sugar for that in the language. For
now, let me treat it like Show, Eq, Ord, etc. Where we have common structures
for how to write these things, but no builtin language support (yet?).

