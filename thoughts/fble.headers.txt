## How to organize public header files?

Currently I have a bunch of different fble-*.h header files I manually import
as needed using, for example:
  
  #include "fble-alloc.h"   // for FbleAlloc, FbleFree, etc.
  #include "fble-vector.h"  // for FbleVectorInit, etc.

These header files live in the build in the fble/include directory.

A couple questions about how users should interact with these:
* Should users have to import individual headers, or have a single global
  fble.h header?
* Should we install headers directly to includedir, or have an fble
  subdirectory?
* If we have an fble subdirectory, should users import as
   fble/fble-*.h, or use -I .../fble and import as fble-*.h?
* If we have an fble subdirectory, should we remove the fble- prefix from the
  header files themselves?

Let's take it one question at a time.

1. Better to interact with a single fble.h or individual fble-*.h?
Benefits of fble.h:
* Users don't need to know which individual header file to include.
* We can easily reorganize the fble-* header files without users having to
  care.
* More convenient than importing a bunch of header files.

Downsides of a global fble.h:
* Insignificantly longer parse times because you may read more headers than
  you need?
* We can't use it when defining an fble-*.h file, because that would be
  circular.

What do some other packages that I look up to do?
For example: SDL, GL, gc, ncurses?

* SDL: /usr/include/SDL2/SDL_*.h with SDL2/SDL.h. Import using -I
  /usr/include/SDL2 as <SDL.h>
* GL: /usr/include/GL/gl*.h with GL/gl.h. Import as <GL/gl.h>
* gc: /usr/include/gc/gc_*.h with gc.h and gc/gc.h. Import as gc.h.

Okay, so it seems fairly clear to me now:
* Install to $includedir/fble/fble-*.h
* Have $includedir/fble/fble.h that users can include to get everything.
* Recommend include via <fble/fble.h>.
* Users can use sub-includes if they really want to, but don't tell them about
  that. They can figure it out themselves.

Question: '-' or '_' for prefix separator? I've been using '-' for everything
in fble thus far. Uh, except for generate_c.c and generate_aarch64.c. That's
awkward.

I don't see good arguments for '-' versus '_' one way or the other. '-' is
better for SEO, '_' is better if you are in python and you aren't allowed to
use '-' in the name of a module. '-' is treated as a word separator in times
when '_' isn't. Maybe '-' is easier to see than '_' in a URL. Whatever.

For names of fble modules, '-' is harder to use because it needs quoting in
module paths. But this isn't a question about fble module names. It's a
question about c and header file names. I'm happy with '-', so let's go with
that.

Okay, so now that we know how we want to install and interact with all the
header files, how do I want to organize them in the source repository? Ideally
they belong to an 'fble' subdirectory, so I can reference them via fble/... in
my code.

Everything in fable is fble now, basically. So the extra top level 'fble'
directory no longer seems too useful. How about:

include/fble/fble-*.h
bin/
lib/
test/
etc.?

What do other programs do for includes in their local code? Like SDL or gc?
* gc does the equivalent of include/fble-*.h and imports as fble-*.h.

I like my approach better. include/fble/fble-*.h.

Next question: when I reference one of the fble-*.h header files in from
within fble code, should I use "fble/fble-*.h" or <fble/fble-*.h>?

My vote:
* Use <fble/fble-*.h> from any file outside of include/fble/*
* Use "fble-*.h" from any file in include/fble/fble-*.h.

The quote means look locally first. It only makes to use single quote if you
want to look locally first. That's only the case for the local files.

Cool. Decisions made. Time for action:
* Rename generate_c.c and generate_aarch64.c to generate-c.c and
  generate-aarch64.c
* Add an fble.h header file.
* Move subdirectories of fble/ out and then remove empty fble/ directory.
* Use <> and fble.h when currently including fble-* files.
* Change fble-*.h files to use single quotes for include.

Oh, actually, I thought of a notable downside to include fble.h: it means we
have to rebuild practically everything any time a single header file changes?
Practically we have to rebuild everything any time libfble.a changes, and if
we are changing a header, we need to rebuild libfble.a. So maybe not worth
worrying about.

Except, we end up rebuilding a lot of .o files we don't need to that way.
Okay, that's enough to sway me. We can have fble.h for users, but internally,
stick to explicitly using <fble/fble-*.h> as needed to minimize false
dependencies.

And now, what about lib/*.c files. Do we really want to treat them as system
includes? It looks funny, because normally I want to put #include for the
header file I'm providing an implementation for first.

And then I wonder, should I have lib/fble/fble-*.h locally instead, then
reference the fble header files locally? Otherwise, for example, what if
system header file includes fble already. Isn't that confusing?

Ugh. It's harder than I thought.

Stepping back: the fble/fble-*.h files really don't depend on the
implementation. So there's no need to put them in the same directory as the .c
files. But we also don't want confusion about local versus pre-installed fble
files. But maybe we want people to be able to build binaries, pkgs etc with
the pre-installed files. But the library itself?

To be on the safe side, I think we need to be consistent. If anyone uses
<fble/...>, everyone should, so that any mismatches or errors are clearly
seen. That suggests I stay the course: use <fble/*> in lib/*.c. That way, if
you accidentally pick up incompatible fble-*.h files, you should see a build
error when building lib. I'm okay keeping quotes for inside the fble-*.h files
themselves, to enforce consistency within the library.

But, ugh. It just feels wrong to use <> from within the lib/*.c files. They
are the header files for the library, not being used by it as some other
thing. Can I keep those all as quote includes instead?

How about something slightly radical:
* lib/fble-*.h
* lib/private/*.h

Include using "fble-foo.h" and "private/foo.h".

Or, instead of "private", "internal".

What's great about this approach:
* fble-*.h header files are right next to the code that implements them. I
  like that.
* We still separate public from private headers. I guess we would need to
  rename 'lib' to 'fble' directory instead for fble/* to work externally.
* We explicitly call out internal header files.

Downside: nothing prevents local users with access to fble/fble-foo.h from
also importing fble/internal/*.h. Which is the big thing I don't want.

Okay. Let's hold off on changing the strategy for now. Keep using <fble/*.h>
and "*.h" to distinguish public headers versus internal.

