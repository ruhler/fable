% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% And = /Core/Bool%.And;
@ Char@ = /Char%.Char@;
<@>@ Eq@ = /Eq%.Eq@;
@ Int@ = /Int%.Int@;
% Int = /Int/Lit%.Int;
<@>% List = /List%.List;
<@>% Append = /List%.Append;
<@>% Just = /Maybe%.Just;
<@>% Nothing = /Maybe%.Nothing;
<@>@ Show@ = /Show%.Show@;
@ String@ = /String%.String@;
% Str = /String%.Str;
@ Test@ = /Core/Test%.Test@;
@ TestResult@ = /Core/Test%.TestResult@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;
% Unit = /Core/Unit%.Unit;

@ Formula@ = /Sat%.Formula@;
@ Clause@ = /Sat%.Clause@;
@ VarId@ = /Sat%.VarId@;
@ Var@ = /Sat%.Var@;
@ Assignment@ = /Sat%.Assignment@;
@ Result@ = /Sat%.Result@;
% EqId = /Sat%.EqId;
% Solve = /Sat%.Solve;

# Import to test compilation
% _ = /Sat/Bench%;

VarId@ X = /Int%.1;

Show@<VarId@> ShowId = /Int/Show%.Show;

Show@<Var@> ShowVar = (Var@ v) {
  String@ sign = v.polarity.?(true: Str|'+', false: Str|'-');
  Append<Char@>(sign, ShowId(v.id));
};

Eq@<Var@> EqVar = (Var@ a, Var@ b) {
  And(EqId(a.id, b.id), /Core/Bool/Eq%.Eq(a.polarity, b.polarity));
};

Show@<Assignment@> ShowAssignment = /List/Show%.Show<Var@>(ShowVar);
Eq@<Assignment@> EqAssignment = /List/Eq%.Eq<Var@>(EqVar);

Eq@<Result@> EqResult = (Result@ a, Result@ b) {
  a.?(
    sat: b.?(sat: EqAssignment(a.sat, b.sat), : False),
    unsat: b.?(unsat: True, : False),
    timeout: b.?(timeout: True, : False));
};

Show@<Result@> ShowResult = (Result@ a) {
  a.?(
    sat: Append<Char@>(Str|'sat: ', ShowAssignment(a.sat)),
    unsat: Str|'unsat',
    timeout: Str|'timeout');
};

(Result@, Result@) { TestResult@; }
AssertEq = (Result@ a, Result@ b) {
  AssertEquals<Result@>(EqResult, ShowResult, a, b);
};

Test@ Tests = TestSuite(Str|Sat, List<Test@>[
  Test(Str|Sat, !({
    Formula@ f = List<Clause@>[
      List<Var@>[Var@(X, True)]
    ];
    Result@ want = Result@(sat: List<Var@>[Var@(X, True)]);
    Result@ got = Solve(f, Nothing<Int@>);
    AssertEq(want, got);
  })),

  Test(Str|Unsat, !({
    Formula@ f = List<Clause@>[
      List<Var@>[Var@(X, True)],
      List<Var@>[Var@(X, False)]
    ];
    Result@ want = Result@(unsat: Nothing<Int@>);
    Result@ got = Solve(f, Nothing<Int@>);
    AssertEq(want, got);
  })),

  Test(Str|Timeout, !({
    # /Sat/Aim% is a real problem. There's no way we should be able to solve
    # it in 10 ticks.
    Result@ want = Result@(timeout: Unit);
    Result@ got = Solve(/Sat/Aim%, Just<Int@>(Int|10));
    AssertEq(want, got);
  }))
]);

@(Tests);
