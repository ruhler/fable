
import @ { Bit2M=Bit2; Bit@Bit; Bit1; BitNI; StdLib; HexM=Hex; };
import StdLib { BoolM=Bool; Unit; };
import Bit2M { Bit2; };
import HexM { Hex; };

struct Bit4(Bit2 hi, Bit2 lo);

module BitN(BitNI<Bit4>) {
  import @ { Bit4; B = BitN@Bit2M; Bit1; Bit; BoolM; };
  import BoolM { Bool; And; };

  func not(Bit4 a ; Bit4) {
    Bit4(not@B(a.hi), not@B(a.lo));
  };

  func and(Bit4 a, Bit4 b; Bit4) {
    Bit4(and@B(a.hi, b.hi), and@B(a.lo, b.lo));
  };

  func or(Bit4 a, Bit4 b; Bit4) {
    Bit4(or@B(a.hi, b.hi), or@B(a.lo, b.lo));
  };

  func xor(Bit4 a, Bit4 b; Bit4) {
    Bit4(xor@B(a.hi, b.hi), xor@B(a.lo, b.lo));
  };

  func add(Bit4 a, Bit4 b; Bit4) fulladd(a, b, zero@Bit1()).z;

  func zero(; Bit4) {
    Bit4(zero@B(), zero@B());
  };

  func iszero(Bit4 a; Bool) {
     And(iszero@B(a.hi), iszero@B(a.lo));
  };

  func eq(Bit4 a, Bit4 b; Bool) {
     And(eq@B(a.hi, b.hi), eq@B(a.lo, b.lo));
  };

  func msb(Bit4 a; Bit) msb@B(a.hi);

  func clshift(Bit4 a; Bit4) lshift(a, msb(a)).z;

  struct Result(Bit4 z, Bit cout);

  func fulladd(Bit4 a, Bit4 b, Bit cin; Result) {
    Result@B rlo = fulladd@B(a.lo, b.lo, cin);
    Result@B rhi = fulladd@B(a.hi, b.hi, rlo.cout);
    Result(Bit4(rhi.z, rlo.z), rhi.cout);
  };

  func lshift(Bit4 a, Bit cin; Result) {
    Result@B rlo = lshift@B(a.lo, cin);
    Result@B rhi = lshift@B(a.hi, rlo.cout);
    Result(Bit4(rhi.z, rlo.z), rhi.cout);
  };
};

func H1(Hex x; Bit4) {
  Bit 0 = Bit:0(Unit());
  Bit 1 = Bit:1(Unit());
  ?(x; Bit4(Bit2(0, 0), Bit2(0, 0)),
       Bit4(Bit2(0, 0), Bit2(0, 1)),
       Bit4(Bit2(0, 0), Bit2(1, 0)),
       Bit4(Bit2(0, 0), Bit2(1, 1)),
       Bit4(Bit2(0, 1), Bit2(0, 0)),
       Bit4(Bit2(0, 1), Bit2(0, 1)),
       Bit4(Bit2(0, 1), Bit2(1, 0)),
       Bit4(Bit2(0, 1), Bit2(1, 1)),
       Bit4(Bit2(1, 0), Bit2(0, 0)),
       Bit4(Bit2(1, 0), Bit2(0, 1)),
       Bit4(Bit2(1, 0), Bit2(1, 0)),
       Bit4(Bit2(1, 0), Bit2(1, 1)),
       Bit4(Bit2(1, 1), Bit2(0, 0)),
       Bit4(Bit2(1, 1), Bit2(0, 1)),
       Bit4(Bit2(1, 1), Bit2(1, 0)),
       Bit4(Bit2(1, 1), Bit2(1, 1)));
};
