Fble 0.5 TODO
=============
Things to consider doing for the fble-0.5 release.

* Optimize PartialApplyImpl
  - Can we pre-allocate space for the final args to avoid the final memcpys?
  - Can we inline bits of FbleTailCall to avoid a duplicate memcpy?

* Remove OnFree for GC native objects
  Only allow GC to manage chunks of memory, not have sideeffects?
  See thoughts/fble-0.5/gc_native.txt
  - Require explicit close for files and sockets.

* Revisit abstract types in light of modular compilation.
  Could we have a much simpler syntax and say anyone with access to the .fble
  file can construct and deconstruct types, any with access to the .fble.@
  file can't?

* Improve performance of fble pprof viewer enough to be useful.

* Output profiling samples instead of report from fble.
  Changing how we track/deal with recursion.

* Fbld Language
 - modularity
 - Better support for structs in fbld language, so its easier to write decent
   performing fbld code.
 - Have an 'if' primitive instead of 'ifeq' and 'ifneq'?
 - The @plain builtin is really strange. I had trouble coming up with a test
   case for it. Consider if there's some way we can get rid of that or make it
   more sensible.
 - Clarify in spec if @if[a@x][b@x] ... is an error or not.
   Or redesign semantics of fbld to avoid that question entirely.

* Implement a custom debugger for fble
 - That works on all backends.
 - That supports single step through code.
 - That supports field access.

* Make programs run twice as fast.

* Improving packing support for data values.
 - Taking advantage of explicit type info to pack and unpack.

* Modular compilation
 - Add option for loading modules from .so files?
 - Have fble-stdio check that the function has the right type?
 - Load minimum dependencies needed for type checking when possible?

* Add fble to rosettacode.org?
  Or at least implement all the tasks, perhaps in a separate RosettaCode
  package to start.
  Probably start with all the 'Simple' tasks.

* Design a standard library?
 - Separate modules as appropriate to reduce false dependencies.
 - Document all functions.
 - Add tests for full code coverage of all functions.
 - Proper support for unicode characters in /Core/Char%.
 - Add error status codes to sockets interface.

* New apps
 - IEEE floating point support.
 - More benchmark games.
 - Implement an image viewer.
 - bitcoin miner

* Fble Language Features
 - Add some way to catch or recover from errors at runtime?
 - Some way to implement a web server that can handle multiple requests
   concurrently?

* Fble Debugger
 - Add support for all backends.

* Consider removing higher order kinds from the language.
  Make everything either kind @ or %. What would we lose?

* Fix potential GC gen overflow?
 - See thoughts/fble-0.3/stack_alloc.txt for details.

* Fbld C implementation
 - Change FbldMarkup type to more explicitly distinguish between the different
   kinds of markups.
 - Figure out how to associate a location with empty markup.
 - Avoid constructing markups with singleton sequences?

Tests:
* Add spec tests for full coverage.
 - Test for main .fble file not found somehow? load.c
 - Test for builtin module with builtin dependencies? load.c
* Add test and fix for this case:
 1. We load builtin A, which loads dependent builtin B
 2. We load .fble C, which depends on builtin B
 At what point do we check and load the type information for B?

Tutorials:
* C API, once it is stable enough.
* Add exercises to exercise each main point in every tutorial.
* /App/App%
* /Core/Test%

* Figure out why building with ninja from the source directory ends up
  building all the tests. And fix that somehow.

* Debug possible deadlock in pkgs/network/sockets-test.tr?
  Seen when doing ninja check after clean build after ninja.
