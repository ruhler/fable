
@(StdLib: &StdLib);
@(StdLibTest: &StdLibTest);

StdLib { @(Unit@, List); };
List { @(S@, P@, S1, Concat, MapS); };
StdLibTest.ListTest { @(ListTestFailure@: TestFailure@); };

@ TestFailure@ = +(
    ListTestFailure@ ListTest);

(ListTestFailure@){TestFailure@;} ListTestFailureF = (ListTestFailure@ a) {
  TestFailure@(ListTest: a);
};

S@<TestFailure@>! Test = {
  $(Concat<TestFailure@>(S1<S@<TestFailure@>>(
      MapS<ListTestFailure@, TestFailure@>(ListTestFailureF, StdLibTest.ListTest.Test(Unit@())))));
};

S@<TestFailure@> result := Test;
$(result.nil);

