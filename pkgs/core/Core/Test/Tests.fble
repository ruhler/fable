
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

@ Int@ = /Core/Int%.Int@;

<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;

@ MainResult@ = /Core/Stdio/Pure%.MainResult@;
% RunMain = /Core/Stdio/Pure%.RunMain;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
% Pass = /Core/Test%.Pass;
% Fail = /Core/Test%.Fail;
% ExpectedFail = /Core/Test%.ExpectedFail;

% Run = /Core/Test/Stdio%.Run;

@ Unit@ = /Core/Unit%.Unit@;


Test@ pass = Test(Str|pass, (Unit@ _) { Pass; });
Test@ fail = Test(Str|fail, (Unit@ _) { Fail|Failed; });
Test@ xfail = Test(Str|xfail, (Unit@ _) { ExpectedFail; });

Test@ Tests = TestSuite(Str|'Test', List[
  Test(Str|'RunTest.pass_passes', (Unit@ _) {
    MainResult@ result = RunMain(Run(pass), Nil<String@>, Nil<Int@>);

    Bool@ wnt = True;
    Bool@ got = result.exit;
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'RunTest.fail_fails', (Unit@ _) {
    MainResult@ result = RunMain(Run(fail), Nil<String@>, Nil<Int@>);

    Bool@ wnt = False;
    Bool@ got = result.exit;
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'RunTest.xfail_passes', (Unit@ _) {
    MainResult@ result = RunMain(Run(xfail), Nil<String@>, Nil<Int@>);

    Bool@ wnt = True;
    Bool@ got = result.exit;
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'RunTest.SuitePass', (Unit@ _) {
    Test@ suite = TestSuite(Str|'Suite', List[
      Test(Str|a, (Unit@ _) { Pass; }),
      Test(Str|b, (Unit@ _) { Pass; }),
      Test(Str|c, (Unit@ _) { ExpectedFail; }),
      Test(Str|c, (Unit@ _) { Pass; })]);

    MainResult@ result = RunMain(Run(suite), Nil<String@>, Nil<Int@>);

    Bool@ wnt = True;
    Bool@ got = result.exit;
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'RunTest.SuiteFail', (Unit@ _) {
    Test@ suite = TestSuite(Str|'Suite', List[
      Test(Str|a, (Unit@ _) { Pass; }),
      Test(Str|b, (Unit@ _) { Fail|Oops; }),
      Test(Str|c, (Unit@ _) { ExpectedFail; }),
      Test(Str|c, (Unit@ _) { Pass; })]);

    MainResult@ result = RunMain(Run(suite), Nil<String@>, Nil<Int@>);

    Bool@ wnt = False;
    Bool@ got = result.exit;
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  })
]);

@(Tests);
