
% True = /Bool%.True;

% Chars = /Char%.Chars;

% Compile = /Fblf/Compile%.Compile;

@ Md5@ = /Fblf/Lib/Md5%.Md5@;
% Md5M = /Fblf/Lib/Md5%.Md5;

<@>@ Instance@ = /Fblf/Module%.Instance@;
<@>% Instantiate = /Fblf/Module%.Instantiate;

@ Addr@ = /Fblf/Program%.Addr@;

% I = /Int/Int/Lit%.I;
% D = /Int/Int/Lit%.D;

<@>@ Maybe@ = /Maybe%.Maybe@;

<@>@ Get@ = /Process%.Get@;
<@>@ Put@ = /Process%.Put@;

@ Stdio@ = /Stdio%.Stdio@;

@ String@ = /String%.String@;

@ Unit@ = /Unit%.Unit@;

Stdio@ Md5 = (Get@<Maybe@<String@>> _, Put@<String@> output) {
  Addr@ input = I(D|0);
  Addr@ hash = I(D|8);
  Addr@ free = I(D|136);

  Instance@<Md5@> md5I = Instantiate<Md5@>(Md5M(input, hash), free);
  Md5@ md5 = md5I.instance;

  Unit@ _ := output(Compile(Chars|'FblfMd5Reset', md5.reset));
  Unit@ _ := output(Compile(Chars|'FblfMd5Feed', md5.feed));
  Unit@ _ := output(Compile(Chars|'FblfMd5Finish', md5.finish));
  !(True);
};

Md5;
