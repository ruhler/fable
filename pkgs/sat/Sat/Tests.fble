% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% And = /Core/Bool%.And;

<@>@ Eq@ = /Core/Eq%.Eq@;

@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>% List = /Core/List%.List;

<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
@ TestResult@ = /Core/Test%.TestResult@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Formula@ = /Sat/Sat%.Formula@;
@ Clause@ = /Sat/Sat%.Clause@;
@ VarId@ = /Sat/Sat%.VarId@;
@ Var@ = /Sat/Sat%.Var@;
@ Assignment@ = /Sat/Sat%.Assignment@;
@ Result@ = /Sat/Sat%.Result@;
% EqId = /Sat/Sat%.EqId;
% Solve = /Sat/Sat%.Solve;

% ShowResult = /Sat/Show%.ShowResult;
% ShowParsedFormula = /Sat/Show%.ShowParsedFormula;

<@>@ Parse@ = /Sat/Dimacs%.Parse@;
% Parse = /Sat/Dimacs%.Parse;


# Import to test compilation
% _ = /Sat/Bench%;

VarId@ X = /Core/Int%.1;

Eq@<Var@> EqVar = (Var@ a, Var@ b) {
  And(EqId(a.id, b.id), /Core/Bool/Eq%.Eq(a.polarity, b.polarity));
};

Eq@<Clause@> EqClause = /Core/List/Eq%.Eq<Var@>(EqVar);

Eq@<Formula@> EqFormula = /Core/List/Eq%.Eq<Clause@>(EqClause);


Eq@<Parse@<Formula@>>
EqParsedFormula = (Parse@<Formula@> a, Parse@<Formula@> b) {
  a.?(error: b.?(error: /Core/String/Eq%.Eq(a.error, b.error), : False),
      parsed: b.?(parsed: EqFormula(a.parsed, b.parsed), : False));
};

Eq@<Assignment@> EqAssignment = /Core/List/Eq%.Eq<Var@>(EqVar);

Eq@<Result@> EqResult = (Result@ a, Result@ b) {
  a.?(
    sat: b.?(sat: EqAssignment(a.sat, b.sat), : False),
    unsat: b.?(unsat: True, : False),
    timeout: b.?(timeout: True, : False));
};

(Result@, Result@) { TestResult@; }
AssertEq = (Result@ a, Result@ b) {
  AssertEquals<Result@>(EqResult, ShowResult, a, b);
};

Test@ Tests = TestSuite(Str|Sat, List<Test@>[
  Test(Str|Sat, (Unit@ _) {
    Formula@ f = List<Clause@>[
      List<Var@>[Var@(X, True)]
    ];
    Result@ want = Result@(sat: List<Var@>[Var@(X, True)]);
    Result@ got = Solve(f, Nothing<Int@>);
    AssertEq(want, got);
  }),

  Test(Str|Unsat, (Unit@ _) {
    Formula@ f = List<Clause@>[
      List<Var@>[Var@(X, True)],
      List<Var@>[Var@(X, False)]
    ];
    Result@ want = Result@(unsat: Nothing<Int@>);
    Result@ got = Solve(f, Nothing<Int@>);
    AssertEq(want, got);
  }),

  Test(Str|Timeout, (Unit@ _) {
    # /Sat/Aim% is a real problem. There's no way we should be able to solve
    # it in 10 ticks.
    Result@ want = Result@(timeout: Unit);
    Result@ got = Solve(/Sat/Aim%, Just<Int@>(Int|10));
    AssertEq(want, got);
  }),

  Test(Str|Dimacs, (Unit@ _) {
    String@ dimacs = Str|'c
c start with comments
c
c
p cnf 5 3
1 -5 4 0
-1 5 3 4 0
-3 -4 0
';
    Formula@ formula = List<Clause@>[
      List<Var@>[Var@(Int|1, True), Var@(Int|5, False), Var@(Int|4, True)],
      List<Var@>[Var@(Int|1, False), Var@(Int|5, True), Var@(Int|3, True), Var@(Int|4, True)],
      List<Var@>[Var@(Int|3, False), Var@(Int|4, False)]];

    Parse@<Formula@> want = Parse@<Formula@>(parsed: formula);
    Parse@<Formula@> got = Parse(dimacs);
    AssertEquals<Parse@<Formula@>>(EqParsedFormula, ShowParsedFormula, want, got);
  })

]);

/Core/Stdio/IO%.Run(/Core/Test/Stdio%.Run(Tests));
