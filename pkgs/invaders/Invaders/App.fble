
% True = /Core/Bool%.True;

@ Int@ = /Core/Int%.Int@;
% 0 = /Core/Int%.0;
% Neg = /Core/Int%.Neg;
% Max = /Core/Int/Eq%.Max;

% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<<@>@>@ App@ = /App/App%.App@;
<<@>@>@ Main@ = /App/App%.Main@;
@ Event@ = /App/App%.Event@;
@ Effect@ = /App/App%.Effect@;

@ Point@ = /App/Drawing%.Point@;
% Color = /App/Drawing%.Color;
% Over = /App/Drawing%.Over;
% Rect = /App/Drawing%.Rect;
% Affine = /App/Drawing%.Affine;

% Game = /Invaders/Game%;
@ Game@ = Game.Game@;

@ Dir@ = /Invaders/Ship%.Dir@;

@ Input@ = +(
  Unit@ tick,
  Unit@ quit,
  Game.Input@ game
);

Input@ Left = Input@(game: Game.Input@(dir: Dir@(left: Unit)));
Input@ Right = Input@(game: Game.Input@(dir: Dir@(right: Unit)));
Input@ Stopped = Input@(game: Game.Input@(dir: Dir@(stopped: Unit)));
Input@ Fire = Input@(game: Game.Input@(fire: Unit));

Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> _stdio, App@<M@> app, Int@ width, Int@ height)(List@<String@> _args) {
  M@<Input@> GetInput = {
    Event@ e <- m.do(app.event);
    e.?(
        tick: m.return(Input@(tick: Unit)),
        key_down: e.key_down.?(
          q: m.return(Input@(quit: Unit)),
          left: m.return(Left),
          right: m.return(Right),
          space: m.return(Fire),
          : GetInput),
        key_up: e.key_up.?(
          left: m.return(Stopped),
          right: m.return(Stopped),
          : GetInput),
        : GetInput
     );
  };

  # Map game coordinates into screen coordinate.
  Point@ a = @(x: Int|2, y: Neg(Int|2));
  Point@ b = @(x: Int|0, y: Int|480);

  (Game@) { M@<Unit@>; } Draw = (Game@ g) {
    app.effect(Effect@(draw: Over(
      Rect(0, 0, width, height, Color.Black),
      Affine(a, b, Game.Draw(g)))));
  };

  # Returns the high score after playing the game.
  (M@<Unit@>, Game@) { M@<Int@>; }
  Run = (M@<Unit@> tick, Game@ game) {
    Input@ i <- m.do(GetInput);
    i.?(
       tick: {
         Unit@ _ <- m.do(tick);
         Game@ ngame = Game.Tick(game);
         Unit@ _ <- m.do(Draw(ngame));
         Run(tick, ngame);
       },
       quit: m.return(Max(game.score, game.high_score)),
       game: Run(tick, Game.Input(game, i.game)));
  };

  # The target is 60 FPS, or 16 millseconds per frame.
  Int@ frame_period = Int|16;
  M@<Unit@> tick = app.effect(Effect@(tick: frame_period));

  Game@ game = Game.Initial(Int|1234);
  Unit@ _ <- m.do(app.effect(Effect@(tick: Int|0)));
  Int@ _high <- m.do(Run(tick, game));
  m.return(True);
};

Main;
