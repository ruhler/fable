Fble 0.5 TODO
=============
Things to consider doing for the fble-0.5 release.

* Remove now unused FBLE_PROFILE_ENTER_OP, EXIT_OP, and REPLACE_OPs?

* Add test that would catch the bug if we failed to GcRealloc a value before
  ref assignment.
  - ref assign to a value which is stack alloc -> gc alloc -> ref.

Tests:
* Add spec tests for full coverage.
 - Test HasParam_ for package type in type.c
 - Test Subst for private type in type.c.
 - Test For maltyped package type argument to private type in typecheck.c.
 - Test for Maltyped arg type to private type in typecheck.c.
 - Test for funny characters in StringLit in c.c
 - Test for main .fble file not found somehow? load.c
 - Test for builtin module with builtin dependencies? load.c
* Add test and fix for this case:
 1. We load builtin A, which loads dependent builtin B
 2. We load .fble C, which depends on builtin B
 At what point do we check and load the type information for B?


* Use a special ref value instead of NULL to represent undefined values?

* Fbld Language
 - modularity
 - Better support for structs in fbld language, so its easier to write decent
   performing fbld code.
 - Have an 'if' primitive instead of 'ifeq' and 'ifneq'?
 - The @plain builtin is really strange. I had trouble coming up with a test
   case for it. Consider if there's some way we can get rid of that or make it
   more sensible.
 - Clarify in spec if @if[a@x][b@x] ... is an error or not.
   Or redesign semantics of fbld to avoid that question entirely.

* Implement a custom debugger for fble
 - That works on all backends.
 - That supports single step through code.
 - That supports field access.

* Modular compilation
 - Add option for loading modules from .so files?
 - Have fble-stdio check that the function has the right type?
 - Load minimum dependencies needed for type checking when possible?

* Consider removing higher order kinds from the language.
  Make everything either kind @ or %. What would we lose?

* Fbld C implementation
 - Change FbldMarkup type to more explicitly distinguish between the different
   kinds of markups.
 - Figure out how to associate a location with empty markup.
 - Avoid constructing markups with singleton sequences?

Tutorials:
* C API, once it is stable enough.
* Add exercises to exercise each main point in every tutorial.
* /App/App%
* /Core/Test%

* Figure out why building with ninja from the source directory ends up
  building all the tests. And fix that somehow.

* fble-pprof doesn't work on windows because read isn't binary by default.
  Add an option to open? Coerce everything to binary, including stdio?

* Figure out how to add an fble-pprof benchmark to fble-benchmark?
  Either via support for pure embedded files, or IO in the benchmarks.

