
@ Bit@ = /Digits%.Bit@;
% Bit = /Digits%.Bit;
% BitStr = /Digits/String%.BitStr;

<@>@ List@ = /List%.List@;
<@>% List = /List%.List;
<@>% Cons = /List%.Cons;

# LFSR@ --
#   State for a linear feedback shift register using xor as the linear
#   function.
#
# Fields:
#   c - List of N coefficients, highest order coefficient first.
#   s - List of N bits of state, with the output (most significant) bit first.
@ LFSR@ = *(List@<Bit@> c, List@<Bit@> s);

# Prod --
#   Compute the element wise product of bits in the given lists.
(List@<Bit@>, List@<Bit@>) { List@<Bit@>; }
Prod = (List@<Bit@> a, List@<Bit@> b) {
  a.?(nil: a);

  List@<Bit@> tail = Prod(a.cons.tail, b.cons.tail);
  Cons<Bit@>(a.cons.head.?(0: Bit.0, 1: b.cons.head), tail);
};

# Sum --
#   Compute the sum over all bits in the given list.
(List@<Bit@>) { Bit@; } Sum = (List@<Bit@> xs) {
  xs.?(nil: Bit.0);
  Bit@ head = xs.cons.head;
  Bit@ tail = Sum(xs.cons.tail);
  head.?(0: tail, 1: tail.?(0: Bit.1, 1: Bit.0));
};

# ShiftIn --
#   Shift bit i into the given state.
(List@<Bit@>, Bit@) { List@<Bit@>; }
ShiftIn = (List@<Bit@> s, Bit@ i) {
  List@<Bit@> tail = s.cons.tail;
  tail.?(nil: List<Bit@>[i]);
  Cons<Bit@>(tail.cons.head, ShiftIn(tail, i));
};

<@>@ Shifted@ = <@ T@> { *(LFSR@ lfsr, T@ output); };

# Shift --
#   Shift the LFSR.
(LFSR@) { Shifted@<Bit@>; } Shift = (LFSR@ lfsr) {
  List@<Bit@> bits = Cons<Bit@>(Bit.1, Prod(lfsr.c, lfsr.s));
  @(lfsr: LFSR@(lfsr.c, ShiftIn(lfsr.s, Sum(bits))),
    output: lfsr.s.cons.head);
};

# Init --
#   Initialize an LFSR with the given taps.
(List@<Bit@>) { LFSR@; } Init = (List@<Bit@> taps) {
  # We take the taps as the initial seed, because it is convenient.
  LFSR@(taps, taps);
};

# LFSRs -- 
#   A collection of LFSRs using primitive polynomials (from wikipedia).
#
# LFSRs.n has period 2^n - 1.
% LFSRs = @(
  8: Init(BitStr|10111000)
);

@(LFSR@, Shifted@, LFSRs, Shift);
