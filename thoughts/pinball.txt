Pinball Game
============

There are so many different games we could redo as a pinball game. For
example:
* skiball
* bowling
* breakout
* space invaders
* soccer
* platformer, like mario brothers or celeste
* Air hockey.

Initial proposal:
* Have a half court with sloping sides and paddles with a single object at the
  top of the screen that goes back and forth left and right in a fixed
  pattern. You have a score multiplier. Hit the object, you score the number
  of points on the score multiplier and double the score multiplier. Hit the
  ceiling you reset the score multiplier to 1. The game ends when the ball
  drops down the drain.

  Ideally we can print a score on the screen and keep track of high score and
  all that stuff. No fancy graphics required.

Current challenge:
* With just a ball and fixed edges, it's going way too slow. Averaging 4
  frames per second. We want to get it up to 60 frames per second. So let's do
  some profiling to figure out what's up.

Without looking at profiles yet, what I expect is:
* Maybe collision detection is expensive, given the performance seems tied
  directly to the number of edges in the screen. Maybe we can add a fast path
  cutout?
* Maybe drawing the circle every frame. We could just cache the drawing and
  translate it instead?

* Making a compiled version of pinball helps a bit.

Pinball app benchmark profile says:
* 70% of the time is spent drawing the triangles for the edges.

Let's fix that. Maybe it's finally time to add the optimization of drawing
triangles that are tall and skinny.

Actually, no need to redraw the triangles. Do the background drawing once and
reuse it.

---

The next performance issue is the rational arithmetic, mostly Add and Sub for
Rat@, which involves calls to /Int/Int%.Mul. Those multiplications account for
70% of the time now.

Perhaps this is because we introduced 3/5, 4/5 as rational numbers and we
don't reduce Rat@, so the denominator goes up and up and up leading to large
multiplications?

---

Reducing Rat@ made a big difference. That fixed the issue with integer
multiplication taking up all the time.

Setting restitution to 1 so that the ball bounces forever, it's starting to
look pretty good, except that there is a pause every time we collide with an
edge.

