Garbage Collection
==================
Continued from derefvalue.txt discussion.

My goals here are:
* Write down in detail the invariants for GC.
* Fix whatever GC bug I'm currently running into.
* Fix the generation id leak issue.

Question: should max_gen be inclusive or not? 'max_gen' sounds like inclusive,
but current implementation is exclusive. If we want it to be exclusive, feels
like it should be named something like 'next_gen_id', or 'free_gen_id'?
'max_gen' sounds more descriptive. Let's change it to be inclusive.

We have a stack of frames. Each frame has:
* min_gen (inclusive)
  Objects with obj.gen < frame.min_gen are owned by the caller frame. Used to
  prevent traversal of objects owned by callers.
* reserved_gen (exclusive)
  A generation id x in [min_gen, reserved_gen) is gauranteed to be unused by
  any object reachable from this frame. Used to pick a generation id
  gauranteed to be different from all object.gen ids on the current frame.
* gen
  Objects with obj.gen = frame.gen are owned by the frame and belong on the
  'alloced' list for the frame. Used to track which objects have been visited
  by GC traversal so far.
* max_gen (inclusive)
  An upper bound on the largest generation id reachable from this frame. Used
  to pick a generation id gauranteed to be different from all object.gen ids on
  the current frame.

We have: min_gen <= reserved_gen <= gen <= max_gen

A frame has three lists of objects:
* alloced
  Objects owned by the frame that have been traversed by gc. They have
  object.gen = frame.gen.
* marked
  Objects that have been visited, but not yet traversed by GC.
  obj.gen is in [min_gen, max_gen], but not equal to gen and not in
  [min_gen, reserved_gen).
* unmarked
  Objects that have not yet been visited by GC.
  obj.gen is in [min_gen, max_gen], but not equal to gen and not in
  [min_gen, reserved_gen).

An object in unmarked is reachable if and only if it is reachable from an
object in 'marked' without going through an object in 'alloced'. If 'marked'
is empty, then all objects in 'unmarked' are unreachable.

Initial state:
  Single frame with min_gen = reserved_gen = gen = max_gen = 0.

Push Frame:
  Push a new frame with min_gen = reserved_gen = gen = max_gen = caller.gen + 1.
  We can use caller.gen + 1 instead of caller.max_gen + 1 because GC happens
  in caller frames before callee frames.

Pop Frame:
  Move return value to caller.marked.
  Move callee.alloced, callee.marked, and callee.unmarked to caller.unmarked.
  Set caller.max_gen = MAX(caller.max_gen, callee.max_gen).

Compact Frame:
  Pick a free gen_id. If reserved_gen > min_gen, use reserved_gen and
  decrement it. Otherwies use max_gen + 1 and increment max_gen.

  Move save objects to marked, everything else to unmarked.

Ref Value Assigment:
  No special anything is needed for handling of ref value assignments.
  At the time of assignment, both the ref and value are independently
  reachable. When PopFrame or CompactFrame is called, a new gen will be used
  different from any in the cycle of the assigned value. No worries about
  failure to traverse anything.

GC:
  At the start of GC, take a snapshot of marked and unmarked from the frame.
  Set frame.max_gen to frame.gen, and frame.reserved_gen to frame.gen-1.
 
Corner cases, and why we don't have to worry about them:

1. GC snapshot between RefValue create and RefValue assign
  The concern is we could end up pulling the RefValue's value from a new gen
  to whatever stale gen GC is pulling things to. But that's fine, because the
  RefValue's value is reachable from somewhere independent of the RefValue. It
  will stay alive due to that and whatever traversal ends up visiting it there.

2. Somehow GC traversal gets a reference to a current callee frame.
  I don't think this is possible, but even if it was, if we can reference a
  value in a callee frame from a caller frame, there's no harm pulling that
  value directly into the caller frame. It will need to end up there
  eventually.

3. Interrupted GC returns a value allocated after GC started.
  Maybe there were multiple compactions that have happened since GC started,
  for example. The important thing is if there are any objects on gc
  'unmarked' that are reachable only from this value, we need to make sure we
  keep this value in the GC. That should be fine.
  
Sounds like a plan. Let's try implementing it and see what all goes horribly
wrong.

First thing gone wrong: We've freed an object that is still reachable. Bummer.
How did that happen? I have to check my 'marked' and 'unmarked' list for GC?
Or maybe we polluted the generation id?

There are a few ways to go about debugging this:
1. Review the code. See where I might be violating the invariant that if an
object in unmarked is reachable, it's reachable through some marked object in
that same frame.
2. Look in the debugger at what the state of GC and frames and ids, etc.

Let's start with (1).

Invariant: If an object in unmarked is reachable, it's reachable through some
marked object in that same frame.

* MarkRef - Moves dst from unmarked to marked. Sounds safe.
* IncrGc - Takes a ref off of marked, but marks all outgoing references from
  it. That should be safe.
* IncrGc if gc was interrupted - Moves to unmarked. It might not be reachable
  anymore, right? What happens in that case?
  TODO: Review interupted GC case.
* Resurrection: If we resurrect an object from one frame to another, is that
  bad? Again, it's the interrupted GC case, right?

Here's the object pointing to the prematurely freed object:

$2 = {h = {gc = {list = {next = 0x40541778, prev = 0x40541778}, gen = 4},
stack = {
      gc = 0x40541778, frame = 0x40541778}}, tag = STRUCT_VALUE, loc =
GC_ALLOC,
  traversing = false}

And the GC:

$3 = {min_gen = 3, gen = 4, frame = 0x404201d8, next = 0x40420250, marked =
{next = 0x405304c8,
    prev = 0x405304c8}, unmarked = {next = 0x405304d8, prev = 0x405304d8},
interrupted = false,
  save = {size = 5, xs = 0x40541cc8}, free = {next = 0x40530500, prev =
0x40530500}}

This is interesting:

gc 4, 6
0000019264669C48 -> 000001926462E778
000001926462E778 -> 0000000000000083
000001926462E778 -> 0000491B00D081EB
000001926462E778 -> 0000000000000003
gc 3, 3
gc 3, 4
free 000001926462E778
free 0000019264669C48
000001926462E598 -> 0000000000000003
000001926462E598 -> 0000000000000083
000001926462E598 -> 0000019264669C48

When we were doing gc 4, 6, we clearly thought 0000019264669C48 was
reachable, because we are marking it. We gc 3, 3 and get nothing? But then we
do gc 3, 4, traverse nothing, and 0000019264669C48 is unmarked?

Okay, with more debugging, I think we can start to make sense of what's
going on here.

We are prematurely freeing 000001BA95B6A418, which is reachable from
000001BA95B2EA18. 000001BA95B2EA18 was saved from compaction which interrupted
gc. Then we compacted again. We never once tried traversing that object. We
freed what it pointed to. Then we resurrected it.

If I'm calling compact saving an object, that object is clearly reachable. I
definately should be traversing it before collecting things. Is it that the
compaction pulled it off the 'marked' list for the ongoing GC, so we didn't
have a chance to traverse it?

What should have happened here is I should have moved 000001BA95B2EA18 to
gc.marked when we compacted the frame, but it looks like I didn't. Can I
figure out why?

Okay, I see the problem. CompactFrame happens, saving 0000023DDC80E898. This
interrupts the current GC. We pull 0000023DDC80E898 to gc.marked. Then compact
frame is called again on that same value. That pulls the object out from
gc.marked to heap->top->marked. But you can't do that, because now the
gc.unmarked objects aren't reachable anymore.

I feel like this wouldn't be an issue if we didn't have gc operate on a
different copy of marked/unmarked. Because of having different copies, we have
no way to know when compacting or returning a value which marked list to go
on. Can I avoid that copy somehow?

We make a copy and have special support for interrupted GC to avoid throwing
away GC work. Are there any decent alternatives? The fear is that GC will grow
and grow and will kept getting interupted by compact frame in a tight loop.

Either I get rid of the copy, or I have a good way of tracking which copy the
object is on when we pop/compact it.

---

A few thoughts here:
* Why didn't the second compaction in the example above count as interrupted
  GC? Wasn't it supposed to? Shouldn't that have saved us?
* I should be able to write a spec memory test that shows what happens when GC
  is constantly interrupted.
* If we can't properly tell which objects are on the frame marked/unmarked
  versus the GC marked/unmarked, GC might never be able to finish because we
  keep adding more work to it any time we compact.

Maybe there's a more basic problem here. Pop frame compares value->h.gc.gen
against top->min_gen. But the way I'm doing things now, value could be from an
older generation. We haven't done GC on it yet to move it to the right place,
but we are deciding when we do the pop if we own it or not.

Okay. Yes. That's a clear bug. Nothing to do with interrupted GC. Seems like
my generation handling is messed up. We need to maintain at all times, not
just at time of GC, that all objects owned by caller have gen less than
callees min_gen.

What does this mean for recovering generation ids? I think we are okay there.
Because it happens on compact, we can't mix up objects from different frames.

---

I think the big issue with GC is if we unintentionally remove an object from
its marked/unmarked set. If it was marked and references anything from
unmarked, we are screwed.

The only real way I see to properly track which marked/unmarked set an object
belongs to is by tracking min/max gen for every marked/unmarked set, and have
those be disjoint (with some special handling for the GC marked/unmarked set).

I propose the following:
* For frame marked/unmarked sets, we say an object can only exist in the
  marked/unmarked set if its generation is >= min_gen and < max_gen for the
  frame.
* Every frame must have disjoint min/max gens.
* The GC marked/unmarked set has its own min/max gen, which has priority over
  the frame it is doing GC for.

To uniquely determine the marked/unmarked set for an object:
1. Check if it is in the GC min/max range. If so, it's in the GC
marked/unmarked set.
2. Find the frame whose min/max range it belongs to. It's in that frame's
marked/unmarkedset.

All of which feels more like my original GC algorithm. I think this was a
valient effort to improve GC, and I learned a lot, but I want to go back to
how things were before, fix the bugs with my new understanding, then consider
making minor tweaks and improvements to see if we can claim back some gen ids.

The key ideas for claiming back gen ids:
* At the end of gc for a frame, you know the GC min/max range, except for
  GC.gen, is unused. You can freely reallocate parts of range to the caller or
  callee. For example, maybe we did GC on gen 20 to 24, caller owns 20 to 24,
  callee owns 25 to 30. At the end of GC, if gen is '20', then we could make
  it so that caller owns 20 to 20, callee owns 21 to 30.
* If callee returns a packed value or a GC value that the caller owns, then
  there is no need to charge its max gen to the caller.
* If we wanted to, we could re-label the alloc gen by moving all alloc to
  marked and setting a new gen.

But worry about that later. Let's get things working first.

Step 1: revert the GC logic back to how it was before.

