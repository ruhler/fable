# Nat% --
#   Definition of natural numbers used for memory tests.

@ Unit@ = *();
Unit@ Unit = Unit@();

@ Bit@ = +(Unit@ 0, Unit@ 1);
% Bit = @(0: Bit@(0: Unit), 1: Bit@(1: Unit)); 

@ BitS@ = +(BitP@ cons, Unit@ nil),
@ BitP@ = *(Bit@ msb, BitS@ tail);

(Bit@, BitS@){BitS@;} BitP = (Bit@ msb, BitS@ tail) {
  BitS@(cons: BitP@(msb, tail));
};

(BitS@){ *(BitS@ x, Bit@ overflow); } Decr = (BitS@ s) {
  ?(s;
     cons: {
       % d = Decr(s.cons.tail);
       ?(d.overflow;
          0: @(x: BitP(s.cons.msb, d.x), overflow: Bit.0),
          1: ?(s.cons.msb;
                0: @(x: BitP(Bit.1, d.x), overflow: Bit.1),
                1: @(x: BitP(Bit.0, d.x), overflow: Bit.0)));
     },
     nil: @(x: s, overflow: Bit.1)
  );
};

@ Nat@ = BitS@;
@ S@ = +(Unit@ Z, Nat@ S);

(Nat@) { S@; } S = (Nat@ n) {
  % d = Decr(n);
  ?(d.overflow; 0: S@(S: d.x), 1: S@(Z: Unit));
};

@(Nat@, S@, S);
