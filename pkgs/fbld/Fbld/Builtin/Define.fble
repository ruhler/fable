
% IsSpace = /Core/Char/Type%.IsSpace;

@ Int@ = /Core/Int%.Int@;
Int@ 0 = /Core/Int%.0;
Int@ 1 = /Core/Int%.1;
Int@ 2 = /Core/Int%.2;
Int@ 3 = /Core/Int%.3;
Int@ 4 = /Core/Int%.4;


<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Split = /Core/List/Eq%.Split;
<@>% Length = /Core/List/Length%.Length;
<@>% Get = /Core/List/Length%.Get;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Unit@ = /Core/Unit%.Unit@;

@ Impl@ = /Fbld/Markup%.Impl@;
% Append = /Fbld/Markup%.Append;

@ Env@ = /Fbld/Env%.Env@<Impl@>;
% Insert = /Fbld/Env%.Insert<Impl@>;
% Lookup = /Fbld/Env%.Lookup<Impl@>;
% Delete = /Fbld/Env%.Delete<Impl@>;

% Eval = /Fbld/Eval%.Eval;
% Evals = /Fbld/Eval%.Evals;
% AssertArgCount = /Fbld/Eval%.AssertArgCount;

@ Markup@ = /Fbld/Markup%.Markup@;
@ Command@ = /Fbld/Markup%.Command@;
% ToString = /Fbld/Markup%.ToString;

% r = /Fbld/Result%.Monad;

(Markup@) { Impl@; } VarImpl = (Markup@ markup, Env@ _, Command@ cmd) {
  Unit@ _ <- r.do(AssertArgCount(0, cmd));
  r.return(markup);
};

(Env@, List@<String@>, List@<Markup@>) { Env@; }
DefArgs = (Env@ env, List@<String@> params, List@<Markup@> args) {
  params.?(nil: env);
  DefArgs(Insert(env, params.cons.head, VarImpl(args.cons.head)),
    params.cons.tail, args.cons.tail);
};

(Env@, List@<String@>) { Env@; }
DelArgs = (Env@ env, List@<String@> params) {
  params.?(nil: env);
  DelArgs(Delete(env, params.cons.head), params.cons.tail);
};

(Env@, Markup@) { Markup@; }
PreLookup = (Env@ env, Markup@ markup) {
  markup.?(
    empty: markup,
    plain: markup,
    command: {
      /Core/String/Eq%.Eq(Str|'define', markup.command.name.text).?(true: {
        # Avoid doing prelookup in the body of @define, in case it references
        # the new function being defined.
        markup;
      });

      /Core/String/Eq%.Eq(Str|'let', markup.command.name.text).?(true: {
        # Avoid doing prelookup in the body of @let, in case it references
        # the new value being defined.
        markup;
      });

      List@<Markup@> args = PreLookups(env, markup.command.args);
      Maybe@<Impl@> impl = {
        markup.command.impl.?(just: markup.command.impl);
        Lookup(env, markup.command.name.text);
      };
      Markup@(command: markup.command.@(impl, args));
    },
    sequence: {
      Markup@ a = PreLookup(env, markup.sequence.a);
      Markup@ b = PreLookup(env, markup.sequence.b);
      Append(a, b);
    });
},
(Env@, List@<Markup@>) { List@<Markup@>; }
PreLookups = (Env@ env, List@<Markup@> markups) {
  markups.?(nil: markups);
  Markup@ head = PreLookup(env, markups.cons.head);
  List@<Markup@> tail = PreLookups(env, markups.cons.tail);
  Cons(head, tail);
};

Impl@ Define = (Env@ env, Command@ cmd) {
  Unit@ _ <- r.do(AssertArgCount(4, cmd));

  String@ name <- r.do({
    Markup@ arg = Get(cmd.args, 0);
    Markup@ evaled <- r.do(Eval(env, arg));
    ToString(evaled);
  });

  List@<String@> params <- r.do({
    Markup@ arg = Get(cmd.args, 1);
    Markup@ evaled <- r.do(Eval(env, arg));
    String@ list <- r.do(ToString(evaled));
    r.return(Split(list, IsSpace));
  });

  Markup@ def = Get(cmd.args, 2);

  Impl@ impl = (Env@ e, Command@ c) {
    Unit@ _ <- r.do(AssertArgCount(Length(params), c));

    List@<Markup@> args <- r.do(Evals(e, c.args));
    Eval(DefArgs(nenv, params, args), prepped);
  },
  Env@ nenv = Insert(env, name, impl),
  Markup@ prepped = PreLookup(DelArgs(Insert(env, name, impl), params), def);

  Markup@ body = Get(cmd.args, 3);
  Eval(nenv, body);
};

Impl@ Let = (Env@ env, Command@ cmd) {
  Unit@ _ <- r.do(AssertArgCount(3, cmd));

  String@ name <- r.do({
    Markup@ arg = Get(cmd.args, 0);
    Markup@ evaled <- r.do(Eval(env, arg));
    ToString(evaled);
  });

  Markup@ def <- r.do(Eval(env, Get(cmd.args, 1)));
  Env@ nenv = Insert(env, name, VarImpl(def));

  Markup@ body = Get(cmd.args, 2);
  Eval(nenv, body);
};

@(Define, Let);
