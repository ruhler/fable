
% True = /Core/Bool%.True;

@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Contains = /Core/List/Eq%.Contains;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;
<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<<@>@>@ App@ = /App/App%.App@;
<<@>@>@ Main@ = /App/App%.Main@;
@ Event@ = /App/App%.Event@;
@ Effect@ = /App/App%.Effect@;

@ Drawing@ = /App/Drawing%.Drawing@;
@ Point@ = /App/Drawing%.Point@;
% Blank = /App/Drawing%.Blank;
% Color = /App/Drawing%.Color;
% Over = /App/Drawing%.Over;
% Triangle = /App/Drawing%.Triangle;
% Rect = /App/Drawing%.Rect;
% Affine = /App/Drawing%.Affine;
% Drawings = /App/Drawing%.Drawings;
% Translate = /App/Drawing%.Translate;


@ Num@ = /Pinball/Num%.Num@;
% Floor = /Pinball/Num%.Floor;
% Neg = /Pinball/Num%.Neg;
% Div = /Pinball/Num%.Div;
% Int = /Pinball/Num%.Int;

@ Ball@ = /Pinball/Ball%.Ball@;

% Circle = /Pinball/Circle%.Circle;

@ Edge@ = /Pinball/Edge%.Edge@;
% Edge = /Pinball/Edge%.Edge;

@ Paddle@ = /Pinball/Paddle%.Paddle@;
% Paddle = /Pinball/Paddle%.Paddle;

% Rotate = /Pinball/Rotate%.Rotate;

@ World@ = /Pinball/World%.World@;
% Tick = /Pinball/World%.Tick;

@ Vec@ = /Pinball/Vec%.Vec@;
% AddV = /Pinball/Vec%.AddV;
% RotateFrom = /Pinball/Vec%.RotateFrom;

(Vec@) { Point@; } Point = (Vec@ a) {
  Point@(Floor(a.x), Floor(a.y));
};

Num@ 0 = Int|0;
Num@ '-2' = Neg(Int|2);

# Radius --
#   The radius of the ball.
Num@ Radius = Int|8;

Num@ PaddleVelocity = Div(Int|1, Int|4);

Num@ R = Div(Int|4, Int|8);
Num@ R_BUMPER = Div(Int|10, Int|8);

(Num@, Num@) { Paddle@; } LeftPaddle = (Num@ vel, Num@ pos) {
  Paddle(
    Vec@(Neg(Int|80), Neg(Int|172)),
    Vec@(Neg(Int|80), Neg(Int|172)),
    Vec@(Neg(Int|10), Neg(Int|172)),
    vel, pos, Neg(Div(Int|1, Int|2)), Div(Int|1, Int|2), R);
};

(Num@, Num@) { Paddle@; } RightPaddle = (Num@ vel, Num@ pos) {
  Paddle(
    Vec@(Int|80, Neg(Int|172)),
    Vec@(Int|10, Neg(Int|172)),
    Vec@(Int|80, Neg(Int|172)),
    vel, pos, Neg(Div(Int|1, Int|2)), Div(Int|1, Int|2), R);
};

World@ Initial = World@(
  Vec@(Int|0, Neg(Div(Int|2, Int|8))),
  Ball@(Vec@(Int|0, Int|0), Vec@(Neg(Div(Int|1, Int|2)), Int|0), Radius),
  List<Edge@>[
    # Slopes
    Edge(Vec@(Int|80, Neg(Int|172)), Vec@(Int|144, Neg(Int|108)), R),
    Edge(Vec@(Neg(Int|144), Neg(Int|108)), Vec@(Neg(Int|80), Neg(Int|172)), R),

    # Side walls
    Edge(Vec@(Neg(Int|144), Int|140), Vec@(Neg(Int|144), Neg(Int|108)), R),
    Edge(Vec@(Int|144, Neg(Int|108)), Vec@(Int|144, Int|140), R),

    # Upper corners
    Edge(Vec@(Neg(Int|80), Int|204), Vec@(Neg(Int|144), Int|140), R),
    Edge(Vec@(Int|144, Int|140), Vec@(Int|80, Int|204), R),

    # Ceiling
    Edge(Vec@(Int|80, Int|204), Vec@(Neg(Int|80), Int|204), R),

    # Center Bumber
    Edge(Vec@(Neg(Int|20), Int|80), Vec@(Int|0, Int|100), R_BUMPER),
    Edge(Vec@(Int|0, Int|100), Vec@(Int|20, Int|80), R_BUMPER),
    Edge(Vec@(Int|20, Int|80), Vec@(Int|0, Int|60), R_BUMPER),
    Edge(Vec@(Int|0, Int|60), Vec@(Neg(Int|20), Int|80), R_BUMPER),

    # Center-Left Bumber
    Edge(Vec@(Neg(Int|60), Int|130), Vec@(Neg(Int|40), Int|150), R_BUMPER),
    Edge(Vec@(Neg(Int|40), Int|150), Vec@(Neg(Int|20), Int|130), R_BUMPER),
    Edge(Vec@(Neg(Int|20), Int|130), Vec@(Neg(Int|40), Int|110), R_BUMPER),
    Edge(Vec@(Neg(Int|40), Int|110), Vec@(Neg(Int|60), Int|130), R_BUMPER),

    # Center-Left-Left Bumber
    Edge(Vec@(Neg(Int|100), Int|80), Vec@(Neg(Int|80), Int|100), R_BUMPER),
    Edge(Vec@(Neg(Int|80), Int|100), Vec@(Neg(Int|60), Int|80), R_BUMPER),
    Edge(Vec@(Neg(Int|60), Int|80), Vec@(Neg(Int|80), Int|60), R_BUMPER),
    Edge(Vec@(Neg(Int|80), Int|60), Vec@(Neg(Int|100), Int|80), R_BUMPER),

    # Center-Right Bumber
    Edge(Vec@(Int|20, Int|130), Vec@(Int|40, Int|150), R_BUMPER),
    Edge(Vec@(Int|40, Int|150), Vec@(Int|60, Int|130), R_BUMPER),
    Edge(Vec@(Int|60, Int|130), Vec@(Int|40, Int|110), R_BUMPER),
    Edge(Vec@(Int|40, Int|110), Vec@(Int|20, Int|130), R_BUMPER),

    # Center-Right-Right Bumber
    Edge(Vec@(Int|60, Int|80), Vec@(Int|80, Int|100), R_BUMPER),
    Edge(Vec@(Int|80, Int|100), Vec@(Int|100, Int|80), R_BUMPER),
    Edge(Vec@(Int|100, Int|80), Vec@(Int|80, Int|60), R_BUMPER),
    Edge(Vec@(Int|80, Int|60), Vec@(Int|60, Int|80), R_BUMPER)
  ],
  List[
    LeftPaddle(Neg(PaddleVelocity), Int|0),
    RightPaddle(PaddleVelocity, Int|0)
  ]
);

(Edge@) { Drawing@; } DrawEdge = (Edge@ edge) {
  Vec@ e = RotateFrom(edge.dir, Vec@(Int|0, Neg(Int|2)));
  Point@ a = Point(edge.start);
  Point@ b = Point(AddV(edge.start, e));
  Point@ c = Point(edge.end);
  Point@ d = Point(AddV(edge.end, e));
  Drawings[
    Triangle(a, b, c, Color.Green),
    Triangle(c, b, d, Color.Green)
  ];
};

(Paddle@) { Drawing@; } DrawPaddle = (Paddle@ paddle) {
  Vec@ start = AddV(paddle.center, Rotate(paddle.start, paddle.pos));
  Vec@ end = AddV(paddle.center, Rotate(paddle.end, paddle.pos));
  Vec@ e = Rotate(Vec@(0, '-2'), paddle.pos);
  Point@ a = Point(start);
  Point@ b = Point(AddV(start, e));
  Point@ c = Point(end);
  Point@ d = Point(AddV(end, e));
  Drawings[
    Triangle(a, b, c, Color.Green),
    Triangle(c, b, d, Color.Green)
  ];
};

Drawing@ Background = {
  /Core/List%.ForEach(Initial.edges, Blank, (Edge@ e, Drawing@ d) {
    Over(d, DrawEdge(e));
  });
};

Drawing@ DrawnBall = Circle(Point@(Floor(Int|0), Floor(Int|0)), Floor(Radius), Color.Cyan);

(World@) { Drawing@; } Draw = (World@ world) {
  Point@ ball = Point(world.ball.pos);
  /Core/List%.ForEach(
    world.paddles,
    Over(Background, Translate(ball.x, ball.y, DrawnBall)),
    (Paddle@ paddle, Drawing@ d) {
      Over(d, DrawPaddle(paddle));
    });
};

(Num@, World@) { World@; } SetLeftPaddleVelocity = (Num@ v, World@ w) {
  Paddle@ l = w.paddles.cons.head;
  Paddle@ r = w.paddles.cons.tail.cons.head;
  World@(w.gravity, w.ball, w.edges, List[LeftPaddle(v, l.pos), r]);
};

(Num@, World@) { World@; } SetRightPaddleVelocity = (Num@ v, World@ w) {
  Paddle@ l = w.paddles.cons.head;
  Paddle@ r = w.paddles.cons.tail.cons.head;
  World@(w.gravity, w.ball, w.edges, List[l, RightPaddle(v, r.pos)]);
};

Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio, App@<M@> app, Int@ width, Int@ height, List@<String@> args) {
  % O = /Core/Stream/OStream%(m);

  Contains(/Core/String/Eq%.Eq, args, Str|'--help').?(true: {
    Unit@ _ <- m.do(O.PutStr(stdio.out, /Pinball/Usage%));
    m.return(True);
  });

  M@<Event@> GetInput = app.event;

  Point@ a = @(x: Floor(Int|1), y: Floor(Neg(Int|1)));
  Point@ b = @(x: Floor(Int|320), y: Floor(Int|240));

  (World@) { M@<Unit@>; } Output = (World@ s) {
    app.effect(Effect@(draw: Over(
      Rect(Floor(0), Floor(0), width, height, Color.Black),
      Affine(a, b, Draw(s)))));
  };

  (M@<Unit@>, World@) { M@<Unit@>; }
  Run = (M@<Unit@> tick, World@ world) {
    Event@ e <- m.do(GetInput);

    e.?(tick: {
      Unit@ _ <- m.do(tick);
      Unit@ _ <- m.do(Output(world));
      Run(tick, Tick(world));
    });

    e.?(key_down: {
      e.key_down.?(q: m.return(Unit));
      e.key_down.?(s: Run(tick, Initial));
      e.key_down.?(lshift: {
        Run(tick, SetLeftPaddleVelocity(PaddleVelocity, world));
      });
      e.key_down.?(rshift: {
        Run(tick, SetRightPaddleVelocity(Neg(PaddleVelocity), world));
      });
      Run(tick, world);
    });

    e.?(key_up: {
      e.key_up.?(lshift: {
        Run(tick, SetLeftPaddleVelocity(Neg(PaddleVelocity), world));
      });
      e.key_up.?(rshift: {
        Run(tick, SetRightPaddleVelocity(PaddleVelocity, world));
      });
      Run(tick, world);
    });

    Run(tick, world);
  };

  Int@ frame_period = Floor(Int|16);
  M@<Unit@> tick = app.effect(Effect@(tick: frame_period));

  Unit@ _ <- m.do(app.effect(Effect@(tick: Floor(0))));
  Unit@ _ <- m.do(Run(tick, Initial)); 
  m.return(True);
};

Main;
