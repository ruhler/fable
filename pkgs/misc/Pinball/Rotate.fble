
@ Num@ = /Pinball/Num%.Num@;
% Add = /Pinball/Num%.Add;
% Sub = /Pinball/Num%.Sub;
% Neg = /Pinball/Num%.Neg;
% Mul = /Pinball/Num%.Mul;
% Div = /Pinball/Num%.Div;
% Eq = /Pinball/Num%.Eq;
% Gt = /Pinball/Num%.Gt;
% Lt = /Pinball/Num%.Lt;
% Abs = /Pinball/Num%.Abs;
% Int = /Pinball/Num%.Int;

@ Vec@ = /Pinball/Vec%.Vec@;
% Magnitude = /Pinball/Vec%.Magnitude;

Num@ 0 = Int|0;
Num@ 2 = Int|2;
Num@ π = Div(Int|355, Int|113);
Num@ 2π = Mul(π, 2);
Num@ 'π/2' = Div(π, 2);

# RotateS -
#   Rotate vector (m, 0) by an angle in radians.
(Num@, Num@) { Vec@; } RotateS = (Num@ m, Num@ a) {
  Eq(0, m).?(true: Vec@(m, m));

  # Put angle in range [0, ∞)
  Lt(a, 0).?(true: {
    Vec@ r = RotateS(m, Neg(a));
    Vec@(r.x, Neg(r.y));
  });

  # Put angle in range [0, 2π]
  Gt(a, 2π).?(true: RotateS(m, Sub(a, 2π)));

  # Put angle in range [0, π]
  Gt(a, π).?(true: {
    Vec@ r = RotateS(m, Sub(a, π));
    Vec@(Neg(r.x), Neg(r.y));
  });

  # Put angle in range [0, π/2]
  Gt(a, 'π/2').?(true: {
    Vec@ r = RotateS(m, Sub(a, 'π/2'));
    Vec@(Neg(r.y), r.x);
  });

  # Approximation: we draw a line from (0, 2m) to (2m, 0), pick a point on
  # that line that is 2a/π of the way along that line, then normalize the
  # resulting point.
  Num@ f = Div(Mul(a, 2), π);
  Num@ 2m = Mul(m, 2);
  Num@ y = Mul(f, 2m);
  Num@ x = Sub(2m, y);
  Num@ d = Magnitude(Vec@(x, y));
  Vec@(Div(Mul(Abs(m), x), d), Div(Mul(Abs(m), y), d));
};

# Rotate --
#   Rotate a vector by an angle in radians.
(Vec@, Num@) { Vec@; } Rotate = (Vec@ v, Num@ a) {
  Vec@ xr = RotateS(v.x, a);
  Vec@ yr = RotateS(v.y, a);
  Vec@(Sub(xr.x, yr.y), Add(xr.y, yr.x));
};

@(Rotate);
