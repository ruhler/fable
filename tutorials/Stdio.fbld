@tutorial Standard IO
 In this tutorial we'll learn how to write command line programs that interact
 with the environment.

 Until now we've been writing fble programs that use
 @L{/Core/Stdio/StringO%.Run} to output a string:

 @code[fble] @
   String@ output = Str|'hello, world';
   /Core/Stdio/StringO%.Run(output);

 The @L{/Core/Stdio%} library provides a more general interface for writing
 fble programs that allows you to access command line arguments, access
 standard input, output, and error streams, read and write files, read
 environment variables, and return an exit status.

 The @L{/Core/Stdio/IO%.Run} function takes a @L{Main@} function with the
 following type:

 @code[fble] @
  <<@>@>@ Main@ = <<@>@ M@>(Stdio@<M@>, Monad@<M@>, List@<String@>) { M@<Bool@>; };

 Here is an example hello world program using this more general interface:

 @code[fble] @
  # A hello world program using the Stdio@ interface.
  Main@ Main = <<@>@ M@>(Stdio@<M@> stdio, Monad@<M@> m, List@<String@> _args) {
    % O = /Core/Stream/OStream%(m);
    
    Unit@ _ <- m.do(O.PutLine(stdio.out, Str|'hello, world'));
    m.return(True);
  };

  /Core/Stdio/IO%.Run(Main);

 Let's break this down

 @section @L{<<@>@ M@>}
  The @L{Main@} function is polymorphic, parameterized by type @L{M@}. The
  first two arguments to the function are @L{m} and @L{stdio}, which are
  interfaces supported by the abstract type @L{M@}.

  This says your main function can be used with any type @L{M@} that
  implements the @L{Monad@} and @L{Stdio@} interfaces. The
  @L{/Core/Stdio/IO%.Run} function provides a concrete type of @L{M@} for use
  with the @l{fble-stdio} program.

  The reason @L{Main@} is polymorphic instead of hard coding the concrete type
  for @L{M@} provided by @L{/Core/Stdio/IO%.Run} is to make your main function
  more general than just for use with @l{fble-stdio}. For example, you can
  write test cases for your main function using a simulated environment.

 @section @L{Monad@<M@> m}
  The @L{Monad@<M@>} interface @L{m} provides a way to sequence operations.
  This is needed to have a well defined order of operations when interacting
  with input and output streams and files.

 @section @L{Stdio@<M@> stdio}
  The @L{Stdio@<M@>} interface is defined as follows:

  @code[fble] @
   <<@>@>@ Stdio@ = <<@>@ M@> { *(
     # stdin stream
     IStream@<M@> in,

     # stdout stream
     OStream@<M@> out,

     # stderr stream
     OStream@<M@> err,

     # Open the named file for reading.
     # Returns an input stream for reading. Nothing if unable to open the file.
     (String@) { M@<Maybe@<IStream@<M@>>>; } read,

     # Open the named file for writing.
     # Returns an output stream for writing. Nothing if unable to open the file.
     (String@) { M@<Maybe@<OStream@<M@>>>; } write,

     # Gets an environment variable value.
     (String@) { M@<Maybe@<String@>>; } getenv
   ); };
  
  The @L{IStream@} and @L{OStream@} are types for reading a sequence of bytes.
  The @L{Stdio@} interface represents bytes using the @L{Int@} type:

  @code[fble] @
   <<@>@>@ IStream@ = <<@>@ M@> { M@<Maybe@<Int@>>; };
   <<@>@>@ OStream@ = <<@>@ M@>(Int@) { M@<Unit@>; };

  The fields @L{in}, @L{out}, and @L{err} let you read and write standard
  input and output streams.

  The fields @L{read} and @L{write} let you open files for reading and writing
  respectively.

  The field @L{getenv} lets you access the value of an environment variable.

 @section @L{List@<String@> args}
  The @L{args} argument is the list of command line arguments passed when
  invoking the program. For example, if you ran your program as:

  @code[sh] @
   fble-stdio -p core -I . -m /Foo% -- hello there now

  Then the value of @L{args} would be:

  @code[fble] @
   List[Str|'hello', Str|'there', Str|'now']
 
 @section @L{M@<Bool@>;}
  The result of the @L{Main@} program has type @L{M@<Bool@>}. If you return
  @L{True} using @L{m.return(True)}, your program will have exit status 0.
  Otherwise your program will have exit status 1.

 @section Exercises
  @exercise
   Write an fble program that prints out a sorted list of the command line
   arguments passed to it.

  @exercise
   Write an fble program that outputs the length of a given file. Try passing
   the file via standard input and as a file path.

  @exercise
   Write an fble program that repeatedly prompts the user for a number and
   outputs the largest number input so far.
   
 @section Next Steps
  This completes this tutorial series on the fble language. You now understand
  all the fble language features and can write interesting programs that
  interact with the environment on the command line. Go forth now and program.
