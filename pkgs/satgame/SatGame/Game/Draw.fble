
@ Int@ = /Core/Int%.Int@;
% Incr = /Core/Int%.Incr;
% Decr = /Core/Int%.Decr;
% Add = /Core/Int%.Add;
% Sub = /Core/Int%.Sub;
% Mul = /Core/Int%.Mul;
% Gt = /Core/Int/Eq%.Gt;
% Lt = /Core/Int/Eq%.Lt;
@ QR@ = /Core/Int/Div%.QR@;
% Div = /Core/Int/Div%.Div;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
% Take = /Core/List/Length%.Take;
% Drop = /Core/List/Length%.Drop;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ Drawing@ = /App/Drawing%.Drawing@;
@ Color@ = /App/Drawing%.Color@;
% Color = /App/Drawing%.Color;
% Drawings = /App/Drawing%.Drawings;
% Rect = /App/Drawing%.Rect;
% Blank = /App/Drawing%.Blank;
% Translate = /App/Drawing%.Translate;

@ Game@ = /SatGame/Game%.Game@;
@ Group@ = /SatGame/Game%.Group@;
@ Tile@ = /SatGame/Game%.Tile@;
% Solved = /SatGame/Game%.Solved;

@ Params@ = /SatGame/Puzzle%.Params@;

Int@ VarWidth = Int|32;
Int@ TileWidth = Int|48;
Int@ GroupPad = Int|4;
Int@ VarShift = Div(Sub(TileWidth, VarWidth), Int|2).q;

@ Layout@ = *(
  Int@ cols,              # Number of group columns.
  Int@ rows,              # Number of rows.
  Int@ group_width,       # Width of a group, including one group pad.
  Int@ width,             # Total width.
  Int@ height             # Total height.
);

# Computes the best layout with at least the given number of columns.
(Int@, Params@) { Layout@; }
BestLayout = (Int@ cols, Params@ params) {
  Int@ rows = Div(Add(params.num_clauses, Decr(cols)), cols).q;
  Int@ group_width = Add(Mul(TileWidth, params.num_literals_per_clause), GroupPad);
  Int@ width = Add(Mul(cols, group_width), GroupPad);
  Int@ height = Add(Mul(rows, Add(TileWidth, GroupPad)), GroupPad);

  # Target an aspect ratio of 4/3
  Int@ 4w = Mul(Int|4, width);
  Int@ 3h = Mul(Int|3, height);
  Gt(3h, 4w).?(true: BestLayout(Incr(cols), params));

  @(cols, rows, group_width, width, height);
};

# Computes the layout for the given game parameters.
(Params@) { Layout@; } Layout = BestLayout(Int|1);

(Tile@) { Drawing@; }
Tile = (Tile@ tile) {
  Color@ bg_color = Color@(Int|208, Int|208, Int|208);
  Drawing@ bg = Rect(Int|0, Int|0, TileWidth, TileWidth, bg_color);

  Color@ fill_color = tile.state.?(
    normal: Color@(Int|0, Int|0, Int|0),
    selected: Color@(Int|0, Int|156, Int|0),
    dismissed: Color@(Int|172, Int|172, Int|172));

  Drawing@ v = /SatGame/Var/Draw%.Draw(tile.var, tile.pos, fill_color);
  Drawings[bg, Translate(VarShift, VarShift, v)];
};

(List@<Tile@>) { Drawing@; }
Group = (List@<Tile@> tiles) {
  tiles.?(nil: Blank);
  Drawing@ head = Tile(tiles.cons.head);
  Drawing@ tail = Group(tiles.cons.tail);
  Drawings[head, Translate(TileWidth, Int|0, tail)];
};

(Layout@, List@<Group@>) { Drawing@; }
Row = (Layout@ layout, List@<Group@> groups) {
  groups.?(nil: Blank);
  Drawing@ head = Translate(GroupPad, Int|0, Group(groups.cons.head));
  Drawing@ tail = Row(layout, groups.cons.tail);
  Drawings[head, Translate(layout.group_width, Int|0, tail)];
};

(Layout@, Game@) { Drawing@; }
Rows = (Layout@ layout, Game@ game) {
  game.?(nil: Blank);
  Drawing@ head = Translate(Int|0, GroupPad, Row(layout, Take(layout.cols, game)));
  Drawing@ tail = Rows(layout, Drop(layout.cols, game));
  Drawings[head, Translate(Int|0, Add(TileWidth, GroupPad), tail)];
};

# Draws a game.
#  @args[Layout@][layout] The pre-computed game layout.
#  @args[Game@][game] The game to draw.
(Layout@, Game@) { Drawing@; }
Draw = (Layout@ layout, Game@ game) {
  Color@ bg_color = Solved(game).?(
    true: Color@(Int|0, Int|156, Int|0),
    false: Color.Blue
  );
  Drawing@ background = Rect(Int|0, Int|0, layout.width, layout.height, bg_color);
  Drawing@ rows = Rows(layout, game);
  Drawings[background, rows];
};

@ TileIndex@ = *(Int@ group, Int@ tile);

# Returns the tile associated with the given (x, y) coordinate, if any.
(Layout@, Int@, Int@) { Maybe@<TileIndex@>; }
TileOf = (Layout@ layout, Int@ x, Int@ y) {
  QR@ row = Div(y, Add(TileWidth, GroupPad));
  Lt(row.r, GroupPad).?(true: Nothing<TileIndex@>);

  QR@ col = Div(x, layout.group_width);
  Lt(col.r, GroupPad).?(true: Nothing<TileIndex@>);

  Int@ group = Add(Mul(layout.cols, row.q), col.q);

  Int@ tile = Div(Sub(col.r, GroupPad), TileWidth).q;
  Just(TileIndex@(group, tile));
};

@(Layout@, Layout, Draw, TileIndex@, TileOf);
