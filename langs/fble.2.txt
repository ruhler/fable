Fable E
=======
Richard Uhler <ruhler@degralder.com>

1. Introduction
---------------
Fble is a general purpose, Turing-complete functional programming language
with support for concurrent processes.

1.1 Goals
---------
The primary design goals of fble are:

* Fble should be as simple a language as possible while still being useful.
  A simple language should hopefully be simple to specify, simple to learn,
  simple to understand, simple to program, powerful, and low cost to develop
  tools for.

* Fble should support high performance, low overhead computing. Primarily by
  having a very clear performance model that a developer can optimize for.

* Fble should be a joy to program in. It should be easy to describe the
  majority programs we want to describe, not tediously difficult. To
  accomplish this, fble is based on the assumption that functions can
  be declared locally with access to variables in the context where they are
  declared.

* Fble, or an extension thereof, should support programming at scale.

2. Language Overview
--------------------
TODO: talk about values, expressions, types, kinds and how they are all
related.

3. Structs
----------
A struct value is a grouping of other values. The items of a struct are
organized into a finite number of fields. Each field has a name, used to
identify the field, and a type, specifying the type of value for that field.

Struct values are constructed by supplying values for all fields of the
struct. Individual components of a struct can be accessed by field name.

3.1 Struct Type
---------------
Abstract Syntax:
  struct_type (fields :: [(Type, Name)])

Concrete Syntax:
  '*(' [type name [',' type name [...]]] ')'

Examples:
  *()                 is the Unit type
  *(Int x, Int y)     is the type of a pair of ints x, y.

Struct types are considered equal if their fields are equal.

3.2 Struct Value
----------------
Abstract Syntax:
  struct_value (type :: Type) (args :: [Expr])

Concrete Syntax:
  type '@' '(' [expr [',' expr [...]]] ')'

Example:
  Coord@(3, 5)

3.3 Struct Access
-----------------
Abstract Syntax:
  struct_access (object :: Expr) (field :: Name)

Concrete Syntax:
  expr '.' name

Example:
  x.first

Returns the value passed to the struct at the corresponding field position
when the struct was constructed.

4. Unions
---------
A union value is a particular value chosen amongst a group of possible values.
The possible choices are organized into a finite number of fields. Each field
has a name, used to identify the field, and a type, specifying the type of
value for that field.

Union values are constructed by supplying a value for a particular field of
the union. The particular value for the union can be accessed by field name,
and the union can be used to select amongst other values and expressions based
on the field present in the union value.

4.1 Union Type
--------------
Abstract Syntax:
  union_type (fields :: [(Type, Name)])

Concrete Syntax:
  '+(' type name [',' type name [...]] ')'

Example:
  +(Unit true, Unit false)

Union types are considered equal if their fields are equal.

4.2 Union Value
---------------
Abstract Syntax:
  union_value (type :: Type) (field :: Name) (arg :: Expr)

Concrete Syntax:
  type '@' '(' name ':' expr ')'

Example:
  Maybe@(Just: 3)

4.3 Union Access
----------------
Abstract Syntax:
  union_access (object :: Expr) (field :: Name)

Concrete Syntax:
  expr '.' name

Example:
  x.Just

Returns the value passed to the union at the corresponding field position when
the union was constructed. Behavior is undefined if the union tag does not
match the field being accessed.

4.4 Conditional
---------------
Abstract Syntax:
  cond (condition :: Expr) (choices :: [(Name, Expr)])

Concrete Syntax:
  '?(' expr ';' name ':' expr [',' name ':' expr [...]] ')'

Example:
  ?(mfoo; Just: mfoo.Just, Nothing: 3)

The condition must have union type. Returns the value of the choice selected
by the tag of the condition, without causing any other choices to be
evaluated.

5. Variables
------------
Let expressions can be used to define variables that allow values to be
accessed by name. Variables make it possible to share values. Let expressions
support recursive definitions of variables, which makes it possible to define
recursive values.

Type variables can defined using type let expressions. In this case, the
variables are evaluated statically and refer to types instead of values. Type
let expressions also support recursive definitions of variables, which makes
it possible to define recursive types.

5.1 Variable
------------
Abstract Syntax:
  var (name :: Name)

Concrete Syntax:
  name

Example:
  x

Expressions are evaluated in a context that maps variable names to values and
types. The value of the variable expression is the value associated with the
variable name in the context. The type of the variable expression is the type
associated with the variable name in the context.

5.2 Let Expression
------------------
Abstract Syntax:
  let (bindings :: [(Type, Name, Expr)]) (body :: Expr)

Concrete Syntax: (in statement context)
  type name '=' expr [',' type name = expr [...]] ';' stmt

Example:
  Int x = mul(3, 3); mul(x, x)

The let expression is used to define variables. For each binding, a new
variable is defined. The value of the variable is the result of evaluating the
expression for the variable's binding.

The defined variables are visible in the body of the let expression. To
support self and mutually recursive values, the defined variables
are also visible in all of the bindings expressions.

TODO: Are bindings allowed to defined variables with the same name as
variables already in scope, thus shadowing the variable already in scope?

The value of the let expression is the value of its body.

Variables (let, var, type_let, kind)

5.2 Type Let Expression
-----------------------
Abstract Syntax:
  type_let (bindings :: [(Kind, Name, Type)]) (body :: Expr)

Concrete Syntax: (in statement context)
  kind name '=' type [',' kind name = type [...]] ';' stmt

Example:
  P = *(Int head, S tail), S = +(Unit nil, P cons); P(3, S:nil(Unit()))

The type let expression is used to define type variables. For each binding, a
new type variable is defined. The type of the type variable is the result of
evaluating the type for the variable's binding.

The defined type variables are visible in the body of the let expression. To
support self and mutually recursive types, the defined type variables are also
visible in all of the bindings expressions.

TODO: Are bindings allowed to defined variables with the same name as
variables already in scope, thus shadowing the variable already in scope?

The value of the let expression is the value of its body.



Functions (func_type, func_value, func_apply, bind)
Polymorphism (type_func)
Processes (proc_type, input_type, output_type, eval, get, put, link, exec)
Contexts (ctx_current, ctx_access, ctx_transform, ctx_add, ctx_set)
Files (include)




V. Values
---------
V.1 Structures
--------------

V.2 Unions
----------

V.3 Functions
-------------
A function is a mapping from argument values to result value. The arguments
are organized into a finite number of args. Each arg has a name, used to
identify the argument in the body of the function, and a type, specifying the
type of value that can be supplied for that argument. A function has a return
type, specifying the type of value that will result when applying the
function.

Functions are described using the fble expression language. A function can be
applied to a set of arguments of appropriate type to produce a value with the
return type of the function.

V.4 Process
-----------
A process is a computation with side effects that produces a value. Side
effects take the form of getting and putting values to and from links that can
be accessed by other running processes.

There are primitive processes for getting a value from a link, putting a value
to a link, and creating and using a new link. Processes can be combined by
executing them in parallel and serial.

V.5 Input Port
--------------
An input port is a handle to a link that can be used to get values from
the link. An input port is typed, so that only values of the given type can be
taken from the port.

An input port is created for every link that is created. An input port can be
used as a process that takes a value off its link.

V.6 Output Port
---------------
An output port is a handle to a link that can be used to put values onto the
link. An output port is typed, so that only values of the given type can be
put onto the link.

An output port is created for every link that is created. An output port can
be used as a process that puts a value onto its link.

T. Types
--------
Every value in fble has a type, which describes the kinds of operations that
can legally be performed on that value. Types are used to check that an fble
programs is well formed statically. Types do not take part in the dynamic
execution of an fble program after it has been statically checked.

T.1 Struct Type
---------------
T.2 Union Type
--------------
Abstract Syntax:
  union_type (fields :: [(Type, Name)])

Concrete Syntax:
  '+(' type name [',' type name [...]] ')'

Example:
  +(Unit true, Unit false)

Unions can store struct, union, and function values.

Union types are considered equal if their fields are equal.

T.3 Function Type
-----------------
Abstract Syntax:
  func_type (args :: [(Type, Name)]) (return :: Type)

Concrete Syntax:
  '\(' type name [',' type name [...]] ';' type ')'

Examples:
  \(Int a, Int b; Bool)

The function type describes the type of a function value by specifying the
function value's type and name of input arguments and return type.

Function arguments can be structs, unions, functions, or processes.

Two function types are equal if they take the same args and return type, with
possible renaming of argument names. For example, the following two function
types are equal:
  \(Int x; Int)
  \(Int y; Int)

T.4 Process Type
----------------
Abstract Syntax:
  proc_type (return :: Type)

Concrete Syntax:
  type '!'

Example:
  Int!

T.5 Input Type
--------------
Abstract Syntax:
  input_type (type :: Type)

Concrete Syntax:
  type '-'

Example:
  Int-

T.6 Output Type
---------------
Abstract Syntax:
  output_type (type :: Type)

Concrete Syntax:
  type '+'

Example:
  Int+

E. Expressions
--------------
E.1 Variable Expression
-----------------------
Abstract Syntax:
  var (name :: Name)

Concrete Syntax:
  name

Example:
  x

Expressions are evaluated in a context that maps variable names to values and
types. The value of the variable expression is the value associated with the
variable name in the context. The type of the variable expression is the type
associated with the variable name in the context.

E.2 Let Expression
------------------
Abstract Syntax:
  let (bindings :: [(Type, Name, Expr)]) (body :: Expr)

Concrete Syntax: (in statement context)
  type name '=' expr [',' type name = expr [...]] ';' stmt

Examples:
  Int x = mul(3, 3); mul(x, x)

  P = *(Int head, S tail), S = +(Unit nil, P cons); P(3, S:nil(Unit()))

The let expression is used to define variables. For each binding, a new
variable is defined. The value of the variable is the result of evaluating the
expression for the variable's binding.

The defined variables are visible in the body of the let expression. To
support self and mutually recursive types and functions, the defined variables
are also visible in all of the bindings expressions.

TODO: Are recursive struct and union values also supported? Does that imply
lazy evaluation?

TODO: Are bindings allowed to defined variables with the same name as
variables already in scope, thus shadowing the variable already in scope?

The value of the let expression is the value of its body.

E.3 Type Type
-------------
Abstract Syntax:
  type_type

Concrete Syntax:
  '@'

Example:
  @

The type type is a type value representing the type of all type values.

TODO: Is the type of a the type type value itself, or some implicit thing that
cannot be referred to? Can you say something like: @ x = @; ... ?

E.4 Function Type
-----------------
Abstract Syntax:
  func_type (args :: [(Type, Name)]) (return :: Type)

Concrete Syntax:
  '\(' type name [',' type name [...]] ';' type ')'

Examples:
  \(Int a, Int b; Bool)

  \(@ T, T x; Maybe(T))

The function type describes the type of a function value by specifying the
function value's type and name of input arguments and return type.

A function argument is a variable definition that is visible to the types for
all subsequent arguments in the argument list and the return type. This allows
you to write polymorphic functions parameterized by abstract types supplied
when the function is invoked.

Functions can take any kind of argument: structs, unions, functions, or types.

Two functions are the same if they take the same args and return type, with
possible renaming of argument names. For example, the following two function
types are the same:
  \(@ A, A a; Maybe(A))
  \(@ T, T x; Maybe(T))

TODO: Are zero argument functions allowed?

E.5 Function Value
------------------
Abstract Syntax:
  func_value (args :: [(Type, Name)]) (body :: Expr)

Concrete Syntax:
  '\(' type name [',' type name [...]] ')' '{' stmt '}'

Example:
  \(Bool a) ?(a; true: False, false: True)

The function value expression is used to describe a primitive function value
given the list of arguments and the body of the function. The return type of
the function is inferred to be the type of the body of the function.

Rationale for Concrete Syntax: The body of the function requires use of braces
to avoid ambiguity that would arise otherwise with an expression such as:

  \(T x) f (y)

In this case it isn't clear if the argument 'y' is being applied to the
function \(T x) f, or to the function f.

E.6 Application
---------------
Abstract Syntax:
  apply (func :: Expr) (args :: [Expr])

Concrete Syntax:
  expr '(' [expr [',' expr [...]]] ')'

Example:
  foo(x, 3)

The application expression is used to apply a function to arguments. Partial
application of arguments are allowed. The supplied arguments must match the
types of arguments specified for the function. If not all arguments are
supplied, the resulting value is a function value parameterized by the
remaining arguments.

If all arguments are supplied, the application expression evaluates to the
value of the body of the function in the context of the supplied arguments.

TODO: Is evaluation struct? Lazy?

E.7 Struct Type
---------------
Abstract Syntax:
  struct_type (fields :: [(Type, Name)])

Concrete Syntax:
  '*(' [type name [',' type name [...]]] ')'

Examples:
  *()                 is the Unit type
  *(Int x, Int y)     is the type of a pair of ints x, y.

Structures can store any kind of argument: structs, unions, functions, or
types.

Struct types are considered equal if their fields are equal.

E.8 Struct Value
----------------
Abstract Syntax:
  struct_value (type :: Type) (args :: [Expr])

Concrete Syntax:
  type '@' '(' [expr [',' expr [...]]] ')'

Example:
  Coord@(3, 5)

E.9 Union Type
--------------
Abstract Syntax:
  union_type (fields :: [(Type, Name)])

Concrete Syntax:
  '+(' type name [',' type name [...]] ')'

Example:
  +(Unit true, Unit false)

Unions can store any kind of argument: structs, unions, functions, or types.

Union types are considered equal if their fields are equal.


E.13 Process Type
-----------------
Abstract Syntax:
  proc_type (return :: Type)

Concrete Syntax:
  type '!'

Example:
  Int!

E.14 Input Type
---------------
Abstract Syntax:
  input_type (type :: Type)

Concrete Syntax:
  type '-'

Example:
  Int-

E.15 Output Type
----------------
Abstract Syntax:
  output_type (type :: Type)

Concrete Syntax:
  type '+'

Example:
  Int+

E.16 Eval
---------
Abstract Syntax:
  eval (expr :: Expr)

Concrete Syntax:
  '$(' expr ')'

Example:
  $(3)

A process that returns the value of expr without performance any other
actions.

E.17 Get
--------
Abstract Syntax:
  get (port :: Expr)

Concrete Syntax:
  expr '()'

Example:
  input()

The port must have type input_type. If the port has type T-, evaluates to a
process value of type T! that gets the next value from the port.

E.18 Put
--------
Abstract Syntax:
  put (port :: Expr) (value :: Expr)

Concrete Syntax:
  expr '(' expr ')'

Example:
  output(3)

The port must have type output_type. If the port has type T+, evaluates to a
process value of type T! that puts the given value onto the port and returns
that same value.

E.19 Link
---------
Abstract Syntax:
  link (type :: Type) (get :: Name) (put :: Name) (body :: Expr)

Concrete Syntax:
  type '~' name ',' name ';' expr

Example:
  Int ~ input, output; f(input, output)

The body must have type process_type. Evaluates to the value of the body with
get and put ports of type type- and type+ respectively added to the context.

E.20 Exec
---------
Abstract Syntax:
  exec (bindings :: [(Type, Name, Expr)]) (body :: Expr)

Concrete Syntax: (* in statement context *)
  type name ':=' expr [',' type name ':=' expr [...]] ';' stmt

Example:
  Int x := getx(), Int y := gety(); $(add(x, y))

Runs each process in parallel, then executes the body with the results of the
processes assigned to variables in scope.

E.21 Bind
---------
Abstract Syntax:
  bind (args :: [(Type, Name)]) (func :: Expr) (body :: Expr)

Concrete Syntax: (* in statement context *)
  type name [',' type name [...]] '<-' expr ';' stmt

Example
  Int x <- map(l); f(x, y)

Bind is syntactic sugar for applying a function to a function value. It is
equivalent to:

  apply func (func_value args body)

P. Program
----------
A program is an expressions that creates a value that is used however is
deemed suitable by whoever is executing the program. Commonly this could be:

* func value: apply the function to arguments provided on the command line,
  evaluate and output the resulting value
* struct value: evaluate and output the value
* union value: evaluate and output the value
* process value: run the process, evaluate and output the resulting value.

  
Abstract Syntax Reference
-------------------------
Name ::= (* A string of characters *)
Type ::= (* Expr that evaluates to a type value *)

Expr ::=
   var (name :: Name)
 | let (bindings :: [(Type, Name, Expr)]) (body :: Expr)

 | type_type

 | func_type (args :: [(Type, Name)]) (return :: Type)
 | func_value (args :: [(Type, Name)]) (body :: Expr)
 | apply (func :: Expr) (args :: [Expr])

 | struct_type (fields :: [(Type, Name)])
 | struct_value (type :: Type) (args :: [Expr])

 | union_type (fields :: [(Type, Name)])
 | union_value (type :: Type) (field :: Name) (arg :: Expr)

 | access (object :: Expr) (field :: Name)
 | cond (condition :: Expr) (choices :: [(Name, Expr)])

 | proc_type (return :: Type)
 | input_type (type :: Type)
 | output_type (type :: Type)
 | eval (expr :: Expr)
 | get (port :: Expr)
 | put (port :: Expr) (value :: Expr)
 | link (type :: Type) (get :: Name) (put :: Name) (body :: Expr)
 | exec (bindings :: [(Type, Name, Expr)]) (body :: Expr)
 | bind (args :: [(Type, Name)]) (func :: Expr) (body :: Expr)
 ;

Concrete Syntax Reference
-------------------------
name ::= (* [a-zA-Z--9_]+ *)
tname ::= name '@'

kind ::= '@'                                              (* basic_kind *)
 | '\<' kind tname [',' kind tname [...]] ';' kind '>'    (* poly_kind *)

type ::= 
   '{' type_stmt '}'                                        (* type_stmt *)
 | tname                                                    (* type_var *)
 | '\<' kind tname [',' kind tname [...]] '>' '{' type_stmt '}'  (* poly_type *)
 | type '<' [type [',' type [...]]] '>'                     (* poly_type_apply *)
 | '\(' type name [',' type name [...]] ';' type ')'        (* func_type *)
 | '*(' [type name [',' type name [...]]] ')'               (* struct_type *)
 | '+(' type name [',' type name [...]] ')'                 (* union_type *)
 | type '!'                                                 (* proc_type *)
 | type '-'                                                 (* input_type *)
 | type '+'                                                 (* output_type *)
 ;

type_stmt ::=
   type ';'
 | kind tname '=' type [',' kind tname '=' type [...]] ';' type_stmt      (* let *)
 ;

expr ::=
   '{' stmt '}'                                           (* statement *)
 | name                                                   (* var *)
 | '\<' kind tname [',' kind tname [...]] '>' '{' stmt '}'  (* poly *)
 | expr '<' [type [',' type [...]]] '>'                   (* poly_apply *)
 | '\(' [type name [',' type name [...]]] ')' '{' stmt '}'  (* func_value *)
 | expr '(' [expr [',' expr [...]]] ')'                   (* apply *)
 | type '(' [expr [',' expr [...]]] ')'                   (* struct_value *)
 | type '(' name ':' expr ')'                             (* union_value *)
 | expr '.' name                                          (* _access *)
 | '?(' expr ';' name ':' expr [',' name ':' expr [...]] ')'  (* cond *)
 | '$(' expr ')'                                          (* eval *)
 | expr '()'                                              (* get *)
 | expr '(' expr ')'                                      (* put *)
 ;

stmt ::=
   expr ';'                                                      (* expr *)
 | kind name '@' '=' type [',' kind name '@' '=' type [...]] ';' stmt   (* type_let *)
 | type name '=' expr [',' type name = expr [...]] ';' stmt      (* let *)
 | type '~' name ',' name ';' stmt                               (* link *)
 | type name ':=' expr [',' type name ':=' expr [...]] ';' stmt  (* exec *)
 | type name [',' type name [...]] '<-' expr ';' stmt            (* bind *)
 ;

Notes:
* apply, get, and put share the same form. The type of the expr
  is used to distinguish between the four kinds of expressions.
  
Miscellaneous Thoughts
----------------------
* I'd like there to be no such thing as a zero argument function. Use a value
  for that instead.
  
  Although, perhaps you could use a zero argument function to distinguish
  between a strict and a lazy value?

  And what about input ports, which use the syntax of no-argument functions?

  Maybe a zero argument function is fine.

* As with fblc/fbld, I would like the type of an expression to be determined
  completely by the expression and the types of any variables it refers to.
  The type of the expression should not otherwise depend on the context where
  the expression is used.

* Concern: How to distinguish between a type constructor used as a type and a
  type constructor used to construct a value?

  For example, given the context
  @ Unit = *();
  ...

  What is the type of 'Unit'? Is it @ or *()?

  Proposal: change syntax of struct constructors to include a :.
  For example: Unit has type @, Unit: has type *()?

  Or is this only an issue if we don't support zero-argument function syntax?

  Not an issue anymore with new syntax: Unit vs. Unit@().

* Defining functions is tedious because you end up duplicating the type
  information. For example:

  \(Bool a, Bool b; Bool) And = \(Bool a, Bool b; Bool) {
    ?(a; true: b, false: False);
  };

  Maybe we should support some syntactic sugar to help with this?
  Or, at least we could remove the return type in the lambda expression,
  because you can infer that from the body of the function, right?

  Done.

* It's super nice having global value declarations, instead of having to
  define zero argument functions.

* Syntax highlighting could be tricky, because it is mostly already
  highlighted by punctuation. Maybe highlight identifiers in let expressions?

* It's nice not having to worry that any declaration may refer to any other in
  the file. Limiting those recursive loops to just where they are needed is
  nice.

* Typing is going to be a little bit interesting, because to type check an
  expression requires evaluating the types. There is a spectrum of where we
  could be. On one end, type as you go lazily. In particular, you don't type
  check the body of a function before executing the function. On the other
  extreme, some sort of abstract interpretation or static elaboration of
  function bodies to figure out types, ignoring the fact that you don't know
  argument values. Possibly in between: restrictions on what kinds of types
  can be used in, say conditional expressions and recursive functions so that
  it's straight forward to evaluate types without evaluating other things.

  No need to decide now. Let's just see how things evolve.

  Time to decide now. I propose the following:
  
  A type is called a kinded type if expressions with that type can be used to
  evaluate to a type. @ is a kinded type. A struct or union type that has any
  fields of a kinded type are kinded types. A function type whose return type
  is a kinded type is itself a kinded type.

  Process or input or output types are disallowed from being kinded type.
  Conditional expressions are disallowed from being kinded type.

  Expressions of kinded type are evaluated during type check. Other
  expressions are not evaluated during type check.

  When evaluating expressions of kinded type during type check, it may be the
  case that the resulting value depends on unknown input parameters. This is
  not an error unless the value of those input parmaters must be known to type
  check the expression.

  I think that gives everything I need.

* Eventually I'll want to think about how to scale up fble programs. Is there
  a natural way to split fble programs across multiple files/directories
  authored by multiple different authors? But that's something to worry about
  later.
 
  I'm thinking have a way to import an expression from a file.
  And have ways to create struct values from a context and set up a context
  given struct values.
  And have a way to say: here is a struct value that should be evaluated at
  type check and used directly, without having to supply a type.
  And have a way to say: I require some named, untyped, structure to be
  available implicitly in my expression.

* Need syntax to distinguish between struct_value and apply?
  Because for struct_value, we have to know the value of the "function" at
  type check type, but for apply we don't. Probably better to have syntax so
  we can tell that easily when we go to type check the expression.

  Not sure what syntax to use though. Maybe:
    struct_value ::= type ':' '(' args ')'

  Picking: type '@' '(' exprs ')'
  To go with union: type '@' '(' name ':' expr ')'
  

* How to test?
  Provide an expression.
  Type check and evaluate the expression.
  If the result is a process, run the process.

  The test fails if there is a type error or undefined union field access.
  The test succeeds otherwise.

* What is the lifetime of a local variable?
  This is important, for example, for recursive functions so the programmer
  knows when the stack will be smashed. In other words, does the lifetime of
  that local variable extend beyond the recursive function call, or does it
  end before that?

  Assume we know, based on the evaluation semantics, when an expression is
  evaluated. The programmer needs to know this for performance reasons. Then
  how about we say the lifetime of a local variable is just long enough for
  all the expressions that will need the variable value to be evaluated.

  Example:
  \(List l, Int acc; Int) sum = \(List l, Int acc) {
    ?(l; nil: acc,
         cons: sum(l.cons.tail, Add(l.cons.head, acc)));
  };
  
  The local variable 'acc' is no longer live after the Add call, so it is safe
  to do the recursive sum call without having to worry about memory growth in
  the size of the list.
  

