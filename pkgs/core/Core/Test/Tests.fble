
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Int@ = /Core/Int%.Int@;

<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;

<@>@ PureResult@ = /Core/Stdio/Pure%.PureResult@;
<@>@ Pure@ = /Core/Stdio/Pure%.Pure@;
% Monad = /Core/Stdio/Pure%.Monad;
% Stdio = /Core/Stdio/Pure%.Stdio;
<@>% Run = /Core/Stdio/Pure%.Run;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
@ TestResult@ = /Core/Test%.TestResult@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

% S = /Core/Stdio/Stdio%<Pure@>(Monad, Stdio);

% RunTests = /Core/Test/Run%<Pure@>(Monad,
  (String@ str) { S.PutStr(S.Stdout, str); }).RunTests;

Test@ pass = Test(Str|pass, (Unit@ _) { TestResult@(pass: Unit); });
Test@ fail = Test(Str|fail, (Unit@ _) { TestResult@(fail: Str|Failed); });
Test@ xfail = Test(Str|xfail, (Unit@ _) { TestResult@(xfail: Unit); });

Test@ Tests = TestSuite(Str|'Test', List[
  Test(Str|'RunTest.pass_passes', (Unit@ _) {
    PureResult@<Bool@> result = Run(RunTests(Str|'', pass), Nil<Int@>);

    Bool@ wnt = True;
    Bool@ got = result.x;
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    }),

  Test(Str|'RunTest.fail_fails', (Unit@ _) {
    PureResult@<Bool@> result = Run(RunTests(Str|'', fail), Nil<Int@>);

    Bool@ wnt = False;
    Bool@ got = result.x;
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    }),

  Test(Str|'RunTest.xfail_passes', (Unit@ _) {
    PureResult@<Bool@> result = Run(RunTests(Str|'', xfail), Nil<Int@>);

    Bool@ wnt = True;
    Bool@ got = result.x;
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
    })
]);

@(Tests);
