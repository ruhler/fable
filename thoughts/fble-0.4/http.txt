HTTP Profile Viewer
===================
Goal is to write an http based profile viewer.

Here I'm specifically interested in the http server aspects of writing it.
What minimal http support can I provide myself? What library dependencies must
we have?

Here's an example HTTP request:

GET /hello.html?foo=bar HTTP/1.1
Host: localhost:8000
User-Agent: Elinks
Accept: */*
Accept-Language: en
Connection: Keep-Alive

Here's an example HTTP response (from wget -S ...).

  HTTP/1.1 200 OK
  Content-Type: text/html
  Accept-Ranges: bytes
  ETag: "1512195059"
  Last-Modified: Sat, 08 Jan 2022 20:18:45 GMT
  Content-Length: 1062
  Date: Tue, 22 Oct 2024 14:11:07 GMT
  Server: lighttpd/1.4.53

Steps to make this work:

1. Write code for main loop to start a server and accept a connection.
For this part, just print the request.

2. Parse the GET request and headers.

3. Generate some sample responses that I can try with elinks.

The most annoying part, I think, is having to output content length. It means
I can't stream the output? I need two passes?

---

Done with step (1). Next is step (2).

Some challenges we are going to have with this server:
* It's not C99. It requires posix.

--- 

Interpretation of the sample headers:

Accept: */*
  Says what kind of responses to accept. If our response is not in the list,
  we should return 406 error code. Probably safe to ignore to begin.
  
Accept-Language: en
  Preferred language to return. Probably safe to ignore to begin.

Connection: Keep-Alive
  Seems to suggest the user agent supports keeping the connection alive, but I
  don't think requires it. Probably safe to ignore to begin.

Host: localhost:8000
  Host and optional port of origin. Probably safe to ignore, but in theory we
  should return 400 (bad request) if it is missing.

User-Agent: Elinks
  The user agent. Safe to ignore.

In other words, to start, I can ignore all of these fields. Just skip past
them, and I'm done and ready to respond.

---

What response headers do I want to provide?

general-header = Cache-Control            ; Section 14.9
               | Connection               ; Section 14.10
               | Date                     ; Section 14.18
               | Pragma                   ; Section 14.32
               | Trailer                  ; Section 14.40
               | Transfer-Encoding        ; Section 14.41
               | Upgrade                  ; Section 14.42
               | Via                      ; Section 14.45
               | Warning                  ; Section 14.46

response-header = Accept-Ranges           ; Section 14.5
                | Age                     ; Section 14.6
                | ETag                    ; Section 14.19
                | Location                ; Section 14.30
                | Proxy-Authenticate      ; Section 14.33
                | Retry-After             ; Section 14.37
                | Server                  ; Section 14.38
                | Vary                    ; Section 14.44
                | WWW-Authenticate        ; Section 14.47

entity-header  = Allow                    ; Section 14.7
               | Content-Encoding         ; Section 14.11
               | Content-Language         ; Section 14.12
               | Content-Length           ; Section 14.13
               | Content-Location         ; Section 14.14
               | Content-MD5              ; Section 14.15
               | Content-Range            ; Section 14.16
               | Content-Type             ; Section 14.17
               | Expires                  ; Section 14.21
               | Last-Modified            ; Section 14.29
               | extension-header


The ones that look relevant:
* Don't worry about caching for now. It should only matter when loading a
  different profile. I can worry about that case later.
* "Connection: close", since we don't support consistent connections yet.
* Date: ..., which we are supposed to send always.
*  

Aside from Date, looks like none are required. Maybe also Content-Type? Some
others could be useful.

How about we start with something like:

  HTTP/1.1 200 OK
  Content-Type: text/html
  Last-Modified: Sat, 08 Jan 2022 20:18:45 GMT (date of profile file)
  Date: Tue, 22 Oct 2024 14:11:07 GMT

I dunno. Start with nothing, see what elinks accepts. No reason to go above
and beyond here.

---

A couple issues addressed:
* Have separate FILE* for input and output streams.
* Look for "\r\n" instead of "\n" for end of request headers.

Now I can generate html that is displayed by elinks.

Next step is to parse the start line. Goal is to extract:
* method - make sure it is GET
* http version - make sure it is HTTP/1.1
* path, e.g. "/", or "/self", or "/index.html" or some such.
* query arguments 

Let's start by printing those in the generated html.

---

Next is URI parsing.

In theory it could be an absolute URI or an absolute path. In practice it's
supposed to only be an absolute path.

http_URL = "http:" "//" host [ ":" port ] [ abs_path [ "?" query ]]

With % HEX HEX encoding on top.

It sounds like technically the format of query is not standardized. I could
use whatever I want. In practice, may as well use the common:
name1=value1&name2=value2&..., which is based on how html forms are
implemented when using the GET method.

Regardless of whose responsibility it is, I'll want some code to convert the
raw query string into, perhaps, an array of pairs of values. Probably I'll
want this to be the responsibility not of the http part of the server, but the
content generation part of the server. So we can pass in the query string to
the next level in the API.

---

How to handle 404 not found when passing the path and query to the next level
in the API? We can't easily pass a FILE* for writing the output content if we
don't already assume response 200. And how would that work with a HEAD
request? Seems we need to detect path support separately.

One approach is to have the http server register a set of handlers, one per
path. Then the server can search for the matching handler. If none found,
return 404. If a handler is found, return 200, then call the handler with the
query and the FILE*. That should be fine for my use case. It just means
putting any interesting parameters in the query rather than the path. Makes
total sense to me. Static number of supported paths. Infinite number of
supported queries.

---

Can I implement my server in fble instead of C? It would be a good use case to
exercise fble, and much nicer to program in because I would have access to
list and map libraries for representing the profile.

The challenge is what API I should offer for doing a server. And it would
impact the Stdio interface, which is tedious. And sockets are not platform
portable.

Could I hack something up using stdin and stdout for the communication with
the server, and wire it up to nc to do the actual socket communication part?
That's an interesting idea. Why not?

Proof of concept: change the server to operate on stdin/stdout... maybe have
it handle a single request? Because it's going to close stdin/stdout in
between otherwise?

What I want with netcat would be:
* Listen for some port. Forward connections to a program that you fork?

That means parsing the profile data over and over again, which is not ideal.
Let's see what options netcat has.

The man page has an example of using file redirection to make this work. It
would be single-request kind of thing though, and pretty tedious to play
around with.

---

Here are the challenges I'm facing:
* It's tedious to redefine vector in my C prototype of the new profiler
  viewer.
* It's tedious to add a socket API to fble to use it for the new profiler
  viewer.
* It's tedious to add an ncurses API to fble to use it for the new profiler
  without http.

Remember what my goals are.
* Prototype a new profiler viewer to see if it's notably more useful and we
  should change the profile collection strategy in fble. We don't have to ever
  release the prototype. We could just generate pprof in the end.
* Make fble a useful general purpose programming language. Http servers and
  ncurses based applications are the kinds of things you want to be able to
  develop in a general purpose programming language.

Perhaps it's time to take a detour from our detour of a detour from improving
fble performance.

---

Okay, back from the long detour. I can use sockets in fble now. Let's port the
scratch server over to fble. First goal is to accept an HTTP get request and
return a page printing the method, path, query, and HTTP version.

What should we call this effort? How about profui? ProfUi?
