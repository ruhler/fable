
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ Eq@ = /Core/Eq%.Eq@;

<@>% List = /Core/List%.List;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

% Neg = /Pinball/Num%.Neg;
% Int = /Pinball/Num%.Int;

@ Quadratic@ = /Pinball/Quadratic%.Quadratic@;
@ Roots@ = /Pinball/Quadratic%.Roots@;
% Roots = /Pinball/Quadratic%.Roots;

<@>@ Show@ = /Core/Show%.Show@;

% Strs = /Core/String%.Strs;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;

% _ = /Pinball/Quadratic/Show%;

Eq@<Roots@> EqRoots = (Roots@ a, Roots@ b) {
  /Pinball/Num%.Eq(a.first, b.first).?(false: False);
  /Pinball/Num%.Eq(a.second, b.second).?(false: False);
  True;
};

Show@<Roots@> ShowRoots = (Roots@ r) {
  Strs[Str|'(', /Pinball/Num%.Show(r.first), Str|',',
    /Pinball/Num%.Show(r.second), Str|')'];
};

Test@ Tests = TestSuite(Str|'Quadratic', List<Test@>[
  Test(Str|'Roots Basic', (Unit@ _) {
    # Roots of (x - 4) * (x - 2) should be 2 and 4.
    # x^2 - 6x + 8
    Quadratic@ q = Quadratic@(Int|1, Neg(Int|6), Int|8);
    Maybe@<Roots@> want = Just(Roots@(Int|2, Int|4));
    Maybe@<Roots@> got = Roots(q);
    AssertEquals(
      /Core/Maybe/Eq%.Eq(EqRoots), /Core/Maybe/Show%.Show(ShowRoots),
      want, got);
  }),

  Test(Str|'Roots Same', (Unit@ _) {
    # Roots of (x - 2) * (x - 2) should be 2 and 2.
    # x^2 - 4x + 4
    Quadratic@ q = Quadratic@(Int|1, Neg(Int|4), Int|4);
    Maybe@<Roots@> want = Just(Roots@(Int|2, Int|2));
    Maybe@<Roots@> got = Roots(q);
    AssertEquals(
      /Core/Maybe/Eq%.Eq(EqRoots), /Core/Maybe/Show%.Show(ShowRoots),
      want, got);
  }),

  Test(Str|'Roots None', (Unit@ _) {
    # x^2 + 1 has no roots.
    Quadratic@ q = Quadratic@(Int|1, Int|0, Int|1);
    Maybe@<Roots@> want = Nothing<Roots@>;
    Maybe@<Roots@> got = Roots(q);
    AssertEquals(
      /Core/Maybe/Eq%.Eq(EqRoots), /Core/Maybe/Show%.Show(ShowRoots),
      want, got);
  }),

  Test(Str|'Roots Linear', (Unit@ _) {
    # (x-1), we'll have two roots, 1 and 1?
    Quadratic@ q = Quadratic@(Int|0, Int|1, Neg(Int|1));
    Maybe@<Roots@> want = Just(Roots@(Int|1, Int|1));
    Maybe@<Roots@> got = Roots(q);
    AssertEquals(
      /Core/Maybe/Eq%.Eq(EqRoots), /Core/Maybe/Show%.Show(ShowRoots),
      want, got);
  }),

  Test(Str|'Roots Constant', (Unit@ _) {
    # 1 has no roots.
    Quadratic@ q = Quadratic@(Int|0, Int|0, Int|1);
    Maybe@<Roots@> want = Nothing<Roots@>;
    Maybe@<Roots@> got = Roots(q);
    AssertEquals(
      /Core/Maybe/Eq%.Eq(EqRoots), /Core/Maybe/Show%.Show(ShowRoots),
      want, got);
  })
]);

@(Tests);
