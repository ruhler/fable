
# Public API for Map@ type.

% Map = /Core/Map/Map%;

@ Bool@ = /Core/Bool%.Bool@;

<@>@ Ord@ = /Core/Ord%.Ord@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

# _@ -- Package type for access to internals of Map@ abstract type.
@ _@ = %(/Core/Map%);

# Map@ --
#   A map from K@ to V@, using the Structure@ of K@ to locate the key value
#   entry in the map.
#
# Type Parameters:
#   K@ - the type of keys in the map.
#   V@ - the type of values in the map.
<@,@>@ Map@ = <@ K@, @ V@> { _@<Map.Map@<K@, V@>>; };

<@,@>@ Entry@ = <@ K@, @ V@> { *(K@ key, V@ value); };

# Empty --
#   A map without any entries.
#
# Type Parameters:
#   K@ - the type of keys in the map.
#   V@ - the type of values in the map.
#
# Example Use:
#   Empty<String@, Foo@>
Map@ Empty = _@.<Map@>(Map.Empty);

# IsEmpty --
#   Check if a map is empty.
#
# Type Parameters:
#   K@ - the type of keys in the map.
#   V@ - the type of values in the map.
#
# Inputs:
#   map - the map to check.
#
# Returns:
#   True if the map is empty, false otherwise.
<@ K@, @ V@>(Map@<K@, V@>) { Bool@; }
IsEmpty = _@.<@<IsEmpty>>(Map.IsEmpty);

# Lookup --
#   Look up the value in a map for the given key.
#
# Type Parameters:
#   K@ - the type of keys in the map.
#   V@ - the type of values in the map.
#
# Inputs:
#   lt - The less than operator to use for comparing keys.
#   map - the map to look up the value in.
#   key - the key of the value to look up.
#
# Returns:
#   The value in the map associated with the key. Nothing if the map
#   does not contain any such value.
#
# Example Use:
#   % Lookup = /Core/Map%.Lookup<String@>(/Core/String/Ord%.Ord)<Foo@>;
#   Lookup(map, key);
#
#   % Lookup = /Core/Map%.Lookup<String@>(/Core/String/Ord%.Ord);
#   Lookup<Foo@>(mapToFoo, key);
#   Lookup<Bar@>(mapToBar, key);
<@ K@>(Ord@<K@>)<@ V@>(Map@<K@, V@>, K@) { Maybe@<V@>; }
Lookup = _@.<@<Lookup>>(Map.Lookup);

# Insert --
#   Insert a value into a map. Any existing value for the key in the map will
#   be overridden with the new value.
#
# Type Parameters:
#   K@ - the type of keys in the map.
#   V@ - the type of values in the map.
#
# Inputs:
#   lt - The less than operator to use for comparing keys.
#   map - the map to insert the value into up the value in.
#   key - the value of the key to store with the map entry.
#   value - the value to insert.
#
# Example Use:
#   % Insert = /Core/Map%.Insert<String@>(/Core/String/Ord%.Ord)<Int@>;
#   Insert(map, Str(Chars|foo), 4);
<@ K@>(Ord@<K@>)<@ V@>(Map@<K@, V@>, K@, V@) { Map@<K@, V@>; }
Insert = _@.<@<Insert>>(Map.Insert);

# InsertWith --
#   Insert a value into a map, taking into account whatever existing value is
#   in the map for the given key.
#
# Type Parameters:
#   K@ - the type of keys in the map.
#   V@ - the type of values in the map.
#
# Inputs:
#   lt - The less than operator to use for comparing keys.
#   map - the map to insert the value into up the value in.
#   key - the value of the key to store with the map entry.
#   with - a function that returns the value to insert given the existing
#          value in the map.
#
# Example Use:
#   % InsertWith = /Core/Map%.InsertWith<String@>(/Core/String/Ord%.Ord)<Int@>;
#   InsertWith(map, Str(Chars|foo), (Maybe@<Int@> mv) {
#     mv.?(just: Add(mv, value), nothing: value);
#   };
<@ K@>(Ord@<K@>)<@ V@>(Map@<K@, V@>, K@, (Maybe@<V@>){ V@; }) { Map@<K@, V@>; }
InsertWith = _@.<@<InsertWith>>(Map.InsertWith);

# Delete --
#   Remove a key and its value from the map, if present.
#
# Inputs:
#   lt - The less than operator to use for comparing keys.
#   map - the map to insert the value into up the value in.
#   key - the key of the value to delete from the map.
#
# Example Use:
#   % Delete = /Core/Map%.Delete<String@>(/Core/String/Ord%.Ord)<Int@>;
#   Delete(map, Str(Chars|foo));
<@ K@>(Ord@<K@>)<@ V@>(Map@<K@, V@>, K@) { Map@<K@, V@>; }
Delete = _@.<@<Delete>>(Map.Delete);

# ForEach --
#   Iterate over entries of a map.
#
# Type Parameters:
#   K@ - the type of keys in the map.
#   V@ - the type of values in the map.
#   B@ - The type of value updated and returned by the foreach loop.
#
# Inputs:
#   map - the map to iterate over.
#   base - the initial value to update and return from the loop.
#   body - the body of the loop.
#
# Returns:
#   The result of applying the body consecutively to the base value, once for
#   each entry in the map.
#
# Conceptually:
#   B@ b = base
#   foreach (k, v) in map:
#     b = body(k, v, b)
#   return b
<@ K@, @ V@, @ B@>(Map@<K@, V@>, B@, (K@, V@, B@) { B@; }) { B@; }
ForEach = _@.<@<ForEach>>(Map.ForEach);

# Union --
#   Takes the union of two maps. In case of conflict the value in the second
#   map wins.
<@ K@>(Ord@<K@>)<@ V@>(Map@<K@, V@>, Map@<K@, V@>) { Map@<K@, V@>; }
Union = <@ K@>(Ord@<K@> ord)<@ V@> {
  % insert = Insert<K@>(ord)<V@>;
  % foreach = ForEach<K@, V@, Map@<K@, V@>>;

  (Map@<K@, V@> a, Map@<K@, V@> b) {
    foreach(b, a, (K@ k, V@ v, Map@<K@, V@> m) {
      insert(m, k, v);
    });
  };
};

@(_@, Map@, Entry@,
  Empty, IsEmpty, Lookup, Insert, InsertWith, Delete, ForEach,
  Union);
