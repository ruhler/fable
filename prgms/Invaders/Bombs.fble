
@ Bool@ = /Bool%.Bool@;
% True = /Bool%.True;
% False = /Bool%.False;

@ Drawing@ = /Drawing%.Drawing@;
% Blank = /Drawing%.Blank;
% Over = /Drawing%.Over;
% Translate = /Drawing%.Translate;

@ Int@ = /Int/Int%.Int@;
% Add = /Int/Int%.Add;
% Sub = /Int/Int%.Sub;
% Mul = /Int/Int%.Mul;
% Lt = /Int/Int/Eq%.Lt;
% Gt = /Int/Int/Eq%.Gt;
% Int = /Int/Int/Lit%.Int;

<@>@ List@ = /List%.List@;
<@>% Cons = /List%.Cons;
<@>% Nil = /List%.Nil;
<@,@>% ForEach = /List%.ForEach;
<@>% Length = /List/Length%.Length;

% Graphics = /Invaders/Graphics%;

@ Unit@ = /Unit%.Unit@;

@ Kind@ = +(Unit@ bomb, Unit@ squiggle);

Int@ BombVelocity = Int|1;
Int@ SquiggleVelocity = Mul(Int|3, BombVelocity);
Int@ MinY = Int|2;
Int@ MaxBombs = Int|15;

@ Bomb@ = *(Int@ x, Int@ y, Kind@ kind);

@ Bombs@ = List@<Bomb@>;

Bombs@ Initial = Nil<Bomb@>;

(Int@, Int@, Kind@, Bombs@) { Bombs@; }
Fire = (Int@ x, Int@ y, Kind@ kind, Bombs@ bombs) {
  Lt(Length<Bomb@>(bombs), MaxBombs).?(false: bombs);
  Cons<Bomb@>(Bomb@(x, y, kind), bombs);
};

# HitResult@ --
#   A result from checking if a bomb hit the ship.
#
# Fields:
#   hit - true if hit, false otherwise.
#   bombs - the bombs after removing the bomb that hit the ship.
@ HitResult@ = *(Bool@ hit, Bombs@ bombs);

# HitShip -- 
#   Returns just if any of the bombs are currently hitting the ship, with the
#   bomb that hit the ship removed. Returns nothing if no bomb hits the ship.
(Bombs@, Int@) { HitResult@; } HitShip = (Bombs@ bombs, Int@ ship_x) {
  HitResult@ miss = @(hit: False, bombs: bombs);

  bombs.?(nil: miss);

  HitResult@ tail_hit = HitShip(bombs.cons.tail, ship_x);
  tail_hit.hit.?(true: {
    @(hit: True, bombs: Cons<Bomb@>(bombs.cons.head, tail_hit.bombs));
  });

  Bomb@ bomb = bombs.cons.head;
  Lt(bomb.y, /Invaders/Ship%.ShipY).?(true: miss);
  Lt(bomb.x, ship_x).?(true: miss);
  Gt(bomb.y, Add(Int|8, /Invaders/Ship%.ShipY)).?(true: miss);
  Gt(bomb.x, Add(ship_x, Int|15)).?(true: miss);
  @(hit: True, bombs: bombs.cons.tail);
};

(Bombs@) { Bombs@; } Tick = (Bombs@ bombs) {
  ForEach<Bomb@, Bombs@>(bombs, Nil<Bomb@>, (Bomb@ b, Bombs@ bs) {
    Int@ v = b.kind.?(bomb: BombVelocity, squiggle: SquiggleVelocity);
    Bomb@ nb = Bomb@(b.x, Sub(b.y, v), b.kind);
    Lt(nb.y, MinY).?(true: bs);
    Cons<Bomb@>(nb, bs);
  });
};

(Bombs@) { Drawing@; } Draw = (Bombs@ bombs) {
  ForEach<Bomb@, Drawing@>(bombs, Blank, (Bomb@ b, Drawing@ d) {
    Drawing@ sprite = b.kind.?(bomb: Graphics.Bomb, squiggle: Graphics.Squiggle);
    Over(d, Translate(b.x, b.y, sprite));
  });
};

@(Bombs@, Kind@, HitResult@, Initial, Fire, HitShip, Tick, Draw);

