
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Char@ = /Core/Char%.Char@;

<@>% List = /Core/List%.List;
<@>% Concat = /Core/List%.Concat;
<@,@>% ForEach = /Core/List%.ForEach;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ OStream@ = /Core/Stream%.OStream@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Test@ = /Core/Test%.Test@;
@ TestResult@ = /Core/Test%.TestResult@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<<@>@ M@>(Monad@<M@> m, OStream@<M@> out) {
  % O = /Core/Stream/OStream%(m);
  % PutStr = O.PutStr;
  % PutLine = O.PutLine;

  # Returns True if the tests all pass, false otherwise.
  (String@, Test@) { M@<Bool@>; } RunTests = (String@ prefix, Test@ test) {

    (Test@, String@, Bool@) { M@<Bool@>; }
    Run = (Test@ test, String@ prefix, Bool@ passing) {
      test.?(
        case: {
          String@ name = Strs[prefix, test.case.name];
          Unit@ _ <- m.do(PutStr(out, Strs[Str|'@[', name, Str|']: ' ]));
          TestResult@ tr = test.case.test(Unit);
          tr.?(
            pass: {
              Unit@ _ <- m.do(PutLine(out, Str|'@PASSED'));
              m.return(passing);
            },
            fail: {
              Unit@ _ <- m.do(PutLine(out, Strs[Str|'@FAILED: ', tr.fail]));
              m.return(False);
            },
            xfail: {
              Unit@ _ <- m.do(PutLine(out, Str|'@XFAILED'));
              m.return(passing);
            });
        },
        suite: {
          String@ nprefix = Concat<Char@>(List<String@>[
              prefix, test.suite.name, Str|'.']);
          ForEach<Test@, M@<Bool@>>(test.suite.tests, m.return(passing),
            (Test@ test, M@<Bool@> mp) {
              Bool@ passing <- m.do(mp);
              Run(test, nprefix, passing);
            });
        });
    };

    Run(test, prefix, True);
  };

  @(RunTests: RunTests);
};
