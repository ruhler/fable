
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;

<@>@ List@ = /Core/List%.List@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;

# The 'cat' program to cat stdin.
Main@ Cat = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio) {
  % S = /Core/Stdio/Stdio%(m, stdio);
  M@<Bool@> cat = {
    String@ line <- m.do(S.GetLine(S.Stdin));
    line.?(
      cons: {
        Unit@ _ <- m.do(S.Out(line));
        cat;
      },
      nil: m.return(True)
    );
  };

  (List@<String@> _) { cat; };
};

/Core/Stdio/IO%.Run(Cat);
