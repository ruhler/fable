
@ App@ = /App/App%.App@;
@ AppIO@ = /App/App%.AppIO@;
@ Event@ = /App/App%.Event@;
@ Effect@ = /App/App%.Effect@;

@ Drawing@ = /App/Drawing%.Drawing@;
@ Point@ = /App/Drawing%.Point@;
@ Color@ = /App/Drawing%.Color@;
% Color = /App/Drawing%.Color;
% Drawings = /App/Drawing%.Drawings;
% Over = /App/Drawing%.Over;
% Rect = /App/Drawing%.Rect;
% Affine = /App/Drawing%.Affine;

@ Vec@ = /Graphics/3D%.Vec@;

@ Camera@ = /Graphics/Camera%.Camera@;
@ Rect@ = /Graphics/Camera%.Rect@;
% Camera = /Graphics/Camera%.Camera;
% Translate = /Graphics/Camera%.Translate;
% RotateY = /Graphics/Camera%.RotateY;
% Focus = /Graphics/Camera%.Focus;
% Vertex = /Graphics/Camera%.Vertex;

% Triangle = /Graphics/Triangle%.Triangle;

@ Int@ = /Core/Int%.Int@;
% Neg = /Core/Int%.Neg;
% Mul = /Core/Int%.Mul;
% Div = /Core/Int/Div%.Div;

% Int = /Core/Int/Lit%.Int;

<@>@ Get@ = /Core/IO/Process%.Get@;
<@>@ Put@ = /Core/IO/Process%.Put@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ State@ = Camera@;

State@ Initial = Camera(Int|20, Rect@(Neg(Int|32), Neg(Int|24), Int|64, Int|48));

# Light --
#   Change the lighting of the given color by the factor alpha/256.
(Int@, Color@) { Color@; } Light = (Int@ alpha, Color@ color) {
  Color@(
    Div(Mul(alpha, color.r), Int|256).q,
    Div(Mul(alpha, color.g), Int|256).q,
    Div(Mul(alpha, color.b), Int|256).q);
};

% Colors = {
  Color@ wall = Color@(Int|175, Int|175, Int|175);

  # Wall lighting is based on light going in direction (3, -6, 2).
  #  left: (1, 0, 0) vs. (3, -6, 2) ==> 0  ==> 128/256
  #  right (-1, 0, 0) vs. (3, -6, 2) = 3/7 ==> 237/256
  #  front (0, 0, -1) vs. (3, -6, 2) = 2/7 ==> 201/256
  #  back (0, 0, 1) vs. (3, -6, 2) ==> 0   ==> 128/256
  @(
    LeftWall: Light(Int|128, wall),
    RightWall: Light(Int|237, wall),
    FrontWall: Light(Int|201, wall),
    BackWall: Light(Int|148, wall),
    Ground: Color@(Int|134, Int|48, Int|22),
    Sky: Color@(Int|87, Int|184, Int|230)
  );
};

% Vertices = {
  Int@ xh = Int|20;
  Int@ xl = Neg(xh);
  Int@ yh = Int|6;
  Int@ yl = Neg(yh);
  Int@ zh = Int|30;
  Int@ zl = Neg(zh);
  @(000: Vec@(xl, yl, zl),
    001: Vec@(xl, yl, zh),
    010: Vec@(xl, yh, zl),
    011: Vec@(xl, yh, zh),
    100: Vec@(xh, yl, zl),
    101: Vec@(xh, yl, zh),
    110: Vec@(xh, yh, zl),
    111: Vec@(xh, yh, zh));
};

(State@) { Drawing@; } Draw = (Camera@ camera) {
  % vs = @(
    000: Vertex(camera, Vertices.000),
    001: Vertex(camera, Vertices.001),
    010: Vertex(camera, Vertices.010),
    011: Vertex(camera, Vertices.011),
    100: Vertex(camera, Vertices.100),
    101: Vertex(camera, Vertices.101),
    110: Vertex(camera, Vertices.110),
    111: Vertex(camera, Vertices.111));

  Drawings[
    # Sky
    Rect(camera.clip.x, camera.clip.y, camera.clip.w, camera.clip.h, Colors.Sky),

    # Ground
    Triangle(camera, vs.000, vs.001, vs.100, Colors.Ground),
    Triangle(camera, vs.100, vs.001, vs.101, Colors.Ground),

    # Walls
    Triangle(camera, vs.000, vs.001, vs.011, Colors.LeftWall),
    Triangle(camera, vs.000, vs.011, vs.010, Colors.LeftWall),
    Triangle(camera, vs.100, vs.101, vs.111, Colors.RightWall),
    Triangle(camera, vs.100, vs.111, vs.110, Colors.RightWall),
    Triangle(camera, vs.000, vs.100, vs.110, Colors.BackWall),
    Triangle(camera, vs.000, vs.110, vs.010, Colors.BackWall),
    Triangle(camera, vs.001, vs.101, vs.111, Colors.FrontWall),
    Triangle(camera, vs.001, vs.111, vs.011, Colors.FrontWall)
  ];
};

(Get@<Event@>, Put@<State@>, Unit@!, State@) { Unit@!; }
Run = (Get@<Event@> in, Put@<State@> draw, Unit@! tick, State@ state) {
  Event@ e := in;

  e.?(tick: {
    Unit@ _ := tick;
    Unit@ _ := draw(state);
    Run(in, draw, tick, state);
  });

  e.?(key_down: {
    e.key_down.?(q: !(Unit));

    State@ new_state = e.key_down.?(
      a: Translate(Neg(Int|1), Int|0, Int|0, state),
      d: Translate(Int|1, Int|0, Int|0, state),
      j: Focus(Neg(Int|1), state),
      k: Focus(Int|1, state),
      s: Translate(Int|0, Int|0, Neg(Int|1), state),
      w: Translate(Int|0, Int|0, Int|1, state),

      left: RotateY(Int|4, state),
      right: RotateY(Neg(Int|4), state),
      : state);
    Run(in, draw, tick, new_state);
  });
  Run(in, draw, tick, state);
};

App@ Main = (AppIO@ app) {
  # Set the window coordinates to (-32, -24) lower left corner, (32, 24) upper
  # right corner.
  Point@ a = @(x: Int|10, y: Neg(Int|10));
  Point@ b = @(x: Int|320, y: Int|240);

  # The target is 60 FPS, or 16 millseconds per frame.
  Int@ frame_period = Int|16;
  Unit@! tick = app.effect(Effect@(tick: frame_period));

  (State@) { Unit@!; } draw = (State@ s) {
    app.effect(Effect@(draw: Over(
      Rect(Int|0, Int|0, app.width, app.height, Color.Black),
      Affine(a, b, Draw(s)))));
  };

  Unit@ _ := app.effect(Effect@(tick: Int|0));
  Run(app.event, draw, tick, Initial); 
};

Main;
