
@ Drawing@ = /Drawing%.Drawing@;
% Translate = /Drawing%.Translate;

@ Int@ = /Int/Int%.Int@;
% Add = /Int/Int%.Add;
% Sub = /Int/Int%.Sub;

% Lt = /Int/Int/Eq%.Lt;
% Gt = /Int/Int/Eq%.Gt;

% Int = /Int/Int/Lit%.Int;

% Graphics = /Invaders/Graphics%;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

# The ships moves side to side, but not forward or backwards.
# This is the Y coordinate of the bottom edge of the ship.
Int@ ShipY = Int|11;

# The velocity of the ship when it is moving, in pixels per tick.
Int@ ShipV = Int|1;

# The range of values allowed for the left edge of the ship.
Int@ MinX = Int|48;
Int@ MaxX = Int|257;

@ Dir@ = +(
  Unit@ left,
  Unit@ right,
  Unit@ stopped
);

@ Status@ = +(
  Dir@ alive,        # Which direction it is going.
  Unit@ dying_a,     # Dying with 'a' animation.
  Unit@ dying_b      # Dying with 'b' animation.
);

@ Ship@ = *(
  Int@ x,           # The left edge of the ship
  Status@ status
);
  
# The initial state of the ship.
Ship@ Initial = @(
  x: MinX,
  status: Status@(alive: Dir@(stopped: Unit))
);

# Set the direction of the ship to match the given direction.
(Ship@, Dir@) { Ship@; } Input = (Ship@ s, Dir@ d) {
  @(
    x: s.x,
    status: Status@(alive: d));
};

# Kill --
#   Set the ship to dying.
(Ship@) { Ship@; } Kill = (Ship@ s) {
  Ship@(s.x, Status@(dying_a: Unit));
};

# Revive --
#   Revive a dying ship.
(Ship@) { Ship@; } Revive = (Ship@ s) {
  Ship@(s.x, Status@(alive: Dir@(stopped: Unit)));
};

# Advance the ship one unit of game time.
(Ship@) { Ship@; } Tick = (Ship@ s) {
  s.status.?(dying_a: Ship@(s.x, Status@(dying_b: Unit)));
  s.status.?(dying_b: Ship@(s.x, Status@(dying_a: Unit)));

  s.status.alive.?(
      left: {
        Int@ nx = Sub(s.x, ShipV);
        Lt(nx, MinX).?(
           true: @(x: MinX, status: Status@(alive: Dir@(stopped: Unit))),
           false: @(x: nx, status: s.status));
      },
      right: {
        Int@ nx = Add(s.x, ShipV);
        Gt(nx, MaxX).?(
           true: @(x: MaxX, status: Status@(alive: Dir@(stopped: Unit))),
           false: @(x: nx, status: s.status));
      },
      stopped: s);
};

# Make a drawing of the ship in its current location.
(Ship@) { Drawing@; } Draw = (Ship@ s) {
  Drawing@ d = s.status.?(
    alive: Graphics.Ship,
    dying_a: Graphics.DeadShipA,
    dying_b: Graphics.DeadShipB);

  Translate(s.x, ShipY, d);
};

@(Ship@, Dir@, ShipY, Initial, Input, Kill, Revive, Tick, Draw);
