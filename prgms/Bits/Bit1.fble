
@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

@ Bool@ = /Bool%.Bool@;
% True = /Bool%.True;
% False = /Bool%.False;

@ Bit@ = /Bits/BitN%.Bit@;
<@>@ BitN@ = /Bits/BitN%.BitN@;

@ Result@ = *(Bit@ z, Bit@ cout);

Bit@ 0 = Bit@(0: Unit);
Bit@ 1 = Bit@(1: Unit);

(Bit@){Bit@;} not = (Bit@ a) {
  ?(a; 0: 1, 1: 0);
};

(Bit@, Bit@){Bit@;} and = (Bit@ a, Bit@ b) {
  ?(a; 0: a, 1: b);
};

(Bit@, Bit@){Bit@;} or = (Bit@ a, Bit@ b) {
  ?(a; 0: b, 1: a);
};

(Bit@, Bit@){Bit@;} xor = (Bit@ a, Bit@ b) {
  ?(a; 0: b, 1: not(b));
};

(Bit@, Bit@, Bit@){Result@;} fulladd = (Bit@ a, Bit@ b, Bit@ c) {
  Bit@ x = xor(a, b);
  Result@(xor(x, c), ?(x; 0: a, 1: c));
};

(Bit@, Bit@){Bit@;} add = (Bit@ a, Bit@ b) {
  fulladd(a, b, 0).z;
};

(Bit@){Result@;} fullinc = (Bit@ a) {
  Result@(not(a), a);
};

(Bit@){Bit@;} inc = (Bit@ a) {
  fullinc(a).z;
};

Bit@ zero = 0;

(Bit@){Bool@;} iszero = (Bit@ a) {
  ?(a; 0: True, 1: False);
};

(Bit@, Bit@){Bool@;} eq = (Bit@ a, Bit@ b) {
  ?(a; 0: ?(b; 0: True,  1: False),
       1: ?(b; 0: False, 1: True));
};

(Bit@){Bit@;} msb = (Bit@ a) {
  a;
};

(Bit@, Bit@){Result@;} lshift = (Bit@ a, Bit@ cin) {
  Result@(cin, a);
};

@(
  Bit1@: Bit@,
  BitN: BitN@<Bit@>(Result@, not, and, or, xor, add, inc, zero, iszero, eq, msb, fulladd, fullinc, lshift)
);
