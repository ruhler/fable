
@ Decimal@ = /Digits%.Decimal@;

@ Drawing@ = /Drawing%.Drawing@;
% Blank = /Drawing%.Blank;
% Drawings = /Drawing%.Drawings;
% Translate = /Drawing%.Translate;

@ Int@ = /Int/Int%.Int@;
% Add = /Int/Int%.Add;
% Sub = /Int/Int%.Sub;
% Div = /Int/Int/Div%.Div;
% Eq = /Int/Int/Eq%.Eq;
% Gt = /Int/Int/Eq%.Gt;
% LeastSignificantDigit = /Int/Int/Digits%.LeastSignificantDigit;

% Int = /Int/Int/Lit%.Int;

% Graphics = /Invaders/Graphics%;

% Aliens = /Invaders/Aliens%;
@ Aliens@ = Aliens.Aliens@;

% Bombs = /Invaders/Bombs%;
@ Bombs@ = Bombs.Bombs@;

% Bullet = /Invaders/Bullet%;
@ Bullet@ = Bullet.Bullet@;

% Ship = /Invaders/Ship%;
@ Dir@ = Ship.Dir@;
@ Ship@ = Ship.Ship@;

% Ufo = /Invaders/Ufo%;
@ Ufo@ = Ufo.Ufo@;

<@>@ Maybe@ = /Maybe%.Maybe@;

@ String@ = /String%.String@;
% Strs = /String%.Strs;
% Str = /String%.Str;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

@ Lives@ = +(Unit@ 0, Unit@ 1, Unit@ 2, Unit@ 3);

# GameOver@ --
#   The game over animation.
#
# Fields:
#   hidden - the tail parts of the string "GAME OVER" that aren't yet visible.
#   visible - the front parts of the string "GAME OVER" that are visible.
#   wait - how many ticks to wait before showing the next character.
@ GameOver@ = *(String@ hidden, String@ visible, Int@ wait);

# GameOverWait --
#   The number of ticks between revealing of letters in the game over
#   animation.
Int@ GameOverWait = Int|28;

# DyingWait --
#   How long the ship spends dying.
Int@ DyingWait = Int|120;

# State@ --
#   The overall game state.
@ State@ = +(
  Unit@ defending,   # Player is actively defending against the alien attack.
  Int@ dying,        # Play ship dying animation this many ticks.
  Int@ leveling,     # Wait this many ticks to start next level.
  GameOver@ over     # The game is over.
);

Int@ LevelingTime = Int|90;

State@ GameOver = State@(over: GameOver@(Str|'GAME OVER', Str|'', GameOverWait));
State@ Dying = State@(dying: DyingWait);

@ Game@ = *(
  Int@ score,
  Int@ level,
  Lives@ lives,
  State@ state,
  Ship@ ship,
  Bullet@ bullet,
  Aliens@ aliens,
  Bombs@ bombs,
  Ufo@ ufo
);

@ Input@ = +(Dir@ dir, Unit@ fire);

Game@ Initial = @(
  score: Int|0,
  level: Int|0,
  lives: Lives@(3: Unit),
  state: State@(defending: Unit),
  ship: Ship.Initial,
  bullet: Bullet.Initial,
  aliens: Aliens.Initial(Int|0),
  bombs: Bombs.Initial,
  ufo: Ufo.Initial
);

(GameOver@) { GameOver@; } TickGameOver = (GameOver@ over) {
  Gt(over.wait, Int|0).?(true: {
    GameOver@(over.hidden, over.visible, Sub(over.wait, Int|1));
  });

  over.hidden.?(nil: over);

  GameOver@(over.hidden.cons.tail,
    Strs[over.visible, Str[over.hidden.cons.head]],
    GameOverWait);
};

(Game@) { Game@; } Tick = (Game@ g) {
  g.state.?(over: {
    @(score: g.score, level: g.level, lives: g.lives,
      state: State@(over: TickGameOver(g.state.over)), ship: g.ship,
      bullet: g.bullet, aliens: g.aliens, bombs: g.bombs, ufo: g.ufo);
  });

  g.state.?(leveling: {
    Eq(Int|0, g.state.leveling).?(true: {
      Int@ level = Add(Int|1, g.level);
      @(score: g.score, level: level, lives: g.lives,
        state: State@(defending: Unit), ship: Ship.Initial,
        bullet: Bullet.Initial, aliens: Aliens.Initial(level),
        bombs: Bombs.Initial, ufo: g.ufo);
    });

    @(score: g.score, level: g.level, lives: g.lives,
      state: State@(leveling: Sub(g.state.leveling, Int|1)), ship: g.ship,
      bullet: g.bullet, aliens: g.aliens, bombs: g.bombs, ufo: g.ufo);
  });

  g.state.?(dying: {
    Eq(Int|0, g.state.dying).?(true: {
      g.lives.?(0: {
        Game@(g.score, g.level, g.lives, GameOver, g.ship, g.bullet,
          g.aliens, g.bombs, g.ufo);
      });

      Game@(g.score, g.level, g.lives, State@(defending: Unit),
        Ship.Revive(g.ship), Bullet.Initial, g.aliens, Bombs.Initial, g.ufo);
    });

    @(score: g.score, level: g.level, lives: g.lives,
      state: State@(dying: Sub(g.state.dying, Int|1)),
      ship: Ship.Tick(g.ship), bullet: g.bullet, aliens: g.aliens,
      bombs: g.bombs, ufo: g.ufo);
  });

  Game@ g_ = Game@(g.score, g.level, g.lives, g.state,
    Ship.Tick(g.ship), Bullet.Tick(g.bullet),
    Aliens.Tick(g.aliens), Bombs.Tick(g.bombs), Ufo.Tick(g.ufo));
  Game@ g = g_;

  # Check for bullet colliding with an alien.
  Game@ g_ = {
    g.bullet.live.?(false: g);
    Maybe@<Aliens.Kill@> kill = Aliens.Shoot(g.bullet.x, g.bullet.y, g.aliens);
    kill.?(nothing: g);
    Game@(Add(kill.just.points, g.score), g.level, g.lives, g.state,
      g.ship, Bullet.Initial, kill.just.aliens, g.bombs, g.ufo);
  };
  Game@ g = g_;

  # Check for bullet colliding with ufo.
  Game@ g_ = {
    g.bullet.live.?(false: g);
    Maybe@<Ufo.Kill@> kill = Ufo.Shoot(g.bullet.x, g.bullet.y, g.ufo);
    kill.?(nothing: g);
    Game@(Add(kill.just.points, g.score), g.level, g.lives, g.state,
      g.ship, Bullet.Initial, g.aliens, g.bombs, kill.just.ufo);
  };
  Game@ g = g_;

  # Check if all the aliens are dead.
  Game@ g_ = {
    Aliens.AllDead(g.aliens).?(false: g);
    Game@(g.score, g.level, g.lives, State@(leveling: LevelingTime),
      g.ship, g.bullet, g.aliens, g.bombs, g.ufo);
  };
  Game@ g = g_;

  # Check for a bomb colliding with the ship.
  Bombs.HitResult@ hit = Bombs.HitShip(g.bombs, g.ship.x);
  hit.hit.?(true: {
    Lives@ lives = g.lives.?(
      0: Lives@(0: Unit),
      1: Lives@(0: Unit),
      2: Lives@(1: Unit),
      3: Lives@(2: Unit));
    Game@(g.score, g.level, lives, Dying,
      Ship.Kill(g.ship), g.bullet, g.aliens, hit.bombs, g.ufo);
  });

  # Fire bombs
  Game@ g_ = {
    Bombs@ nbombs = Aliens.FireBombs(g.aliens, g.bombs);
    Game@(g.score, g.level, g.lives, g.state, g.ship, g.bullet,
      g.aliens, nbombs, g.ufo);
  };
  Game@ g = g_;

  # Check if the aliens have invaded.
  Game@ g_ = {
    Aliens.Invaded(g.aliens).?(false: g);
    Game@(g.score, g.level, g.lives, GameOver, g.ship, g.bullet,
      g.aliens, g.bombs, g.ufo);
  };
  Game@ g = g_;

  g;
};

(Game@, Input@) { Game@; } Input = (Game@ g, Input@ input) {
  g.state.?(defending: {
    Game@(g.score, g.level, g.lives, g.state,
      input.?(dir: Ship.Input(g.ship, input.dir), : g.ship),
      input.?(fire: Bullet.Fire(g.bullet, g.ship), : g.bullet),
      g.aliens, g.bombs, g.ufo);
  });

  g;
};

(Int@) { Drawing@; } DrawScore = {
  Int@ 10 = Int|10;

  (Int@ score) {
    # We only print 4 digits for the score.
    Int@ s1000 = score;
    Int@ s100 = Div(s1000, 10);
    Int@ s10 = Div(s100, 10);
    Int@ s1 = Div(s10, 10);
    Decimal@ d0 = LeastSignificantDigit(s1000);
    Decimal@ d1 = LeastSignificantDigit(s100);
    Decimal@ d2 = LeastSignificantDigit(s10);
    Decimal@ d3 = LeastSignificantDigit(s1);
    Translate(Int|40, Int|220, Graphics.Digits[d3, d2, d1, d0]);
  };
};

(Lives@) { Drawing@; } DrawLives = {
  Drawing@ l1 = Translate(Int|160, Int|220, Graphics.Ship);
  Drawing@ l2 = Translate(Int|180, Int|220, Graphics.Ship);
  Drawing@ l3 = Translate(Int|200, Int|220, Graphics.Ship);
  (Lives@ l) {
    l.?(
      0: Blank,
      1: Drawings[l1],
      2: Drawings[l1, l2],
      3: Drawings[l1, l2, l3]);
  };
};

(Game@) { Drawing@; } Draw = (Game@ g) {
  Drawing@ over = g.state.?(
    over: Translate(Int|120, Int|184, Graphics.String(g.state.over.visible)),
    : Blank);

  Drawings[
    DrawScore(g.score),
    DrawLives(g.lives),
    Graphics.Background,
    Ship.Draw(g.ship),
    Bullet.Draw(g.bullet),
    Aliens.Draw(g.aliens),
    Bombs.Draw(g.bombs),
    Ufo.Draw(g.ufo),
    over
  ];
};

@(Game@, Input@, Initial, Input, Tick, Draw);

