
<<@>@>@ Main@ = /App/App%.Main@;
@ Event@ = /App/App%.Event@;
@ Effect@ = /App/App%.Effect@;

@ Int@ = /Core/Int%.Int@;
% Dec = /Core/Int%.Dec;

% Int = /Core/Int/Lit%.Int;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

@ TestResult@ = /Core/Test%.TestResult@;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<<@>@>@ App@ = /App/App%.App@;

% State = /Core/Monad/State%<Int@>;

<@>@ M@ = State.State@;
<@>@ R@ = State.R@;
Monad@<M@> Monad = State.Monad;

# Benchmark --
#   Convenience function for turning apps into benchmarks. This works by
#   feeding the app with tick events for a given number of cycles, ignoring
#   any outputs from the app, and then sending it a quit event.
#
# Inputs:
#   app - the app to benchmark.
#   n - the number of iterations to run the benchmark.
#   quit - an event that will cause the app to quit when sent to the app.
(Main@, Int@, Event@)(Unit@) { TestResult@; }
Benchmark = (Main@ app, Int@ n, Event@ quit)(Unit@ _) {
  Int@ w = Int|640;
  Int@ h = Int|480;

  M@<Event@> Event = {
    Int@ n <- Monad.do(State.Get);
    n.?(n: Monad.return(quit));
    Unit@ _ <- Monad.do(State.Set(Dec(n)));
    Monad.return(Event@(tick: Unit));
  };

  (Effect@) { M@<Unit@>; } Effect = (Effect@ _) {
    Monad.return(Unit);
  };

  R@<Unit@> r = app<M@>(Monad, App@<M@>(Event, Effect), w, h)(n);
  AssertEquals(/Core/Unit/Eq%.Eq, /Core/Unit/Show%.Show, r.x, r.x);
};

@(Benchmark);
