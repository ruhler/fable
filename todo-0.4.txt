Fble 0.4 TODO
=============
Things to consider doing for the fble-0.4 release.

* Fbld C rewrite
 - Test that the correct variable is used in case of shadowing in let
   Specifically that the def argument to let is evaluated before the body.
 - Test for @define and @let names to be expressions instead of literals.
 - Test case of unresolved @x in ifeq.
   It should error out rather than be treated as false.
 - Test case of unresolved @x in error argument.
 - Test that we evaluate appropriate args to builtins before executing them.
 - Add tests for code coverage.
 - Test that function evaluation happens in functions scope, not callers
   scope.
 - Improve error messages.
   Include number of expected and actual arguments, for example.
 - Switch back to -O3 in build.tcl
 - Add proper doc comments on all the code.

* Fbld
 - Clarify in spec if @if[a@x][b@x] ... is an error or not.
   Or redesign semantics of fbld to avoid that question entirely.


* Fix potential GC gen overflow?
 - See thoughts/fble-0.3/stack_alloc.txt for details.

* Implement a custom debugger for fble
 - That works on all backends.
 - That supports single step through code.
 - That supports field access.

* Consider removing higher order kinds from the language.
  Make everything either kind @ or %. What would we lose?

* Make programs run twice as fast.

* Improving packing support for data values.
 - Taking advantage of explicit type info to pack and unpack.

* Modular compilation
 - Start using unused code for .@ module value vs type.
 - Split FbleLoad into FbleLoadProgram and FbleLoadModule.
 - Add support for loading .fble.@ files.
 - Test coverage of .fble/.fble.@ combinations.
 - Add option for loading modules from .so files?
 - Have fble-stdio check that the function has the right type?

* Fbld Language Revision
 - modularity
 - Better support for structs in fbld language, so its easier to write decent
   performing fbld code.
 - Have an 'if' primitive instead of 'ifeq' and 'ifneq'?
 - native C implementation
   Including fble build time improvements.
   Generate usage help text at build time and link into binaries instead of
   having to search for the installed documentation at runtime when --help is
   passed.

* Add fble to rosettacode.org?
  Or at least implement all the tasks, perhaps in a separate RosettaCode
  package to start.
  Probably start with all the 'Simple' tasks.

* Design a standard library?
 - Separate modules as appropriate to reduce false dependencies.
 - Document all functions.
 - Add tests for full code coverage of all functions.
 - Proper support for unicode characters in /Core/Char%.

* New apps
 - IEEE floating point support.
 - More benchmark games.
 - Implement an image viewer.

* Fble Language Features
 - Add some way to catch or recover from errors at runtime?

* Fble Debugger
 - Add support for all backends.

Doc Comments
 - dccheck should require @type present in @value content?
 - Add support for @union and @enum doc comments?
 - Add support for abstract typedef struct doc comments?
 - Would be nice to have SEE ALSO section for library man pages.

Tutorials
 - Add exercises to exercise each main point in every tutorial.
 - C API
 - /App/App%
 - /Core/Test%
