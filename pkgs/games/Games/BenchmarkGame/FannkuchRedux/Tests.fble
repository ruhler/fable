
@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;
<@>% Append = /Core/List%.Append;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;

% Flip = /Games/BenchmarkGame/FannkuchRedux%.Flip;
% Flips = /Games/BenchmarkGame/FannkuchRedux%.Flips;
% RotateRight = /Games/BenchmarkGame/FannkuchRedux%.RotateRight;
<<@>@>% Permutes = /Games/BenchmarkGame/FannkuchRedux%.Permutes;

Test@ Tests = TestSuite(Str|FannkuchRedux, List[
  Test(Str|Flip, (Unit@ _) {
    List@<Int@> input = List[Int|4, Int|2, Int|1, Int|5, Int|3];
    List@<Int@> wnt = List[Int|5, Int|1, Int|2, Int|4, Int|3];
    List@<Int@> got = Flip(Int|4, Nil<Int@>, input);
    AssertEquals(
      /Core/List/Eq%.Eq(/Core/Int/Eq%.Eq),
      /Core/List/Show%.Show(/Core/Int/Show%.Show),
      wnt, got);
  }),

  Test(Str|Flips, (Unit@ _) {
    List@<Int@> input = List[Int|4, Int|2, Int|1, Int|5, Int|3];
    Int@ wnt = Int|5;
    Int@ got = Flips(Int|0, input);
    AssertEquals(/Core/Int/Eq%.Eq, /Core/Int/Show%.Show, wnt, got);
  }),

  Test(Str|RotateRight, (Unit@ _) {
    List@<Int@> input = List[Int|1, Int|2, Int|3, Int|4, Int|5];
    List@<Int@> wnt = List[Int|5, Int|1, Int|2, Int|3, Int|4];
    List@<Int@> got = RotateRight(input);
    AssertEquals(
      /Core/List/Eq%.Eq(/Core/Int/Eq%.Eq),
      /Core/List/Show%.Show(/Core/Int/Show%.Show),
      wnt, got);
  }),

  Test(Str|Permutes, (Unit@ _) {
    List@<Int@> input = List[Int|3, Int|2, Int|1];
    List@<List@<Int@>> wnt = List[
      List[Int|1, Int|2, Int|3],
      List[Int|2, Int|1, Int|3],
      List[Int|2, Int|3, Int|1],
      List[Int|3, Int|2, Int|1],
      List[Int|3, Int|1, Int|2],
      List[Int|1, Int|3, Int|2]];

    @ S@ = List@<List@<Int@>>;
    % P = /Core/Monad/State%<S@>;
    (List@<Int@>) { P.State@<Unit@>; } F = (List@<Int@> l) {
      S@ s <- P.Monad.do(P.Get);
      P.Set(Append(s, List[l]));
    };

    P.State@<Unit@> permutes = Permutes<P.State@>(P.Monad, input, F);
    List@<List@<Int@>> got = P.Run(permutes, Nil<List@<Int@>>).s;
    AssertEquals(
      /Core/List/Eq%.Eq(/Core/List/Eq%.Eq(/Core/Int/Eq%.Eq)),
      /Core/List/Show%.Show(/Core/List/Show%.Show(/Core/Int/Show%.Show)),
      wnt, got);
  })
]);

@(Tests);
