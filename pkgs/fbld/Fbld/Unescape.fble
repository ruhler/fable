
@ Char@ = /Core/Char%.Char@;

<@>% Cons = /Core/List%.Cons;
<@>% Reverse = /Core/List%.Reverse;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

# Removes backslash from backslash-escaped \, @, [, and ] characters in a
# string.
(String@) { String@; } Unescape = {
  # Returns the escaped character at the beginning of string s, if any.
  (String@) { Maybe@<Char@>; } escaped = (String@ s) {
    s.?(nil: Nothing<Char@>);
    s.cons.tail.?(nil: Nothing<Char@>);
    s.cons.head.?('\': {
      Char@ c = s.cons.tail.cons.head;
      c.?('@': Just(c), '[': Just(c), '\': Just(c), ']': Just(c));
      Nothing<Char@>;
    });
    Nothing<Char@>;
  };

  (String@, String@) { String@; } unescape = (String@ in, String@ rout) {
    in.?(nil: Reverse(rout));
    Maybe@<Char@> c = escaped(in);
    c.?(just: unescape(in.cons.tail.cons.tail, Cons(c.just, rout)));
    unescape(in.cons.tail, Cons(in.cons.head, rout));
  };

  (String@ in) {
    unescape(in, Str|'');
  };
};

@(Unescape);
