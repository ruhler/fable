
import @ { Bit8M=Bit8; Bit@Bit; Bit1; BitNI; BoolM=Bool@StdLib; };
import Bit8M { Bit8; };

# Bit8 7 is the most significant byte.
# Bit8 0 is the least significant byte.
struct Bit64(Bit8 7, Bit8 6, Bit8 5, Bit8 4, Bit8 3, Bit8 2, Bit8 1, Bit8 0);

module BitN(BitNI<Bit64>) {
  import @ { Bit64; B = BitN@Bit8M; Bit1; Bit; BoolM; };
  import BoolM { Bool; And; };

  func not(Bit64 a ; Bit64) {
    Bit64(not@B(a.7), not@B(a.6), not@B(a.5), not@B(a.4),
          not@B(a.3), not@B(a.2), not@B(a.1), not@B(a.0));
  };

  func and(Bit64 a, Bit64 b; Bit64) {
    Bit64(and@B(a.7, b.7), and@B(a.6, b.6), and@B(a.5, b.5), and@B(a.4, b.4),
          and@B(a.3, b.3), and@B(a.2, b.2), and@B(a.1, b.1), and@B(a.0, b.0));
  };

  func or(Bit64 a, Bit64 b; Bit64) {
    Bit64(or@B(a.7, b.7), or@B(a.6, b.6), or@B(a.5, b.5), or@B(a.4, b.4),
          or@B(a.3, b.3), or@B(a.2, b.2), or@B(a.1, b.1), or@B(a.0, b.0));
  };

  func xor(Bit64 a, Bit64 b; Bit64) {
    Bit64(xor@B(a.7, b.7), xor@B(a.6, b.6), xor@B(a.5, b.5), xor@B(a.4, b.4),
          xor@B(a.3, b.3), xor@B(a.2, b.2), xor@B(a.1, b.1), xor@B(a.0, b.0));
  };

  func add(Bit64 a, Bit64 b; Bit64) fulladd(a, b, zero@Bit1()).z;

  func zero(; Bit64) {
    Bit64(zero@B(), zero@B(), zero@B(), zero@B(),
          zero@B(), zero@B(), zero@B(), zero@B());
  };

  func iszero(Bit64 a; Bool) {
    And(
     And(And(iszero@B(a.7), iszero@B(a.6)),
         And(iszero@B(a.5), iszero@B(a.4))),
     And(And(iszero@B(a.3), iszero@B(a.2)),
         And(iszero@B(a.1), iszero@B(a.0))));
  };

  func eq(Bit64 a, Bit64 b; Bool) {
    And(
     And(And(eq@B(a.7, b.7), eq@B(a.6, b.6)),
         And(eq@B(a.5, b.5), eq@B(a.4, b.4))),
     And(And(eq@B(a.3, b.3), eq@B(a.2, b.2)),
         And(eq@B(a.1, b.1), eq@B(a.0, b.0))));
  };

  func clshift(Bit64 a; Bit64) lshift(a, a.7.7).z;

  struct Result(Bit64 z, Bit cout);

  func fulladd(Bit64 a, Bit64 b, Bit cin; Result) {
    Result@B r0 = fulladd@B(a.0, b.0, cin);
    Result@B r1 = fulladd@B(a.1, b.1, r0.cout);
    Result@B r2 = fulladd@B(a.2, b.2, r1.cout);
    Result@B r3 = fulladd@B(a.3, b.3, r2.cout);
    Result@B r4 = fulladd@B(a.4, b.4, r3.cout);
    Result@B r5 = fulladd@B(a.5, b.5, r4.cout);
    Result@B r6 = fulladd@B(a.6, b.6, r5.cout);
    Result@B r7 = fulladd@B(a.7, b.7, r6.cout);
    Result(Bit64(r7.z, r6.z, r5.z, r4.z, r3.z, r2.z, r1.z, r0.z), r7.cout);
  };

  func lshift(Bit64 a, Bit cin; Result) {
    Result@B r0 = lshift@B(a.0, cin);
    Result@B r1 = lshift@B(a.1, r0.cout);
    Result@B r2 = lshift@B(a.2, r1.cout);
    Result@B r3 = lshift@B(a.3, r2.cout);
    Result@B r4 = lshift@B(a.4, r3.cout);
    Result@B r5 = lshift@B(a.5, r4.cout);
    Result@B r6 = lshift@B(a.6, r5.cout);
    Result@B r7 = lshift@B(a.7, r6.cout);
    Result(Bit64(r7.z, r6.z, r5.z, r4.z, r3.z, r2.z, r1.z, r0.z), r7.cout);
  };
};
