
@ Edge@ = /Pinball/Edge%.Edge@;
% Edge = /Pinball/Edge%.Edge;

@ Num@ = /Pinball/Num%.Num@;
% Add = /Pinball/Num%.Add;
% Mul = /Pinball/Num%.Mul;
% Eq = /Pinball/Num%.Eq;
% Gt = /Pinball/Num%.Gt;
% Lt = /Pinball/Num%.Lt;

% Rotate = /Pinball/Rotate%.Rotate;

@ Vec@ = /Pinball/Vec%.Vec@;
% AddV = /Pinball/Vec%.AddV;
% SubV = /Pinball/Vec%.SubV;

@ Paddle@ = *(
  Edge@ edge,     # The edge of the paddle in its current position.
  Vec@ extent,    # Vector from edge.start to end of paddle at angle 0.
  Num@ vel,       # The angular velocity of the paddle in radians per tick.
  Num@ pos,       # The current angle of the paddle in radians.
  Num@ min,       # The minimum allowed value of pos.
  Num@ max        # The maximum allowed value of pos.
);

# Paddle --
#   Specify a paddle.
#
# Args:
#   start - the starting point of the paddle.
#   end - the end point of the paddle when angle is 0.
#   vel - the angular velocity of the paddle in radians per tick.
#   pos - the current position of the paddle in radians.
#   min - the minimum allowed value of pos for the paddle.
#   max - the maximum allowed value of pos for the paddle.
#   res - the coefficient of restitituion for the paddle.
(Vec@, Vec@, Num@, Num@, Num@, Num@, Num@) { Paddle@; }
Paddle = (Vec@ start, Vec@ end, Num@ vel, Num@ pos, Num@ min, Num@ max, Num@ res) {
  Vec@ extent = SubV(end, start);
  Vec@ current_end = AddV(start, Rotate(extent, pos));
  Paddle@(Edge(start, current_end, res), extent, vel, pos, min, max);
};

# Move -- 
#   Move a paddle by the given amount of time.
(Paddle@, Num@) { Paddle@; } Move = (Paddle@ p, Num@ t) {
  Num@ pos = {
    Num@ pos = Add(p.pos, Mul(p.vel, t));
    Lt(pos, p.min).?(true: p.min);
    Gt(pos, p.max).?(true: p.max);
    pos;
  };

  Eq(pos, p.pos).?(true: p);
  Paddle(p.edge.start, AddV(p.edge.start, p.extent),
    p.vel, pos, p.min, p.max, p.edge.restitution);
};

@(Paddle@, Paddle, Move);

