* Add test for proper markdown syntax in README.md?

* Why doesn't type inference work for Concat function?

* Add test that you can use a unicode character in a literal?

* Make it easier to run failing tests under valgrind and gdb.

* Do something with .@ module value vs. type?
  - There's currently unexercised code for it.

* Do something with data type instruction?
  - There's currently unexercised code for it.

* Clean up FbleNewSimpleFunc API and use cases
 - Don't require use of global variables to pass state.

* Add tests that at least the compiled apps don't crash when you run them.
  
* Fix dependency issue of build.ninja on moved *.fble files
  For example, moving Md5.fble to Md5/Md5.fble didn't trigger rebuild of
  build.ninja file.

* [spec] Should empty path be allowed in package type?
 See spec/fble.txt for more details.

* Should fble-deps be a side effect of other tools instead of a separate
  executable?
  It seems silly and potentially incorrect to run fble-deps as a separate
  tool. What about making it a general option for all the fble related tools
  that load modules? Particularly once we start loading separate .@ files.

* [modules]
 - Decide about .fble.@ files.
 - Split FbleLoad into FbleLoadProgram and FbleLoadModule.
 - Add support for loading .fble.@ files.
   And presumably some way to test this and something about it in the language
   spec?
 - Test all combinations of .fble/.fble.@, with all combinations of type
   errors in one or the other or both.

* [lib] Move more value conversion functions to separate object files.
 - Color, IO, etc.

* [debugger] Improve support for printing variables
 - Add VarDebugInfo for function static variables.
 - Emit lexical scopes where appropriate.

* Consider running some of the tests under valgrind?
 - To catch memory issues that could otherwise go undetected?

* Implement support for packed data values.
 - Change the compiler to allocate FbleDataTypeValue when appropriate.
 - Pass type to struct and union construction and access functions.
 - Implement packing for struct and union values.

* Improve performance with profiling enabled?
 - Now that we removed the optimization for detecting duplicate call entries
   in the stack?
 - see thoughts/fble.profile.txt

* For loaded submodules, should the module profile block be the module file or
  the place where it was imported from?
 - Seems like it should be the module file, because it could be imported from
   multiple places?

* Change FbleProfile functions to accept NULL, and clean up code to take
  advantage of that where it makes sense?

* Use some way other than NULL to disable profiling?
 - To encourage all the apps to support optional profiling, including things
   like fble-md5 and fble-app?
 - Check we are passing meaningful block ids to FbleNewSimpleFuncValue.

* Add option for passing .so files to FbleLinkFromCompiledOrSource?

* Print full stack trace on abort instead of just the top stack trace?

* Run fble-test-compile-error tests in compilation mode?

* Consider having separate CALL_INSTR and TAIL_CALL_INSTR.
  Their implementations may be different enough now to warrant it?

* Remove dependence of interpret.c and generated code on value.h.
  Making value functions public as necessary to support this.
  - Need public access to FbleFuncValue.statics.
  - Need FbleStrictValue. Or should this be done inside the value functions?
  - Use FbleStructValueAccess for generated code.
  - Use FbleNewStructValue for interpret.c somehow.
  and so on...

* Change FbleLink to use FbleExecutable directly instead of FbleCode?
 - Does this mean making a copy of the FbleExecutableProgram? That's tedious.

* [compilation] Switch over entirely to compilation use case?
 - Remove interpreter entirely? Any significant downside?
 - We could always write a wrapper script that calls the compiler, for
   example, to give the same user experience as the interpreter currently
   gives us.
 - Note: currently the interpreter case is my answer for how to run on
   architectures other than aarch64.

* [compilation] Cleanup API between execute/value/interpret/generated code.
 - Can I cleanup/break the dependency cycle between execute.h and value.h?
 - Should definition of FbleThread* be private to execute.c?
* [compilation] Make public headers available for compiled code to use so we don't have to
  give direct access to internal header files.
* [compilation] Add support for .fble.@ files and modular compilation.

* [cleanup] For things like FbleValueAddRef, is it okay if dst is NULL?
 - It would be convenient for constructing things in case of error.
 - I'm not sure if there's any performance implications.
 - It would be nice to specify explicitly and be consistent with this kind of
   thing.
* [cleanup] Consistently document ownership of args to C functions?
 Borrowed: no transfer of ownership.
 Consumed: ownership transferred from caller to callee.
 Outlives: caller responsible for keeping alive as long as returned result is.

* [tests] Any way to improve memory growth tests?
 It feels wrong to me to have to do a full gc for the tests to pass. It feels
 too specific to the implementation of garbage collection. Anything we can do?
* [tests] Add coverage for tagged_type and tagged_expr parse destructors
 - if only I could figure out how to exercise them.

* [/*%] Follow style guide in fble.txt
  In particular, union field names should be lowercase: just, true, false, not
  Just, True, False.
* [/*%] Clean up fble library
 - Separate modules as appropriate to reduce false dependencies.
 - Document all functions.
 - Add tests for full code coverage of all functions.
 - Rename Str to String? Or to S?
 - Consider pulling ForEach and Map out into their own class?
* [/Int%] Add test coverage for the Int routines.
* [/Fble/Test%] Clean up fble test framework
 - Use AssertEquals for more of the tests.
 - Add an AssertLt or similar methods? Or generalize AssertEquals?
 - Properly test the test infra.
* [/GameOfLife%] Switch to a target 60 FPS?
* [/Map%] Add tests for balancing of /Map%?
* [/Snake%] Switch to a target 60 FPS?
* [/Snake%] Test and fix bug when snake eats its tail.
* [/Snake%] Ignore moves that aren't orthogonal to current snake direction.
* [/Snake%] Keep track of and report score.
* [/Snake%] Figure out why the background box gets lost some times.

* [libfble] Can fble-stdio check that the function has the right type?

* [spec] Add some way to catch or recover from errors at runtime?
* [spec] Clarify in spec: is it okay to retain a local variable until a function
  exits, even if that means retaining it longer than its lexical scope?
* [spec] Clarify spec on when (compile vs runtime) vacuous value error should be
  reported.
* [spec] Document the runtime memory model,
  - Including that tail recursive functions should not smash the stack.

* [typecheck] Be more consistent in FbleTc about use of vector versus FbleTc*[].
* [typecheck] We don't get a warning about an unused self recursive function.
  More generally, we don't get warnings about variables that are referenced
  only by unused variables.
* [typecheck] Better error messages on types that have the same name but different values?
* [typecheck] Quote funny names in types. For example, the field ',' should have
  quotes in type error messages.
* [typecheck] Better error message for importing something from a module that
  is not defined in the module?
* [typecheck] Test and fix error message for type of anonymous type let values.
 - The type should be the computed type for the value, not the introduced
   abstract type?
* [typecheck] Figure out why FbleNormalType is called so often
 - See if we can fix that to reduce the now annoyingly long compile times.
 - Profiling said its all in FbleTypesEqual. Maybe something pathological?

* [profile] Check if it's okay to add new blocks to a profile in progress.
 - either way, document that clearly.

* [release] Write man pages for fble and friends?
 - see thoughts/fble.release.txt
 
