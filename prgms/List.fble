
<@,@>@ Lit@ = /Literal%.Lit@;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

# P - A list of 1 or more elements: T+
# S - A list of 0 or more elements: T*
<@>@ P@ = <@ T@> { *(T@ head, S@<T@> tail); },
<@>@ S@ = <@ T@> { +(P@<T@> cons, Unit@ nil); };

<@ T@>(T@, S@<T@>){S@<T@>;} Cons = <@ T@>(T@ a, S@<T@> l) {
  S@<T@>(cons: P@<T@>(a, l));
};

# Append list b to the end of list a.
<@ T@>(S@<T@>, S@<T@>){S@<T@>;} Append = <@ T@>(S@<T@> a, S@<T@> b) {
  a.?(cons: Cons<T@>(a.cons.head, Append<T@>(a.cons.tail, b)), nil: b);
};

S@ Nil = <@ T@> {
  S@<T@>(nil: Unit);
};

<@ T@>(Lit@<T@>) { S@<T@>; } S = <@ T@>(Lit@<T@> lit) {
  lit<S@<T@>>(Cons<T@>, Nil<T@>);
};

# InitP - Return all but the last element in 'list'.
<@ T@>(P@<T@>){S@<T@>;} InitP = <@ T@>(P@<T@> list) {
  list.tail.?(cons: Cons<T@>(list.head, InitP<T@>(list.tail.cons)), nil: Nil<T@>);
};

# InitS - Return all but the last element in 'list'.
<@ T@>(S@<T@>){S@<T@>;} InitS = <@ T@>(S@<T@> list) {
  list.?(cons: InitP<T@>(list.cons), nil: Nil<T@>);
};

# Concat: Flatten a list of lists into a single list of all the elements.
<@ T@>(S@<S@<T@>>){S@<T@>;} Concat = <@ T@>(S@<S@<T@>> x) {
  x.?(cons: Append<T@>(x.cons.head, Concat<T@>(x.cons.tail)), nil: Nil<T@>);
};

<@ A@, @ B@>(S@<A@>, (A@){B@;}){S@<B@>;} MapS = <@ A@, @ B@>(S@<A@> a, (A@){B@;} f) {
  a.?(cons: S@<B@>(cons: MapP<A@, B@>(a.cons, f)), nil: Nil<B@>);
},
<@ A@, @ B@>(P@<A@>, (A@){B@;}){P@<B@>;} MapP = <@ A@, @ B@>(P@<A@> a, (A@){B@;} f) {
  P@<B@>(f(a.head), MapS<A@, B@>(a.tail, f));
};

<@ A@, @ B@>(S@<A@>, B@, (A@, B@){B@;}){ B@;}
ForEach = <@ A@, @ B@>(S@<A@> l, B@ base, (A@, B@){B@;} body) {
  l.?(cons: ForEach<A@, B@>(l.cons.tail, body(l.cons.head, base), body),
      nil: base);
};

# ForS_
#  A process version of ForEach.
#
# TODO: Pick a better name for this.
<@ A@, @ B@>(S@<A@>, B@, (A@, B@) { B@!; }){ B@!; }
ForS_ = <@ A@, @ B@>(S@<A@> l, B@ base, (A@, B@) { B@!; } body) {
  l.?(
    cons: {
      B@ nbase := body(l.cons.head, base);
      ForS_<A@, B@>(l.cons.tail, nbase, body);
    },
    nil: !(base));
};

@(S@,
  Cons, Append, Nil, S,
  InitS, Concat, MapS,
  ForEach, ForS_);
