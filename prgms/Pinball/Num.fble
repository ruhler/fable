
@ Bool@ = /Bool%.Bool@;

@ Decimal@ = /Digits%.Decimal@;

@ Int@ = /Int/Int%.Int@;
% AddI = /Int/Int%.Add;
% SubI = /Int/Int%.Sub;
% NegI = /Int/Int%.Neg;
% MulI = /Int/Int%.Mul;
% DivI = /Int/Int/Div%.Div;
% GtI = /Int/Int/Eq%.Gt;
% GeI = /Int/Int/Eq%.Ge;
% LtI = /Int/Int/Eq%.Lt;
% LeI = /Int/Int/Eq%.Le;
% EqI = /Int/Int/Eq%.Eq;
% IntI = /Int/Int/Lit%.Int;
% ShowI = /Int/Int/Show%.Show;

<@>@ List@ = /List%.List@;

<@>@ Show@ = /Show%.Show@;

% Str = /String%.Str;
% Strs = /String%.Strs;

# _@ -- Token type to prevent internal access to Num@ abstract type.
@? _@;

# Num@ -- 
#   A number with sufficient precision for the pinball game.
#
# The integer x is used to represent the number x/S.
@ Num@ = _@<Int@>;

# S -- 
#   Scale factor for converting Int@ to Num@.
Int@ S = IntI|128;

(Num@, Num@) { Num@; } Add = (Num@ a, Num@ b) {
  _@(AddI(a<_@>, b<_@>));
};

(Num@, Num@) { Num@; } Sub = (Num@ a, Num@ b) {
  _@(SubI(a<_@>, b<_@>));
};

(Num@) { Num@; } Neg = (Num@ a) {
  _@(NegI(a<_@>));
};

(Num@, Num@) { Num@; } Mul = (Num@ a, Num@ b) {
  _@(DivI(MulI(a<_@>, b<_@>), S).q);
};

(Num@, Num@) { Num@; } Div = (Num@ a, Num@ b) {
  _@(DivI(MulI(a<_@>, S), b<_@>).q);
};

(Num@, Num@) { Bool@; } Eq = (Num@ a, Num@ b) {
  EqI(a<_@>, b<_@>);
};

(Num@, Num@) { Bool@; } Gt = (Num@ a, Num@ b) {
  GtI(a<_@>, b<_@>);
};

(Num@, Num@) { Bool@; } Ge = (Num@ a, Num@ b) {
  GeI(a<_@>, b<_@>);
};

(Num@, Num@) { Bool@; } Lt = (Num@ a, Num@ b) {
  LtI(a<_@>, b<_@>);
};

(Num@, Num@) { Bool@; } Le = (Num@ a, Num@ b) {
  LeI(a<_@>, b<_@>);
};

Show@<Num@> Show = (Num@ a) {
  Strs[ShowI(a<_@>), Str|' / ', ShowI(S)];
};

# Int --
#   Integer literal.
(List@<Decimal@>) { Num@; } Int = (List@<Decimal@> ds) {
  _@(MulI(IntI(ds), S));
};

(Num@) { Int@; } Floor = (Num@ a) {
  DivI(a<_@>, S).q;
};

@(Num@, Add, Sub, Neg, Mul, Div, Eq, Gt, Ge, Lt, Le, Show, Int, Floor);
