Fble 0.5 Release
================
Proposed focus area: performance.

Goal: Make fble pprof viewer fast enough to be useful in practice.

Possible features:
* Re-implement profiling in fble to generate samples.
* Optimize fble pprof viewer.
* Optimize function calls in runtime.

---

Bug: If we allocate a literal with 25746910 characters, it looks like we smash
the stack. That corresponds to 196MB allocation on the stack for the args.

Ugh. Any easy way around that? Do I need to make this a dynamic allocation?

We already end up using a vector for this. Why not use the vector from the
start? Regardless, I should probably write a test for this. But what limit is
reasonable? Sigh.

Let's write a test case, see if I can fix it. If no easy fix, leave it as a
todo for now and work around in the short term.

It's a bit tedious that we need a 1.2MB fble file to reproduce the error. Is
that really reasonable? Should we be supporting such large literals? What's
the alternative for my benchmark?

Anyway, see if we can get it to work. Then decide if I want to check it in.

I can get rid of the stack smashing issue. I need to figure out the aarch64
mov instruction to load a larger number into a register. What does GCC do?

  mov x0, 62977
  movk  x0, 0x11, lsl 16

Sigh. Looks like I'll have to fix that everywhere.

Let's read up on the details of mov and movk:
* mov takes a 16 bit number.
* movk moves a 16 bit shifted number in a register, keeping whatever else was
  already there.

---

I declare the performance improvement goal of this release met. What do I want
to shift my focus to next? I think to pprof. Figure out what UI I want. I can
prototype it in python. Then try implementing in fble. We can see how
performance is there.

When I have something I'm happy with, revisit the profiling implementation in
fble runtime itself. See if I can simplify and generalize it at the same time.
Though honestly it's hard to believe I can make it go faster by recording a
lot more detail in the profile...

I would like to make a decision on GC native values. That's a separate kind of
track to follow. Of course we'll want to do release cleanup/burndown when I
feel like I've finished with the meat of things. I do feel like I've finished
with the meat of the runtime changes, but plenty of other areas still worth
exploring.

