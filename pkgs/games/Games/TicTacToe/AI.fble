
<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% ForEach = /Core/List%.ForEach;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;
<@>% DoWhile = /Core/Maybe%.DoWhile;

% Lt = /Core/Ord%.Lt;
% Eq = /Core/Ord%.Eq;
% Gt = /Core/Ord%.Gt;

% Unit = /Core/Unit%.Unit;

@ Board@ = /Games/TicTacToe/Board%.Board@;
@ Player@ = /Games/TicTacToe/Board%.Player@;
@ Position@ = /Games/TicTacToe/Board%.Position@;
@ Result@ = /Games/TicTacToe/Board%.Result@;
@ Square@ = /Games/TicTacToe/Board%.Square@;
% BoardStatus = /Games/TicTacToe/Board%.BoardStatus;
% Move = /Games/TicTacToe/Board%.Move;

/Core/Ord%.Ord@<Square@> SquareOrd = (Square@ a, Square@ b) {
  a.?(
    X: b.?(X: Eq, O: Lt, E: Lt),
    O: b.?(X: Gt, O: Eq, E: Lt),
    E: b.?(X: Gt, O: Gt, E: Eq));
};

/Core/Ord%.Ord@<Board@> BoardOrd = (Board@ a, Board@ b) {
  SquareOrd(a.ul, b.ul).?(lt: Lt, gt: Gt);
  SquareOrd(a.uc, b.uc).?(lt: Lt, gt: Gt);
  SquareOrd(a.ur, b.ur).?(lt: Lt, gt: Gt);
  SquareOrd(a.ml, b.ml).?(lt: Lt, gt: Gt);
  SquareOrd(a.mc, b.mc).?(lt: Lt, gt: Gt);
  SquareOrd(a.mr, b.mr).?(lt: Lt, gt: Gt);
  SquareOrd(a.ll, b.ll).?(lt: Lt, gt: Gt);
  SquareOrd(a.lc, b.lc).?(lt: Lt, gt: Gt);
  SquareOrd(a.lr, b.lr).?(lt: Lt, gt: Gt);
  Eq;
};

(Position@){ Maybe@<Position@>; } NextPosition = (Position@ p) {
  p.?(UL: Just(Position@(UC: Unit)),
      UC: Just(Position@(UR: Unit)),
      UR: Just(Position@(ML: Unit)),
      ML: Just(Position@(MC: Unit)),
      MC: Just(Position@(MR: Unit)),
      MR: Just(Position@(LL: Unit)),
      LL: Just(Position@(LC: Unit)),
      LC: Just(Position@(LR: Unit)),
      LR: Nothing<Position@>);
};

# Rotate a board 90 degrees clockwise
(Board@) { Board@; } RotateBoard = (Board@ b) {
  Board@(b.ll, b.ml, b.ul,
         b.lc, b.mc, b.uc,
         b.lr, b.mr, b.ur);
};

# Rotate a position 90 degrees clockwise
(Position@) { Position@; } RotatePosition = (Position@ p) {
  p.?(
    UL: Position@(UR: Unit), UC: Position@(MR: Unit), UR: Position@(LR: Unit),
    ML: Position@(UC: Unit), MC: Position@(MC: Unit), MR: Position@(LC: Unit),
    LL: Position@(UL: Unit), LC: Position@(ML: Unit), LR: Position@(LL: Unit));
};

# Flip a board horizontally
(Board@) { Board@; } FlipBoard = (Board@ b) {
  Board@(b.ll, b.lc, b.lr,
         b.ml, b.mc, b.mr,
         b.ul, b.uc, b.ur);
};

# Flip a position horizontally
(Position@) { Position@; } FlipPosition = (Position@ p) {
  p.?(
    UL: Position@(LL: Unit), UC: Position@(LC: Unit), UR: Position@(LR: Unit),
    ML: Position@(ML: Unit), MC: Position@(MC: Unit), MR: Position@(MR: Unit),
    LL: Position@(UL: Unit), LC: Position@(UC: Unit), LR: Position@(UR: Unit));
};


# Re-interpret the result from the perspective of the opposing player.
(Result@){Result@;} FlipResult = (Result@ r) {
  r.?(Win:  Result@(Loss: Unit),
      Draw: Result@(Draw: Unit),
      Loss: Result@(Win: Unit));
};

@ PositionResult@ = *(Position@ position, Result@ result);
@ BoardPositionResult@ = *(Board@ board, PositionResult@ pr);

(BoardPositionResult@) { BoardPositionResult@; }
RotateBPR = (BoardPositionResult@ bpr) {
  BoardPositionResult@(RotateBoard(bpr.board),
    PositionResult@(RotatePosition(bpr.pr.position), bpr.pr.result));
};

(BoardPositionResult@) { BoardPositionResult@; }
FlipBPR = (BoardPositionResult@ bpr) {
  BoardPositionResult@(FlipBoard(bpr.board),
    PositionResult@(FlipPosition(bpr.pr.position), bpr.pr.result));
};

# Produce all different symmetrically equivalent board position results of the
# given board position result.
(BoardPositionResult@) { List@<BoardPositionResult@>; }
AllSymmetries = (BoardPositionResult@ bpr) {
  BoardPositionResult@ b0 = bpr;
  BoardPositionResult@ b1 = RotateBPR(b0);
  BoardPositionResult@ b2 = RotateBPR(b1);
  BoardPositionResult@ b3 = RotateBPR(b2);
  BoardPositionResult@ f0 = FlipBPR(b0);
  BoardPositionResult@ f1 = RotateBPR(f0);
  BoardPositionResult@ f2 = RotateBPR(f1);
  BoardPositionResult@ f3 = RotateBPR(f2);
  List<BoardPositionResult@>[b0, b1, b2, b3, f0, f1, f2, f3];
};

(PositionResult@, PositionResult@) { PositionResult@; }
ChooseBestPosition = (PositionResult@ a, PositionResult@ b) {
  Result@ ra = a.result;
  Result@ rb = b.result;
  ra.?(Win: a,
       Draw: rb.?(Win: b, Draw: a, Loss: a),
       Loss: b);
};

(Maybe@<PositionResult@>, Maybe@<PositionResult@>) { Maybe@<PositionResult@>; }
ChooseBestMaybePosition = (Maybe@<PositionResult@> a, Maybe@<PositionResult@> b) {
  a.?(nothing: b);
  b.?(nothing: a);
  Just(ChooseBestPosition(a.just, b.just));
};

# Map from Board to the best next move to make on that board and the expected
# game result from playing there.
@ MemoTable@ = /Core/Map/Tree%.Map@<Board@, PositionResult@>;
% Empty = /Core/Map/Tree%.Empty<Board@, PositionResult@>;
% Lookup = /Core/Map/Tree%.Lookup(BoardOrd)<PositionResult@>;
% Insert = /Core/Map/Tree%.Insert(BoardOrd)<PositionResult@>;

<@>@ MemoState@ = <@ T@>{ *(MemoTable@ memo, T@ data); };

# Return the expected result of the game for player 'x', assuming player 'x'
# has just moved and that both players play optimally.
(MemoTable@, Board@, Player@){MemoState@<Result@>;}
ExpectedResult = (MemoTable@ m, Board@ b, Player@ x) {
  BoardStatus(b).?(
      X: MemoState@<Result@>(m,
          x.?(X: Result@(Win: Unit), O: Result@(Loss: Unit))),
      O: MemoState@<Result@>(m,
          x.?(X: Result@(Loss: Unit), O: Result@(Win: Unit))),
      D: MemoState@<Result@>(m, Result@(Draw: Unit)),
      E: {
        Player@ o = x.?(X: Player@(O: Unit), O: Player@(X: Unit));
        MemoState@<PositionResult@> move = ChooseBestMove(m, b, o);
        MemoState@(move.memo, FlipResult(move.data.result));
      }
   );
},

# Return the expected result of player 'x' moving at position 'p' on board
# 'b'. Returns Nothing if the player 'x' cannot move at position 'p' on board
# 'b'.
(MemoTable@, Board@, Player@, Position@){MemoState@<Maybe@<PositionResult@>>;}
MoveResult = (MemoTable@ m, Board@ b, Player@ x, Position@ p) {
  Maybe@<Board@> moved = Move(b, p, x);
  moved.?(nothing:MemoState@(m, Nothing<PositionResult@>));

  MemoState@<Result@> result = ExpectedResult(m, moved.just, x);
  MemoState@(result.memo, Just(PositionResult@(p, result.data)));
},

# Choose the best move for player 'x' on the given board.
# The results are undefined if there are no moves left to make.
(MemoTable@, Board@, Player@){MemoState@<PositionResult@>;}
ChooseBestMove = (MemoTable@ m, Board@ b, Player@ x) {
  Maybe@<PositionResult@> cached = Lookup(m, b);
  cached.?(just: MemoState@(m, cached.just));

  MemoState@<Maybe@<PositionResult@>> best =
    DoWhile(
      Position@(UL: Unit), NextPosition,
      MemoState@(m, Nothing<PositionResult@>),
      (Position@ p, MemoState@<Maybe@<PositionResult@>> best) {
        MemoState@<Maybe@<PositionResult@>> curr = MoveResult(best.memo, b, x, p);
        MemoState@<Maybe@<PositionResult@>>(
          curr.memo,
          ChooseBestMaybePosition(best.data, curr.data));
    });

  MemoTable@ newMemo =
    ForEach(
      AllSymmetries(BoardPositionResult@(b, best.data.just)),
      best.memo,
      (BoardPositionResult@ bpr, MemoTable@ m) {
        Insert(m, bpr.board, bpr.pr);
      });

  MemoState@(newMemo, best.data.just);
};

# AI@ --
#   Internal state for the AI.
@ AI@ = MemoTable@;

# Initial --
#   An initial value to use for AI@.
AI@ Initial = {
  # TODO: It takes a couple of minute to pre-compute the AI.
  # Still too slow to enable. :(
  # ChooseBestMove(Empty, EmptyBoard, Player@(X: Unit)).memo;
  Empty;
};

# AIR@ --
#   Result of running the AI.
@ AIR@ = *(AI@ ai, Position@ position);

# Move --
#   Make a move by AI@.
(AI@, Board@, Player@) { AIR@; }
Move = (AI@ ai, Board@ board, Player@ player) {
  MemoState@<PositionResult@> mpr = ChooseBestMove(ai, board, player);
  AIR@(mpr.memo, mpr.data.position);
};

@(AI@, AIR@, Initial, Move);
