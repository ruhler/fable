
<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Cons = /Core/List%.Cons;
<@>% Reverse = /Core/List%.Reverse;

<@,@>@ Map@ = /Core/Map%.Map@;
<@,@>% ForEach = /Core/Map%.ForEach;

<@>@ Show@ = /Core/Show%.Show@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

# Show --
#   Implementation of Show@ for Map@<K@, V@>. See documentation of
#   /Show%.Show@.
#
#   { }
#   { a => b; }
#   { a => b; c => d; }
#
<@ K@>(Show@<K@>)<@ V@>(Show@<V@>) { Show@<Map@<K@, V@>>; }
Show = <@ K@>(Show@<K@> show_key)<@ V@>(Show@<V@> show_value)(Map@<K@, V@> m) {
  List@<String@> elems = ForEach(m, List[Str|'{ '],
    (K@ k, V@ v, List@<String@> es) {
      Cons(Strs[show_key(k), Str|' => ', show_value(v), Str|'; '], es);
    });
  Strs(Reverse(Cons(Str|'}', elems)));
};

@(Show);
