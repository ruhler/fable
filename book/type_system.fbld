@doc Fble Type System Design
 Guiding principles for the design of the Fble type system:

 @definition Avoid builtin types where possible.
  Many languages have builtin types for integers, booleans, floating point,
  characters, strings, dictionaries. But many of these things can be
  implemented in terms of more primitive kinds of types such as struct, enum,
  and union types.

  Avoid special casing these types. Users should be able to define their own
  versions of the types that are just as good as the builtins, no special
  privilege should be granted to a specific subset of types implemented by the
  language designer. If the types need to be built in for performance, better
  to optimize the core language so user types get the same performance boosts.
  If the types need to be built in for special language features, make those
  language features available to user defined types.

  Having a builtin type such as a 32-bit integer or floating point ties the
  language to a particular hardware implementation, which will make it less
  generally useful.

 @definition Static type system.
  Computers are useful tools. The idea behind a type system is to allow a
  computer to find issues in a program automatically. For it to be useful, it
  should be able to find those issues without running the program, because
  otherwise you could just run the program yourself and see if it works or
  not.

 @definition Simple type rules.
  Where simple means it's relatively straight forward to derive the types of
  an expression. If the type rules are complicated, it's going to be hard to
  implement a type checker, and it's going to be hard for a human to
  understand what the types are. This happens in languages like Haskell, where
  you can get into cases where you have to run the type checker in order to
  figure out what the type of something is.

  The specific approach to achieving a simple type system in fble is to
  require that the type of an expression can be determined solely from the
  types of its constituent parts or the types of variables in scope. In
  particular, no form of type inference that has to know how the result of an
  expression is used in order to figure out what the type of the expression
  is.
