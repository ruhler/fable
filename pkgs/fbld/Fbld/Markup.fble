
<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Nothing = /Core/Maybe%.Nothing;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Loc@ = /Fbld/Loc%.Loc@;

<@>@ Env@ = /Fbld/Env%.Env@;

<@>@ Result@ = /Fbld/Result%.Result@;
<@>% Error = /Fbld/Result%.Error;
% r = /Fbld/Result%.Monad;

@ Text@ = /Fbld/Text%.Text@;

# Fbld marked up text.
@ Command@ = *(Text@ name, Maybe@<Impl@> impl, List@<Markup@> args),
@ Sequence@ = *(Markup@ a, Markup@ b),
@ Markup@ = +(
  Unit@ empty,
  Text@ plain,          # non-empty
  Command@ command,
  Sequence@ sequence    # both a and b are non-empty
),
@ Impl@ = (Env@<Impl@>, Command@) { Result@<Markup@>; };

Markup@ Empty = Markup@(empty: Unit);

(Loc@, String@) { Markup@; }
Plain = (Loc@ l, String@ str) {
  str.?(nil: Empty);
  Markup@(plain: Text@(l, str));
};

(Loc@, String@, List@<Markup@>) { Markup@; }
Command = (Loc@ l, String@ name, List@<Markup@> args) {
  Markup@(command: Command@(Text@(l, name), Nothing<Impl@>, args));
};

(Markup@, Markup@) { Markup@; }
Append = (Markup@ a, Markup@ b) {
  a.?(empty: b);
  b.?(empty: a);
  Markup@(sequence: @(a, b));
};

(List@<Markup@>) { Markup@; }
Markups = (List@<Markup@> xs) {
  xs.?(nil: Empty);
  xs.cons.tail.?(nil: xs.cons.head);
  Append(xs.cons.head, Markups(xs.cons.tail));
};

(Markup@, String@) { Result@<String@>; }
ToString_ = (Markup@ m, String@ s) {
  m.?(
    empty: r.return(s),
    plain: r.return(/Core/List%.Append(m.plain.text, s)),
    command: {
      Error<String@>(m.command.name.loc, Strs[
          Str|'expected plain text, but found command @',
          m.command.name.text
          ]);
    },
    sequence: {
      String@ tail <- r.do(ToString_(m.sequence.b, s));
      ToString_(m.sequence.a, tail);
    });
};

# Interprets Markup@ as plain text.
# Fails if the Markup isn't plain text.
(Markup@) { Result@<String@>; }
ToString = (Markup@ m) {
  ToString_(m, Str|'');
};

@(Markup@, Command@, Sequence@, Impl@,
  Empty, Plain, Command, Append, Markups,
  ToString);
