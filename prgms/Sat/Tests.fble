% True = /Bool%.True;
% False = /Bool%.False;
% And = /Bool%.And;
@ Char@ = /Char%.Char@;
% Chars = /Char%.Chars;
<@>@ Eq@ = /Eq%.Eq@;
<@>% List = /List%.List;
<@>% Append = /List%.Append;
<@>@ Show@ = /Show%.Show@;
@ String@ = /String%.String@;
% Str = /String%.Str;
@ Test@ = /Test%.Test@;
@ TestResult@ = /Test%.TestResult@;
@ TestSuite@ = /Test%.TestSuite@;
% TestSuite = /Test%.TestSuite;
<@>% AssertEquals = /Test%.AssertEquals;
% Unit = /Unit%.Unit;

@ Formula@ = /Sat%.Formula@;
@ Clause@ = /Sat%.Clause@;
@ VarId@ = /Sat%.VarId@;
@ Var@ = /Sat%.Var@;
@ Assignment@ = /Sat%.Assignment@;
@ Result@ = /Sat%.Result@;
% EqId = /Sat%.EqId;
% Solve = /Sat%.Solve;

VarId@ X = /Int/Int%.1;

Show@<VarId@> ShowId = (VarId@ x) {
  # TODO: Print variable ids properly.
  Str(Chars|'?');
};

Show@<Var@> ShowVar = (Var@ v) {
  String@ sign = Str(v.polarity.?(true: Chars|'+', false: Chars|'-'));
  Append<Char@>(sign, ShowId(v.id));
};

Eq@<Var@> EqVar = (Var@ a, Var@ b) {
  And(EqId(a.id, b.id), /Bool/Eq%.Eq(a.polarity, b.polarity));
};

Show@<Assignment@> ShowAssignment = /List/Show%.Show<Var@>(ShowVar);
Eq@<Assignment@> EqAssignment = /List/Eq%.Eq<Var@>(EqVar);

Eq@<Result@> EqResult = (Result@ a, Result@ b) {
  a.?(
    sat: b.?(sat: EqAssignment(a.sat, b.sat), : False),
    unsat: b.?(unsat: True, : False),
    timeout: b.?(timeout: True, : False));
};

Show@<Result@> ShowResult = (Result@ a) {
  a.?(
    sat: Append<Char@>(Str(Chars|'sat: '), ShowAssignment(a.sat)),
    unsat: Str(Chars|'unsat'),
    timeout: Str(Chars|'timeout'));
};

(Result@, Result@) { TestResult@; }
AssertEq = (Result@ a, Result@ b) {
  AssertEquals<Result@>(EqResult, ShowResult, a, b);
};

TestSuite@ Tests = TestSuite(Chars|Sat, [
  Test@(Str(Chars|Sat), !({
    Formula@ f = List<Clause@>([
      List<Var@>([Var@(X, True)])
    ]);
    Result@ want = Result@(sat: List<Var@>([Var@(X, True)]));
    Result@ got = Solve(f);
    AssertEq(want, got);
  })),

  Test@(Str(Chars|Unsat), !({
    Formula@ f = List<Clause@>([
      List<Var@>([Var@(X, True)]),
      List<Var@>([Var@(X, False)])
    ]);
    Result@ want = Result@(unsat: Unit);
    Result@ got = Solve(f);
    AssertEq(want, got);
  }))
]);

@(Tests);
