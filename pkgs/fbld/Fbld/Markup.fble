
<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<@>@ List@ = /Core/List%.List@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;

@ Command@ = /Fbld/Command%.Command@;
<@>% Err = /Fbld/Result%.Err;
@ StringL@ = /Fbld/StringL%.StringL@;

<<@>@ M@>(Monad@<M@> m) {
  @ Invoke@ = /Fbld/Invoke%<M@>.Invoke@;
  @ Env@ = /Fbld/Invoke%<M@>.Env@;
  @ Markup@ = /Core/Map%.Map@<String@, Invoke@>;

  @ Entry@ = /Core/Map%.Entry@<String@, Invoke@>;
  Markup@ Empty = /Core/Map%.Empty<String@, Invoke@>;

  (Markup@, String@, Invoke@) { Markup@; }
  Insert = /Core/Map%.Insert<String@>(/Core/String/Ord%.Ord)<Invoke@>;

  (Markup@, String@) { Maybe@<Invoke@>; }
  Lookup = /Core/Map%.Lookup<String@>(/Core/String/Ord%.Ord)<Invoke@>;

  (String@, Invoke@) { Entry@; } Entry = (String@ s, Invoke@ i) {
    Entry@(s, i);
  };

  (List@<Entry@>) { Markup@; } Markup = (List@<Entry@> entries) {
    /Core/List%.ForEach(entries, Empty, (Entry@ entry, Markup@ m) {
      Insert(m, entry.key, entry.value);
      });
  };

  (Markup@) { Invoke@; } Invoke = (Markup@ markup) {
    (Env@ env, Command@ cmd) {
      Maybe@<Invoke@> f = Lookup(markup, cmd.name.str);
      f.?(nothing: {
        String@ msg = Strs[Str|'unsupported tag: ''', cmd.name.str, Str|''''];
        m.return(Err<Unit@>(StringL@(msg, cmd.name.loc)));
      });
      f.just(env, cmd);
    };
  };

  @(Markup@, Entry@, Markup, Entry, Empty, Insert, Invoke);
};
