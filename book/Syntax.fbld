@doc Fble Concrete Syntax Design
  @FbleVersion (@BuildStamp)

 Guiding principles for the design of the Fble concrete syntax:

 @definition No keywords.
  It always bothers me in languages like Java and C when I go to use a name
  like 'class' or 'union' or 'return' for a field or variable and it doesn't
  let me. You end up writing 'cls' or 'class_' or some such. I want the user
  to be able to pick any name they want for their fields and variables, with
  no arbitrarily restricted keyword names.

  In practice this means the syntactic terms are delimited using punctuation
  instead of keywords. There is not a single keyword in the fble concrete
  syntax.

 @definition Easy to parse.
  Easy to parse means for both humans and computers, based on the assumption
  that anything that is hard to write a parser for is harder for humans to
  parse.

  In original versions of the language this meant easy to write a hand coded C
  parser for. Since switching to using a parser generator for the language,
  I've relaxed that to be something that bison can handle without producing
  conflicts. The first thing I do when considering a new syntax is see if it
  creates a conflict.

 @definition Whitespace does not convey syntax.
  Languages like python or haskell layout annoy me. I want control over my own
  whitespace. In fble whitespace does not convey syntactic information. Use
  braces and other punctuation for that. Indent and put whitespace wherever
  you like.

 @definition C-like syntax.
  In some sense the concrete syntax for a language doesn't matter to me as a
  designer of the language. Changing the concrete syntax doesn't change the
  fundamental identity of a language.

  In practice you need a concrete syntax to be able to write a specification
  for the language, to develop a reference implementation, to write test
  cases, and to standardize so that developers can easily read programs from
  other developers in the language.

  The somewhat arbitrary choice is to have something likely to be more
  comfortable to a large number of programmers: a C like syntax. So: braces,
  function calls using parenthesis, angle brackets for type polymorphism.

  But C-like syntax is only a vague guide. It's much more important to expose
  the underlying language in a pure form. So think of C-like syntax more as a
  starting point that has evolved in fble into something that at times looks
  very little like C code, but has some amount of consistency and purity with
  the underlying fble language that resonates with me.

 @definition Common syntactic structures.
  Lists are common: lists of fields, lists of arguments, lists of statements.
  Try to use consistent syntax for lists. Two approaches are used:

  1. parenthesis, comma separated (or the variant angle brackets for type
     level lists).

  2. braces, semicolon terminated.

  Braces are used for those cases where names are introduced into the scope,
  such as variables, and parenthesis are used otherwise.

  Use of union tags are common: in initializers, in case expressions. That's
  why you have (name ':' expr) in both cases, and for struct values.
  
  Use of '.' for member access is common. I ended up reusing this for
  conditional expressions, which can be thought of as the same kind of thing
  as member access, so that you do x.?(...). This came after a number of
  evolutions to the conditional expression, and for some reason I quite enjoy
  how it has ended up.

 @definition Syntactic sugar only if justified.
  One thing that annoyed me when learning Haskell was all the different ways
  to do conditional expressions:  if, case, |, repeated function definitions.
  If they are all the same, they should use the same syntax. So I prefer to
  avoid syntactic sugar as much as possible. If the syntax is lacking in a
  significant way, that's a reflection that something about the underlying
  language is missing.

  Where I have syntactic sugar, it's for important reasons. Literals and list
  expressions come to mind. You fundamentally want a way to pack a lot of
  information into a dense sequence of characters. What's interesting is while
  these started as syntactic sugar, they eventually found their way into the
  underlying language specification and propagated all the way to the arm 64
  code generator. Because the abstractions were important enough that we want
  to preserve them all the way through.

  Case statements were introduced later on in the design of the language and
  have found a lot of use. I think there is a practical need to be able to
  express a linear tree without explicit nesting. It makes code significantly
  more readible.

  I think of functions as being the way users introduce custom syntax into
  their programs. If syntax is too tedious, define a function to introduce
  your own new syntax for that operation.

 @definition Distinction between type level and value level.
  Type variables end with @l{@}, normal variables don't. This is somewhat
  arbitrary, but I think important so it's easy for programmers to see what is
  determined statically and what is determined at runtime. It's also nice to
  be able to define a type and a function with similar names, so @l{Unit@} and
  Unit for example.

 @definition Syntax mirrors what runs fast.
  If there is a simple syntax for some operation, that ought to imply that
  operation is fast to run. I'm not sure how well I stick by this, but it's an
  idea at least.

  For example, field access is simple syntax because it should be fast to
  access fields. That's why we don't use function call syntax for field
  access.

  Case expressions do not have advanced pattern matching features, because
  that would hide performance overheads they introduce.

  A couple places where we don't following this today are with function bind
  and struct modify. The syntax for both makes describing programs much
  easier, but hides underlying potentially costly allocations. We'll see how
  things turn out as we try to further optimize the fble runtime.

 @definition On choice of punctuation.
  @def[@l{+}] for sum type
  @def[@l{*}] for product type.
  @def[@l{?}] for asking questions about the tag of a union. 
  @def[@l{<-}] for function bind inspired by haskell do notation.
  @def[@l{/}] for its common use as a path delimiter.
  @def[@l{@}, @l{%}] the few remaining symbols easy to access on a US keyboard.
