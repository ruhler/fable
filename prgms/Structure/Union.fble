
<@>@ List@ = /List%.List@;

@ Structure@ = /Structure%.Structure@;
% LeftS = /Structure%.LeftS;
% RightS = /Structure%.RightS;
% UnitS = /Structure%.UnitS;

@ Unit@ = /Unit%.Unit@;

# Tag@ --
#   Helper type used for describing tags used in the Union function.
@ Tag@ = +(Unit@ 0, Unit@ 1);

# Union --
#   Convenience function for defining structure values representing union
#   values.
#
# Inputs:
#   tag - the tag for the value.
#   value - the value being tagged.
#
# Returns:
#   A Structure@ representing the given tagged value.
#
# Example Use:
#   Structure@ x = Union|00(a); // LeftS(LeftS(a))
#   Structure@ y = Union|01(b); // LeftS(RightS(b))
#   Structure@ z = Union|1(c);  // RightS(c)
(List@<Tag@>)(Structure@) { Structure@; } Union = (List@<Tag@> tag)(Structure@ v) {
  tag.?(
    cons: {
      Structure@ tail = Union(tag.cons.tail)(v);
      tag.cons.head.?(0: LeftS(tail), 1: RightS(tail));
    },
    nil: v);
};

# Enum --
#   Convenience function for defining structure values representing enum
#   values.
#
# Inputs:
#   tag - the tag for the enum.
#
# Returns:
#   A Structure@ representing the given tagged enum.
#
# Example Use:
#   Structure@ x = Enum|00;
#   Structure@ y = Enum|01;
#   Structure@ z = Enum|1;
(List@<Tag@>) { Structure@; } Enum = (List@<Tag@> tag) {
  Union(tag)(UnitS);
};

@(Union, Enum);
