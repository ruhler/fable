
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Int@ = /Core/Int%.Int@;
% Incr = /Core/Int%.Incr;
% Add = /Core/Int%.Add;
% Mul = /Core/Int%.Mul;
% Div = /Core/Int/Div%.Div;
% Gt = /Core/Int/Eq%.Gt;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% Nil = /Core/List%.Nil;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;
% Lines = /Core/String%.Lines;

@ Unit@ = /Core/Unit%.Unit@;

@ Profile@ = /Pprof/Profile%.Profile@;
@ LocId@ = /Pprof/Profile%.LocId@;

@ Count@ = /Pprof/Profile/Count%.Count@;
% Counts = /Pprof/Profile/Count%.Counts;
% LM = /Pprof/Profile/LocationMap%;

<<@>@>% Parse = /Pprof/Perf%.Parse;

Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio, List@<String@> _args) {
  % O = /Core/Stream/OStream%(m);

  Maybe@<Profile@> mprofile <- m.do(Parse(m, stdio.in));
  mprofile.?(nothing: m.return(False));
  Profile@ profile = mprofile.just;

  LM.Map@<Count@> flat = Counts(Nil<LocId@>, Nil<LocId@>, profile);

  Int@ num_locs = /Core/List/Length%.Length(profile.locations);
  Int@ num_exec = LM.ForEach(flat, Int|0, (LocId@ _k, Count@ c, Int@ sum) {
      Int@ total = /Core/List%.ForEach(c.total, Int|0, Add);
      Gt(total, Int|0).?(true: Incr(sum), false: sum);
    });
  Int@ percent = Div(Mul(Int|100, num_exec), num_locs).q;

  Unit@ _ <- m.do(O.PutLine(stdio.out, Lines[
    Str|'Profile Report',
    Str|'==============',
    Strs[
      Str|'blocks executed: ', /Core/Int/Show%.Show(percent),
      Str|'% of ', /Core/Int/Show%.Show(num_locs)]]));

  Unit@ _ <- m.do(O.PutLine(stdio.out, Lines[
    Str|'Block Locations',
    Str|'---------------',
    Lines(/Core/List%.Map(profile.locations, /Pprof/Profile/Show%.Location))]));

  m.return(True);
};

/Core/Stdio/IO%.Run(Main);
