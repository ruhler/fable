
@ Drawing@ = /App/Drawing%.Drawing@;

@ Int@ = /Core/Int%.Int@;

<@>@ Get@ = /Core/Process%.Get@;
<@>@ Put@ = /Core/Process%.Put@;

@ Unit@ = /Core/Unit%.Unit@;

@ Key@ = +(
  Unit@ a, Unit@ d, Unit@ h, Unit@ j, Unit@ k, Unit@ l,
  Unit@ q, Unit@ s, Unit@ w,
  Unit@ left, Unit@ right, Unit@ up, Unit@ down,
  Unit@ space, Unit@ lshift, Unit@ rshift
);
@ Event@ = +(Unit@ tick, Key@ key_down, Key@ key_up);

@ Effect@ = +(
  # Request for a tick Event@ to occur after the given number of milliseconds.
  # Time is relative to the time of the previously delivered tick event. The
  # tick will be delivered immediately if the more time has passed since the
  # previous tick event then requested.
  Int@ tick,

  # Draw to the screen.
  #
  # Coordinate (0, 0) is the upper left of the screen, with the positive x
  # access going towards the right edge of the screen and the positive y
  # access going towards the bottom edge of the screen.
  # 
  # The drawing is clipped to fit in the screen area.
  #
  # It is undefined how pixels not specified in the drawing will be displayed.
  Drawing@ draw
);

# AppIO@ --
#   Interface for an App.
#
# Fields:
#   width - The width of the screen.
#   height - The height of the screen.
#   event - Get the next input event.
#   effect - Output an effect.
@ AppIO@ = *(
  Int@ width,
  Int@ height,
  Get@<Event@> event,
  Put@<Effect@> effect
);

# App@ --
#   User API for describing an App.
#
# Inputs:
#   io - The interface to the application.
#
# Results:
#   None.
@ App@ = (AppIO@) { Unit@!; };

@(App@, AppIO@, Key@, Event@, Effect@);
