1. Develop re-usable parts, not programs.
* Basic feature:
Separate programs into parts distributed separately. For posix based systems,
these separate parts could, for example, be different files.

* To avoid impossible to coordinate against name conflicts:
Each module has its own namespace. We explicitly import named entities from
other modules under our own desired name.
This gives us 'module' and 'import'.

* To make it easy to figure out how to reuse and easy to develop without fear
  of mis re-use:
Modules have public and private entities defined with a separate interface.
This gives us the 'interf' declaration.

* To allow the benefits of modules to scale to much larger programs:
Hierarchical modules and interfaces are supported.

2. Re-use code in different type and behavior contexts.
* Basic feature:
Polymorphism. Declarations can be parameterized by other declarations.
Gives params: a kind of meta-abstraction of declarations.

For full generality:
* Kinds can also be parameterized. Monads are supported, for example.
* Partial meta-application is supported.
* kind = 'qref', and referential transparency of that application is supported.

Syntax Reference
----------------
  type_kind ::= 'type' tname params ;
  struct_kind ::= 'struct' tname params '(' [qref fname [',' qref fname [...]]] ')' ;
  union_kind ::= 'union' tname params '(' qref fname [',' qref fname [...]] ')' ;
  func_kind ::= 'func' tname params '(' [qref vname [',' qref vname [...]]] ';' qref ')' ;
  proc_kind ::= 'proc' tname params '('
                     [qref polarity pname [',' qref polarity pname [...]]] ';'
                     [qref vname [',' qref vname [...]]] ';' qref ')' ;
  interf_kind ::= 'interf' tname params '{' [decl [decl [...]]] '}' ;
  module_kind ::= 'module' tname params '(' qref ')' ;

  kind ::= type_kind
         | struct_kind
         | union_kind
         | func_kind
         | proc_kind
         | interf_kind
         | module_kind
         ;

  import ::= 
      (* TODO: ['=' qref] instead of ['=' tname]? *)

     'import' '@'  '{' [tname ['=' tname]; [tname ['=' tname]; [...]]] '}'
   | 'import' qref '{' [tname ['=' tname]; [tname ['=' tname]; [...]]] '}'
   ;

  decl ::= kind ';'       (* TODO: allow kind '=' qref ';' too? *)
         | import ';'
         ;

  defn ::= struct_kind ';'
        |  union_kind ';'
        |  func_kind expr ';'
        |  proc_kind proc ';'
        |  interf_kind ';'
        |  module_kind '{' [defn [defn [...]]] '}' ';'
        |  kind '=' qref ';'
        |  import ';'
        ;
  
  prgm ::= (* collection of defn, organized into file by defn <name>.fbld *)
 
  params ::= ['<' [kind [',' kind [...]]] '>'] ;

  qref ::= tname ['<' [qref [',' qref [...]]] '>'] ['@' qref] ;

  expr ::= ... (* as in fblc, with qref in place of tname *)
  proc ::= ... (* as in fblc, with qref in place of tname *)

  polarity ::= ... (* as in fblc *)
  pname ::= ... (* as in fblc *)
  tname ::= ... (* as in fblc *)
  vname ::= ... (* as in fblc *)

Style Suggestions
-----------------
* Capitalize entities, including types, functions, procs, interfaces, and
  modules.
* Lowercase field names, including for structs, unions, function and proc
  arguments.
* Lowercase variable names.
* "true/something/cons" before "false/nothing/empty/error" when ordering
  fields of that kind of union declaration, so that ?(x; a, b) is
  consistent with (x ? a : b) behavior.

  But "0" before "1" for bit, decimal, byte, hex, etc?

Changes from Fbld 3
-------------------
* Instead of <[type...] ; [module...]> for params, we have <[kind...]>.
Which is surely an improvement in simplicity and generality.

* Kinds can themselves be parameterized.
Which avoids an artificial arbitrary limitation by allowing full generality.

* Partial application of qrefs.
Needed once kinds are parameterized.
Also generalizes import statements, which implicitly import parameterized
things, not fully applied things.

* kind = 'qref'
Which really is needed for full generality.

I approve these changes as improving the overall simplicity and generality of
the language. Parameterized kinds, partial application, and kind = 'qref' do
add complexity, but they do so in a simple way and provide important
capabilities.

