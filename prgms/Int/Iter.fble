
@ Int@ = /Int/Int%.Int@;
% Add = /Int/Int%.Add;
% Sub = /Int/Int%.Sub;
% Le = /Int/Eq%.Le;
% Lt = /Int/Eq%.Lt;

% Int = /Int/Lit%.Int;

<@>@ Iter@ = /Iter%.Iter@;
<@>% Has = /Iter%.Has;
<@>% End = /Iter%.End;

@ Unit@ = /Unit%.Unit@;

Int@ 0 = Int|0;
Int@ 1 = Int|1;

# Range --
#   An iterator over the range of integers [lo, hi).
(Int@, Int@) { Iter@<Int@>; } Range = (Int@ lo, Int@ hi) {
  (Unit@ _) {
    Lt(lo, hi).?(
      true: Has<Int@>(lo, Range(Add(lo, 1), hi)),
      false: End<Int@>);
  };
};

# CountUpTo --
#   An iterator over the range of integers [0, n).
(Int@) { Iter@<Int@>; } CountUpTo = (Int@ n) {
  Range(0, n);
};

# CountDownFrom --
#   An iterator over the range of integers (n, 0]
(Int@) { Iter@<Int@>; } CountDownFrom = (Int@ n) {
  (Unit@ _) {
    Le(n, 0).?(
      true: End<Int@>,
      false: {
        Int@ first = Sub(n, 1);
        Has<Int@>(first, CountDownFrom(first));
      });
  };
};

@(Range, CountUpTo, CountDownFrom);

