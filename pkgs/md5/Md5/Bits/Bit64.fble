
@ Bool@ = /Core/Bool%.Bool@;

% Bit = /Core/Digits%.Bit;

% BitXY = /Md5/Bits/BitXY%(/Md5/Bits/Bit32%.Bits, /Md5/Bits/Bit32%.Bits);
@ Bit64@ = BitXY.BitXY@;
% Bits = BitXY.Bits;

% Lit = /Md5/Bits/Lit%(BitXY.Bits);
% B64 = Lit.B;
% H64 = Lit.H;

(Bit64@, Bit64@) { Bit64@; } And = Bits.and;

# a + 1
(Bit64@) { Bit64@; } Inc = (Bit64@ a) {
  Bits.inc(a);
};

(Bit64@, Bit64@) { Bit64@; } Add = Bits.add;

# a << 1
(Bit64@) { Bit64@; } Shl1 = (Bit64@ a) {
  Bits.lshift_overflow(a, Bit.0).x;
};

(Bit64@) { Bool@; } IsZero = Bits.iszero;

@(
  Bit64@,
  And,
  Inc, Add, Shl1,
  IsZero,
  B64, H64
);
