
% Hex = /Core/Digits%.Hex;

@ Int@ = /Core/Int%.Int@;
% Sub = /Core/Int%.Sub;
% Int = /Core/Int/Lit%.Int;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Bit8@ = /Md5/Bits%.Bit8.Bit8@;
% H2 = /Md5/Bits%.Bit8.H2;

<<@>@>% Md5 = /Md5/Md5%.Md5;
@ Hash@ = /Md5/Hash%.Hash@;

Int@ 1 = Int|1;

<@>@ R@ = <@ A@> { *(Int@ n, A@ x); },
<@>@ M@ = <@ A@>(Int@) { R@<A@>; };

Monad@<M@> Monad = @(
  return: <@ A@>(A@ x)(Int@ n) { R@<A@>(n, x); },
  do: <@ A@>(M@<A@> ma)<@ B@>((A@) { M@<B@>; } f)(Int@ n) { 
    R@<A@> a = ma(n);
    f(a.x)(a.n);
  });

M@<Maybe@<Bit8@>> Get = (Int@ n) {
  n.?(0: R@<Maybe@<Bit8@>>(n ,Nothing<Bit8@>));
  R@<Maybe@<Bit8@>>(Sub(n, 1), Just(H2(Hex.A, Hex.5)));
};
    
# Benchmark for md5 sum that takes about 1 minute to run.
Unit@! Bench = {
  R@<Hash@> md5 := !(Md5<M@>(Monad, Get)(Int|60000));
  !(Unit);
};

@(Bench);
