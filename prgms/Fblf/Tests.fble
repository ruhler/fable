
% Chars = /Char%.Chars;

% B = /Digits%.Bit;
% I = /Int/Int/Lit%.I;
% D = /Int/Int/Lit%.D;

@ Test@ = /Test%.Test@;
% Test = /Test%.Test;
% TestSuite = /Test%.TestSuite;
<@>% AssertEquals = /Test%.AssertEquals;

@ Addr@ = /Fblf/Program%.Addr@;
@ Program@ = /Fblf/Program%.Program@;
% Assign = /Fblf/Program%.Assign;
% Const = /Fblf/Program%.Const;
% Seq = /Fblf/Program%.Seq;

% Adder = /Fblf/Add%.Adder;

@ Heap@ = /Fblf/Heap%.Heap@;
@ Ptr@ = /Fblf/Heap%.Ptr@;
% Heap = /Fblf/Heap%.Heap;
% HeapFromBitStr = /Fblf/Heap%.HeapFromBitStr;
% Equals = /Fblf/Heap%.Equals;

% Exec = /Fblf/Exec%.Exec;

Test@ Tests = TestSuite(Chars|Fblf, [
  /Fblf/Heap/Tests%.Tests,

  Test(Chars|Adder, !({
    Addr@ a = I(D|0);
    Addr@ b = I(D|4);
    Addr@ z = I(D|8);
    Addr@ next = I(D|12);

    % A = Adder(next, I(D|4).p, a, b, z);

    Program@ prgm =
      Seq(Assign(a, Const(B|0010), I(D|4)),   # a = 2
      Seq(Assign(b, Const(B|0111), I(D|4)),   # b = 7
      Seq(Assign(z, Const(B|0000), I(D|4)),   # clear z
          A.prgm)));                          # z = a + b

    Heap@ heap = Heap(A.heap);
    Heap@ got = Exec(prgm, heap);

    # We only want to check the first 12 bits to make sure they contain
    # a = 0010, b = 0111, but now z = 1001.
    Heap@ wnt = HeapFromBitStr(B|001001111001);
    % Eq = (Heap@ a, Heap@ b) {
       Equals(Ptr@(a, I(D|0)), Ptr@(b, I(D|0)), I(D|12));
    };

    AssertEquals<Heap@>(Eq, /Fblf/Heap/Show%.Show, wnt, got);
  }))
]);

@(Tests);
