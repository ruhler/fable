
@ Bool@ = /Core/Bool%.Bool@;

% Chars = /Core/Char%.Chars;

<@>% Append = /Core/List%.Append;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

# Trace function for printf-like debugging.
# The string argument is printed to stderr.
(String@) { Unit@; } Trace = /Core/Debug/Builtin%.Trace;

# Trace with a newline added at the end of the string.
(String@) { Unit@; } TraceLn = (String@ s) {
  Trace(Append(s, Str[Chars.nl]));
};

((Unit@) { String@; }) { Unit@; }
TraceEnabled = ((Unit@) { String@; } f) {
 Trace(f(Unit));
};

((Unit@) { String@; }) { Unit@; }
TraceDisabled = ((Unit@) { String@; } _f) {
 Unit;
};

((Unit@) { String@; }) { Unit@; }
TraceLnEnabled = ((Unit@) { String@; } f) {
 TraceLn(f(Unit));
};

((Unit@) { String@; }) { Unit@; }
TraceLnDisabled = ((Unit@) { String@; } _f) {
 Unit;
};

# Variations on Trace and TraceLn that can be more easily disabled.
# To prevent overheads of generating the trace strings when tracing is
# disabled.
#
# Sample use:
#   % Trace = /Core/Debug%.Enable(True);
#   ...
#   Unit@ _ <- Trace;
#   Str|'There is something you should know...';
% Enable = (Bool@ enable) {
  enable.?(
    true: @(Trace: TraceEnabled, TraceLn: TraceLnEnabled),
    false: @(Trace: TraceDisabled, TraceLn: TraceLnDisabled));
};

@(Trace, TraceLn, Enable);
