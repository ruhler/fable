* Don't stop running tests after the first one fails
  - It would be nice to see a list of all the tests that fail.
* Add non-spec based fblc tests.
  - Such as: specify program as non-existent file.
* Implement FblcParseValue
* Augment the FblcEvaluate and FblcExecute interfaces to accept external
  values and ports.
* Add expected line and column numbers for the expected error test cases.
* Add support for passing values and ports on the command line.
* Add FblcTokenWouldBlock function to support interactive use.
* Be able to parse from a string as well as a file.
* Test that tail recursive functions and procedures don't smash the stack.
* Test process call port arguments are valid
* Test process call expr arguments are valid
* Test that a link's type is valid.
* Test that a link action's ports can't shadow ports already in scope.
* Test that a link can't use the same name for the get and put ports.
* Test that a proc can't have multiple ports of the same name, with or without
  the same polarity.
* Should FblcExecute take a const FblcActn*?
  Should we use const FblcActn* instead of FblcActn* everywhere there?
* Test that process port types are valid.
* It would be nice if 'Wrong number of arguments to ...' reported the opening
  '(' as the location of the error.
* Test what happens when we try to access the wrong field of a union.
  And check if we can easily show the location in the runtime error message.
* Clean up the error messages.
   - Put names in single quotes always.
   - Say 'expecting expression of type X' instead of 'expecting type X' when
     we are expecting an expression.
* Be able to parse from a list of files instead of just one?
  This will help for tests or other programs that share some common functions.
* Write a man page for fblc?
* Write tests to get 100% code coverage, or reasonably close.
  - Manually review reported errors for 'e' test cases to make sure the test
    case works and the error reported is correct.
    (any better way to automate this kind of testing?)

