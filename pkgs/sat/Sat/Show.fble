
@ Char@ = /Core/Char%.Char@;

<@>% Append = /Core/List%.Append;

<@>@ Show@ = /Core/Show%.Show@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Cnf@ = /Sat/Solver%.Cnf@;
@ Clause@ = /Sat/Solver%.Clause@;
@ VarId@ = /Sat/Solver%.VarId@;
@ Var@ = /Sat/Solver%.Var@;
@ Assignment@ = /Sat/Solver%.Assignment@;
@ Result@ = /Sat/Solver%.Result@;

<@>@ Parse@ = /Sat/Dimacs%.Parse@;

Show@<VarId@> ShowId = /Core/Int/Show%.Show;

Show@<Var@> ShowVar = (Var@ v) {
  String@ sign = v.pos.?(true: Str|'+', false: Str|'-');
  Append<Char@>(sign, ShowId(v.id));
};

Show@<Clause@> ShowClause = /Core/List/Show%.Show<Var@>(ShowVar);
Show@<Cnf@> ShowCnf = /Core/List/Show%.Show<Clause@>(ShowClause);

Show@<Parse@<Cnf@>> ShowParsedCnf = (Parse@<Cnf@> x) {
  x.?(error: x.error);
  ShowCnf(x.parsed);
};

Show@<Assignment@> ShowAssignment = /Core/List/Show%.Show<Var@>(ShowVar);

Show@<Result@> ShowResult = (Result@ a) {
  a.?(
    sat: Append<Char@>(Str|'sat: ', ShowAssignment(a.sat)),
    unsat: Str|'unsat');
};

@(ShowId, ShowVar, ShowClause, ShowCnf, ShowParsedCnf,
  ShowAssignment, ShowResult);
