Fble 0.3 TODO
=============
Things to consider doing for the fble-0.3 release.

* Add spec tests for coverage.
 - compile.c 1438: FbleTypeCheckModule returns NULL.
   Because we don't run compile tests in the error case. Should we?
 - value.c some way to test multi-chunk logic?
 - Test for variables defined but not used?
 - Test for unused arguments?

* SatGame
 - Auto compute number of columns.
 - Scale up to fit in window.
 - Have group pad border around the outside edge.
 - Have left click select, right click dismiss?
 - Pick default values for params with flags to modify.
 - Add test cases for /SatGame/Game%.Solved.

* Windows support:
 - Add a proper way to overwrite GL libs. At configure time?
 - Find an alternative to getrlimit for mem-test
 - Find a better solution for 'unlimited stack' support?

* Add a test case for fble-perf-profile?

* Write test case for big compact followed by tight small compact leading to
  memory growth instead of constant memory?

* Add regression test for memory leak fixed in
  9e6f637dc25422ae357f21040f11eb8693b6ddb0

* Figure out how to avoid duplicate code between LinkInterpreted and
  LinkGenerated?

* Some better way to recover if build.ninja gets messed up than having to
  re-run configure.

* Update tutorials for partial function application updates.
   Particularly noting how to do type inference for multiple poly parameters.

* It's strange that a function that returns a poly has kind %.
  Does that make sense?

* Improve build times?
 - It's getting a little annoying for development now that everything is
   rebuilt and it takes a while when you touch the library code, for example.
   Full rebuild: real    6m32.236s, sys     3m17.144s

*  Can fble-stdio check that the function has the right type?
 - Right now, the only info we have at runtime is num_args. We could at least
   check for that. Also that it's a function.


* Improve performance with profiling enabled?
 - Now that we removed the optimization for detecting duplicate call entries
   in the stack?
 - see thoughts/fble.profile.txt

* Clean up fble library
 - Separate modules as appropriate to reduce false dependencies.
 - Document all functions.
 - Add tests for full code coverage of all functions.

* Add tests that at least the compiled apps don't crash when you run them.
 - Including with --profile enabled.
 - But can we assume there is a DISPLAY available for testing?

* Debug improvements:
 - Add easy member access in debug. e.g.: print(foo.just).
 - Inline FbleCall again to support stepping through code?
   Or try using dwarf trampoline annotation?

Doc Comments
* convert lib/*, test/*, etc. code to fbld doc comments.
* Be able to write doc comments for extern values and types as well as
  functions.
* Would be nice to have SEE ALSO section for library man pages.

* Fbld Markdown Backend
 - Reflow paragraphs to 80 columns.
 - How to support labels in markdown?
 - etc.

* write tutorials for C api.
* Factor out common code for @FbleVersion (@BuildStamp)

* Consider syntax highlighting of the syntax specification in fble.fbld.
* Add way to do inline code syntax highlighting in fbld?

* Improve vim syntax highlighting of {} blocks in fbld
 - For example, it shouldn't highlight in the case of: @l[{]@hi@l[}].

* Improve fbld syntax highlighting of {} blocks in fbld
 - For example, don't highlight @degralder in @l{ruhler@degralder.com}.

* Write an App tutorial.
* Remove all the scary language from HelloWorld tutorial.
* Improve exercises for Unions and Functions tutorials, and others.

Usage docs
* Come up with a better story for building and integrating usage help text?
* Add usage generated help text to fble derived programs?
 graphics, md5, pinball, invaders, and sat?

* Proper support for unicode characters in /Core/Char%.

* Consider not building and installing documentation by default?
  Just because it takes a while to generate?

* There's no way to do user defined ifneq in fbld?
  Because all the arguments are evaluated. That's annoying?
