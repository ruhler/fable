
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Char@ = /Core/Char%.Char@;

@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

@ World@ = /Core/Monad/IO%.World@;
% m = /Core/Monad/IO%.Monad;

% Stdin = /Core/Stdio/IO/Builtin%.Stdin;
% Stdout = /Core/Stdio/IO/Builtin%.Stdout;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Unit@ = /Core/Unit%.Unit@;

<@>@ R@ = <@ T@> { *(World@ s, T@ x); };
<@>@ IO@ = <@ T@> (World@) { R@<T@>; };

# Implementation of fble-cat for the purposes of experimenting with
# fble performance.
/Core/Stdio/IO%.Main@ Main = (List@<String@> args) {
  (Int@) { IO@<Unit@>; } stdout_ = (Int@ s, World@ w) {
    Stdout(s, w);
  };

  IO@<Bool@> MCat = {
    Maybe@<Int@> byte <- m.do(Stdin);
    byte.?(nothing: m.return(True));
    Char@ char = /Core/Char/Ascii%.Chr(byte.just);
    Unit@ _ <- m.do(stdout_(/Core/Char/Ascii%.Ord(char)));
    MCat;
  };

  (World@) { R@<Bool@>; } Cat = (World@ w) {
    R@<Maybe@<Int@>> byte = Stdin(w);
    byte.x.?(nothing: R@(w, True));

    Char@ char = /Core/Char/Ascii%.Chr(byte.x.just);
    R@<Unit@> out = Stdout(/Core/Char/Ascii%.Ord(char), byte.s);
    Cat(out.s);
  };

  Bool@ monadic = {
    args.?(nil: False);
    /Core/String/Eq%.Eq(Str|'--monadic', args.cons.head);
  };

  monadic.?(true: MCat, false: Cat);
};

Main;
