
@(StdLib: &StdLib);
@(StdLibTest: &StdLibTest);
@(UBNat: &UBNat);

StdLib { @(Unit@, List); };
List { @(S@, P@, S2, Concat, MapS); };
StdLibTest.ListTest { @(ListTestFailure@: TestFailure@); };
UBNat.Test { @(UBNatTestFailure@: TestFailure@); };

@ TestFailure@ = +(
    UBNatTestFailure@ UBNatTest,
    ListTestFailure@ ListTest);

\(UBNatTestFailure@ a; TestFailure@) UBNatTestFailureF = \(UBNatTestFailure@ a) {
  TestFailure@(UBNatTest: a);
};

\(ListTestFailure@ a; TestFailure@) ListTestFailureF = \(ListTestFailure@ a) {
  TestFailure@(ListTest: a);
};

S@<TestFailure@>! Test = {
  $(Concat<TestFailure@>(S2<S@<TestFailure@>>(
          MapS<UBNatTestFailure@, TestFailure@>(UBNatTestFailureF, UBNat.Test.Test()),
          MapS<ListTestFailure@, TestFailure@>(ListTestFailureF, StdLibTest.ListTest.Test())
          )));
};

S@<TestFailure@> result := Test;
$(result.nil);

