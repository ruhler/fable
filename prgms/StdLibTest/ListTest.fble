@(StdLib) {
  StdLib { @(Unit@, Bool, List); };
  List { @(S@, P@, S0, S1, S5, SortS); };
  Bool { @(Bool@, True, False, And); };

  union Elem(Unit A, Unit B, Unit C, Unit D, Unit E);
  union TestName(Unit List_Sort_basic);
  struct TestFailure(TestName name, S<Elem> wnt, S<Elem> got);

  priv func ElemLe(Elem a, Elem b; Bool) {
    ?(a; A: ?(b; A: True(),  B: True(),  C: True(),  D: True(),  E: True()),
        B: ?(b; A: False(), B: True(),  C: True(),  D: True(),  E: True()),
        C: ?(b; A: False(), B: False(), C: True(),  D: True(),  E: True()),
        D: ?(b; A: False(), B: False(), C: False(), D: True(),  E: True()),
        E: ?(b; A: False(), B: False(), C: False(), D: False(), E: True()));
  };

  priv func ElemEq(Elem a, Elem b; Bool) {
    ?(a; A: ?(b; A: True(),  B: False(), C: False(), D: False(), E: False()),
        B: ?(b; A: False(), B: True(),  C: False(), D: False(), E: False()),
        C: ?(b; A: False(), B: False(), C: True(),  D: False(), E: False()),
        D: ?(b; A: False(), B: False(), C: False(), D: True(),  E: False()),
        E: ?(b; A: False(), B: False(), C: False(), D: False(), E: True()));
  };

# TODO: Move this to StdLib/List and make it public?
  priv func SEq<type T, func EqT(T a, T b; Bool)>(S<T> a, S<T> b; Bool) {
    ?(a; cons: ?(b; cons: PEq<T, EqT>(a.cons, b.cons), nil: False()),
        nil: ?(b; cons: False(), nil: True()));
  };

# TODO: Move this to StdLib/List and make it public?
  priv func PEq<type T, func EqT(T a, T b; Bool)>(P<T> a, P<T> b; Bool) {
    And(EqT(a.head, b.head), SEq<T, EqT>(a.tail, b.tail));
  };

  func Test( ; S<TestFailure>) {
    S<Elem> unsorted = S5<Elem>(Elem:D(Unit()), Elem:A(Unit()), Elem:B(Unit()), Elem:E(Unit()), Elem:C(Unit()));
    S<Elem> wnt = S5<Elem>(Elem:A(Unit()), Elem:B(Unit()), Elem:C(Unit()), Elem:D(Unit()), Elem:E(Unit()));
    S<Elem> got = SortS<Elem, ElemLe>(unsorted);
    ?(SEq<Elem, ElemEq>(wnt, got);
true: S0<TestFailure>(),
false: S1<TestFailure>(TestFailure(TestName:List_Sort_basic(Unit()), wnt, got)));
  };

};
