Fable
=====
Richard Uhler <ruhler@degralder.com>
April 2015

Introduction
------------
Fable is a collection of computer languages for systems and application
programming. The collection is based on the belief that simple,
targeted languages will lead to more flexible and efficient programs that are
easier to develop and understand.

Simplicity
~~~~~~~~~~
Existing languages for systems and applications programming are complex. The
subtleties of Java class loading, the proper implementation of move and copy
constructors or diagnosing compiler errors involving templates in C++, and
understanding the monomorphism restriction in Haskell are just a few examples.

This complexity makes it difficult for developers to understand the
correctness and performance implications of the code they write. Implementing
one of these languages is a daunting task, let alone implementing it
efficiently. Even a relatively simple language like C depends on an array of
system calls to understand the behavior of a program.

The languages of Fable are intended to be orders of magnitude simpler, while
still being easy to program in and efficient to execute. Simple language with
clear performance models make it easy for programmers to understand the
performance implications of their code. It also markedly reduces the cost of
developing implementations of, and tools for, the languages, allowing for easy
experimentation of implementation techniques, and much better tools to support
the developer when writing programs.

Whether complex systems and applications can be implemented and executed
efficiently with only simple languages and interfaces is to be seen. Fable is
an attempt to answer that question.

Fable's Fables
--------------
The languages of Fable are targeted; there is no one language to rule them
all. Instead, the language best suited to the task at hand should be used. The
Fable collection currently includes the following languages.

Androcles:: A functional language for finite computations well suited to tasks
that could be solved in digital hardware with combinational logic.

Bathylus:: A Turing-complete functional language based on Androcles suited for
general data manipulation and compilation tasks. Bathylus extends the
Androcles language with recursive data types and functions.

Calvisus:: A Turing-complete language for interactive programs and processes.
Calvisus extends the Bathylus language with processes.

