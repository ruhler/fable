
{ Unit%; @(Unit@, Unit); };
{ Maybe%; @(Maybe@, Nothing, Just); };

# A generic algebraic data type.
@ Data@ = +(
  Unit@ unit,
  +(Data@ a, Data@ b) sum,
  *(Data@ a, Data@ b) product
);

# A map from Data@ to T@.
<@>@ Map@ = <@ T@>{ +(Unit@ empty, MapP@<T@> map); },
<@>@ MapP@ = <@ T@>{ 
  *(Maybe@<T@> unit,
    *(Map@<T@> a, Map@<T@> b) sum,
    Map@<Map@<T@>> product);
};

<@ T@>{ Map@<T@>; } Empty = <@ T@>{ Map@<T@>(empty: Unit); };

<@ T@>(Map@<T@>, Data@) { Maybe@<T@>; }
Lookup = <@ T@>(Map@<T@> map, Data@ key) {
  ?(map;
     empty: Nothing<T@>,
     map: {
       ?(key;
          unit: map.map.unit,
          sum: ?(key.sum;
                   a: Lookup<T@>(map.map.sum.a, key.sum.a),
                   b: Lookup<T@>(map.map.sum.b, key.sum.b)),
          product: {
            Maybe@<Map@<T@>> mm = Lookup<Map@<T@>>(map.map.product, key.product.a);
            ?(mm;
                just: Lookup<T@>(mm.just, key.product.b),
                nothing: Nothing<T@>);
          });
     });
};

<@ T@>(Map@<T@>, Data@, T@) { Map@<T@>; }
Insert = <@ T@>(Map@<T@> map, Data@ key, T@ value) {
  MapP@<T@> p =
    ?(map;
       empty: MapP@<T@>(Nothing<T@>, @(a: Empty<T@>, b: Empty<T@>), Empty<Map@<T@>>),
       map: map.map);
  Map@<T@>(map: ?(key;
     unit: MapP@<T@>(Just<T@>(value), p.sum, p.product),
     sum: ?(key.sum;
              a: MapP@<T@>(p.unit, @(a: Insert<T@>(p.sum.a, key.sum.a, value), b: p.sum.b), p.product),
              b: MapP@<T@>(p.unit, @(a: p.sum.a, b: Insert<T@>(p.sum.b, key.sum.b, value)), p.product)),
     product: {
       Maybe@<Map@<T@>> mm = Lookup<Map@<T@>>(p.product, key.product.a);
       Map@<T@> m = Insert<T@>(?(mm; just: mm.just, nothing: Empty<T@>), key.product.b, value);
       MapP@<T@>(
         p.unit,
         p.sum, 
         Insert<Map@<T@>>(p.product, key.product.a, m)); 
     }));
};

@(Data@, Map@, Empty, Lookup, Insert);
