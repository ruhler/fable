
<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

@ Int@ = /Core/Int%.Int@;
% Sub = /Core/Int%.Sub;
% Int = /Core/Int/Lit%.Int;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;

@ Unit@ = /Core/Unit%.Unit@;

@ Bit8@ = /Md5/Bits/Bit8%.Bit8@;
% H8 = /Md5/Bits/Bit8%.H8;

<<@>@>% Md5 = /Md5/Md5%.Md5;
@ Hash@ = /Md5/Hash%.Hash@;

Int@ 1 = Int|1;

% State = /Core/Monad/State%<Int@>;

<@>@ M@ = State.State@;
<@>@ R@ = State.R@;
Monad@<M@> Monad = State.Monad;

M@<Maybe@<Bit8@>> Get = {
  Int@ n <- Monad.do(State.Get);
  n.?(0: Monad.return(Nothing<Bit8@>));
  Unit@ _ <- Monad.do(State.Set(Sub(n, 1)));
  Monad.return(Just(H8|A5));
};
    
# Benchmark for md5 sum that takes about 1 minute to run.
Test@ Bench = Test(Str|Md5, (Unit@ _) {
  R@<Hash@> md5 = Md5<M@>(Monad, Get, Int|60000);
  AssertEquals(/Md5/Hash%.Eq, /Md5/Hash%.Show, md5.x, md5.x);
});

@(Bench);
