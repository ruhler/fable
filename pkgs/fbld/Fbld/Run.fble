<@>@ List@ = /Core/List%.List@;
<@,@>% Map = /Core/List%.Map;

@ Command@ = /Fbld/Command%.Command@;

<@>@ Fbld@ = /Fbld/Fbld%.Fbld@;
@ Env@ = /Fbld/Fbld%.Env@;
<@>% Do = /Fbld/Fbld%.Do;
<@>% Error = /Fbld/Fbld%.Error;
% GetEnv = /Fbld/Fbld%.GetEnv;

% Cat = /Fbld/Fbld/Utils%.Cat;

@ Text@ = /Fbld/Text%.Text@;
% LocOf = /Fbld/Text%.LocOf;
% StringOf = /Fbld/Text%.StringOf;

<@>@ Result@ = /Fbld/Result%.Result@;

(Command@) { Fbld@<Text@>; }
Invoke = (Command@ cmd) {
  Env@ env <- Do(GetEnv);
  env(cmd);
};

# Interprets and executes inline structured text.
(Text@) { Fbld@<Text@>; }
Inline = (Text@ text) {
  Result@<List@<Command@>> parsed = /Fbld/Parse%.Inline(text);
  parsed.?(err: Error<Text@>(LocOf(parsed.err), StringOf(parsed.err)));
  Cat(LocOf(text))(Map(parsed.ok, Invoke));
};

# Interprets and executes block structured text.
(Text@) { Fbld@<Text@>; }
Block = (Text@ text) {
  Result@<List@<Command@>> parsed = /Fbld/Parse%.Block(text);
  parsed.?(err: Error<Text@>(LocOf(parsed.err), StringOf(parsed.err)));
  Cat(LocOf(text))(Map(parsed.ok, Invoke));
};

@(Inline, Block);
