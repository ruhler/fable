module Md5TestM(Md5TestI) {
  import @ { UnitM; BoolM; Bit8M; HexM; ListM; MaybeM; Md5M; };
  import UnitM { Unit; };
  import Bit8M { Bit8; H2; };
  import HexM { Hex; 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; a; b; c; d; e; f; };
  import ListM { P; S; };
  import MaybeM { Maybe; };
  import Md5M { Md5Hash; Md5; Eq; };

  union TestName(
      Unit Md5_empty,
      Unit Md5_a,
      Unit Md5_abc
  );

  struct TestFailure(TestName name, Md5Hash wnt, Md5Hash got);

  # Compute the md5 hash for a string of bytes.
  proc Md5Str(; S<Bit8> bytes; Md5Hash) {
    Maybe<Bit8> +- put, get;
    Md5Hash md5 = Md5(get; ), Unit x = PutAll(put; bytes);
    $(md5);
  };
  
  # Put all the bytes onto the output port, followed by nothing.
  proc PutAll(Maybe<Bit8>+ out; S<Bit8> bytes; Unit) {
    ?(bytes; {
        Maybe<Bit8> x = +out(Maybe<Bit8>:just(bytes.cons.head));
        PutAll(out; bytes.cons.tail);
      }, {
        Maybe<Bit8> x = +out(Maybe<Bit8>:nothing(Unit()));
        $(Unit());
    });
  };

  proc TestStr( ; TestName name, Md5Hash wnt, S<Bit8> bytes; TestFailure) {
    Md5Hash got = Md5Str( ; bytes);
    $(TestFailure(name, wnt, got));
  };

  func L(Hex hi, Hex lo, S<Bit8> l; S<Bit8>) {
    S<Bit8>:cons(P<Bit8>(H2(hi, lo), l));
  };

  func T(TestFailure x, S<TestFailure> l; S<TestFailure>) {
    ?(Eq(x.wnt, x.got); l, S<TestFailure>:cons(P<TestFailure>(x, l)));
  };

  proc Test( ; ; S<TestFailure>) {
    TestFailure empty = TestStr( ; 
      TestName:Md5_empty(Unit()),
      Md5Hash(
        d(), 4(), 1(), d(), 8(), c(), d(), 9(),
        8(), f(), 0(), 0(), b(), 2(), 0(), 4(),
        e(), 9(), 8(), 0(), 0(), 9(), 9(), 8(),
        e(), c(), f(), 8(), 4(), 2(), 7(), e()),
      S<Bit8>:nil(Unit())
    );

    TestFailure a = TestStr( ;
      TestName:Md5_a(Unit()),
      Md5Hash(
        0(), c(), c(), 1(), 7(), 5(), b(), 9(),
        c(), 0(), f(), 1(), b(), 6(), a(), 8(),
        3(), 1(), c(), 3(), 9(), 9(), e(), 2(),
        6(), 9(), 7(), 7(), 2(), 6(), 6(), 1()),
      L(6(), 1(), # 'a'
        S<Bit8>:nil(Unit()))
    );

    TestFailure abc = TestStr( ;
      TestName:Md5_abc(Unit()),
      Md5Hash(
        9(), 0(), 0(), 1(), 5(), 0(), 9(), 8(),
        3(), c(), d(), 2(), 4(), f(), b(), 0(),
        d(), 6(), 9(), 6(), 3(), f(), 7(), d(),
        2(), 8(), e(), 1(), 7(), f(), 7(), 2()),
      L(6(), 1(), # 'a'
      L(6(), 2(), # 'b'
      L(6(), 3(), # 'c'
        S<Bit8>:nil(Unit()))))
    );

    $(T(empty,
      T(a,
      T(abc,
        S<TestFailure>:nil(Unit())))));
  };
};
