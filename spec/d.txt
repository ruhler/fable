
Brainstorm for 'D', a language on top of Calvisus designed for humans to
write, with a bunch of descriptive features.

Modules
-------
Modules are a way of organizing code. They serve the following purposes:

* Ability to split source code across files.
Related code can be grouped into the same file, and unrelated code can be
separated. This is primarily so the person working on the code can more easily
focus on the code they are working on without being distracted by other code.
It also could have benefits for incremental and modular compilation, by
specifying a compilation unit where changes within the unit are likely to
effect many things inside the unit, but not as many without.

* Namespace support.
With enough code, there are bound to be collisions in naming of types and
functions. Namespace support makes it possible to disambiguate entities with
the same name declared in different modules. It also often allows having a
module context that names are resolved with respect to, so short names can be
used and disambiguated based on the context rather than every use. Often
namespace support allows some form of renaming entities so disambiguation can
be defined local. Java messed this up, for example, requiring the full package
name to be used to disambiguate names rather than allowing you to import a
package under a different (shorter) name.

* Hiding implementation details.
Modules typically have a notion of an interface and an implementation. They
allow code to be written solely for the implementation that is not exposed
externally. This makes it easier to change the internal implementation code,
because all of the uses occur inside the module. This is like 'static' vs not
static in C, public or private in C++ or Java, or exported or not exported in
Haskell.

* Sharing code.
In a large program, the same "module" may be useful in multiple, independent
locations. Modules serve as units of sharing. A large program can bring in
each module once, and reuse it in every place that it is used, rather than
copying it. This can sort of work because the module has a notion of an
interface separate from its implementation, so the module can be changed
without effecting its users as long as the interface doesn't change.

* Versioning?
Modules have specifications, so maybe this is also a good place to have
versioning support? Not sure. Typically I see versioning at the level of
shared libraries (think .so files), but not so much at the level of modules in
languages like C++, Java, or Haskell. This is like the difference between a
package and a module, but I'm not sure they should be treated as different
things.

* Hierarchical Modules (more a thought than a purpose)
Ideally modules are hierarchical and can be composed. Most importantly, you
can have a notion of an 'internal' module, that provides a specification that
can be reused, but only inside a module. This further restricts the users of a
specification, and makes it easier to change the specification of the module
in the future. In practice, I don't see this in C, C++, or Java. Things tend
to be "private" or "public", but not "public with respect to XXX and private
with respect to YYY".

* Short hand for mixed union/struct types where internal types don't need
  names? For example, currently in fblc two types must be defined for a list:
    List(Unit nil, ListNode cons);
    ListNode(foo x, List tail);
  It's annoying to have to come up with the two separate names.

Proposal
--------
Fbld is a meta language built on top of fblc. Its purpose is to provide
zero-cost, statically resolved abstraction for developers. The key concepts of
fbld are interfaces and modules.

An interface is a collection of abstract types and methods used to interact
with those types. The following kinds of declarations are allowed within an
interface:

1. Abstract type. An abstract type is the name of a type whose representation
may not be known to the user of an interface. The only way for a user to
interact with an abstract type's data is using interface methods provided for
that purpose.

For example, a list interface may have an abstract type L for the list data
type and an abstract type T for the list element data type.

2. Data type. A data type declaration. The data type declaration may refer to
abstract types declared in the interface.

For example, a list interface may have a 'head' method to return the first
element of the list. This method may return the first element of the list, or
'nothing' to indicate the list is empty. The 'maybe' type returned by this
method could be declared as a data type in the interface.

3. Function prototype. A function declaration with no body supplied.

For example, a list interface may have a 'head' method. A function prototype
is used to declare the method.

4. Sub interface. A named subinterface. This is used to allow composition of
interfaces.

For example, a list interface may have a 'collection' sub-interface, which
allows the user to view the list as a more general collection.

Interfaces can be refined by supplying external constraints on their abstract
types. A constraint is of the form A = B, where A is the name of an abstract
type of the interface, and B is the name of some type it must equal.

For example, to implement a function that operates on a list of int, the
list interface would be used with an additional constraint that the element
type is equal to the type int.

Here is a concrete example of a possible list interface demonstating these
different features of an interface.

interface Collection {
  type T;   // Type of elements in the collection.
  type C;   // Type of the collection itself.

  // Return the number of elements on the given collection.
  func size(C collection; int);
};

interface List {
  type T;   // Type of elements on the list.
  type L;   // Type of the list itself.

  union MaybeT(Unit() nothing, T just);
  
  func head(L list; MaybeT);
  func tail(L list; L);
  func empty( ; L);
  func cons(T x, L l; L);

  Collection(T=T, C=L) collection;
};

The dot notation is used to access the types and functions of an interface.
These can be used whereever types or functions are expected. For example,
given a List interface instance l, a function to create a singleton list could
be defined as:
  
  func singleton(l.T elem ; l.L) {
    l.cons(elem, l.empty());
  }

An interface is constructed by supplying values for each type and function
declaration from the current context. For example:

  List x = List(T=T, L=MyListType,
    head=myHeadImpl,
    tail=myTailImpl,
    empty=myEmptyImpl,
    cons=myConsImpl,
    collection=myCollectionImpl);
  

A module is a collection of type, function, and interface definitions used to
implement an interface. Modules can take interfaces as parameters. Modules can
include the following kinds of declarations:

1. Type declarations, including struct and union types, as in fblc.
2. Function declarations, as in fblc.
3. Interface declarations of the form:
    ifcname vname = ifcexpr;

For example:

// TODO: Can we treat a type as a kind of primitive interface?

interface Type {
  type T;
};

module SimpleList(Type t ; List(T=t.T)) {
  struct NonEmpty(t.T head, MyList tail);
  union MyList(NonEmpty nonempty, Unit empty);

  func head(MyList list; l.MaybeT) {
    list?(l.just(list.nonempty.head), l.nothing);
  };

  func tail(MyList list; MyList) {
    list?(list.nonempty.tail, list);
  };

  func empty(; MyList) {
     empty(Unit());
  };

  func cons(t.T x, MyList l) { ... }
  func size(MyList ; int) { ... }
  Collection c = Collection(C=MyList, T=t.T, size=size);
  List l = List(L=MyList, T=t.T, head=head, tail=tail, empty=empty,
    cons=cons, collection=c);

  l;
};


Proposal 2
----------
Interfaces consist of:
 1. abstract type declarations.
       type Foo;
 2. function declarations.
       func foo( ; Foo);
 3. struct and union declarations. These can be (sort of) thought of as
    syntactic sugar for declaring an abstract type and associated
    constructor/destructor functions.
 4. include interfaces.
       include Bool;
    Includes all elements of the named interface directly into this interface,
    as if by inlining.
     Q: what if two includes include conflicting items?
     A: give an error. Maybe allow named elements only to be imported.
       include Bool(true, false, and, or);
 5. qualified include. Same as include, but includes the elements under a
    given prefix/suffix or disambiguator. ??
       qualified Maybe<Int>;
       qualified int Maybe;
       
Modules are implemented by providing:
 1. an input interface. These are elements of the context provided from
 outside.
 2. an output interface. These are elements of the context returned to the
 outside.
 3. a context declaration. This should be a superset of the output interface,
 where name matching is used to declare things.

Design Notes
------------
Upon further reflection, I feel like the following are important:
* fbld should be a superset of fblc, so you can reuse your fblc programs
  in fbld programs.
* fbld should ideally re-use the same concepts as fblc.
* fbld should ideally re-use the same syntactic concepts as fblc.
* complex descriptions, like function types, should not be expressed in a
  comma separated list (syntactic design).

