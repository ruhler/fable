
mdefn MaxFlowTest(MaxFlowTest) {
  using Unit { Unit; };
  using Bool { Bool; };
  using UBNat { Nat; Eq; };
  using List { S; P; };
  using MaxFlow<Node;> { Edge; MaxFlow; };

  union TestName(Unit Basic);
  struct TestFailure(TestName name, Nat a, Nat b);

  union Node(Unit A, Unit B, Unit C);

  func TEq(TestName name, Nat a, Nat b, S<TestFailure> rest; S<TestFailure>) {
    ?(Eq(a, b); rest,
      S<TestFailure>:cons(P<TestFailure>(TestFailure(name, a, b), rest)));
  };

  func Graph( ; S<Edge>) {
  };

  func Test( ; S<TestFailure>) {
    TEq(TestName:Basic(Unit()), 4(), MaxFlow(Graph(), Node:A(Unit()), Node:C(Unit())),
    S<TestFailure>:nil(Unit()));
  };
};
