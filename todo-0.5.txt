Fble 0.5 TODO
=============
Things to consider doing for the fble-0.5 release.

* Change Stdio Pure Run API to match /Core/Stream/IStream/Pure%.Run API.
  Where the API provides the monad itself?

* --profile memory use blows up on PiDigits benchmark.

fble-pprof:
* add pprof filename to overview.
* encode sequence using sequence id instead of list of block ids?
* test case of multiple different samples with the same sequence.
  Where is deduping done?
* add progress bar for pprof parsing?

* Remove duplicate code for String StartsWith and List StartsWith?
  Same with Contains?

* Remove unnecessary FbleProfile apis now that blocks and enabled fields are
  public again.
* Change FbleOutputProfile function to take a file name instead of FILE*?
* Remove enabled argument to FbleNewProfile?
 - Have a sane default and let callers overwrite with explicit enable/disable
   function calls instead?
* Avoid emitting 'call' counts in pprof for fble-perf-profile?
* Is FbleLookupProfileBlockId a bad API?
  Like, passing const char* to lookup instead of an FbleName?
  Maybe don't provide it as an API, have the tests iterate over block ids
  instead?

* Having the line number 311 for [root] node in test/fble-pprof-test.want.txt
  is going to be annoying. Mark my words. Any way we can make the test less
  likely to break when we make any change to profile.c?

* Add an fble-pprof benchmark to fble-benchmark?
  One based on md5 --profile is probably good, for parsing.

* Update all the user documentation (book, profiling guide) on how to profile.

* Figure out a nicer way to switch between -O0 and -O3 as needed for debug.

GC OnFree cleanup
* Add explicit close to OStream API.
* Don't close files or sockets in GC OnFree. Close them when asked to
  explicitly.

* Split FbleDataType into FbleStructType and FbleUnionType?
  Get rid of FbleDataTypeTag?

* Pull undef check into separate instruction?
  So we can remove the check entirely if the compiler knows about it?
  Downside is the need for an extra GetFrameVar call on the value?

* Add spec test to catch case of tbnz not having enough limit for undef check.

* Get rid of FbleFunction?

* Add test that would catch the bug if we failed to GcRealloc a value before
  ref assignment.
  - ref assign to a value which is stack alloc -> gc alloc -> ref.

* Add test for vacuous value in 1 of multiple ref value assignments.
 - If we don't already have such a thing.

* Use a special ref value instead of NULL to represent undefined values?

* Revisit abstract types in light of modular compilation.
  Could we have a much simpler syntax and say anyone with access to the .fble
  file can construct and deconstruct types, any with access to the .fble.@
  file can't?

* Improve performance of fble pprof viewer enough to be useful.

* Fbld Language
 - modularity
 - Better support for structs in fbld language, so its easier to write decent
   performing fbld code.
 - Have an 'if' primitive instead of 'ifeq' and 'ifneq'?
 - The @plain builtin is really strange. I had trouble coming up with a test
   case for it. Consider if there's some way we can get rid of that or make it
   more sensible.
 - Clarify in spec if @if[a@x][b@x] ... is an error or not.
   Or redesign semantics of fbld to avoid that question entirely.

* Implement a custom debugger for fble
 - That works on all backends.
 - That supports single step through code.
 - That supports field access.

* Modular compilation
 - Add option for loading modules from .so files?
 - Have fble-stdio check that the function has the right type?
 - Load minimum dependencies needed for type checking when possible?

* Add fble to rosettacode.org?
  Or at least implement all the tasks, perhaps in a separate RosettaCode
  package to start.
  Probably start with all the 'Simple' tasks.

* Design a standard library?
 - Separate modules as appropriate to reduce false dependencies.
 - Document all functions.
 - Add tests for full code coverage of all functions.
 - Proper support for unicode characters in /Core/Char%.
 - Add error status codes to sockets interface.

* New apps
 - IEEE floating point support.
 - More benchmark games.
 - Implement an image viewer.
 - bitcoin miner

* Fble Language Features
 - Add some way to catch or recover from errors at runtime?
 - Some way to implement a web server that can handle multiple requests
   concurrently?

* Fble Debugger
 - Add support for all backends.

* Consider removing higher order kinds from the language.
  Make everything either kind @ or %. What would we lose?

* Fbld C implementation
 - Change FbldMarkup type to more explicitly distinguish between the different
   kinds of markups.
 - Figure out how to associate a location with empty markup.
 - Avoid constructing markups with singleton sequences?

Tests:
* Add spec tests for full coverage.
 - Test for main .fble file not found somehow? load.c
 - Test for builtin module with builtin dependencies? load.c
* Add test and fix for this case:
 1. We load builtin A, which loads dependent builtin B
 2. We load .fble C, which depends on builtin B
 At what point do we check and load the type information for B?

Tutorials:
* C API, once it is stable enough.
* Add exercises to exercise each main point in every tutorial.
* /App/App%
* /Core/Test%

* Figure out why building with ninja from the source directory ends up
  building all the tests. And fix that somehow.

* Debug occasional deadlock in pkgs/network/sockets-test.tr?
  Seen when doing ninja check after clean build after ninja.
  Seen again doing ninja check after touching build.tcl.
  Seen pretty regularly when doing full builds, to be honest.
