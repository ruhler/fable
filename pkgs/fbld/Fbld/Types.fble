
<@>@ List@ = /Core/List%.List@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

@ Unit@ = /Core/Unit%.Unit@;

@ StringL@ = /Fbld/StringL%.StringL@;

# The result of parsing or invoking a command.
<@>@ Result@ = <@ T@> { +(T@ ok, StringL@ err); };

<@ T@>(T@) { Result@<T@>; } Ok = <@ T@>(T@ x) {
  Result@<T@>(ok: x);
};

<@ T@>(StringL@) { Result@<T@>; } Err = <@ T@>(StringL@ msg) {
  Result@<T@>(err: msg);
};

<<@>@ M@>(Monad@<M@>)
<@ A@>(M@<Result@<A@>>)<@ B@>((A@) { M@<Result@<B@>>; }) { M@<Result@<B@>>; }
DoResult = <<@>@ M@>(Monad@<M@> m) {
  <@ A@>(M@<Result@<A@>> ma)<@ B@>((A@) { M@<Result@<B@>>; } f) {
    Result@<A@> ra <- m.do(ma);
    ra.?(err: m.return(Err<B@>(ra.err)));
    f(ra.ok);
  };
};

# A single command.
@ Command@ = *(StringL@ name, List@<StringL@> args);

# R@ -- Convenience definition for M@<Result@<Unit@>>;
<<@>@>@ R@ = <<@>@ M@> { M@<Result@<Unit@>>; };

# The type of a function to invoke an fbld command.
#  @arg[Invoke@<M@>][inline] - The inline invoke function.
#  @arg[Invoke@<M@>][block] - The block invoke function.
#  @arg[Command@][command] - The command to invoke.
#  @returns The result of invoking the command.
<<@>@>@ Invoke@ = <<@>@ M@> {
  @ I@ = (I@, I@, Command@) { R@<M@>; };
  I@;
};

@(Result@, Ok, Err, DoResult, Command@, R@, Invoke@);
