
@ Bit8@ = /Bits%.Bit8.Bit8@;
% H2 = /Bits%.Bit8.H2;

@ Char@ = /Char%.Char@;

@ Hex@ = /Digits%.Hex@;
% HexStr = /Digits/String%.HexStr;

<@>@ List@ = /List%.List@;
<@>% Cons = /List%.Cons;
<@>% Nil = /List%.Nil;
<@>% List = /List%.List;
<@>% Concat = /List%.Concat;

<@>@ Maybe@ = /Maybe%.Maybe@;

@ Md5Hash@ = /Md5%.Md5Hash@;
% Md5 = /Md5%.Md5;
% Eq = /Md5%.Eq;

<@>@ Put@ = /Process%.Put@;

@ String@ = /String%.String@;
% Str = /String%.Str;

@ Test@ = /Test%.Test@;
% Test = /Test%.Test;
% TestSuite = /Test%.TestSuite;
<@>% AssertEquals = /Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

# Import to test compilation.
% _ = /Md5/Bench%;
% _ = /Md5/Main%;

(Hex@) { Char@; } Hex2Char = (Hex@ h) {
  h.?(
    0: Char@(0: Unit), 1: Char@(1: Unit), 2: Char@(2: Unit), 3: Char@(3: Unit),
    4: Char@(4: Unit), 5: Char@(5: Unit), 6: Char@(6: Unit), 7: Char@(7: Unit),
    8: Char@(8: Unit), 9: Char@(9: Unit), A: Char@(A: Unit), B: Char@(B: Unit),
    C: Char@(C: Unit), D: Char@(D: Unit), E: Char@(E: Unit), F: Char@(F: Unit));
};

(Md5Hash@){String@;} Md5Hash2Str = (Md5Hash@ x) {
  Concat<Char@>(
    List<String@>[
      Str[Hex2Char(x.0), Hex2Char(x.1), Hex2Char(x.2), Hex2Char(x.3)],
      Str[Hex2Char(x.4), Hex2Char(x.5), Hex2Char(x.6), Hex2Char(x.7)],
      Str[Hex2Char(x.8), Hex2Char(x.9), Hex2Char(x.10), Hex2Char(x.11)],
      Str[Hex2Char(x.12), Hex2Char(x.13), Hex2Char(x.14), Hex2Char(x.15)],
      Str[Hex2Char(x.16), Hex2Char(x.17), Hex2Char(x.18), Hex2Char(x.19)],
      Str[Hex2Char(x.20), Hex2Char(x.21), Hex2Char(x.22), Hex2Char(x.23)],
      Str[Hex2Char(x.24), Hex2Char(x.25), Hex2Char(x.26), Hex2Char(x.26)],
      Str[Hex2Char(x.28), Hex2Char(x.29), Hex2Char(x.30), Hex2Char(x.31)]]);
};

# An Md5Hash literal. It should consist of 32 hex digits.
(List@<Hex@>) { Md5Hash@; } Md5Hash = (List@<Hex@> s00) {
  Hex@ h00 = s00.cons.head; List@<Hex@> s01 = s00.cons.tail;
  Hex@ h01 = s01.cons.head; List@<Hex@> s02 = s01.cons.tail;
  Hex@ h02 = s02.cons.head; List@<Hex@> s03 = s02.cons.tail;
  Hex@ h03 = s03.cons.head; List@<Hex@> s04 = s03.cons.tail;
  Hex@ h04 = s04.cons.head; List@<Hex@> s05 = s04.cons.tail;
  Hex@ h05 = s05.cons.head; List@<Hex@> s06 = s05.cons.tail;
  Hex@ h06 = s06.cons.head; List@<Hex@> s07 = s06.cons.tail;
  Hex@ h07 = s07.cons.head; List@<Hex@> s08 = s07.cons.tail;
  Hex@ h08 = s08.cons.head; List@<Hex@> s09 = s08.cons.tail;
  Hex@ h09 = s09.cons.head; List@<Hex@> s10 = s09.cons.tail;
  Hex@ h10 = s10.cons.head; List@<Hex@> s11 = s10.cons.tail;
  Hex@ h11 = s11.cons.head; List@<Hex@> s12 = s11.cons.tail;
  Hex@ h12 = s12.cons.head; List@<Hex@> s13 = s12.cons.tail;
  Hex@ h13 = s13.cons.head; List@<Hex@> s14 = s13.cons.tail;
  Hex@ h14 = s14.cons.head; List@<Hex@> s15 = s14.cons.tail;
  Hex@ h15 = s15.cons.head; List@<Hex@> s16 = s15.cons.tail;
  Hex@ h16 = s16.cons.head; List@<Hex@> s17 = s16.cons.tail;
  Hex@ h17 = s17.cons.head; List@<Hex@> s18 = s17.cons.tail;
  Hex@ h18 = s18.cons.head; List@<Hex@> s19 = s18.cons.tail;
  Hex@ h19 = s19.cons.head; List@<Hex@> s20 = s19.cons.tail;
  Hex@ h20 = s20.cons.head; List@<Hex@> s21 = s20.cons.tail;
  Hex@ h21 = s21.cons.head; List@<Hex@> s22 = s21.cons.tail;
  Hex@ h22 = s22.cons.head; List@<Hex@> s23 = s22.cons.tail;
  Hex@ h23 = s23.cons.head; List@<Hex@> s24 = s23.cons.tail;
  Hex@ h24 = s24.cons.head; List@<Hex@> s25 = s24.cons.tail;
  Hex@ h25 = s25.cons.head; List@<Hex@> s26 = s25.cons.tail;
  Hex@ h26 = s26.cons.head; List@<Hex@> s27 = s26.cons.tail;
  Hex@ h27 = s27.cons.head; List@<Hex@> s28 = s27.cons.tail;
  Hex@ h28 = s28.cons.head; List@<Hex@> s29 = s28.cons.tail;
  Hex@ h29 = s29.cons.head; List@<Hex@> s30 = s29.cons.tail;
  Hex@ h30 = s30.cons.head; List@<Hex@> s31 = s30.cons.tail;
  Hex@ h31 = s31.cons.head;
  Md5Hash@(
    h00, h01, h02, h03, h04, h05, h06, h07,
    h08, h09, h10, h11, h12, h13, h14, h15,
    h16, h17, h18, h19, h20, h21, h22, h23,
    h24, h25, h26, h27, h28, h29, h30, h31);
};

# Put all the bytes onto the output port, followed by nothing.
(Put@<Maybe@<Bit8@>>, List@<Bit8@>) { Unit@!; } PutAll = (Put@<Maybe@<Bit8@>> out, List@<Bit8@> bytes) {
  bytes.?(
    cons: {
      Unit@ _ := out(Maybe@<Bit8@>(just: bytes.cons.head));
      PutAll(out, bytes.cons.tail);
    },
    nil: {
      out(Maybe@<Bit8@>(nothing: Unit));
  });
};


# Compute the md5 hash for a string of bytes.
(List@<Bit8@>) { Md5Hash@!; } Md5Str = (List@<Bit8@> bytes) {
  Maybe@<Bit8@> ~ get, put;
  Md5Hash@ md5 := Md5(get), Unit@ x := PutAll(put, bytes);
  !(md5);
};

(List@<Hex@>) { List@<Bit8@>; } Hex2Bytes = (List@<Hex@> hex) {
  hex.?(
    cons: Cons<Bit8@>(
      H2(hex.cons.head, hex.cons.tail.cons.head),
      Hex2Bytes(hex.cons.tail.cons.tail)),
    nil: Nil<Bit8@>);
};
      
(String@, Md5Hash@, List@<Hex@>) { Test@; } TestStr = (String@ name, Md5Hash@ wnt, List@<Hex@> bytes) {
  Test(name, {
    Md5Hash@ got := Md5Str(Hex2Bytes(bytes));
    !(AssertEquals<Md5Hash@>(Eq, Md5Hash2Str, wnt, got));
  });
};

Test@ Tests = TestSuite(Str|Md5, List<Test@>[
  # ""
  TestStr(
    Str|empty,
    Md5Hash|D41D8CD98F00B204E9800998ECF8427E,
    HexStr|''),

  # "a"
  TestStr(
    Str|a,
    Md5Hash|0CC175B9C0F1B6A831C399E269772661,
    HexStr|61),

  # "abc"
  TestStr(
    Str|abc,
    Md5Hash|900150983CD24FB0D6963F7D28E17F72,
    HexStr|616263),

  # "message digest"
  TestStr(
    Str|message,
    Md5Hash|F96B697D7CB7938D525A2F31AAF161D0,
    HexStr|6D65737361676520646967657374),

  # "abcdefghijklmnopqrstuvwxyz"
  TestStr(
    Str|a_to_z,
    Md5Hash|C3FCD3D76192E4007DFB496CCA67E13B,
    HexStr|6162636465666768696A6B6C6D6E6F707172737475767778797A),

  # "ABCDEFGHIJKLMNOPQRS0TUVWXYZabcdefghijklmnopqrstuvwxyz012345678@9"
  TestStr(
    Str|A_to_9,
    Md5Hash|D174AB98D277D9F5A5611C2C9F419D9F,
    HexStr|4142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A30313233343536373839),

  # "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
  TestStr(
    Str|1_to_0,
    Md5Hash|57EDF4A22BE3C955AC49DA2E2107B67A,
    HexStr|3132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930)
]);

@(Tests);
