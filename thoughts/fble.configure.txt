Fble Configuration
==================
Goal is to provide a configure mechanism of some sort to tell where
dependencies are and what dependencies to disable when building fble.

Configure has the following responsibilities:
* Check whether the required dependencies are satisfied.
  - This can be simple, best effort, sanity check. Doesn't need to be
    exhaustive in any sense.
* Allow users to disable dependencies.
* Allow users to specify explicit paths for dependencies.
* Attempt to automatically identify paths for dependencies.
  - This can be simple, best effort. Doesn't need to be fancy.
* Report somewhere what features are disabled due to missing dependencies.
* Allow user to specify install directories.

Some misc thoughts:
* I like the idea of requiring a user to explicitly disable dependencies they
  don't want, rather than silently disabling things for them unexpectedly.
* Note that some dependencies are for test purposes only. We should allow
  disabling those, which will disable the corresponding tests.

Traditional approach is to have a ./configure script for this. User runs it,
specifies things via command line argument, it generates some file that's
input to the build.

Seems tedious to me to have to call configure to generate a file, when perhaps
we could ask the user to directly modify the file.

---

What are the big dependencies that are likely to get in the way of users?

* Ninja - we need that for everything, so it should be required.
* OpenGL/SDL
* Aarch64

Honestly, I think all the rest, like bison, gcc, tcl, grep, diffutils, etc.
are reasonable to expect people have installed or are willing to install.

OpenGL/SDL:
  fble-app
  FbleAppMain (aka 'app')
  games, graphics, hwdg, invaders, pinball

I don't see any reason to require OpenGL/SDL for these apps and test cases. We
should just avoid building the fble-app and final compiled FbleAppMain
executable. Because there are some games that don't need sdl, and you can
still run test cases. In the future you could imagine other ways to display
the games, like ncurses or something.

Aarch64 is the big one. If we don't have that, we want to remove any calls to
the assembler. And remove any tests that depend on it.

Cool. So here is what I propose in terms of functionality:
* If user is not on aarch64, or user explicitly opts out, we disable compiled
  code and tests therefore.
* User can specify OpenGL/SDL as auto, explicit config, or disabled. We find
  the path to SDL as best we can and either disable building of the final apps
  or not based on that.

Should we support a somewhat normal ./configure script approach?

Options would be something like:
* Eventually standard prefix directory options, once we support install.
* Optional feature --without-sdl
* --target= option to specify aarch64?
* Influential environment variables: CC, CFLAGS, LDFLAGS, etc.

Anyway, we can separate the interface from the implementation. Maybe start on
the implementation.

Implementation, start by manually specifying:
* HAVE_AARCH64 (or some such)
* HAVE_SDL (or some such)

Be able to switch those on and off, and test manually that it works. Maybe
easiest way to test is try on another computer that has neither, or uninstall
SDL, rebuild, and see if we can make that work.

Not sure how we can make an automated test for all these variations as part of
the build.

An important point here: I'm suggesting I always run as many tests as I can.
There's no option to 'run without tests'.

---

Next steps: review how standard gnu configuration scripts work. In particular,
look out for:

* How does information about existence and location of a package get passed to
  the program? Can we use the same naming scheme?
* How are targets specified? Can we use the same naming scheme?

Notes from https://www.gnu.org/prep/standards/html_node/Configuration.html:
* 'configure' is the name of the script
* don't allow people to build the program without running configure first.
* Generated files should have a comment saying they were generated by
  configure.
* config.status should be generated to rerun a configuration.
 - I'm not sure I care about this requirement.
* In theory we should support building with sources in a different location.
  Maybe a v2 kind of feature to try and support.
* target is specified as something like i686-pc-linux-gnu, or "all plausible
  alternatives'.
* --enable-* for enabling or disabling a feature.

Design strawperson:
* configure is a tcl script. It generates a config.tcl file read by build.tcl.
* Should we have a config.tcl.in file, to document what is expected?
* Q: should it generate Makefile too?
 Options:
  - Makefile exists before hand. Build fails without config.tcl.
  - No makefile exists before hand. It's generated by configure.
    + No Makefile.in
    + Using Makefile.in.

Honestly, I think best to generate the Makefile from configure. It's simple
enough. Forces people to run configure. No need for Makefile.in, because the
makefile will be so simple. It's just a wrapper around ninja.

configure can check for tcl, ninja, etc.

Question: Should SDL/GL be a feature or a with-package?
 - If it's a feature, then we don't have to worry about having SDL but not GL,
   or having GL but not SDL.
 - If it's with package... I'm not sure how that's intended to be used.

Samples from autoconf manual
* HAVE_UNISTD_H to say if that header is present.
* For libraries, prepend -lFoo to LIBS and set HAVE_LIBlibrary 

Hmm... So it's not very clearly specified what names to use for things. Let's
just pick my own.

In general, looks like we want --enable-* for turning something on and off, and
--with-* for using something else in place of the default. So, for me, almost
certainly we want --enable. I like following the model of vlc configure
script.

Design proposal:
* configure is a tcl script.
* configure generates Makefile.
* No Makefile.in.
* configure generates config.tcl. 
* config.tcl.example exists, in case people want to write their own, and to
  better document the expected format.
* --enable option for sdl/opengl. Maybe call it --enable-sdl?
  SDL_LIBS, SDL_CFLAGS, GL_LIBS, GL_CFLAGS variables.
  ENABLE_SDL variable set to true or false.
* TODO: how to handle aarch64? I think as an enable flag, not as a target
  flag? Hard to tell.

aarch64 doesn't make sense as an enable flag. It's more like, if you have
aarch64, we can run those tests. Otherwise we have to skip those tests.
There's no choice for the user to make here.

