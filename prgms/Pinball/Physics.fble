
<@>@ List@ = /List%.List@;
<@>% Cons = /List%.Cons;

@ Num@ = /Pinball/Num%.Num@;
% Add = /Pinball/Num%.Add;
% Sub = /Pinball/Num%.Sub;
% Neg = /Pinball/Num%.Neg;
% Mul = /Pinball/Num%.Mul;
% Div = /Pinball/Num%.Div;
% Sqrt = /Pinball/Num%.Sqrt;
% Eq = /Pinball/Num%.Eq;
% Gt = /Pinball/Num%.Gt;
% Ge = /Pinball/Num%.Ge;
% Lt = /Pinball/Num%.Lt;
% Le = /Pinball/Num%.Le;
% Int = /Pinball/Num%.Int;

@ Vec@ = *(Num@ x, Num@ y);

(Vec@, Vec@) { Vec@; } AddV = (Vec@ a, Vec@ b) {
  Vec@(Add(a.x, b.x), Add(a.y, b.y));
};

(Vec@, Vec@) { Vec@; } SubV = (Vec@ a, Vec@ b) {
  Vec@(Sub(a.x, b.x), Sub(a.y, b.y));
};

(Vec@, Num@) { Vec@; } MulVS = (Vec@ a, Num@ s) {
  Vec@(Mul(a.x, s), Mul(a.y, s));
};

# Norm --
#   Computes a unit vector in the direction of the given vector.
(Vec@) { Vec@; } Norm = (Vec@ a) {
  Num@ d = Sqrt(Add(Mul(a.x, a.x), Mul(a.y, a.y)));
  Vec@(Div(a.x, d), Div(a.y, d));
};

# RotateTo --
#   Given unit normal vector n and arbitrary vector v, rotate the vector v
#   to a coordinate system where n is at (0, 1).
(Vec@, Vec@) { Vec@; } RotateTo = (Vec@ n, Vec@ v) {
  Num@ x = Sub(Mul(n.y, v.x), Mul(n.x, v.y));
  Num@ y = Add(Mul(n.x, v.x), Mul(n.y, v.y));
  @(x, y);
};

# RotateFrom --
#   Given unit normal vector n and arbitrary vector v, rotate the vector v
#   out of a coordinate system where n is at (0, 1).
(Vec@, Vec@) { Vec@; } RotateFrom = (Vec@ n, Vec@ v) {
  Num@ x = Add(Mul(n.y, v.x), Mul(n.x, v.y));
  Num@ y = Sub(Mul(n.y, v.y), Mul(n.x, v.x));
  @(x, y);
};

@ Ball@ = *(Vec@ pos, Vec@ vel, Num@ radius);

@ Edge@ = *(
  Vec@ normal,     # Unit normal vector.
  Vec@ start,      # Starting position of the edge.
  Num@ length      # Length of the edge.
);

@ Paddle@ = *(
  Vec@ end_down,   # The paddle's end position when off.
  Vec@ end_up,     # The paddle's end position when on.
  Num@ pos,        # The fraction of the way between end_up and end_pos.
  Num@ vel,        # The velocity of the paddle in units of pos per tick.
  Edge@ edge       # The edge of the paddle in its current position.
);

(Paddle@) { Paddle@; } RecomputeEdge = (Paddle@ p) {
  Vec@ end = AddV(p.end_down, MulVS(SubV(p.end_up, p.end_down), p.pos));
  Vec@ tangent = Norm(SubV(end, p.edge.start));
  Vec@ normal = Vec@(Neg(tangent.y), tangent.x);
  Paddle@(
    p.end_down, p.end_up, p.pos, p.vel,
    Edge@(normal, p.edge.start, p.edge.length));
};

@ World@ = *(Ball@ ball, List@<Edge@> edges, List@<Paddle@> paddles);

# HALF_G --
#   Half the acceleration due to gravity.
Vec@ HALF_G = Vec@(Int|0, Neg(Div(Int|1, Int|16)));

# R --
#   The coefficient of restitution: the fraction of energy preserved during a
#   collision.
Num@ R = Div(Int|6, Int|8);

# BallT@ --
#   A ball at a particular point in time.
@ BallT@ = *(Ball@ ball, Num@ time);

# Collide -- 
#   Check for and apply collision of ball with edge between start and end.
#
# If there is no collision, end is returned as is. If there is a collision,
# returns the ball in the state just after the collision at the time of
# collision.
(Ball@, BallT@, Edge@) { BallT@; }
Collide = (Ball@ start, BallT@ end, Edge@ edge) {
  Num@ radius = start.radius;

  # For there to be considered a collision, the ball must start above the
  # edge, end within radius units of the edge, and be going towards the edge.
  Vec@ s = RotateTo(edge.normal, SubV(start.pos, edge.start));
  Lt(s.y, Int|0).?(true: end);

  Vec@ e = RotateTo(edge.normal, SubV(end.ball.pos, edge.start));
  Gt(e.y, radius).?(true: end);

  Vec@ v = RotateTo(edge.normal, start.vel);
  Ge(v.y, Int|0).?(true: end);

  # Potential collision detected.
  # r = y0 + vt ==>  t = (r-y0)/v
  Num@ t = Lt(s.y, radius).?(true: Int|0, false: Div(Sub(radius, s.y), v.y));

  # Verify the collision happens within the segment of the edge.
  Num@ x = Add(s.x, Mul(v.x, t));
  Lt(x, Int|0).?(true: end);
  Gt(x, edge.length).?(true: end);

  # Compute the new state just after the collision.
  Vec@ vc = Vec@(v.x, Mul(R, Neg(v.y)));
  Vec@ end_pos = AddV(start.pos, MulVS(start.vel, t));
  Vec@ vel = RotateFrom(edge.normal, vc);
  BallT@(Ball@(end_pos, vel, radius), t);
};

# CollideS --
#   Check for and apply collision between ball and a list of edges.
#
# If there is no collision, end is returned as is. If there is a collision,
# returns the ball in the state just after the collision at the time of
# collision.
(Ball@, BallT@, List@<Edge@>) { BallT@; }
CollideS = (Ball@ start, BallT@ end, List@<Edge@> edges) {
  edges.?(nil: end);
  CollideS(start, Collide(start, end, edges.cons.head), edges.cons.tail);
};

# Move --
#   Move the ball by the given amount of time, assuming velocity stays
#   constant.
#
# In case of collision, we break down the time period into smaller bits. The
# assumption that velocity is constant is intended to prevent the case where
# we break down the time period into smaller and smaller bits and end up never
# reaching the end of the time period as a result. This also assumes we
# don't have any super tight corners that would cause us to collide an
# excessive number of times in a single time period.
(Ball@, Num@, List@<Edge@>) { Ball@; } Move = (Ball@ b, Num@ t, List@<Edge@> edges) {
  Le(t, Int|0).?(true: b);

  Vec@ end_pos = AddV(b.pos, MulVS(b.vel, t));
  BallT@ end = BallT@(Ball@(end_pos, b.vel, b.radius), t);
  BallT@ cr = CollideS(b, end, edges);
  Move(cr.ball, Sub(t, cr.time), edges);
};

(Paddle@) { Paddle@; } TickPaddle = (Paddle@ p) {
  Num@ pos = Add(p.pos, p.vel);

  Num@ pos_ = Lt(pos, Int|0).?(true: Int|0, false: pos);
  Num@ pos = pos_;

  Num@ pos_ = Gt(pos, Int|1).?(true: Int|1, false: pos);
  Num@ pos = pos_;

  Eq(pos, p.pos).?(true: p);
  RecomputeEdge(Paddle@(p.end_down, p.end_up, pos, p.vel, p.edge));
};

# Tick --
#   Advance the world by one unit of time.
(World@) { World@; } Tick = (World@ w) {
  # Update the paddles.
  List@<Paddle@> paddles = /List%.Map<Paddle@, Paddle@>(w.paddles, TickPaddle);

  # Compute average expected ball velocity over the time period.
  Vec@ v_avg = AddV(w.ball.vel, HALF_G);

  # Move the ball assuming constant velocity.
  List@<Edge@> edges = /List%.ForEach<Paddle@, List@<Edge@>>(
    paddles, w.edges, (Paddle@ p, List@<Edge@> es) {
      Cons<Edge@>(p.edge, es);
    });
  Ball@ b_moved = Move(Ball@(w.ball.pos, v_avg, w.ball.radius), Int|1, edges);

  # Compute final ball velocity.
  Vec@ v = AddV(b_moved.vel, HALF_G);

  World@(Ball@(b_moved.pos, v, w.ball.radius), w.edges, paddles);
};

@(Vec@, Ball@, Edge@, Paddle@, World@, Tick,
  AddV, SubV, MulVS);
