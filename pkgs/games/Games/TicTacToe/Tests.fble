
<@>% List = /Core/List%.List;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
@ TestResult@ = /Core/Test%.TestResult@;
% TestSuite = /Core/Test%.TestSuite;
% Test = /Core/Test%.Test;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ AIR@ = /Games/TicTacToe/AI%.AIR@;
% AI = /Games/TicTacToe/AI%;

@ Board@ = /Games/TicTacToe/Board%.Board@;
@ Player@ = /Games/TicTacToe/Board%.Player@;
@ Square@ = /Games/TicTacToe/Board%.Square@;
@ Status@ = /Games/TicTacToe/Board%.Status@;
% BoardStatus = /Games/TicTacToe/Board%.BoardStatus;
% EmptyBoard = /Games/TicTacToe/Board%.EmptyBoard;

# Import to test compilation.
% _ = /Games/TicTacToe/Stdio%;

(Unit@) { TestResult@; } TestBoardStatus = (Unit@ _) {
  Status@ status = BoardStatus(Board@(
        Square@(X: Unit), Square@(O: Unit), Square@(O: Unit),
        Square@(E: Unit), Square@(O: Unit), Square@(X: Unit),
        Square@(O: Unit), Square@(X: Unit), Square@(X: Unit)));
  status.?(
      O: TestResult@(pass: Unit),
      : TestResult@(fail: Str|failed));
};

# TODO: Use PositionEquals for test result, and report position when failed?
(Unit@) { TestResult@; } TestChooseBestMoveWin = (Unit@ _) {
  AIR@ air = AI.Move(AI.Initial,
    Board@(Square@(X: Unit), Square@(X: Unit), Square@(E: Unit),
           Square@(O: Unit), Square@(O: Unit), Square@(E: Unit),
           Square@(E: Unit), Square@(E: Unit), Square@(E: Unit)),
    Player@(X: Unit));
  air.position.?(UR: TestResult@(pass: Unit));
  TestResult@(fail: Str|failed);
};

(Unit@) { TestResult@; } TestChooseBestMoveNoLose = (Unit@ _) {
  AIR@ air = AI.Move(AI.Initial,
    Board@(Square@(E: Unit), Square@(E: Unit), Square@(E: Unit),
           Square@(X: Unit), Square@(X: Unit), Square@(O: Unit),
           Square@(E: Unit), Square@(E: Unit), Square@(O: Unit)),
    Player@(X: Unit));
  air.position.?(UR: TestResult@(pass: Unit));
  TestResult@(fail: Str|failed);
};


Test@ Tests = TestSuite(Str|TicTacToe, List<Test@>[
  Test(Str|TestBoardStatus, TestBoardStatus),
  Test(Str|TestChooseBestMoveWin, TestChooseBestMoveWin),
  Test(Str|TestChooseBestMoveNoLose, TestChooseBestMoveNoLose)
]);

# Benchmark for TicTacToe AI that takes about 1 minute to run.
Unit@! Bench = !({
  AIR@ _ = AI.Move(AI.Initial, EmptyBoard, Player@(X: Unit));
  Unit;
});

@(Tests, Bench);
