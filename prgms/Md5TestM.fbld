module Md5TestM(Md5TestI) {
  import @ { UnitM; BoolM; Bit8M; HexM; ListM; MaybeM; Md5M; };
  import UnitM { Unit; };
  import Bit8M { Bit8; };
  import HexM { 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; a; b; c; d; e; f; };
  import ListM { P; S; };
  import MaybeM { Maybe; };
  import Md5M { ABCD; Md5; H32; Eq; };

  union TestName(
      Unit Md5_empty
  );

  struct TestFailure(TestName name, ABCD a, ABCD b);
  proc Test( ; ; S<TestFailure>) {
    Maybe<Bit8> +- put, get;
    ABCD wnt = $(H32(d(), 4(), 1(), d(), 8(), c(), d(), 9(),
                     8(), f(), 0(), 0(), b(), 2(), 0(), 4(),
                     e(), 9(), 8(), 0(), 0(), 9(), 9(), 8(),
                     e(), c(), f(), 8(), 4(), 2(), 7(), e()));
    ABCD got = Md5(get; ), Unit ignored = {
      Maybe<Bit8> x_ = +put(Maybe<Bit8>:nothing(Unit()));
      $(Unit());
    };
    $(?(Eq(wnt, got);
          S<TestFailure>:nil(Unit()),
          S<TestFailure>:cons(
            P<TestFailure>(TestFailure(TestName:Md5_empty(Unit()), wnt, got),
                           S<TestFailure>:nil(Unit())))));
  };
};
