
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% And = /Core/Bool%.And;

@ Char@ = /Core/Char%.Char@;

<@>@ Eq@ = /Core/Eq%.Eq@;
<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Append = /Core/List%.Append;
<@>% Nil = /Core/List%.Nil;
<@>% Cons = /Core/List%.Cons;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<@>@ Ord@ = /Core/Ord%.Ord@;
@ Ordering@ = /Core/Ord%.Ordering@;
% Lt = /Core/Ord%.Lt;
% Eq = /Core/Ord%.Eq;
% Gt = /Core/Ord%.Gt;

<@>@ Show@ = /Core/Show%.Show@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Bit1@ = +(Unit@ 0, Unit@ 1);
@ Bit2@ = *(Bit1@ h, Bit1@ l);

Bit2@ A = Bit2@(Bit1@(0: Unit), Bit1@(0: Unit));
Bit2@ B = Bit2@(Bit1@(0: Unit), Bit1@(1: Unit));
Bit2@ C = Bit2@(Bit1@(1: Unit), Bit1@(0: Unit));

Eq@<Bit1@> EqBit1 = (Bit1@ a, Bit1@ b) {
  a.?(
    0: b.?(0: True, 1: False),
    1: b.?(0: False, 1: True));
};

Ord@<Bit1@> OrdBit1 = (Bit1@ a, Bit1@ b) {
  a.?(
    0: b.?(0: Eq, 1: Lt),
    1: b.?(0: Gt, 1: Eq));
};

Show@<Bit1@> ShowBit1 = (Bit1@ x) {
  x.?(0: Str|0, 1: Str|1);
};

Eq@<Bit2@> EqBit2 = (Bit2@ a, Bit2@ b) {
  And(EqBit1(a.h, b.h), EqBit1(a.l, b.l));
};

Ord@<Bit2@> OrdBit2 = (Bit2@ a, Bit2@ b) {
  Ordering@ oh = OrdBit1(a.h, b.h);
  oh.?(eq: OrdBit1(a.l, b.l), : oh);
};

Show@<Bit2@> ShowBit2 = (Bit2@ x) {
  Append<Char@>(ShowBit1(x.h), ShowBit1(x.l));
};

% M = /Core/Map/Tree%.Map<Bit2@>(OrdBit2);
<@>@ Map@ = M.Map@;
<@>% Empty = M.Empty;
<@>% Lookup = M.Lookup;
<@>% Insert = M.Insert;
<@>% Delete = M.Delete;
<@>% ForEach = M.ForEach;

<@>% Show = /Core/Map/Show%.Show<M.Map@, Bit2@>(M, ShowBit2);
<@>% Eq = /Core/Map/Eq%.Eq<M.Map@, Bit2@>(M, EqBit2);

Test@ Tests = TestSuite(Str|Map, List[
  Test(Str|'empty', (Unit@ _) {
    Maybe@<Unit@> wnt = Nothing<Unit@>;
    Maybe@<Unit@> got = Lookup(Empty<Unit@>, B);
    AssertEquals(
      /Core/Maybe/Eq%.Eq(/Core/Unit/Eq%.Eq),
      /Core/Maybe/Show%.Show(/Core/Unit/Show%.Show),
      wnt, got);
  }),

  Test(Str|'not found', (Unit@ _) {
    Map@<Unit@> map = Insert<Unit@>(Empty<Unit@>, C, Unit);
    Maybe@<Unit@> wnt = Nothing<Unit@>;
    Maybe@<Unit@> got = Lookup(map, B);
    AssertEquals(
      /Core/Maybe/Eq%.Eq(/Core/Unit/Eq%.Eq),
      /Core/Maybe/Show%.Show(/Core/Unit/Show%.Show),
      wnt, got);
  }),

  Test(Str|'found', (Unit@ _) {
    Map@<Bool@> map = Insert(Insert(Insert(Empty<Bool@>,
      A, False),
      B, True),
      C, False);
    Maybe@<Bool@> wnt = Just(True);
    Maybe@<Bool@> got = Lookup(map, B);
    AssertEquals(
      /Core/Maybe/Eq%.Eq(/Core/Bool/Eq%.Eq),
      /Core/Maybe/Show%.Show(/Core/Bool/Show%.Show),
      wnt, got);
  }),

  Test(Str|'replace', (Unit@ _) {
    Map@<Bool@> map = Insert(Insert(Empty<Bool@>,
      B, False),
      B, True);
    Maybe@<Bool@> wnt = Just(True);
    Maybe@<Bool@> got = Lookup(map, B);
    AssertEquals(
      /Core/Maybe/Eq%.Eq(/Core/Bool/Eq%.Eq),
      /Core/Maybe/Show%.Show(/Core/Bool/Show%.Show),
      wnt, got);
  }),

  Test(Str|'delete', (Unit@ _) {
    Map@<Bool@> map = Delete(Insert(Empty<Bool@>, B, False), B);
    Maybe@<Bool@> wnt = Nothing<Bool@>;
    Maybe@<Bool@> got = Lookup(map, B);
    AssertEquals(
      /Core/Maybe/Eq%.Eq(/Core/Bool/Eq%.Eq),
      /Core/Maybe/Show%.Show(/Core/Bool/Show%.Show),
      wnt, got);
  }),

  Test(Str|'foreach', (Unit@ _) {
    Map@<Bool@> map = Insert(Insert(Insert(Empty<Bool@>,
      B, True),
      A, True),
      B, False);

    # Note: A < B, we expect the ForEach to iterate in the order A, B. Because
    # we add A to the end of the list before B, we expect the resulting list
    # to be in the order B, A.
    @ Entry@ = *(Bit2@ key, Bool@ value);
    List@<Entry@> wnt = List[Entry@(B, False), Entry@(A, True)];
    List@<Entry@> got = ForEach(map, Nil<Entry@>,
      (Bit2@ k, Bool@ v, List@<Entry@> l) {
        Cons(Entry@(k, v), l);
      });
    AssertEquals(
      /Core/List/Eq%.Eq((Entry@ a, Entry@ b) {
        And(EqBit2(a.key, b.key), /Core/Bool/Eq%.Eq(a.value, b.value));
      }),
      /Core/List/Show%.Show((Entry@ e) {
        /Core/String%.Strs[ShowBit2(e.key), Str|': ', /Core/Bool/Show%.Show(e.value)];
      }),
      wnt, got);
  }),

  Test(Str|'eq: equal', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);
    Map@<Bool@> b = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: value mismatch', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, True), C, False);
    Map@<Bool@> b = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);

    Bool@ wnt = False;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: different number of elements', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);
    Map@<Bool@> b = Insert(Insert(Empty<Bool@>, A, True), B, False);

    Bool@ wnt = False;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: deleted to empty', (Unit@ _) {
    Map@<Bool@> a = Delete(Insert(Empty<Bool@>, A, True), A);
    Map@<Bool@> b = Empty<Bool@>;

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: empty from deleted', (Unit@ _) {
    Map@<Bool@> a = Empty<Bool@>;
    Map@<Bool@> b = Delete(Insert(Empty<Bool@>, A, True), A);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: empty from deleted pair second', (Unit@ _) {
    Map@<Bool@> a = Insert(Empty<Bool@>, A, True);
    Map@<Bool@> b = Delete(Insert(a, B, True), B);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: empty from deleted pair first', (Unit@ _) {
    Map@<Bool@> a = Insert(Empty<Bool@>, A, True);
    Map@<Bool@> b = Delete(Insert(a, C, True), C);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: equal any order', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, B, False), C, False), A, True);
    Map@<Bool@> b = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'Show empty', (Unit@ _) {
    Map@<Bool@> map = Empty<Bool@>;
    String@ wnt = Str|'{ }';
    String@ got = Show(/Core/Bool/Show%.Show, map);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|'Show single', (Unit@ _) {
    Map@<Bool@> map = Insert(Empty<Bool@>, B, False);
    String@ wnt = Str|'{ 01 => False; }';
    String@ got = Show(/Core/Bool/Show%.Show, map);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|'Show multi', (Unit@ _) {
    Map@<Bool@> map = Insert(Insert(Empty<Bool@>, B, False), C, True);
    String@ wnt = Str|'{ 01 => False; 10 => True; }';
    String@ got = Show(/Core/Bool/Show%.Show, map);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  })
]);

@(Tests);
