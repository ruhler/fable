
@ Bool@ = /Core/Bool%.Bool@;
% False = /Core/Bool%.False;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;

@ Stdio@ = /Core/Stdio%.Stdio@;
@ IO@ = /Core/Stdio%.IO@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% TestSuite = /Core/Test%.TestSuite;

# Import to test compilation.
% _ = /Fble/Bench%;
% _ = /Fble/DebugTest%;
% _ = /Fble/ProfilesTest%;
% _ = /Fble/StackSmasher%;
% _ = /Graphics/App%;
% _ = /Graphics/2D/Circle%;
% _ = /Invaders/App%;
% _ = /Invaders/Bench%;
% _ = /Invaders/Screenshot/App%;
% _ = /Pinball/App%;
% _ = /Snake%;
% _ = /Snake/Bench%;

Test@ AllTests = TestSuite(Str|Fble, List<Test@>[
  /Core/Tests%.Tests,
  /BenchmarkGame/Tests%.Tests,
  /GameOfLife/Tests%.Tests,
  /Graphics/2D/Tests%.Tests,
  /Graphics/Triangle/Tests%.Tests,
  /Hwdg/Tests%.Tests,
  /LFSR/Tests%.Tests,
  /Map/Tests%.Tests,
  /Md5/Tests%.Tests,
  /Pinball/Tests%.Tests,
  /Rat/Tests%.Tests,
  /Sat/Tests%.Tests,
  /Sudoku/Tests%.Tests,
  /TicTacToe/Tests%.Tests
]);

Stdio@ Main = (IO@ io, List@<String@> args) {
  Bool@ verbose = args.?(
    cons: /Core/String/Eq%.Eq(Str|'--verbose', args.cons.head),
    nil: False);

  verbose.?(
    true: /Core/Test%.RunTestsVerbose(io.stdout, AllTests),
    false: /Core/Test%.RunTests(io.stdout, AllTests));
};

Main;
