
#@ Bool@ = /Bool%.Bool@;
#% True = /Bool%.True;
#% False = /Bool%.False;
<@>% List = /List%.List;
% Str = /String%.Str;
@ Test@ = /Test%.Test@;
#% Test = /Test%.Test;
% TestSuite = /Test%.TestSuite;
#<@>% AssertEquals = /Test%.AssertEquals;

#% B = /Digits%.Bit;
#
#% D = /Int/Int/Lit%.D;
#% I = /Int/Int/Lit%.I;
#
#@ Heap@ = /Fblf/Heap%.Heap@;
#% Equals = /Fblf/Heap%.Equals;
#% Copy = /Fblf/Heap%.Copy;

# TODO: Rewrite these tests.
Test@ Tests = TestSuite(Str|Heap, List<Test@>[]);
#[
#  Test(Str|D, !({
#    Heap@ a = HeapFromBitStr(B|001011100101);
#    Bool@ wnt = True;
#    Bool@ got = Equals(a, I(D|0), I(D|0), I(D|12));
#    AssertEquals<Bool@>(/Bool/Eq%.Eq, /Bool/Show%.Show, wnt, got);
#  })),
#
#  Test(Str|NotEquals, !({
#    Heap@ a = HeapFromBitStr(B|001011100101);
#    Heap@ b = HeapFromBitStr(B|001100101001);
#    Bool@ wnt = False;
#    Bool@ got = Equals(Ptr@(a, I(D|0)), Ptr@(b, I(D|0)), I(D|12));
#    AssertEquals<Bool@>(/Bool/Eq%.Eq, /Bool/Show%.Show, wnt, got);
#  })),
#
#  Test(Str|PartiallyEquals, !({
#    Heap@ a = HeapFromBitStr(B|001011100101);
#    Heap@ b = HeapFromBitStr(B|001100101001);
#    Bool@ wnt = True;
#    Bool@ got = Equals(Ptr@(a, I(D|0)), Ptr@(b, I(D|0)), I(D|3));
#    AssertEquals<Bool@>(/Bool/Eq%.Eq, /Bool/Show%.Show, wnt, got);
#  })),
#
#  Test(Str|InternalEquals, !({
#    Heap@ a = HeapFromBitStr(B|001011100101);
#    Heap@ b = HeapFromBitStr(B|001100101001);
#    Bool@ wnt = True;
#    Bool@ got = Equals(Ptr@(a, I(D|3)), Ptr@(b, I(D|1)), I(D|3));
#    AssertEquals<Bool@>(/Bool/Eq%.Eq, /Bool/Show%.Show, wnt, got);
#  })),
#
#  Test(Str|InternalNotEquals, !({
#    Heap@ a = HeapFromBitStr(B|001011100101);
#    Heap@ b = HeapFromBitStr(B|001100101001);
#    Bool@ wnt = False;
#    Bool@ got = Equals(Ptr@(a, I(D|3)), Ptr@(b, I(D|1)), I(D|4));
#    AssertEquals<Bool@>(/Bool/Eq%.Eq, /Bool/Show%.Show, wnt, got);
#  })),
#
#  Test(Str|SelfOffsetEquals, !({
#    Heap@ a = HeapFromBitStr(B|001011100101);
#    Bool@ wnt = True;
#    Bool@ got = Equals(Ptr@(a, I(D|0)), Ptr@(a, I(D|7)), I(D|5));
#    AssertEquals<Bool@>(/Bool/Eq%.Eq, /Bool/Show%.Show, wnt, got);
#  })),
#
#  Test(Str|SelfOffsetNotEquals, !({
#    Heap@ a = HeapFromBitStr(B|001011100101);
#    Bool@ wnt = False;
#    Bool@ got = Equals(Ptr@(a, I(D|0)), Ptr@(a, I(D|6)), I(D|5));
#    AssertEquals<Bool@>(/Bool/Eq%.Eq, /Bool/Show%.Show, wnt, got);
#  })),
#
#  Test(Str|Assign, !({
#    Heap@ a = HeapFromBitStr(B|001011100101);
#    Heap@ b = HeapFromBitStr(B|010000000101);
#    Heap@ wnt = HeapFromBitStr(B|011100100101);
#    Heap@ got = Assign(Ptr@(b, I(D|2)), Ptr@(a, I(D|5)), I(D|5));
#    AssertEquals<Heap@>(/Fblf/Heap/Eq%.Eq, /Fblf/Heap/Show%.Show, wnt, got);
#  }))
#]);

@(Tests);
