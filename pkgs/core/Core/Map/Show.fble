
<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Cons = /Core/List%.Cons;
<@>% Reverse = /Core/List%.Reverse;

<<@>@,@>@ Map@ = /Core/Map%.Map@;

<@>@ Show@ = /Core/Show%.Show@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

<<@>@ M@, @ K@>(Map@<M@, K@>, Show@<K@>)<@ V@>(Show@<V@>) { Show@<M@<V@>>; }
Show = <<@>@ M@, @ K@>(Map@<M@, K@> m, Show@<K@> show_key)<@ V@>(Show@<V@> show_value, M@<V@> map) {
  List@<String@> elems = m.ForEach(map, List[Str|'{ '],
    (K@ k, V@ v, List@<String@> es) {
      Cons(Strs[show_key(k), Str|' => ', show_value(v), Str|'; '], es);
    });
  Strs(Reverse(Cons(Str|'}', elems)));
};

@(Show);
