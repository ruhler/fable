## What to do about man pages?

In my ideal world, we have man pages for all of the installed binaries and
public library functions. In a practical world, there are some questions:
* Should each library function have its own man page, or should we group them
  together? If we group them together, what should the groupings be?
* How do we generate the man pages?
 - By hand, and check them in?
 - Using some tool?
* How do we deal with duplicate information in man pages, --help usage
  messages, and function doc comments in header files?

Misc thoughts:
* In past projects I have used ascidoc to generate man pages from .txt files.
* If I have structured content, I could probably write a tcl script that can
  generate man pages easily enough.
* There are a projects available to generate man pages from markdown:
 - ronn - ruby based though, and I don't want that as a build dependency.
 - pandoc - Haskell based though, and I don't want that as a build dependency.

Does doxygen support generation of man pages? Apparently it does. That could
be nice.

Syntax:
    /// ...
Or  //! ...

I'll have to play around a bit to better understand what doxygen syntax can be
made to look like or do. It would be good to use a standard doc format.
Hopefully they aren't too verbose.

I notice the doxygen man page doesn't look great. That may be a bad sign.
* It generates a man page per file, not per function. And the man page is
  named after the file. That's not really what I want.
* It requires @param or \param to comment parameters.

So, instead of, for example:

// FbleNewStructValue --
//   Create a new struct value with given arguments.
//
// Inputs:
//   heap - The heap to allocate the value on.
//   argc - The number of fields in the struct value.
//   args - argc FbleValue arguments to the struct value. Args are borrowed,
//          and may be NULL.
//
// Results:
//   A newly allocated struct value with given args.
//
// Side effects:
//   The returned struct value must be freed using FbleReleaseValue when no
//   longer in use.
FbleValue* FbleNewStructValue(FbleValueHeap* heap, size_t argc, FbleValue** args);

We could do:

/// Create a new struct value with given arguments.
/// 
/// \param heap The heap to allocate the value on.
/// \param argc The number of fields in the struct value.
/// \param args argc FbleValue arguments to the struct value. Args are borrowed,
///          and may be NULL.
/// 
/// \returns A newly allocated struct value with given args.
/// 
/// Side effects:
///   The returned struct value must be freed using FbleReleaseValue when no
///   longer in use.
FbleValue* FbleNewStructValue(FbleValueHeap* heap, size_t argc, FbleValue** args);

I'll say, I don't really like it, and the doxygen manual doesn't give me much
confidence in it.

Alternatives to doxygen:
* sphinx (designed for python)
* cldoc (based on clang)

cldoc at least has nicer doc comment syntax:

// FbleNewStructValue --
//   Create a new struct value with given arguments.
//
// Inputs:
//   @heap - The heap to allocate the value on.
//   @argc - The number of fields in the struct value.
//   @args - argc FbleValue arguments to the struct value. Args are borrowed,
//          and may be NULL.
//
// Results:
//   @return A newly allocated struct value with given args.
//
// Side effects:
//   The returned struct value must be freed using FbleReleaseValue when no
//   longer in use.
FbleValue* FbleNewStructValue(FbleValueHeap* heap, size_t argc, FbleValue** args);

But it doesn't generate man pages.

How about I just write my own tcl scripts to do what I want. It's very narrow.
I can get exactly what I want, what I need, and with no new dependency
requirements.

We have a few things:
1. Function comments.
2. References to function comments.

Focusing on those to start, it's pretty easy, no?

// <name> --
//   <brief>
//
<proto>

err... Trouble is, man page needs types and such. I don't want to duplicate
those. Also, if we want to check everything is documented.

Taking a step back... what's the goal of using something like deoxygen?
1. We could create a website from the info if we wanted.
2. Auto-generate man pages, without having to duplicate info.
3. Enforcement of documentation practices.

But (2) doesn't work so great from a point of view of having multiple
functions defined in the same man page.

What about asciidoc? I can write the man pages manually in asciidoc and
convert.

Note: `man 7 man-pages` for recommended conventions.

---

GNU has a help2man program. How about that for man 1 pages?

It looks like input is:
* metadata for man page via command line arguments.
* --help, --version options to the program.
* optional additional files to include.

It looks pretty reasonable to me. Benefits:
* Produces decent looking man pages (to be confirmed by me)
* No need to duplicate documentation.
* Improvements to man page result in improvements to --help and vice versa.

Yeah. I like that. I think help2man is a good route to go for binary files.
And if we want, we can pre-include the generated man pages in the distribution
so normal users don't need to have help2man installed if they don't want.

Let me try this for fble-compile as a sanity check. First step is to improve
the help documentation.

GNU coding standards (https://www.gnu.org/prep/standards/standards.html)
specify what --version and --help should produce. Presumably we can just
follow those for best results.

For example, --version on fble-compile:

fble-compile (Fable) 0.1

Is probably good enough to start. We can debate the "Fable" part. So, for now,
maybe just: 'fble-compile 0.1'.

And for --help, so help2man documentation.

---

Yeah, help2man is pretty good I think. Let's provisionally go that route. I
just need a few tweaks to make it work better.

Cool. I like this. It's a little finicky in terms of how to format the help
text, but I can make it work. In particular, label sections with *xxx*, use
plenty of blank line separators and align things far to the left.

---

Now that the question of man pages for binaries is settled, on to the question
about man pages for library functions.

Presumably I have enough info in my header file comments to generate a man
page from them. Maybe we want to add a little extra boiler plate. Maybe we
want to add a little more structure for things like 'see also'. How hard would
it be to scrape that info from each file in include/fble/*?

Maybe I should start by drafting a man page for one of the functions, just to
see what the end result might look like, and what, if any, information I would
need to add.

Okay, I've got a draft of include/fble/FbleNewStructValue.3. The structured
info I want:

* function name
* brief description. Like, really brief.
* detailed description
* list of args, for each arg: name, description (optional if no inputs)
* side effects, general description? list? (optional if no side effects)
* return value description (optional if return void)
* prototype, split up by argname/non-argname components.

Let me browse through the header files and see if any issues stand out:
* Not consistently separating brief from more detailed description.
 - Could be fixed by putting brief description on same line as name?
* Documenting macros as opposed to functions.
* Formatted code in description, and other layout things.
* Documentation of types as opposed to functions.
* See also would probably be useful to have somehow.
* Some functions missing the '--' on the comment.
* Types like 'const char*' could make it harder to see which is the arg?
* #define or other thing between comment and function prototype.
* TODO in the comment.
* Embedded things like NULL that we might want to highlight differently.
* varargs '...' argument

How important is it to stick with standard man page style?
* Do we really need a super brief description with as part of the name?
* Do we really need to use 'RETURN VALUE' section for that info? Should we
  avoid separate sections for side effects?

Because part of my wants to be, like: we extract the name and synopsis from
the prototype, the rest we treat as pure markdown that we format and put into
the DESCRIPTION section. No RETURN VALUE section. Possibly no 'brief' name, or
we could make that part of the syntax for the function description.

---

Let's start simple, mostly unstructured?

// <name> --
// <description>
// ...
... <name> (...);

Where description is formatted with:
  Foo: ... for a section
  * ... for a list

Or, if we are willing to use some additional tool to generate the man page,
like markdown2man or asciidoc, then have it be asciidoc syntax. Generate
asciidoc, and have that convert to the man page.

I think it's time to investigate more about whether we should be using
markdown or asciidoc for documentation. See thoughts/fble.docs.txt.

Discussion suggests we give asciidoc a try. Then treat the doc comments as raw
asciidoc markdown to include in the generated man page. Let's let asciidoc
conversion happen first though, in case I find reasons not to like asciidoc.

---

Here's a radical idea: how about I write all the man pages separately from doc
comments? For library functions, I can group them by topic. For example, have
a single man page for all the struct value functions. That's better for
context.

Thoughts:
* Well, then we may as well use doxygen to generate them? Possibly with some
  manual fixup to install them under all the right names?
* But then, how do we make sure they are kept up to date (if not using
  doxygen?). Do a manual audit at release time?

Issues with doxygen, again:
* It lists the include files from the header in the synopsis section, not the
  header itself. That's just silly.
  - We can disable that with SHOW_INCLUDE_FILES=NO in the config.
* Looks like we can add an @sideeffects command if we want. Grep for
  sideeffects in the config file for example.
* The MAN_LINKS option can be used to generate a copy of the man page for each
  entity within.

So, maybe it's not so bad to try doxygen? Review of benefits:
* Standard format for doc comments that includes markdown.
* Generates man pages from source.
* Generated documentation is in sync with the source code.
* Warnings for missing parameters in doc comments.
* Keeps documentation with source code for header files.

Disadvantages:
* It's a little clunky, and a bit more feature full than I need right now.

How about we try it and see how I feel after?

Goal: All public header files use doc comments from doxygen. We can update all
doc comments to that too. Generate man pages for public header files that
look, hopefully, half decent and are, at least, useful.

Okay, let's make some decisions. How do I want to format my doc comments?

* Doxyfile is default config file.
* Specify INPUT with path to source dirs
* I'm going to need to figure out how doxygen integrates with the build
  system.

How to do doc comments:
* brief and detailed description.

 /**
  * ... text ...
  */

@param name description goes here.
@return return goes here
@see Foo()

No title.

I think use JAVADOC_AUTOBRIEF, so first line is brief description.

Let's use javadoc style as much as possible.

/** @file foo.h
 * ...
 */

Start with one header file, go from there? It's a bit tricky. Things to work
out:
* How to actually write my comments to work.
* What the config should be set to.
* How to integrate with the build system.

It looks like output info, etc. is all set as part of the config. So I'll want
a Doxyfile.in perhaps that does substitutions based on configure, and then you
run it from the top level of the build directory? That sounds reasonable to me.

Let me set it up like that first. Add it to the build system so it's easy to
play around with.

---

I'm liking doxygen so far. I like the structure it's enforcing.

Some things to figure out:
* How to reference a field of the struct I'm document?
* Convention on brief descriptions: Lower case? Phrase? Sentence?

Let's move this discussion over to thoughts/fble.doxygen.txt.

