
@ Coord@ = /Hwdg/Coord%.Coord@;
@ Data@ = /Hwdg/Data%.Data@;

@ Int@ = /Core/Int%.Int@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>@ List@ = /Core/List%.List@;

# Memory@ --
#   An unbounded 2D array of memory.
#
# Each location in the memory is either empty or contains data 0 or 1.
% Map = /Core/Map/Tree%.Map(/Hwdg/Coord%.Ord);
@ Memory@ = Map.Map@<Data@>;

# Empty -- 
#   A completely empty memory.
Memory@ Empty = Map.Empty<Data@>;

# Get --
#   Get the value of memory at a particular location.
(Memory@, Coord@) { Maybe@<Data@>; } Get = Map.Lookup<Data@>;

# Put -- 
#   Set the data value at a particular location.
(Memory@, Coord@, Data@) { Memory@; } Set = Map.Insert<Data@>;

# Clear --
#   Clear the data value of a particular location, leaving the location empty.
(Memory@, Coord@) { Memory@; } Clear = Map.Delete<Data@>;

# Eq --
#   Test whether two memories contains the same contents.
/Core/Eq%.Eq@<Memory@> Eq = {
  /Core/Map/Eq%.Eq<Map.Map@, Coord@>(Map, /Hwdg/Coord%.Eq, /Hwdg/Data%.Eq);
};

/Core/Show%.Show@<Memory@> Show = {
  /Core/Map/Show%.Show<Map.Map@, Coord@>(Map, /Hwdg/Coord%.Show, /Hwdg/Data%.Show);
};

# ForEach --
#   Iterate over non-empty values in the memory.
#
# Type Parameters:
#   B@ - The type of value updated and returned by the foreach loop.
#
# Inputs:
#   memory - the memory to iterate over.
#   base - the initial value to update and return from the loop.
#   body - the body of the loop.
#
# Returns:
#   The result of applying the body consecutively to the base value, once for
#   each entry in the map.
#
# Conceptually:
#   B@ b = base
#   foreach (coord, data) in memory:
#     b = body(k, coord, data)
#   return b
(Memory@)<@ B@>(B@, (Coord@, Data@, B@) { B@; }) { B@; }
ForEach = Map.ForEach<Data@>;

# Cell@ --
#   Describes the data value at a particular location in memory.
@ Cell@ = *(Int@ x, Int@ y, Data@ data);

# Memory --
#   Construct an initial memory based on a list of Cell@s.
(List@<Cell@>) { Memory@; } Memory = (List@<Cell@> cells) {
  /Core/List%.ForEach(cells, Empty, (Cell@ cell, Memory@ memory) {
    Set(memory, Coord@(cell.x, cell.y), cell.data);
  });
};

@(Memory@, Cell@, Memory, Empty, Get, Set, Clear, Eq, Show, ForEach);
