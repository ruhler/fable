
% BitStr = /Digits/String%.BitStr;

% Add = /Fblf/Lib/Add%.Add;
% Inc = /Fblf/Lib/Add%.Inc;
% Dec = /Fblf/Lib/Add%.Dec;

@ Method@ = /Fblf/Module%.Method@;
<@>% Module0 = /Fblf/Module%.Module0;
<@>% DoAlloc = /Fblf/Module%.DoAlloc;
<@>% Return = /Fblf/Module%.Return;
<@>% DoMethod = /Fblf/Module%.DoMethod;
<@,@>% Do = /Fblf/Module%.Do;

@ Var@ = /Fblf/Program%.Var@;
@ Stmt@ = /Fblf/Program%.Stmt@;
% Assign = /Fblf/Program%.Assign;
% Binary = /Fblf/Program%.Binary;
% Seq = /Fblf/Program%.Seq;

@ Test@ = /Fblf/Test%.Test@;
@ TestInstance@ = /Fblf/Test%.TestInstance@;
% Test = /Fblf/Test%.Test;
% TestSuite = /Fblf/Test%.TestSuite;
% ExportTestInstance = /Fblf/Test%.ExportTestInstance;

% Int = /Int/Int/Lit%.Int;

<@>% List = /List%.List;

% Str = /String%.Str;

Test@ Tests = TestSuite(Str|'Add', List<Test@>[
  Test(Str|Add, Module0<TestInstance@>(ExportTestInstance, Str|'TestAdd.Add', {
    Var@ a <- DoAlloc<TestInstance@>(Int|5);
    Var@ b <- DoAlloc<TestInstance@>(Int|5);
    Var@ z <- DoAlloc<TestInstance@>(Int|5);

    Stmt@ add <- Do<Stmt@, TestInstance@>(Add(Int|4)(a, b, z));

    # Note: we put an extra '1' bit after each value as a regression test for
    # a bug we had where it was reading one bit off the end of the values.
    Method@ test <- DoMethod<TestInstance@>(Str|'test', Seq[
      Assign(a, Binary|00101, Int|5),
      Assign(b, Binary|10111, Int|5),
      Assign(z, Binary|11111, Int|5),
      add
    ]);

    Return<TestInstance@>(TestInstance@(test, a, BitStr|001011011111011));
  })),

  Test(Str|Inc, Module0<TestInstance@>(ExportTestInstance, Str|'TestAdd.Inc', {
    Var@ a <- DoAlloc<TestInstance@>(Int|5);
    Stmt@ inc <- Do<Stmt@, TestInstance@>(Inc(Int|5)(a));
    Method@ test <- DoMethod<TestInstance@>(Str|'test', Seq[
      Assign(a, Binary|10011, Int|5),
      inc
    ]);
    Return<TestInstance@>(TestInstance@(test, a, BitStr|10100));
  })),

  Test(Str|'Inc Overflow', Module0<TestInstance@>(ExportTestInstance, Str|'TestAdd.Inc Overflow', {
    Var@ a <- DoAlloc<TestInstance@>(Int|5);
    Stmt@ inc <- Do<Stmt@, TestInstance@>(Inc(Int|5)(a));
    Method@ test <- DoMethod<TestInstance@>(Str|'test', Seq[
      Assign(a, Binary|11111, Int|5),
      inc
    ]);
    Return<TestInstance@>(TestInstance@(test, a, BitStr|00000));
  })),

  Test(Str|Dec, Module0<TestInstance@>(ExportTestInstance, Str|'TestAdd.Dec', {
    Var@ a <- DoAlloc<TestInstance@>(Int|5);
    Stmt@ dec <- Do<Stmt@, TestInstance@>(Dec(Int|5)(a));
    Method@ test <- DoMethod<TestInstance@>(Str|'test', Seq[
      Assign(a, Binary|10100, Int|5),
      dec
    ]);
    Return<TestInstance@>(TestInstance@(test, a, BitStr|10011));
  }))
]);

@(Tests);
