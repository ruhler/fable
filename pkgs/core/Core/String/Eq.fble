
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Char@ = /Core/Char%.Char@;

<@>@ List@ = /Core/List%.List@;

<@>@ Eq@ = /Core/Eq%.Eq@;
@ String@ = /Core/String%.String@;

# Eq --
#   Implementation of Eq@ for String@. See documentation of /Eq%.Eq@.
Eq@<String@> Eq = /Core/List/Eq%.Eq(/Core/Char/Eq%.Eq);

# StartsWith --
#   Returns true if the string str starts with sub.
(String@, String@) { Bool@; } StartsWith = (String@ str, String@ sub) {
  sub.?(nil: True);
  str.?(nil: False);
  /Core/Char/Eq%.Eq(str.cons.head, sub.cons.head).?(false: False);
  StartsWith(str.cons.tail, sub.cons.tail);
};

# Contains --
#   Returns true if the string str contains sub as a substring.
(String@, String@) { Bool@; } Contains = (String@ str, String@ sub) {
  sub.?(nil: True);
  str.?(nil: False);
  StartsWith(str, sub).?(true: True);
  Contains(str.cons.tail, sub);
};

(String@, Char@) { List@<String@>; }
Split = (String@ str, Char@ ch) {
  /Core/List/Eq%.Split(str, /Core/Char/Eq%.Eq(ch));
};

@(Eq, StartsWith, Contains, Split);
