
@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;

@ Loc@ = /Fbld/Loc%.Loc@;

@ Text@ = /Fbld/Text%.Text@;
% Text = /Fbld/Text%.Text;
% LocOf = /Fbld/Text%.LocOf;

<@>@ Result@ = /Fbld/Result%.Result@;
<@>% Ok = /Fbld/Result%.Ok;

@ Command@ = /Fbld/Command%.Command@;

% Inline = /Fbld/Parse%.Inline;
% Block = /Fbld/Parse%.Block;

Test@ Tests = TestSuite(Str|Parse, List[
  Test(Str|Unescape, (Unit@ _) {
    String@ text = Str|'a \\ \a\[\]bcd\@';
    String@ wnt = Str|'a \ \a[]bcd@';
    String@ got = /Fbld/Unescape%.UnescapeS(text);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|BasicInline, (Unit@ _) {
    (String@, Int@) { Text@; } s = (String@ str, Int@ col) {
      Text(str, Loc@(Str|'file.fbld', Int|1, col, Int|0));
    };

    String@ text = Str|'Inline @emph[text] with @SINGLE and @multi[abc][def] arg commands';
    Result@<List@<Command@>> wnt = Ok(List[
      Command@(s(Str|'', Int|1), List[s(Str|'Inline ', Int|1)]), 
      Command@(s(Str|'emph', Int|9), List[s(Str|'text', Int|14)]), 
      Command@(s(Str|'', Int|19), List[s(Str|' with ', Int|19)]), 
      Command@(s(Str|'SINGLE', Int|26), Nil<Text@>),
      Command@(s(Str|'', Int|32), List[s(Str|' and ', Int|32)]), 
      Command@(s(Str|'multi', Int|38),
        List[s(Str|'abc', Int|44), s(Str|'def', Int|49)]), 
      Command@(s(Str|'', Int|53), List[s(Str|' arg commands', Int|53)])]); 
    Result@<List@<Command@>> got = Inline(s(text, Int|1));
    AssertEquals(
      /Fbld/Eq%.Result(/Fbld/Eq%.Commands),
      /Fbld/Show%.Result(/Fbld/Show%.Commands),
      wnt, got);
  }),

  Test(Str|NestedInline, (Unit@ _) {
    (String@, Int@) { Text@; } s = (String@ str, Int@ col) {
      Text(str, Loc@(Str|'file.fbld', Int|1, col, Int|0));
    };

    String@ text = Str|'Ab @c[de @f[gh] ij] kl';
    Result@<List@<Command@>> wnt = Ok(List[
      Command@(s(Str|'', Int|1), List[s(Str|'Ab ', Int|1)]), 
      Command@(s(Str|'c', Int|5), List[s(Str|'de @f[gh] ij', Int|7)]), 
      Command@(s(Str|'', Int|20), List[s(Str|' kl', Int|20)])]); 
    Result@<List@<Command@>> got = Inline(s(text, Int|1));
    AssertEquals(
      /Fbld/Eq%.Result(/Fbld/Eq%.Commands),
      /Fbld/Show%.Result(/Fbld/Show%.Commands),
      wnt, got);
  }),

  Test(Str|BasicBlock, (Unit@ _) {
    (String@, Int@, Int@, Int@) { Text@; }
    s = (String@ str, Int@ line, Int@ col, Int@ indent) {
      Text(str, Loc@(Str|'file.fbld', line, col, indent));
    };

    String@ text = Str|'
@title A title

Some intro text.

@section[First Section]
 With some text
 spanning over lines.

 multiple lines actually.

And some final text.
';

    Result@<List@<Command@>> wnt = Ok(List[
      Command@(s(Str|'title', Int|2, Int|2, Int|0), List[
        s(Str|'A title', Int|2, Int|8, Int|0)]), 
      Command@(s(Str|'', Int|4, Int|1, Int|0), List[
        s(Str|'Some intro text.
', Int|4, Int|1, Int|0)]), 
      Command@(s(Str|'section', Int|6, Int|2, Int|0), List[
        s(Str|'First Section', Int|6, Int|10, Int|0),
        s(Str|'With some text
spanning over lines.

multiple lines actually.
', Int|7, Int|2, Int|1)]),
      Command@(s(Str|'', Int|12, Int|1, Int|0), List[
        s(Str|'And some final text.
', Int|12, Int|1, Int|0)])]); 
    Result@<List@<Command@>> got = Block(s(text, Int|1, Int|1, Int|0));
    AssertEquals(
      /Fbld/Eq%.Result(/Fbld/Eq%.Commands),
      /Fbld/Show%.Result(/Fbld/Show%.Commands),
      wnt, got);
  }),

  # Regression test for a default block that runs to the end of the file.
  Test(Str|BlockToEndOfFile, (Unit@ _) {
    (String@, Int@, Int@) { Text@; } s = (String@ str, Int@ line, Int@ col) {
      Text(str, Loc@(Str|'file.fbld', line, col, Int|0));
    };

    String@ text = Str|'Foo';
    Result@<List@<Command@>> wnt = Ok(List[
      Command@(s(Str|'', Int|1, Int|1), List[
        s(Str|'Foo', Int|1, Int|1)])]);
    Result@<List@<Command@>> got = Block(s(text, Int|1, Int|1));
    AssertEquals(
      /Fbld/Eq%.Result(/Fbld/Eq%.Commands),
      /Fbld/Show%.Result(/Fbld/Show%.Commands),
      wnt, got);
  }),

  Test(Str|NestedBlockLoc, (Unit@ _) {
    (String@, Int@, Int@, Int@) { Text@; }
    s = (String@ str, Int@ line, Int@ col, Int@ indent) {
      Text(str, Loc@(Str|'file.fbld', line, col, indent));
    };

    String@ text = Str|'
@foo
 @bar
  @sludge
';
    List@<Command@> foo = Block(s(text, Int|1, Int|1, Int|0)).ok;
    Text@ foo_body = foo.cons.head.args.cons.head;

    List@<Command@> bar = Block(foo_body).ok;
    Text@ bar_body = bar.cons.head.args.cons.head;

    List@<Command@> sludge = Block(bar_body).ok;
    Loc@ wnt = Loc@(Str|'file.fbld', Int|4, Int|4, Int|2);
    Loc@ got = LocOf(sludge.cons.head.name);
    AssertEquals(/Fbld/Eq%.Loc, /Fbld/Show%.Loc, wnt, got);
  }),

  Test(Str|Continuation, (Unit@ _) {
    (String@, Int@, Int@, Int@) { Text@; }
    s = (String@ str, Int@ line, Int@ col, Int@ indent) {
      Text(str, Loc@(Str|'file.fbld', line, col, indent));
    };

    String@ text = Str|'
@list[first][second]
 third
@[fourth] fifth
@ sixth
 seventh
@ eigth
@sludge
';
    Result@<List@<Command@>> wnt = Ok(List[
      Command@(s(Str|'list', Int|2, Int|2, Int|0), List[
        s(Str|'first', Int|2, Int|7, Int|0),
        s(Str|'second', Int|2, Int|14, Int|0),
        s(Str|'third
', Int|3, Int|2, Int|1),
        s(Str|'fourth', Int|4, Int|3, Int|0),
        s(Str|'fifth', Int|4, Int|11, Int|0),
        s(Str|'sixth', Int|5, Int|3, Int|0),
        s(Str|'seventh
', Int|6, Int|2, Int|1),
        s(Str|'eigth', Int|7, Int|3, Int|0)]),
      Command@(s(Str|'sludge', Int|8, Int|2, Int|0), Nil<Text@>)]);
    Result@<List@<Command@>> got = Block(s(text, Int|1, Int|1, Int|0));
    AssertEquals(
      /Fbld/Eq%.Result(/Fbld/Eq%.Commands),
      /Fbld/Show%.Result(/Fbld/Show%.Commands),
      wnt, got);
  }),

  Test(Str|Final, (Unit@ _) {
    (String@, Int@, Int@, Int@) { Text@; }
    s = (String@ str, Int@ line, Int@ col, Int@ indent) {
      Text(str, Loc@(Str|'file.fbld', line, col, indent));
    };

    String@ text = Str|'
@foo
 here is some stuff.
@@
@bar here is the end.
 Of all the rest.
';
    Result@<List@<Command@>> wnt = Ok(List[
      Command@(s(Str|'foo', Int|2, Int|2, Int|0), List[
        s(Str|'here is some stuff.
', Int|3, Int|2, Int|1),
        s(Str|'@bar here is the end.
 Of all the rest.
', Int|5, Int|1, Int|0)])]);
    Result@<List@<Command@>> got = Block(s(text, Int|1, Int|1, Int|0));
    AssertEquals(
      /Fbld/Eq%.Result(/Fbld/Eq%.Commands),
      /Fbld/Show%.Result(/Fbld/Show%.Commands),
      wnt, got);
  })
]);

@(Tests);
