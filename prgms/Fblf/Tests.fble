
% Chars = /Char%.Chars;

% B = /Digits%.Bit;
% I = /Int/Int/Lit%.I;
% D = /Int/Int/Lit%.D;

@ Test@ = /Test%.Test@;
% Test = /Test%.Test;
% TestSuite = /Test%.TestSuite;
<@>% AssertEquals = /Test%.AssertEquals;

@ Addr@ = /Fblf/Program%.Addr@;
@ Program@ = /Fblf/Program%.Program@;
@ ProgramM@ = /Fblf/Program%.ProgramM@;
% Assign = /Fblf/Program%.Assign;
% Const = /Fblf/Program%.Const;
% Seq = /Fblf/Program%.Seq;

% AddF = /Fblf/Lib/Add%.AddF;
% IncF = /Fblf/Lib/Add%.IncF;
% AndF = /Fblf/Lib/Bitwise%.AndF;
% OrF = /Fblf/Lib/Bitwise%.OrF;
% NotF = /Fblf/Lib/Bitwise%.NotF;

@ Heap@ = /Fblf/Heap%.Heap@;
@ Ptr@ = /Fblf/Heap%.Ptr@;
% Heap = /Fblf/Heap%.Heap;
% HeapFromBitStr = /Fblf/Heap%.HeapFromBitStr;
% Equals = /Fblf/Heap%.Equals;

% Exec = /Fblf/Exec%.Exec;

Test@ Tests = TestSuite(Chars|Fblf, [
  /Fblf/Heap/Tests%.Tests,

  Test(Chars|AddF, !({
    Addr@ a = I(D|0);
    Addr@ b = I(D|4);
    Addr@ z = I(D|8);
    Addr@ free = I(D|12);

    ProgramM@ add = AddF(I(D|4), a, b, z)(free);

    Program@ prgm = Seq([
      Assign(a, Const(B|0010), I(D|4)),   # a = 2
      Assign(b, Const(B|0111), I(D|4)),   # b = 7
      Assign(z, Const(B|0000), I(D|4)),   # clear z
      add.program                         # z = a + b
    ]);

    Heap@ heap = Heap(add.free);
    Heap@ got = Exec(prgm, heap);

    # We only want to check the first 12 bits to make sure they contain
    # a = 0010, b = 0111, but now z = 1001.
    Heap@ wnt = HeapFromBitStr(B|001001111001);
    % Eq = (Heap@ a, Heap@ b) {
       Equals(Ptr@(a, I(D|0)), Ptr@(b, I(D|0)), I(D|12));
    };

    AssertEquals<Heap@>(Eq, /Fblf/Heap/Show%.Show, wnt, got);
  })),

  Test(Chars|IncF, !({
    Addr@ a = I(D|0);
    Addr@ free = I(D|5);

    ProgramM@ inc = IncF(I(D|5), a)(free);

    Program@ prgm = Seq([Assign(a, Const(B|10011), I(D|5)), inc.program]);

    Heap@ heap = Heap(inc.free);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt = HeapFromBitStr(B|10100);
    % Eq = (Heap@ a, Heap@ b) {
       Equals(Ptr@(a, I(D|0)), Ptr@(b, I(D|0)), I(D|5));
    };

    AssertEquals<Heap@>(Eq, /Fblf/Heap/Show%.Show, wnt, got);
  })),

  Test(Chars|'IncF Overflow', !({
    Addr@ a = I(D|0);
    Addr@ free = I(D|5);

    ProgramM@ inc = IncF(I(D|5), a)(free);

    Program@ prgm = Seq([Assign(a, Const(B|11111), I(D|5)), inc.program]);

    Heap@ heap = Heap(inc.free);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt = HeapFromBitStr(B|00000);
    % Eq = (Heap@ a, Heap@ b) {
       Equals(Ptr@(a, I(D|0)), Ptr@(b, I(D|0)), I(D|5));
    };

    AssertEquals<Heap@>(Eq, /Fblf/Heap/Show%.Show, wnt, got);
  })),

  Test(Chars|AndF, !({
    Addr@ a = I(D|0);
    Addr@ b = I(D|4);
    Addr@ z = I(D|8);
    Addr@ free = I(D|12);

    ProgramM@ and = AndF(I(D|4), a, b, z)(free);

    Program@ prgm = Seq([
      Assign(a, Const(B|0011), I(D|4)),
      Assign(b, Const(B|0110), I(D|4)),
      Assign(z, Const(B|0000), I(D|4)),
      and.program
    ]);

    Heap@ heap = Heap(and.free);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt = HeapFromBitStr(B|001101100010);
    % Eq = (Heap@ a, Heap@ b) {
       Equals(Ptr@(a, I(D|0)), Ptr@(b, I(D|0)), I(D|12));
    };

    AssertEquals<Heap@>(Eq, /Fblf/Heap/Show%.Show, wnt, got);
  })),

  Test(Chars|OrF, !({
    Addr@ a = I(D|0);
    Addr@ b = I(D|4);
    Addr@ z = I(D|8);
    Addr@ free = I(D|12);

    ProgramM@ or = OrF(I(D|4), a, b, z)(free);

    Program@ prgm = Seq([
      Assign(a, Const(B|0011), I(D|4)),
      Assign(b, Const(B|0110), I(D|4)),
      Assign(z, Const(B|0000), I(D|4)),
      or.program
    ]);

    Heap@ heap = Heap(or.free);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt = HeapFromBitStr(B|001101100111);
    % Eq = (Heap@ a, Heap@ b) {
       Equals(Ptr@(a, I(D|0)), Ptr@(b, I(D|0)), I(D|12));
    };

    AssertEquals<Heap@>(Eq, /Fblf/Heap/Show%.Show, wnt, got);
  })),

  Test(Chars|NotF, !({
    Addr@ a = I(D|0);
    Addr@ z = I(D|4);
    Addr@ free = I(D|8);

    ProgramM@ not = NotF(I(D|4), a, z)(free);

    Program@ prgm = Seq([
      Assign(a, Const(B|0011), I(D|4)),
      Assign(z, Const(B|0000), I(D|4)),
      not.program
    ]);

    Heap@ heap = Heap(not.free);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt = HeapFromBitStr(B|00111100);
    % Eq = (Heap@ a, Heap@ b) {
       Equals(Ptr@(a, I(D|0)), Ptr@(b, I(D|0)), I(D|8));
    };

    AssertEquals<Heap@>(Eq, /Fblf/Heap/Show%.Show, wnt, got);
  }))
]);

@(Tests);
