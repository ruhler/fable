
% True = /Core/Bool%.True;

@ CRC@ = /Core/CRC%.CRC@;
% Feed = /Core/CRC%.Feed;

@ Bit@ = /Core/Digits%.Bit@;
% Bit = /Core/Digits%.Bit;

% HexToBits = /Core/Digits/String%.HexToBits;

% ShowBits = /Core/Digits/Show%.ShowBits;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;

@ String@ = /Core/String%.String@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ Unit@ = /Core/Unit%.Unit@;


Main@ Debug = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio) {
  % O = /Core/Stream/OStream%(m);
  
  (List@<String@> _args) {
    (CRC@, List@<Bit@>) { M@<CRC@>; } DFeeds = (CRC@ crc, List@<Bit@> bits) {
      bits.?(nil: m.return(crc));

      CRC@ ncrc = Feed(crc, bits.cons.head);
      Unit@ _ <- m.do(O.PutLine(stdio.out, ShowBits(ncrc.checksum)));
      DFeeds(ncrc, bits.cons.tail);
    };

    List@<Bit@> poly = Cons(Bit.1, HexToBits|04C11DB7);
    List@<Bit@> init = HexToBits|00000000;
    CRC@ crc = CRC@(poly, init);
    CRC@ _result <- m.do(DFeeds(crc, HexToBits|31323334353637383900000000));

    m.return(True);
  };
};

/Core/Stdio/IO%.Run(Debug);
