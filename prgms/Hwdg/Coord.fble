% And = /Bool%.And;
% Or = /Bool%.Or;

@ Int@ = /Int/Int%.Int@;

% Str = /String%.Str;
% Strs = /String%.Strs;

# Coord@ --
#   A coordinate identifying a location in the memory/design grid.
#
# By convention the origin is at the upper left:
# * Positive x goes to the right.
# * Positive y goes down.
@ Coord@ = *(Int@ x, Int@ y);

# Add --
#   Add two coordinates together.
(Coord@, Coord@) { Coord@; } Add = (Coord@ a, Coord@ b) {
  Coord@(/Int/Int%.Add(a.x, b.x), /Int/Int%.Add(a.y, b.y));
};

# Eq --
#   Equality operator for Coord@.
/Eq%.Eq@<Coord@> Eq = {
  % IntEq = /Int/Eq%.Eq;
  (Coord@ a, Coord@ b) {
    And(IntEq(a.x, b.x), IntEq(a.y, b.y));
  };
};

# Lt --
#   Less than operator for Coord@.
/Eq%.Eq@<Coord@> Lt = {
  % IntEq = /Int/Eq%.Eq;
  % IntLt = /Int/Eq%.Lt;
  (Coord@ a, Coord@ b) {
    Or(IntLt(a.x, b.x), And(IntEq(a.x, b.x), IntLt(a.y, b.y)));
  };
};

/Show%.Show@<Coord@> Show = (Coord@ x) {
  Strs[Str|'(', /Int/Show%.Show(x.x), Str|',', /Int/Show%.Show(x.y), Str|')'];
};

@(Coord@, Add, Eq, Lt, Show);
