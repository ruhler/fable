
@ Bit@ = /Core/Digits%.Bit@;
@ Hex@ = /Core/Digits%.Hex@;
% Hex = /Core/Digits%.Hex;
% 0 = Hex.0; % 1 = Hex.1; % 2 = Hex.2; % 3 = Hex.3;
% 4 = Hex.4; % 5 = Hex.5; % 6 = Hex.6; % 7 = Hex.7;
% 8 = Hex.8; % 9 = Hex.9; % A = Hex.A; % B = Hex.B;
% C = Hex.C; % D = Hex.D; % E = Hex.E;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Hash@ = /Md5/Hash%.Hash@;

@ Bit2@ = /Md5/Bits/Bit2%.Bit2@;
@ Bit4@ = /Md5/Bits/Bit4%.Bit4@;
@ Bit8@ = /Md5/Bits/Bit8%.Bit8@;
@ Bit16@ = /Md5/Bits/Bit16%.Bit16@;
@ Bit32@ = /Md5/Bits/Bit32%.Bit32@;

% H32 = /Md5/Bits/Bit32%.H32;

% And = /Md5/Bits/Bit32%.Bits.And;
% Or = /Md5/Bits/Bit32%.Bits.Or;
% Not = /Md5/Bits/Bit32%.Bits.Not;
% Xor = /Md5/Bits/Bit32%.Bits.Xor;
% Add = /Md5/Bits/Bit32%.Bits.Add;

@ Block@ = *(
  Bit32@ 0, Bit32@ 1, Bit32@ 2, Bit32@ 3,
  Bit32@ 4, Bit32@ 5, Bit32@ 6, Bit32@ 7,
  Bit32@ 8, Bit32@ 9, Bit32@ 10, Bit32@ 11,
  Bit32@ 12, Bit32@ 13, Bit32@ 14, Bit32@ 15);

Block@ T1 = Block@(
  H32|D76AA478, H32|E8C7B756, H32|242070DB, H32|C1BDCEEE,
  H32|F57C0FAF, H32|4787C62A, H32|A8304613, H32|FD469501,
  H32|698098D8, H32|8B44F7AF, H32|FFFF5BB1, H32|895CD7BE,
  H32|6B901122, H32|FD987193, H32|A679438E, H32|49B40821
);

Block@ T2 = Block@(
  H32|F61E2562, H32|C040B340, H32|265E5A51, H32|E9B6C7AA,
  H32|D62F105D, H32|02441453, H32|D8A1E681, H32|E7D3FBC8,
  H32|21E1CDE6, H32|C33707D6, H32|F4D50D87, H32|455A14ED,
  H32|A9E3E905, H32|FCEFA3F8, H32|676F02D9, H32|8D2A4C8A
);

Block@ T3 = Block@(
  H32|FFFA3942, H32|8771F681, H32|6D9D6122, H32|FDE5380C,
  H32|A4BEEA44, H32|4BDECFA9, H32|F6BB4B60, H32|BEBFBC70,
  H32|289B7EC6, H32|EAA127FA, H32|D4EF3085, H32|04881D05,
  H32|D9D4D039, H32|E6DB99E5, H32|1FA27CF8, H32|C4AC5665
);

Block@ T4 = Block@(
  H32|F4292244, H32|432AFF97, H32|AB9423A7, H32|FC93A039,
  H32|655B59C3, H32|8F0CCC92, H32|FFEFF47D, H32|85845DD1,
  H32|6FA87E4F, H32|FE2CE6E0, H32|A3014314, H32|4E0811A1,
  H32|F7537E82, H32|BD3AF235, H32|2AD7D2BB, H32|EB86D391
);

@ ABCD@ = *(Bit32@ a, Bit32@ b, Bit32@ c, Bit32@ d);

ABCD@ ABCD0 = ABCD@(
  # Note: the spec lists these low-order byte first, but H32 takes high
  # order byte first.
  H32|67452301,
  H32|EFCDAB89,
  H32|98BADCFE,
  H32|10325476);

(Bit@, Bit@, Bit@, Bit@) { Hex@; }
HexFromBits = (Bit@ b3, Bit@ b2, Bit@ b1, Bit@ b0) {
  b3.?(
    0: b2.?(
      0: b1.?(0: b0.?(0: 0, 1: 1), 1: b0.?(0: 2, 1: 3)),
      1: b1.?(0: b0.?(0: 4, 1: 5), 1: b0.?(0: 6, 1: 7))),
    1: b2.?(
      0: b1.?(0: b0.?(0: 8, 1: 9), 1: b0.?(0: A, 1: B)),
      1: b1.?(0: b0.?(0: C, 1: D), 1: b0.?(0: E, 1: Hex.F))));
};

(Bit4@) { Hex@; } HexFromBit4 = (Bit4@ x) {
  HexFromBits(x.hi.hi, x.hi.lo, x.lo.hi, x.lo.lo);
};

@ HexPair@ = *(Hex@ hi, Hex@ lo);

(Bit8@){HexPair@;} HexFromByte = (Bit8@ byte) {
  HexPair@(HexFromBit4(byte.hi), HexFromBit4(byte.lo));
};

(ABCD@) { Hash@; } HexFromABCD = (ABCD@ x) {
  HexPair@ a0 = HexFromByte(x.a.lo.lo); HexPair@ a1 = HexFromByte(x.a.lo.hi);
  HexPair@ a2 = HexFromByte(x.a.hi.lo); HexPair@ a3 = HexFromByte(x.a.hi.hi);
  HexPair@ b0 = HexFromByte(x.b.lo.lo); HexPair@ b1 = HexFromByte(x.b.lo.hi);
  HexPair@ b2 = HexFromByte(x.b.hi.lo); HexPair@ b3 = HexFromByte(x.b.hi.hi);
  HexPair@ c0 = HexFromByte(x.c.lo.lo); HexPair@ c1 = HexFromByte(x.c.lo.hi);
  HexPair@ c2 = HexFromByte(x.c.hi.lo); HexPair@ c3 = HexFromByte(x.c.hi.hi);
  HexPair@ d0 = HexFromByte(x.d.lo.lo); HexPair@ d1 = HexFromByte(x.d.lo.hi);
  HexPair@ d2 = HexFromByte(x.d.hi.lo); HexPair@ d3 = HexFromByte(x.d.hi.hi);
  Hash@(
    a0.hi, a0.lo, a1.hi, a1.lo, a2.hi, a2.lo, a3.hi, a3.lo,
    b0.hi, b0.lo, b1.hi, b1.lo, b2.hi, b2.lo, b3.hi, b3.lo,
    c0.hi, c0.lo, c1.hi, c1.lo, c2.hi, c2.lo, c3.hi, c3.lo,
    d0.hi, d0.lo, d1.hi, d1.lo, d2.hi, d2.lo, d3.hi, d3.lo);
};

@ S@ = +(
  Unit@  0, Unit@  1, Unit@  2, Unit@  3, Unit@  4, Unit@  5, Unit@  6, Unit@  7,
  Unit@  8, Unit@  9, Unit@ 10, Unit@ 11, Unit@ 12, Unit@ 13, Unit@ 14, Unit@ 15,
  Unit@ 16, Unit@ 17, Unit@ 18, Unit@ 19, Unit@ 20, Unit@ 21, Unit@ 22, Unit@ 23);

(Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@,
 Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@,
 Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@,
 Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@) { Bit32@; }
B32 =
 (Bit@ 31, Bit@ 30, Bit@ 29, Bit@ 28, Bit@ 27, Bit@ 26, Bit@ 25, Bit@ 24,
  Bit@ 23, Bit@ 22, Bit@ 21, Bit@ 20, Bit@ 19, Bit@ 18, Bit@ 17, Bit@ 16,
  Bit@ 15, Bit@ 14, Bit@ 13, Bit@ 12, Bit@ 11, Bit@ 10, Bit@  9, Bit@  8,
  Bit@  7, Bit@  6, Bit@  5, Bit@  4, Bit@  3, Bit@  2, Bit@  1, Bit@  0) {
    Bit32@(
      Bit16@(
        Bit8@(Bit4@(Bit2@(31, 30), Bit2@(29, 28)), Bit4@(Bit2@(27, 26), Bit2@(25, 24))),
        Bit8@(Bit4@(Bit2@(23, 22), Bit2@(21, 20)), Bit4@(Bit2@(19, 18), Bit2@(17, 16)))),
      Bit16@(
        Bit8@(Bit4@(Bit2@(15, 14), Bit2@(13, 12)), Bit4@(Bit2@(11, 10), Bit2@( 9,  8))),
        Bit8@(Bit4@(Bit2@( 7,  6), Bit2@( 5,  4)), Bit4@(Bit2@( 3,  2), Bit2@( 1,  0)))));
};

# TODO: This is a pretty lame implementation of circular left shift...
(Bit32@, S@){Bit32@;} cls = (Bit32@ a, S@ s) {
  s.?(
    0: B32(
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo,
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo,
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo,
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo,
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo,
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo),
    1: B32(
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi,
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi,
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi,
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi,
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi,
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi),
    2: B32(
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo,
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo,
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo,
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo,
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo,
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo),
    3: B32(
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi,
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi,
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi,
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi,
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi,
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi),
    4: B32(
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo,
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo,
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo,
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo,
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo,
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo),
    5: B32(
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi,
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi,
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi,
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi,
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi,
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi),
    6: B32(
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo,
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo,
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo,
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo,
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo,
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo),
    7: B32(
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi,
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi,
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi,
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi,
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi,
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi),
    8: B32(
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo,
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo,
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo,
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo,
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo,
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo),
    9: B32(
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi,
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi,
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi,
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi,
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi,
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi),
   10: B32(
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo,
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo,
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo,
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo,
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo,
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo),
   11: B32(
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi,
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi,
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi,
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi,
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi,
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi),
   12: B32(
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo,
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo,
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo,
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo,
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo,
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo),
   13: B32(
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi,
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi,
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi,
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi,
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi,
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi),
   14: B32(
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo,
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo,
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo,
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo,
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo,
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo),
   15: B32(
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi,
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi,
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi,
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi,
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi,
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi),
   16: B32(
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo,
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo,
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo,
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo,
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo,
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo),
   17: B32(
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi,
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi,
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi,
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi,
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi,
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi),
   18: B32(
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo,
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo,
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo,
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo,
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo,
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo),
   19: B32(
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi,
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi,
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi,
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi,
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi,
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi),
   20: B32(
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo,
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo,
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo,
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo,
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo,
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo),
   21: B32(
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi,
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi,
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi,
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi,
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi,
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi),
   22: B32(
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo,
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo,
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo,
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo,
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo,
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo),
   23: B32(
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi,
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi,
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi,
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi,
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi,
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi));
};

@ X@ = (Bit32@, Bit32@, Bit32@) { Bit32@; };
@ XX@ = (Bit32@, Bit32@, Bit32@, Bit32@, Bit32@, S@, Bit32@) { Bit32@; };

(X@) { XX@; } XX = (X@ xf)(Bit32@ a, Bit32@ b, Bit32@ c, Bit32@ d, Bit32@ x, S@ s, Bit32@ t) {
  Add(b, cls(Add(Add(a, xf(b, c, d)), Add(x, t)), s));
};

@ Round@ = (Bit32@, Bit32@, Bit32@, Bit32@, Block@) { ABCD@; };

(XX@, S@, S@, S@, S@, Block@, (Block@) { Block@; }) { Round@; }
RoundX = (XX@ xx, S@ s0, S@ s1, S@ s2, S@ s3, Block@ t, (Block@) { Block@; } permute)
(Bit32@ a0, Bit32@ b0, Bit32@ c0, Bit32@ d0, Block@ block) {
  Block@ permuted = permute(block);

  Bit32@ a1 = xx(a0, b0, c0, d0, permuted.0, s0, t.0);
  Bit32@ d1 = xx(d0, a1, b0, c0, permuted.1, s1, t.1);
  Bit32@ c1 = xx(c0, d1, a1, b0, permuted.2, s2, t.2);
  Bit32@ b1 = xx(b0, c1, d1, a1, permuted.3, s3, t.3);

  Bit32@ a2 = xx(a1, b1, c1, d1, permuted.4, s0, t.4);
  Bit32@ d2 = xx(d1, a2, b1, c1, permuted.5, s1, t.5);
  Bit32@ c2 = xx(c1, d2, a2, b1, permuted.6, s2, t.6);
  Bit32@ b2 = xx(b1, c2, d2, a2, permuted.7, s3, t.7);

  Bit32@ a3 = xx(a2, b2, c2, d2, permuted.8, s0, t.8);
  Bit32@ d3 = xx(d2, a3, b2, c2, permuted.9, s1, t.9);
  Bit32@ c3 = xx(c2, d3, a3, b2, permuted.10, s2, t.10);
  Bit32@ b3 = xx(b2, c3, d3, a3, permuted.11, s3, t.11);

  Bit32@ a4 = xx(a3, b3, c3, d3, permuted.12, s0, t.12);
  Bit32@ d4 = xx(d3, a4, b3, c3, permuted.13, s1, t.13);
  Bit32@ c4 = xx(c3, d4, a4, b3, permuted.14, s2, t.14);
  Bit32@ b4 = xx(b3, c4, d4, a4, permuted.15, s3, t.15);

  ABCD@(a4, b4, c4, d4);
};

X@ F = (Bit32@ x, Bit32@ y, Bit32@ z) { Or(And(x, y), And(Not(x), z)); };
X@ G = (Bit32@ x, Bit32@ y, Bit32@ z) { Or(And(x, z), And(y, Not(z))); };
X@ H = (Bit32@ x, Bit32@ y, Bit32@ z) { Xor(x, Xor(y, z)); };
X@ I = (Bit32@ x, Bit32@ y, Bit32@ z) { Xor(y, Or(x, Not(z))); };

XX@ FF = XX(F);
XX@ GG = XX(G);
XX@ HH = XX(H);
XX@ II = XX(I);

Round@ Round1 = RoundX(FF, S@(7: Unit), S@(12: Unit), S@(17: Unit), S@(22: Unit), T1, (Block@ b) {
  b;
});

Round@ Round2 = RoundX(GG, S@(5: Unit), S@(9: Unit), S@(14: Unit), S@(20: Unit), T2, (Block@ b) {
  Block@(
    b.1, b.6, b.11, b.0,
    b.5, b.10, b.15, b.4,
    b.9, b.14, b.3, b.8,
    b.13, b.2, b.7, b.12);
});

Round@ Round3 = RoundX(HH, S@(4: Unit), S@(11: Unit), S@(16: Unit), S@(23: Unit), T3, (Block@ b) {
  Block@(
    b.5, b.8, b.11, b.14,
    b.1, b.4, b.7, b.10,
    b.13, b.0, b.3, b.6,
    b.9, b.12, b.15, b.2);
});

Round@ Round4 = RoundX(II, S@(6: Unit), S@(10: Unit), S@(15: Unit), S@(21: Unit), T4, (Block@ b) {
  Block@(
    b.0, b.7, b.14, b.5,
    b.12, b.3, b.10, b.1,
    b.8, b.15, b.6, b.13,
    b.4, b.11, b.2, b.9);
});

(ABCD@, Block@) { ABCD@; } DoBlockImpl = (ABCD@ abcd, Block@ block) {
  ABCD@ r1 = Round1(abcd.a, abcd.b, abcd.c, abcd.d, block);
  ABCD@ r2 = Round2(r1.a, r1.b, r1.c, r1.d, block);
  ABCD@ r3 = Round3(r2.a, r2.b, r2.c, r2.d, block);
  ABCD@ r4 = Round4(r3.a, r3.b, r3.c, r3.d, block);
  ABCD@(Add(abcd.a, r4.a), Add(abcd.b, r4.b), Add(abcd.c, r4.c), Add(abcd.d, r4.d));
};

#(ABCD@, Block@) { ABCD@; } DoBlock = $(DoBlockImpl);
(ABCD@, Block@) { ABCD@; } DoBlock = DoBlockImpl;

@ T@ = Bit8@;

<<@>@ M@>(Monad@<M@> m, M@<Maybe@<T@>> get) {
  # Gets the next word from a pre-padded input
  M@<Maybe@<Bit32@>> GetWord = {
    Maybe@<Bit8@> a <- m.do(get);
    a.?(nothing: m.return(Nothing<Bit32@>));

    Maybe@<Bit8@> b <- m.do(get);
    Maybe@<Bit8@> c <- m.do(get);
    Maybe@<Bit8@> d <- m.do(get);
    m.return(Just(Bit32@(Bit16@(d.just, c.just), Bit16@(b.just, a.just))));
  };

  # Gets the next block from a pre-padded input
  M@<Maybe@<Block@>> GetBlock = {
    Maybe@<Bit32@> 0 <- m.do(GetWord);
    0.?(nothing: m.return(Nothing<Block@>));

    Maybe@<Bit32@> 1 <- m.do(GetWord);
    Maybe@<Bit32@> 2 <- m.do(GetWord);
    Maybe@<Bit32@> 3 <- m.do(GetWord);
    Maybe@<Bit32@> 4 <- m.do(GetWord);
    Maybe@<Bit32@> 5 <- m.do(GetWord);
    Maybe@<Bit32@> 6 <- m.do(GetWord);
    Maybe@<Bit32@> 7 <- m.do(GetWord);
    Maybe@<Bit32@> 8 <- m.do(GetWord);
    Maybe@<Bit32@> 9 <- m.do(GetWord);
    Maybe@<Bit32@> 10 <- m.do(GetWord);
    Maybe@<Bit32@> 11 <- m.do(GetWord);
    Maybe@<Bit32@> 12 <- m.do(GetWord);
    Maybe@<Bit32@> 13 <- m.do(GetWord);
    Maybe@<Bit32@> 14 <- m.do(GetWord);
    Maybe@<Bit32@> 15 <- m.do(GetWord);
    m.return(Just(
      Block@(
        0.just, 1.just, 2.just, 3.just,
        4.just, 5.just, 6.just, 7.just,
        8.just, 9.just, 10.just, 11.just,
        12.just, 13.just, 14.just, 15.just)
      ));
  };

  (ABCD@) { M@<ABCD@>; } Rounds = (ABCD@ abcd) {
    Maybe@<Block@> block <- m.do(GetBlock);
    block.?(nothing: m.return(abcd));
    Rounds(DoBlock(abcd, block.just));
  };

  # Computes the MD5 checksum of a pre-padded sequence of bytes.
  M@<Hash@> Md5 = {
    ABCD@ md5 <- m.do(Rounds(ABCD0));
    m.return(HexFromABCD(md5));
  };

  @(Md5);
};
