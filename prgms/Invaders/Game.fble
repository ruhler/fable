
@ Drawing@ = /Drawing%.Drawing@;
% Blank = /Drawing%.Blank;
% Drawings = /Drawing%.Drawings;
% Translate = /Drawing%.Translate;

@ Int@ = /Int/Int%.Int@;
% Div = /Int/Int/Div%.Div;
% Mod = /Int/Int/Div%.Mod;

% Int = /Int/Int/Lit%.Int;

% Graphics = /Invaders/Graphics%;

% Aliens = /Invaders/Aliens%;
@ Aliens@ = Aliens.Aliens@;
@ Alien@ = Aliens.Alien@;

% Bullet = /Invaders/Bullet%;
@ Bullet@ = Bullet.Bullet@;

% Ship = /Invaders/Ship%;
@ Dir@ = Ship.Dir@;
@ Ship@ = Ship.Ship@;

<@>@ Maybe@ = /Maybe%.Maybe@;
<@>% Nothing = /Maybe%.Nothing;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;


@ Lives@ = +(Unit@ 0, Unit@ 1, Unit@ 2, Unit@ 3);

@ Game@ = *(
  Int@ score,
  Lives@ lives,
  Ship@ ship,
  Bullet@ bullet,
  Aliens@ aliens
);

@ Input@ = +(Dir@ dir, Unit@ fire);

Game@ Initial = @(
  score: Int|920,
  lives: Lives@(3: Unit),
  ship: Ship.Initial,
  bullet: Bullet.Initial,
  aliens: Aliens.Initial
);

(Game@) { Game@; } Tick = (Game@ g) {
  Ship@ ship = Ship.Tick(g.ship);
  Bullet@ bullet = Bullet.Tick(g.bullet);
  Aliens@ aliens = Aliens.Tick(g.aliens);

  # Check for bullet colliding with an alien.
  Maybe@<Alien@> kill = {
    bullet.live.?(false: Nothing<Alien@>);
    Aliens.Collision(bullet.x, bullet.y, aliens);
  };

  kill.?(just: {
    Game@(g.score, g.lives, ship, Bullet.Initial, Aliens.Kill(aliens, kill.just));
  });
    
  Game@(g.score, g.lives, ship, bullet, aliens);
};

(Game@, Input@) { Game@; } Input = (Game@ g, Input@ input) {
  Game@(g.score, g.lives,
    input.?(dir: Ship.Input(g.ship, input.dir), : g.ship),
    input.?(fire: Bullet.Fire(g.bullet, g.ship), : g.bullet),
    g.aliens);
};

(Int@) { Drawing@; } DrawScore = {
  # Digit -- Get the drawing associated with the digit corresponding to d.
  # Returns a blank drawing if d is not in [0-9].
  (Int@) { Drawing@; } Digit = (Int@ d) {
    d.?(n: Blank, 0: Graphics.Digits.0, p: d.p.?(
        1: Graphics.Digits.1,
        2p0: d.p.2p0.?( 
          1: Graphics.Digits.2,
          2p0: d.p.2p0.2p0.?(
            1: Graphics.Digits.4,
            2p0: d.p.2p0.2p0.2p0.?(
              1: Graphics.Digits.8,
              : Blank),
            : Blank),
          2p1: d.p.2p0.2p1.?(
            1: Graphics.Digits.6,
            : Blank)),
        2p1: d.p.2p1.?( 
          1: Graphics.Digits.3,
          2p0: d.p.2p1.2p0.?(
            1: Graphics.Digits.5,
            2p0: d.p.2p1.2p0.2p0.?(
              1: Graphics.Digits.9,
              : Blank),
            : Blank),
          2p1: d.p.2p1.2p1.?(
            1: Graphics.Digits.7,
            : Blank))));
  };

  Int@ 10 = Int|10;

  (Int@ score) {
    # We only print 4 digits for the score.
    Int@ s1000 = score;
    Int@ s100 = Div(s1000, 10);
    Int@ s10 = Div(s100, 10);
    Int@ s1 = Div(s10, 10);
    Drawing@ d0 = Digit(Mod(s1000, 10));
    Drawing@ d1 = Digit(Mod(s100, 10));
    Drawing@ d2 = Digit(Mod(s10, 10));
    Drawing@ d3 = Digit(Mod(s1, 10));
    Drawings[
      Translate(Int|40, Int|220, d3),
      Translate(Int|48, Int|220, d2),
      Translate(Int|56, Int|220, d1),
      Translate(Int|64, Int|220, d0)
    ];
  };
};

(Lives@) { Drawing@; } DrawLives = {
  Drawing@ l1 = Translate(Int|160, Int|220, Graphics.Ship);
  Drawing@ l2 = Translate(Int|180, Int|220, Graphics.Ship);
  Drawing@ l3 = Translate(Int|200, Int|220, Graphics.Ship);
  (Lives@ l) {
    l.?(
      0: Blank,
      1: Drawings[l1],
      2: Drawings[l1, l2],
      3: Drawings[l1, l2, l3]);
  };
};

(Game@) { Drawing@; } Draw = (Game@ g) {
  Drawings[
    DrawScore(g.score),
    DrawLives(g.lives),
    Graphics.Background,
    Ship.Draw(g.ship),
    Bullet.Draw(g.bullet),
    Aliens.Draw(g.aliens)
  ];
};

@(Game@, Input@, Initial, Input, Tick, Draw);

