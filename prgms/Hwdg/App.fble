
@ App@ = /App%.App@;
@ Event@ = /App%.Event@;
@ Effect@ = /App%.Effect@;

@ Bool@ = /Bool%.Bool@;
% True = /Bool%.True;
% False = /Bool%.False;

@ Draw@ = /Drawing%.Draw@;
@ Color@ = /Drawing%.Color@;
@ Point@ = /Drawing%.Point@;
% Rect = /Drawing%.Rect;
% Over = /Drawing%.Over;
% Affine = /Drawing%.Affine;

@ Coord@ = /Hwdg/Coord%.Coord@;

@ Data@ = /Hwdg/Data%.Data@;
% Data0 = /Hwdg/Data%.0;
% Data1 = /Hwdg/Data%.1;

@ Design@ = /Hwdg/Design%.Design@;
@ Rule@ = /Hwdg/Design%.Rule@;
<@>@ Ports@ = /Hwdg/Design%.Ports@;
<@>% ForEachRule = /Hwdg/Design%.ForEachRule;
% Step = /Hwdg/Design%.Step;

@ Memory@ = /Hwdg/Memory%.Memory@;
% Empty = /Hwdg/Memory%.Empty;
% Set = /Hwdg/Memory%.Set;

@ Int@ = /Int/Int%.Int@;
% 0 = /Int/Int%.0;
% 1 = /Int/Int%.1;
% 2 = /Int/Int%.2;
% Inc = /Int/Int%.Inc;
% Dec = /Int/Int%.Dec;
% Neg = /Int/Int%.Neg;
% Sub = /Int/Int%.Sub;

% Div = /Int/Int/Div%.Div;

% IsZero = /Int/Int/Eq%.IsZero;

% Int = /Int/Int/Lit%.Int;

<@>@ Get@ = /Process%.Get@;
<@>@ Put@ = /Process%.Put@;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

Int@ XMin = Neg(Int|20);
Int@ XMax = Int|20;
Int@ YMin = Neg(Int|20);
Int@ YMax = Int|20;
Int@ Width = Sub(XMax, XMin);
Int@ Height = Sub(YMax, YMin);

# Design --
#   The design to simulate.
Design@ Design = /Hwdg/Adder%.Adder4;

# Cells --
#   The initial data configuration of the hardware to simulate
Memory@ Cells = {
  Set(Set(Set(Set(Set(Set(Set(Set(Set(Empty,
    Coord@(Int|0, 0), Data1), # a3
    Coord@(Int|4, 0), Data1), # a2
    Coord@(Int|8, 0), Data1), # a1
    Coord@(Int|12, 0), Data1), # a0
    Coord@(Int|3, 0), Data1), # b3
    Coord@(Int|7, 0), Data0), # b2
    Coord@(Int|11, 0), Data1), # b1
    Coord@(Int|15, 0), Data1), # b0
    Coord@(Int|16, 2), Data0); # c
};

# Draw --
#   Draw the current hardware configuration.
(Design@, Memory@) { Draw@; } Draw = (Design@ design, Memory@ cells) {
  # 1. Clear the background.
  Draw@ clear = Rect(XMin, YMin, Width, Height, Color@(black: Unit));

  # 2. For each input or output port of a gate, draw a white unit square.
  Draw@ io = ForEachRule<Draw@>(design, clear,
   (Coord@ p, Rule@ r, Draw@ d) {
     Ports@<Coord@> coords = Ports@<Coord@>(
       Coord@(p.x, p.y), Coord@(Inc(p.x), p.y),
       Coord@(p.x, Inc(p.y)), Coord@(Inc(p.x), Inc(p.y)));

     Ports@<Bool@> used = Ports@<Bool@>(
       { r.inputs.ul.?(just: True); r.outputs.ul.?(just: True); False; },
       { r.inputs.ur.?(just: True); r.outputs.ur.?(just: True); False; },
       { r.inputs.ll.?(just: True); r.outputs.ll.?(just: True); False; },
       { r.inputs.lr.?(just: True); r.outputs.lr.?(just: True); False; });

     Ports@<Draw@> fills = Ports@<Draw@>(
       Rect(coords.ul.x, coords.ul.y, 1, 1, Color@(white: Unit)),
       Rect(coords.ur.x, coords.ur.y, 1, 1, Color@(white: Unit)),
       Rect(coords.ll.x, coords.ll.y, 1, 1, Color@(white: Unit)),
       Rect(coords.lr.x, coords.lr.y, 1, 1, Color@(white: Unit)));

     Draw@ d_ul = used.ul.?(true: Over(d, fills.ul), false: d);
     Draw@ d_ur = used.ur.?(true: Over(d_ul, fills.ur), false: d_ul);
     Draw@ d_ll = used.ll.?(true: Over(d_ur, fills.ll), false: d_ur);
     Draw@ d_lr = used.lr.?(true: Over(d_ll, fills.lr), false: d_ll);
     d_lr;
   });
    
  # 3. Draw a green square for 1 and a red square for 0.
  /Hwdg/Memory%.ForEach<Draw@>(cells, io,
    (Coord@ p, Data@ data, Draw@ d) {
      Color@ color = data.?(0: Color@(red: Unit), 1: Color@(green: Unit));
      Over(d, Rect(p.x, p.y, 1, 1, color));
    });
};

@ Input@ = +(Unit@ quit, Unit@ step);

(Get@<Event@>) { Get@<Input@>; } GetInput = (Get@<Event@> in) {
  Event@ e := in;
  e.?(tick: !(Input@(step: Unit)),
      key_down: e.key_down.?(q: !(Input@(quit: Unit)), : GetInput(in)),
      key_up: GetInput(in));
};

(Get@<Input@>, Put@<Effect@>, Int@, Design@, Memory@) { Unit@!; }
StepUI = (Get@<Input@> in, Put@<Effect@> out, Int@ n, Design@ design, Memory@ cells) {
  Unit@ _ := out(Effect@(draw: Draw(design, cells)));
  Unit@ _ := out(Effect@(tick: Int|400));
  Input@ x := in;
  x.?(quit: !(Unit),
      step: IsZero(n).?(
              true: !(Unit),
              false: StepUI(in, out, Dec(n), design, Step(design, cells))));
};

App@ Main = (Int@ width, Int@ height, Get@<Event@> in, Put@<Effect@> out) {
  # Map game coordinates into screen coordinate.
  Point@ a = @(x: Div(width, Width), y: Div(height, Height));
  Point@ b = @(x: Div(width, 2), y: Div(height, 2));

  Put@<Effect@> game_out = (Effect@ e) {
    Effect@ transformed = e.?(
      tick: e,
      draw: Effect@(draw: Affine(a, b, e.draw)));
    out(transformed);
  };

  Unit@! WaitForKeyPress = {
    Event@ e := in;
    e.?(tick: WaitForKeyPress, key_down: !(Unit), key_up: WaitForKeyPress);
  };

  Unit@ _ := game_out(Effect@(draw: Draw(Design, Cells)));
  Unit@ _ := WaitForKeyPress;
  Unit@ _ := StepUI(GetInput(in), game_out, Int|2000, Design, Cells);

  WaitForKeyPress;
};

Main;
