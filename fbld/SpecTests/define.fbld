@test no-error @@

Test that local variables shadow global variables:

@assert_eq[hello,AAAA,CCCC]
 @define[a][] AAAA @@
 @define[c][] CCCC @@
 @define[foo][a b] @a,@b,@c @@
 @foo[hello][@a]

Test that the body of a function is executed in the scope where it is defined,
not the scope of the caller.

@assert_eq[hello,AAAA,CCCC]
 @define[a][] AAAA @@
 @define[c][] CCCC @@
 @define[foo][a b] @a,@b,@c @@
 @define[c][] DDDD @@
 @foo[hello][@a]

Test use of recursive definitions:

@assert_eq[done]
 @define[foo][x] @ifeq[@x][a][done][@foo[a]] @@
 @foo[hello]

Test that definitions shadow previous definitions.

@assert_eq[B: Hey]
 @define[foo][text][A: @text] @@
 @define[foo][text][B: @text] @@
 @foo[Hey]

Regression test for a bug where we access the wrong definition of a function:

@assert_eq[B: Hello]
 @define[foo][text][A: @text] @@
 @define[doc][body]
  @define[foo][text][B: @text] @@
  @foo[@body]
 @@
 @doc[Hello]

Test that body of define is not executed until the command is called, even if
it's a zero argument define.

@assert_eq[hello\n]
 @define[x][]
  @error[This error won't happen]
 @@
 hello

Test that the name being defined is evaluated before use.

@assert_eq[hihi]
 @let[x][y] @@
 @define[@x][a][@a@a]
  @y[hi]

End of tests.
