@doc Doc Comments
  @FbleVersion (@BuildStamp)
 
 @section Introduction
  Doc comments are a way of documenting functions in source code using fbld
  document syntax. Top level fbld tags @l{@file}, @l{@struct}, @l{@value}, and
  @l{@func} are defined for describing files, structs, values, and functions.
  Convention is used to embed fbld markup in comments.

 @section Example
  Here is an example of writing doc comments in C code:

  @code[c] @
   /**
    * @file fble-value.h
    *  API for interacting with fble values.
    */
   ...

   /**
    * @value[FbleGenericTypeValue] FbleValue instance for types.
    *  Used as an instance of an fble type for those types that don't need any
    *  extra information at runtime.
    *
    *  @type FbleValue*
    */
   extern FbleValue* FbleGenericTypeValue;

   /**
    * @struct[FbleValueV] Vector of FbleValue
    *  @field[size_t][size] Number of elements.
    *  @field[FbleValue**][xs] Elements.
    */
   typedef struct {
     size_t size;      /**< Number of elements. */
     FbleValue** xs;   /**< Elements .*/
   } FbleValueV;

   /**
    * @func[FbleNewStructValue] Creates a new struct value.
    *  @arg[FbleValueHeap*][heap] The heap to allocate the value on.
    *  @arg[size_t        ][argc] The number of fields in the struct value.
    *  @arg[FbleValue**   ][args]
    *    @a[argc] arguments to the struct value. Args are borrowed, and may be
    *   NULL.
    *
    *  @returns[FbleValue*]
    *   A newly allocated struct value with given args.
    *
    *  @sideeffects
    *   The returned struct value must be freed using FbleReleaseValue when no
    *   longer in use.
    */
   FbleValue* FbleNewStructValue(FbleValueHeap* heap, size_t argc, FbleValue** args);

 @section @l{@file}
  The @l{@file} tag is used to describe the contents of a file. The file
  command takes two arguments: the name of the file followed by a description.

  @code[fbld] @
   @file[name][description]
 
 @section @l{@struct}
  The @l{@struct} tag is used to describe a struct type. The struct command
  takes three arguments: the name of the struct type, a brief description of
  the type, and a detailed description:

  @code[fbld] @
   @struct[name][brief][description]

  The description should contain @l{@field} tags to describe the fields. Field
  tags should list all the fields of the struct. The @l{@field} tag has three
  arguments: the type of the field, the name of the field, and a description
  of the field.

  @code[fbld] @
   @field[type][name][description]

 @section @l{@value}
  The @l{@value} tag is used describe a global value. The value command takes
  three arguments: the name of the value, a brief description of the value,
  and a detailed description:

  @code[fbld] @
   @value[name][brief][description]

  The description should contain an @l{@type} tag describing the type of the
  value. The @l{@type} tag has a single argument: the type of the value.

  @code[fbld] @
   @type[type]

 @section @l{@func}
  The @l{@func} tag is used to describe a function. The func command takes
  three arguments: the name of the function, a brief description of the
  function, and a detailed description of the function:

  @code[fbld] @
   @func[name][brief][description]

  The description should contain @l{@arg}, @l{@returns}, and @l{@sideeffects}
  tags to describe the arguments, return value, and side effects of the
  function respectively.

  Argument tags should list all of the arguments to the function, in the order
  accepted by the function. The @l{@arg} tag has three arguments: the type of
  the argument, the name of the argument, and a description of the argument.

  @code[fbld] @
   @arg[type][name][description]

  If the function returns a result, the @l{@returns} tag should be used to
  describe the result. The @l{@returns} tag takes two arguments: the type of
  the value being returned and a description of the value being returned.

  @code[fbld] @
   @returns[type][description]

  If the function has any side effects, those should be listed under a single
  @l{@sideeffects} tag. The @l{@sideeffects} tag takes a single argument: the
  description of the side effects.

  @code[fbld] @
   @sideeffects[description]

 @section Other Markup
  Standard document markup tags can be used, such as @l{@l}, @l{@a}, and
  @l{@item}. The tag @l{@i} is used for list items with brief descriptions
  that fit on the same line, @l{@item} is used for list items with longer
  descriptions.

 @section Embedding Doc Comments
  In C code, doc comments are embedded in @l{/** ... */} comments as in the
  example above. Specifically, they are introduced using @l{@file},
  @l{@struct}, @l{@value} or @l{@func} on a line starting with @l{' * '} and
  continuing as long as lines continue to start with @l{' * '}.

  Other languages can use similar conventions of placing doc comments in
  comments with doc comment tags up to the end of the comment.

  Technically it doesn't matter where in the source code the doc comment is
  placed. It's recommended to put @l{@file} at the start of the file and
  other tags just before the corresponding entity is defined.

 @section Use of Doc Comments
  Doc comments can be used for the following purposes:

  @item Inline documentation of source code.
  @item Generation of man pages for library functions.
  @item Checking of properly formatted doc comments.
