Performance
===========
Goal for fble-0.3 is to make fble programs run twice as fast.

Take fbld implementation for example, because that seems to go absurdly slow
compared to what I would expect if I coded the same thing in C code.

Let's start with a simpler example and see if we can really break down where
the time is going. Because presumably making a simple program run twice as
fast is easier than making a complex program, and anything we do to improve
performance we expect to work on the simple program too.

Starting with fble-cat, read from 'yes' and writing to /dev/null.

Let's aim for 60 seconds of runtime.

time yes | head -n 500000 | ./out/pkgs/core/fble-cat > /dev/null
real    0m38.297s
user    0m36.059s
sys     0m2.209s

time yes | head -n 500000 | cat > /dev/null  
real    0m0.104s
user    0m0.027s
sys     0m0.046s

That's what I'm talking about. fble is over 100 times slower than I would
like.

Summary from profiling:
  Memory Management     51.07
  Generated Code        16.99
  Value Utils           15.78
  Function Calls        14.33
  IO                     1.80

Memory Management 51.07
 5.05     8216  _int_free[0025X]
 4.47     7263  IncrGc.part.0[0021X]
 3.27     5326  malloc[0039X]
 3.87     6289  Refs[0028X]
 3.45     5610  FbleHeapRef[0022X]
 3.03     4929  FbleNewFuncValue[001fX]
 2.92     4741  cfree@GLIBC_2.17[0042X]
 4.11     6680  FbleReleaseHeapObject[0011X]
 2.96     4816  FbleRetainHeapObject[0015X]
 1.84     2997  FbleNewUnionValue[0010X]
 1.81     2951  FbleRetainValue[0016X]
 1.70     2765  FbleReleaseValue[0017X]
 1.55     2513  FbleNewStructValue[001cX]
 1.40     2284  OnFree[0048X]
 1.40     2271  _int_malloc[0040X]
 1.33     2157  FbleNewHeapObject[0020X]
 1.17     1902  FbleFreeExecutable[004fX]
 1.15     1867  FbleHeapObjectAddRef[0044X]
 1.14     1862  FbleReleaseValues[0043X]
 1.08     1754  FbleRawAlloc[0038X]
 0.57      924  FbleFree[0052X]
 0.44      715  FbleNewStructValue_[001bX]
 0.24      388  FbleNewIntValue[000fX]
 0.23      380  free@plt[0059X]
 0.20      331  malloc@plt[005aX]
 0.18      288  FbleNewStructValue_.constprop.7[0035X]
 0.13      215  FbleNewEnumValue[004cX]
 0.13      211  FbleNewListValue[0034X]
 0.08      126  FbleNewUnionValue.constprop.4[0049X]
 0.05       88  FbleNewStructValue_.constprop.6[0053X]
 0.12      203  MakeIntP[0045X]

Generated Code 16.99
 5.86     9532  _2f_Core_2f_Int_2f_IntP_2f_Ord_25__2e_Ord_21_.0010[000bX]
 1.90     3088  _2f_Core_2f_Map_2f_Map_25__2e_Lookup_21__2e_L_21_.005a[000aX]
 1.24     2020  _2f_Core_2f_Int_2f_Ord_25__2e_Ord_21_.0008[0012X]
 1.05     1714  _2f_Core_2f_Monad_2f_State_25__2e_Monad_21__21__21_.0011[0007X]
 0.68     1112  _2f_Core_2f_Int_2f_IntP_2f_Ord_25__2e_RoundLt_21_.0008[0029X]
 0.54      877  _2f_Core_2f_Monad_2f_State_25__2e_Monad_21_.000e[0036X]
 0.51      827  _2f_Core_2f_Monad_2f_State_25__2e_Monad_21__21_.0010[0026X]
 0.49      805  _2f_Core_2f_Stream_2f_IStream_25__21__2e_GetLine_21__21_.0016[001dX]
 0.44      716  _2f_Core_2f_Stream_2f_OStream_25__21__2e_PutStr_21_.000e[0023X]
 0.44      714  _2f_Core_2f_Int_2f_IntP_2f_Ord_25__2e_RoundGt_21_.000c[002bX]
 0.39      630  _2f_Core_2f_Char_2f_Ascii_25__2e_Ord_21_.000a[002dX]
 0.33      538  _2f_Core_2f_Stream_2f_IStream_25__21__2e_GetChar_21__21_.0011[0008X]
 0.32      519  _2f_Core_2f_Monad_2f_State_25__2e_Monad_21_.000b[0024X]
 0.31      508  _2f_Core_2f_Char_2f_Ascii_25__2e_Chr_21_.0075[0009X]
 0.27      438  _2f_Core_2f_Stream_2f_IStream_25__21__2e_GetLine_21_.0015[001eX]
 0.23      372  _2f_Core_2f_Stdio_2f_Cat_25__2e_Cat_21__2e_cat_21__21_.0017[002eX]
 0.22      357  _2f_Core_2f_Stream_2f_IStream_25__21__2e_GetChar_21_.0010[0037X]
 0.21      349  _2f_Core_2f_Monad_2f_State_25__2e_Monad_21__21_.000c[0027X]
 0.21      344  _2f_Core_2f_Stdio_2f_Cat_25__2e_Cat_21__2e_cat_21_.0016[0030X]
 0.19      315  _2f_Core_2f_Stream_2f_OStream_25__21__2e_PutStr_21__2e__3a__21_.0011[002fX]
 0.19      315  _2f_Core_2f_Maybe_25__2e_Just_21_.0007[003bX]
 0.18      297  _2f_Core_2f_Stream_2f_OStream_25__21__2e_PutChar_21_.000c[002cX]
 0.17      272  _2f_Core_2f_Stdio_2f_IO_25__2e_Run_21__21__21__21_.000f[0041X]
 0.15      248  _2f_Core_2f_Char_2f_Type_25__2e_IsNewline_21_.005a[004aX]
 0.14      233  _2f_Core_2f_Stdio_2f_IO_25__2e_Run_21__21__21_.000e[003aX]
 0.13      206  _2f_Core_2f_Stream_2f_IStream_25__21__2e_GetLine_21__21__2e__3a__2e__3a__21_.001b[003cX]
 0.08      132  _2f_Core_2f_Stdio_2f_Cat_25__2e_Cat_21__2e_cat_21__21__2e__3a__21_.001a[004eX]
 0.08      130  _2f_Core_2f_List_25__2e_Cons_21_.0008[003dX]
 0.04       68  _2f_Core_2f_List_25__2e_List_21_.000d[0051X]

Value Utils 15.78
 5.99     9741  FbleUnionValueTag[000cX]
 5.66     9212  FbleStrictValue[000dX]
 1.98     3217  FbleUnionValueAccess[0013X]
 1.68     2736  FbleStructValueAccess[0018X]
 0.24      390  FbleIntValueAccess[002aX]
 0.23      379  PackedValueLength[004bX]

Function Calls 14.33
11.58    18827  FbleThreadCall[0006X]
 2.75     4465  FbleFuncValueInfo[0014X]

IO 1.8
 0.32      525  _IO_fflush[001aX]
 0.21      339  __GI___libc_write[003fX]
 0.20      324  new_do_write[0033X]
 0.16      266  _IO_file_write@@GLIBC_2.17[003eX]
 0.15      245  OStreamImpl[0019X]
 0.14      227  _IO_getc[0047X]
 0.13      218  _IO_do_write@@GLIBC_2.17[0032X]
 0.13      209  fputc[0046X]
 0.11      184  IStreamImpl[000eX]
 0.11      171  _IO_file_sync@@GLIBC_2.17[0031X]
 0.05       76  fputc@plt[004dX]
 0.03       52  fflush@plt[0050X]
 0.03       41  0xffffffc010027968[0058X]
 0.02       27  fgetc@plt[005bX]
 0.01       20  0xffffffc01001041c[0060X]


Well, there you go. First thing to focus on is memory management.

In this case, it's all function allocations. Mostly from, I assume, the
State Monad.do call for the 'do' function for /Core/Monad/IO%.

There are multiple function allocations when you call do:
1. Do function is two argument function written as a function to a function.
Every time you call Do it allocates a function. This can be fixed by rewriting
it as a two argument function and adding monadic bind support to take
advantage of that.

2. The second argument to Do is a function that, when called, returns a
function which is the state monad.

3. The second argument to Do is itself a function that needs to be allocated,
and use of bind syntax causes it to be allocated every time the syntax is
executed.

Lots of function allocations coming out of monad bind syntax here. I could
rewrite fble-cat to avoid all use of monadic code. There should be no need for
any function allocations in the main loop. How do we reconcile that with the
desire to do monadic style programming?

The core loop is:

    Unit@ _ <- m.do(O.PutStr(stdio.out, line));
    cat(input);

Note:
* (Unit@ _) { cat(input); } is a constant function. No need to to reallocate
  it over and over.

Re-implementing cat without monads:

time yes | head -n 500000 | ./out/pkgs/core/fble-fast-cat > /dev/null

real    0m20.182s
user    0m18.387s
sys     0m1.825s

So, 38s ==> 20s. That's about our 50%.

I will note: the implementation isn't that bad:

  (World@) { R@<Bool@>; } Cat = (World@ w) {
    R@<Maybe@<Int@>> byte = stdin(w);
    byte.x.?(nothing: R@(w, True));

    Char@ char = /Core/Char/Ascii%.Chr(byte.x.just);
    R@<Unit@> out = stdout(/Core/Char/Ascii%.Ord(char), byte.s);
    Cat(out.s);
  };

Certainly way less obscure than going through IStream, GetLine, and PutStr
like my other version does.

Summary:
  Value Utils 29.37
  Memory Management 25.05
  Generated Code 23.78
  Function Calls 18.83
  IO 2.97

Value Utils 29.37
12.80    10803  FbleUnionValueTag[000aX]
 9.46     7985  FbleStrictValue[000cX]
 4.80     4051  FbleUnionValueAccess[000fX]
 1.84     1552  FbleStructValueAccess[001bX]
 0.47      397  FbleIntValueAccess[001eX]

Memory Management 25.05
 5.34     4502  FbleRetainHeapObject[000eX]
 4.31     3634  FbleReleaseHeapObject[0013X]
 3.61     3048  FbleNewUnionValue[0012X]
 3.08     2603  FbleRetainValue[0015X]
 2.56     2157  FbleReleaseValue[0016X]
 1.49     1255  FbleNewStructValue[0018X]
 1.03      873  FbleReleaseValues[001fX]
 0.84      708  FbleNewStructValue_[0017X]
 0.33      279  FbleNewEnumValue[002eX]
 0.33      279  _int_free[0024X]
 0.31      264  IncrGc.part.0[0023X]
 0.28      233  FbleHeapRef[002fX]
 0.27      230  FbleNewIntValue[0011X]
 0.23      192  Refs[002aX]
 0.21      178  malloc[002dX]
 0.19      159  cfree@GLIBC_2.17[0032X]
 0.16      135  MakeIntP[0028X]
 0.11       92  _int_malloc[0033X]
 0.10       88  FbleNewHeapObject[0022X]
 0.07       60  FbleRawAlloc[002cX]
 0.07       57  OnFree[0034X]
 0.05       40  FbleFree[003aX]
 0.03       29  FbleNewStructValue_.constprop.6[003eX]
 0.02       18  FbleHeapObjectAddRef[003dX]
 0.01        9  malloc@plt[0041X]
 0.02       13  free@plt[0040X]

Generated Code 23.78
11.77     9931  _2f_Core_2f_Int_2f_IntP_2f_Ord_25__2e_Ord_21_.0010[000bX]
 3.86     3257  _2f_Core_2f_Map_2f_Map_25__2e_Lookup_21__2e_L_21_.005a[0009X]
 3.65     3076  _2f_Core_2f_Int_2f_Ord_25__2e_Ord_21_.0008[000dX]
 1.33     1121  _2f_Core_2f_Int_2f_IntP_2f_Ord_25__2e_RoundLt_21_.0008[001aX]
 1.18      993  _2f_Core_2f_Stdio_2f_FastCat_25__2e_Main_21__2e_Cat_21_.0013[0007X]
 0.92      774  _2f_Core_2f_Int_2f_IntP_2f_Ord_25__2e_RoundGt_21_.000c[0019X]
 0.47      399  _2f_Core_2f_Char_2f_Ascii_25__2e_Chr_21_.0075[0008X]
 0.38      317  _2f_Core_2f_Char_2f_Ascii_25__2e_Ord_21_.000a[0020X]
 0.22      185  _2f_Core_2f_Maybe_25__2e_Just_21_.0007[0021X]

Function Calls 18.83
15.17    12800  FbleThreadCall[0006X]
 3.66     3088  FbleFuncValueInfo[0014X]

IO 2.97
 0.52      437  _IO_fflush[001dX]
 0.36      305  new_do_write[0027X]
 0.31      258  OStreamImpl[001cX]
 0.28      236  _IO_do_write@@GLIBC_2.17[0026X]
 0.27      229  IStreamImpl[0010X]
 0.23      191  __GI___libc_write[002bX]
 0.23      190  _IO_getc[0031X]
 0.22      188  _IO_file_write@@GLIBC_2.17[0029X]
 0.21      179  _IO_file_sync@@GLIBC_2.17[0025X]
 0.19      157  fputc[0030X]
 0.06       52  0xffffffc010027968[0039X]
 0.04       37  fputc@plt[003bX]
 0.03       24  fgetc@plt[003cX]
 0.02       15  fflush@plt[003fX]

Seems like understanding and eliminating this overhead of monadic style is the
first big step towards 2x performance improvement.
