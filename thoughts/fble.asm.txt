Compiling Fble to Assembly
==========================
The idea of compiling fble to llvm has come up a few times. LLVM seems like a
nice balance between supporting a variety of architectures (arm, arm64, intel,
etc.) and being a low level target. Maybe better to generate LLVM code instead
of C?

Potential advantages:
* We can use something fancier than tcc to compile generated code.
* We have more control over low level code generation, such as storing
  thread->profile in a register to reduce the overhead of disabled profiling.
* We can learn more about llvm, which seems interesting and useful in general.

I don't want to link the llvm libraries, but I would be happy to generate llvm
text IR and have users install and run llc (or whatever) on the result.

First test:
* I expect clang will take too many resources to compile our generated C code.
  Confirm that, then try compiling with clang to llvm text IR and see how much
  time it takes to compile the llvm text IR. Hopefully all the problem with
  clang on the C code goes away by the time we are running llc on the
  generated IR.

---

Results of the first test on /Md5% show that the clang part takes 10s of the
total 2m44s. The llc part takes 1m26s. So, unfortunately, it looks like the
expensive part of using llvm isn't the part we would bypass by generating the
llvm code directly. It takes 3 seconds to assemble the generated .s file.

I don't see any obvious way to make this faster. This is looking to be a
non-starter.

Could I generate arm assembly code directly instead? The main concern with
generating arm code directly is that it limits what platforms we support, but
perhaps there aren't that many to deal with and we could introduce an
abstraction to make it easy to add more?

Let's continue exploring the idea of compiling directly to assembly.

