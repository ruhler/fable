
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

<@>% List = /Core/List%.List;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;

String@ A = Str|A;
String@ B = Str|B;
String@ C = Str|C;

% Map = /Core/String/Map%.Map;
<@>@ Map@ = Map.Map@;
<@>% Empty = Map.Empty;
<@>% Insert = Map.Insert;
<@>% Delete = Map.Delete;

<@>% Eq = /Core/Map/Eq%.Eq(Map, /Core/String/Eq%.Eq);

Test@ Tests = TestSuite(Str|Eq, List[
  Test(Str|'eq: equal', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);
    Map@<Bool@> b = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: value mismatch', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, True), C, False);
    Map@<Bool@> b = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);

    Bool@ wnt = False;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: different number of elements', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);
    Map@<Bool@> b = Insert(Insert(Empty<Bool@>, A, True), B, False);

    Bool@ wnt = False;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: deleted to empty', (Unit@ _) {
    Map@<Bool@> a = Delete(Insert(Empty<Bool@>, A, True), A);
    Map@<Bool@> b = Empty<Bool@>;

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: empty from deleted', (Unit@ _) {
    Map@<Bool@> a = Empty<Bool@>;
    Map@<Bool@> b = Delete(Insert(Empty<Bool@>, A, True), A);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: empty from deleted pair second', (Unit@ _) {
    Map@<Bool@> a = Insert(Empty<Bool@>, A, True);
    Map@<Bool@> b = Delete(Insert(a, B, True), B);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: empty from deleted pair first', (Unit@ _) {
    Map@<Bool@> a = Insert(Empty<Bool@>, A, True);
    Map@<Bool@> b = Delete(Insert(a, C, True), C);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: equal any order', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, B, False), C, False), A, True);
    Map@<Bool@> b = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  })
]);

@(Tests);
