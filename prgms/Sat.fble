
@ Bool@ = /Core/Bool%.Bool@;
% Not = /Core/Bool%.Not;

@ Int@ = /Core/Int%.Int@;
% Dec = /Core/Int%.Dec;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

# VarId@ --
#   A variable identifier.
@ VarId@ = Int@;
% EqId = /Core/Int/Eq%.Eq;

# Var@ --
#   A variable in a boolean formula.
@ Var@ = *(VarId@ id, Bool@ polarity);
% EqPolarity = /Core/Bool/Eq%.Eq;

# Clause@ --
#   A disjunction (OR) of variables.
@ Clause@ = List@<Var@>;

# Formula@ --
#   A conjunction (AND) of clauses.
@ Formula@ = List@<Clause@>;

# Assignment@ --
#   A sets of variables assigned the values True or False as specified by
#   their polarity.
@ Assignment@ = List@<Var@>;

# Timeout@ --
#   A number of steps allowed to be remaining, or Nothing if there is no
#   timeout.
@ Timeout@ = Maybe@<Int@>;

# Result@ --
#   The result of trying to solve a sat problem.
#
# In the case of unsat, the remaining timeout is returned.
@ Result@ = +(Assignment@ sat, Timeout@ unsat, Unit@ timeout);

# SubstClause --
#   Substitute a value for a variable into the given clause.
#
# Returns the simplified clause, or Nothing if the clause is now satisfied.
(Clause@, Var@) { Maybe@<Clause@>; } SubstClause = (Clause@ c, Var@ v) {
  c.?(
    cons: {
      Var@ head = c.cons.head;
      EqId(head.id, v.id).?(
        true: EqPolarity(head.polarity, v.polarity).?(
          true: Nothing<Clause@>,                 # clause satisfied
          false: SubstClause(c.cons.tail, v)),    # variable eliminated
        false: {
          Maybe@<Clause@> tail = SubstClause(c.cons.tail, v);
          tail.?(
            just: Just<Clause@>(Cons<Var@>(head, tail.just)),
            nothing: Nothing<Clause@>);
        });
    },
    nil: Just<Clause@>(c));
};

# Subst --
#   Substitute a value for a variable into the formula.
(Formula@, Var@) { Formula@; } Subst = (Formula@ f, Var@ v) {
  f.?(
    cons: {
      Maybe@<Clause@> c = SubstClause(f.cons.head, v);
      c.?(
        just: Cons<Clause@>(c.just, Subst(f.cons.tail, v)),
        nothing: Subst(f.cons.tail, v));
    },
    nil: f);
};

# GetUnit --
#   Searches for a clause with a single variable.
#
# For example, if we have a clause with the single variable x, we know we can
# set x to True. This is unit propagation.
(Formula@) { Maybe@<Var@>; } GetUnit = (Formula@ f) {
  f.?(
    cons: {
      Clause@ clause = f.cons.head;
      clause.?(
        cons: clause.cons.tail.?(
          cons: GetUnit(f.cons.tail),
          nil: Just<Var@>(clause.cons.head)),
        nil: GetUnit(f.cons.tail));
    },
    nil: Nothing<Var@>);
};

# GetPure --
#   Searches for a pure literal in the given formula.
#
# A pure literal is a variable that shows up with the same polarity in every
# clause that it appears in. We can eliminate any such variable right away by
# setting its value to the polarity that it shows up with.
(Formula@) { Maybe@<Var@>; } GetPure = {
  @ Status@ = +(Bool@ pure, Unit@ impure);
  @ Map@ = /Map%.Map@<VarId@, Status@>;
  % Empty = /Map%.Empty<VarId@, Status@>;
  % InsertWith = /Map%.InsertWith<VarId@>(/Core/Int/Eq%.Lt)<Status@>;

  (Formula@ f) {
    Map@ map = /Core/List%.ForEach<Clause@, Map@>(f, Empty,
      (Clause@ clause, Map@ map) {
        /Core/List%.ForEach<Var@, Map@>(clause, map, (Var@ v, Map@ map) {
           InsertWith(map, v.id, (Maybe@<Status@> ms) {
             ms.?(
               just: ms.just.?(
                 pure: EqPolarity(ms.just.pure, v.polarity).?(
                   true: ms.just,
                   false: Status@(impure: Unit)),
                 impure: ms.just),
               nothing: Status@(pure: v.polarity));
           });
        });
      });

    # TODO: It would be nice if we could break out of the for loop right
    # away instead of always traversing the entire map. Or better yet, return
    # the list of all pure literals intead of just one.
    /Map%.ForEach<VarId@, Status@, Maybe@<Var@>>(map, Nothing<Var@>,
      (VarId@ v, Status@ s, Maybe@<Var@> p) {
        p.?(just: p, nothing: s.?(pure: Just<Var@>(Var@(v, s.pure)), impure: p));
    });
  };
};

# Simplify --
#   Simplify the given formula using unit propagation and pure literal
#   elimination.
#
# Returns the simplified formula and any assignments that have been made
# during the simplification process.
(Formula@, Assignment@) { *(Formula@ simplified, Assignment@ assigns); }
Simplify = (Formula@ f, Assignment@ a) {
  Maybe@<Var@> unit = GetUnit(f);
  unit.?(
    just: Simplify(Subst(f, unit.just), Cons<Var@>(unit.just, a)),
    nothing: {
      Maybe@<Var@> pure = GetPure(f);
      pure.?(
        just: Simplify(Subst(f, pure.just), Cons<Var@>(pure.just, a)),
        nothing: @(simplified: f, assigns: a));
    });
};

# Countdown --
#   Count down the timeout.
#
# Returns:
#   The timeout decremented by one, Nothing if time is up.
(Timeout@) { Maybe@<Timeout@>; } Countdown = (Timeout@ t) {
  t.?(
    just: t.just.?(
      p: Just<Timeout@>(Just<Int@>(Dec(t.just))),
      : Nothing<Timeout@>),
    nothing: Just<Timeout@>(t));
};

# Search --
#   Searches for a solution to the given sat formula.
#
# Inputs:
#   f - the formula to solve
#   a - the assignments made so far
#   t - a timeout.
#
# Returns:
#   A satisfying assignment, unsat if the formula is unsatisfiable, or timeout
#   if we ran out of the allowed time.
(Formula@, Assignment@, Timeout@) { Result@; }
Search = (Formula@ f, Assignment@ a, Timeout@ t) {
  % fa = Simplify(f, a);
  Formula@ f = fa.simplified;
  Assignment@ a = fa.assigns;

  Maybe@<Timeout@> nt = Countdown(t);
  nt.?(
    just: {
      f.?(
        cons: {
          f.cons.head.?(
            cons: {
              Var@ v = f.cons.head.cons.head;
              Result@ attempted = Search(Subst(f, v), Cons<Var@>(v, a), nt.just);
              attempted.?(
                sat: attempted,
                unsat: {
                  Var@ nv = Var@(v.id, Not(v.polarity));
                  Search(Subst(f, nv), Cons<Var@>(nv, a), attempted.unsat);
                },
                timeout: attempted);
            },
            nil: Result@(unsat: nt.just));
        },
        nil: Result@(sat: a));
    },
    nothing: Result@(timeout: Unit));
};

# Solve --
#   Solve a SAT formula.
#
# Returns:
#   The result of trying to solve the sat problem.
(Formula@, Timeout@) { Result@; } Solve = (Formula@ f, Timeout@ t) {
  Search(f, Nil<Var@>, t);
};

@(VarId@, Var@, Clause@, Formula@, Assignment@, Result@, Timeout@,
  EqId, Solve);
