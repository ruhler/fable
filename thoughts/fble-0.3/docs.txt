Fble 0.3 Miscellaneous Docs Topics
==================================

Be able to write doc comments for extern values and types as well as
functions?

Let's find some concrete examples.

Extern: fble-value.h FbleGenericTypeValue.

/**
 * FbleValue instance for types.
 *
 * Used as an instance of an fble type for those types that don't need any
 * extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

What do we want to turn it into?

There are 4 pieces of information:
* name
* brief
* type
* description

Call it @value.

The only real question is how we want to pass the type. Probably as an
argument, but that might make brief slightly annoying. For example:

/**
 * @value[FbleGenericTypeValue][FbleValue*] FbleValue instance for types.
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

/**
 * @value[FbleGenericTypeValue] FbleValue instance for types.
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 *  
 *  @type FbleValue*
 */
extern FbleValue* FbleGenericTypeValue;

/**
 * @value[FbleValue*][FbleGenericTypeValue] FbleValue instance for types.
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

/**
 * @value[FbleGenericTypeValue] FbleValue instance for types.
 * @[FbleValue*]
 *  Used as an instance of an fble type for those types that don't need any
 *  extra information at runtime.
 */
extern FbleValue* FbleGenericTypeValue;

Honestly, I think @value[type][name][brief][description] makes sense. Except
that doesn't work as well with dcget.

Otherwise, @value[name][brief][description], where description contains @type
tag is okay I guess. Consistent with function. Except what does it mean of
@type isn't provided? Dunno. Anyway, let's give that a try to start.

We want to generate a man page and run dc check. Should be straight forward.

Can we require @type in dc check? That would be nice. We can probably do that.

---

Next step: types. Probably @struct to start.

For example:

/**
 * Source file location.
 *
 * Pass by value. Explicit copy and free required.
 */
typedef struct {
  /**
   * Source file name. Or other description of the source of the program text.
   * Owned by this FbleLoc.
   */
  FbleString* source;

  /**
   * The line number.
   */
  size_t line;

  /**
   * The column number.
   */
  size_t col;
} FbleLoc;

This is just like function, except no return value and rename @arg to @field,
right?

/**
 * @struct[FbleLoc] Source file location.
 *  Pass by value. Explicit copy and free required.
 * 
 *  @field[FbleString*][source]
 *   Source file name or other description of the source of the program text.
 *   Owned by this FbleLoc.
 *  @field[size_t][line] The line number.
 *  @field[size_t][col] The column number.
 */
typedef struct {
  FbleString* source;
  size_t line;
  size_t col;
} FbleLoc;

Great. That should be easily doable, right?

---

List of files to go through for @struct conversion.

lib/aarch64.c     DONE
lib/code.h        DONE
lib/compile.c     DONE
lib/expr.h        DONE
lib/heap.c        DONE
lib/kind.h        DONE
lib/load.c        DONE
lib/parse.y       DONE
lib/profile.c     DONE
lib/tag.h         DONE
lib/tc.h          DONE
lib/type.c        DONE
lib/typecheck.c   DONE
lib/type.h        DONE
lib/unused.c      DONE
lib/value.c       DONE
lib/var.h         DONE
pkgs/app/app.c    DONE

---

I'm going to punt some doc comment stuff to the next release. We made good
incremental progress by adding @struct. I want to let it sit and see how I
feel about having the documentation before the struct instead of inline with
it, because it feels a little more silly for the @enum use case.

---

* Figure out how to get rid of extra space before '}' in man page struct
  synopsis.

Right now, using:

  @inline[\n };\n]

Generates something like:

struct FbleValueV {
    \fBsize_t\fR \fIsize\fR\fB,
    \fR\fBFbleValue**\fR \fIxs\fR
 };
.SH "DESCRIPTION"

If I get rid of the space:

struct FbleValueV {
    \fBsize_t\fR \fIsize\fR\fB,
    \fR\fBFbleValue**\fR \fIxs\fR
};
.SH "DESCRIPTION"

Something about space is continuation in troff?

Options:
* Indent the struct description?
* Insert a .P somewhere?
* Insert a break somewhere?

Let's review troff syntax for this.

It's not clear. Troff syntax says:
* .br for break
* Lines starting with '.' are control, otherwise printed.

I guess that means newlines are ignored? Then why does it work some times?

I don't really understand what I should be doing here, but a well placed .br
seems to make things work.

---

How to fix vim syntax highlighting of {} in fbld?

Examples:

  @l[{]@hi@l[}]             - broken now, do want to highlight @hi
  @l[x]@hi@l[x]             - should highlight same as above.
  @l{ruhler@degralder.com}  - works now, don't want to highlight @degralder.com

Current strategy:

  Anything in between { and } is highlighted as normal, with outer most braces
  colored as bracket.

A better approach might be:

  @ name { ... }

or

  @name[...]{

Hmm...

A hack in this case could be:
  ]{ ... }
  }{ ... }
  n{ ... } ?

Also think about: where do we support escape sequences? In []? In {}?

Let's summarize from the fbld spec.
* \ @ [ ] n - supported in plain text.
* [] args take plain text.
* {} args take literal text (no subcommands or escapes, braces nest)

Conceptually the trick is figuring out when { is just in plain text, or when
it is the start of an argument. Specifically:

]{...}
}{...}
@{...}
@<name>{...}

That's what I want to predicate on. The challenge being the case of
@<name>{...}, which has a more involved start regex and wants
sub-highlighting.

This should certainly be doable. Let's read more about regions first.

There are magic regex options to explicitly specify things to match without
including them in the match itself. Could we use that for start?

For example:

@(name)?...

Ugh. Feels complicated. Maybe:

\(@[name]\)\@={

To say: match @name{, but the @name part match with zero width.

Or, looks like \@<= is designed for this.

\(@[a-zA-Z0-9_]\+\)\@<={

Proposal then is to try that. Have 4 different regions set up with starting
regex:

  @{
  }{
  ]{
  \(@[a-zA-Z0-9_]\+\)\@<={

---

How to factor out common code for @FbleVersion (@BuildStamp)?

Define something called @FbleVersionStamp. Where would I define it?

- With @BuildStamp?
  Currently defined in buildstamp and fbld/nobuildstamp.fbld.

- With @FbleVersion?
  Currently defined in fbld/build.tcl.

- Some place new?

Certainly it will be convenient to have.

Putting it with @BuildStamp is nice because we can special for presence of
absences of build stamp more easily. But it ties together two otherwise
separate concepts.

I vote for putting it with the generated @FbleVersion tag. We can always add a
check for empty @BuildStamp if we want to specialize. The only tedious part is
the script to generate the file. We can write a more formal one. An
fbld/version.fbld.sh which takes the version string as input.

---

Syntax highlighting of bnf format in fbld spec. What to highlight:

* Comments: (* ... *)
* Punctuation: '::=', '|', ';'. Or maybe don't highlight punctuation, because
  it's not normally something you needed colored specially?
* Literal: '...'

I use some special things in my syntax though, like Haskell style types,
[...], etc.

It's not clear there is a canonical bnf syntax to choose. Ideally there's a
clear, canonical, well defined syntax that supports all the features I want to
make use of.

Looks like I want EBNF features.

Standards we could pick from:
* W3C EBNF - apparently two different ones: a spec, and one used for xml.
* BS 6154
* ISO/IEC 14977,

Let's go with ISO 14977, which at least tries to be a canonical standard. What
changes would I need to make to switch to this standard?

* Use '=' instead of '::=' for definitions. I'm happy to do that.
* Use ? ... ?  for things like 'word as described in the section on lex syntax'
* use ',' to concatenate elements, not space.
* Use {...} for repeat and [] for optional.

This should be fine for concrete syntax. The extra ',' will be slightly
annoying and seem unnecessary given I'm not using space in my identifiers. But
repetition should be nicer with {...} instead of [...].

For abstract syntax, use comments for the types?

For example, instead of:

    | struct_value_explicit_type (type : Type) (args : [Expr])

Some thing like:

    | struct_value_explicit_type (type : Type) (args : [Expr])

Oh, hmm.. That's interesting. I use constructor based format to give names and
values. It's a little strange. Technically this should be either:

  | type (* Type *), args (* [Expr] *)

or:
 
  | struct_value_explicit_type
 ...

struct_value_explicit_type = type (* Type *), args (* [Expr] *) ;

Or perhaps:

  | (* struct_value_explicit_type *) type (* Type *), args (* [Expr] *)

I'm not sure it's worth it. I think my description for abstract syntax is
easier to understand personally. But who knows?

Anyway, maybe start by updating the concrete syntax and see how that feels.

---

Converting ebnf syntax for concrete syntax looks reasonable except comma
separated lists feel tricky. Any compact way to do that? Conceptually I want
something like: a, b, [',' ...]. I'm putting:

  a, b, {',', a, b}

Which is okay, except for having to repeat a and b.

You know, commas are slightly annoying when writing fble too, because you
can't use them as terminators. I feel like we really ought to support comma
separated lists as comma separated or terminated lists. Would that make it
easier to describe the syntax? With the last comma optional? I suspect not
honestly.

  {a, b, ','}, [a, b]

Doesn't really help.

I kind of want syntax like:

  {a, b, [',' ...]}

Maybe I could use:

  (a, b, {',', ...})

As my own shorthand? Is it worth it?

Well, in this case it helps to define something like:
 ab = a, b

 ab, {',', ab}

Honestly, the change of concrete syntax to ebnf looks good to me. Let's go
with it.

---

There is some ASN.1 format for describing protocols. It looks close to what I
need, but is not aesthetically pleasing to me.

Let's play around with some different options for the abstract syntax.

For example, today we have something like:

   Expr ::=
      typeof (expr : Expr)
    | struct_value_explicit_type (type : Type) (args : [Expr])
    ;

In more ebnf format:

   Expr =
      (* typeof *) (* expr *) Expr
    | (* struct_value_explicit_type *) (* type *) Type, (* args *) {Expr}
    ;

No. Not at all worth it.

The key is I want name of constructor and names of fields in addition to type.

   Expr =
      typeof { Expr expr; }
    | struct_value_explicit_type { Type type; [Expr] args; }
    ;

   Expr =
      typeof { expr : Expr }
    | struct_value_explicit_type { type : Type, args : [Expr] }
    ;

   Expr =
      typeof(Expr expr)
    | struct_value_explicit_type(Type type, [Expr] args)
    ;

   Expr =
      typeof: Expr expr
    | struct_value_explicit_type: Type type, [Expr] args
    ;

   Expr =
      typeof (expr : Expr)
    | struct_value_explicit_type (type : Type) (args : [Expr])
    ;

I like my current syntax the best. Though we can change ::= into =.

Actually, slightly nicer:

   Expr:
      typeof (expr : Expr)
    | struct_value_explicit_type (type : Type) (args : [Expr])
    ;

Can I use the same approach for concrete syntax? Would it work there?

No, I think ebnf is still appropriate for concrete syntax. We don't want
constructor names mixed in with concrete syntax.

If I were to do a variation, I might say we use space for concatenation rather
than comma. ':' instead of ' = '. And some other kind of comment. For example,
instead of:

    kind =
       '%'                                             (* normal_kind *)
     | '@'                                             (* type_kind *)
     | '<', kind, {',', kind}, '>', kind               (* poly_kind *)
     ;

Something like:

    kind:
       '%'                                             # normal_kind
     | '@'                                             # type_kind
     | '<' kind {',' kind} '>' kind               # poly_kind
     ;

No. ebnf from iso is fine for this.

---

Summary of approach taken for notation in the fble spec:
1. Custom abstract syntax format. foo: ... | xxx (a: A) (b: B) | ... ;
2. ISO EBNF concrete syntax format. foo = ...

I should probably describe the notation in the spec itself. I don't know.
Seems annoying and distracting. Hopefully people can figure it out from all
the descriptions and examples provided.

---

Back to the question of ebnf syntax highlighting. I don't think we need to
worry about abstract syntax highlighting: there's nothing worth highlighting.

For ebnf:
* comments, literals

I think that's enough. Easy.

(*...*) comment
'...' literal

