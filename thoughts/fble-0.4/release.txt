Fble 0.4 Release
================
What's the plan?

Big categories of work right now are:
* Performance
 - Better data value packing.
 - Function call inlining.
* Modular compilation
* Debugger
* Fbld in C.
* Fbld core library revision.
* Fble standard library.
* New apps.

My vote:
1. Start with fbld in C. That should give some performance baseline and also
improve build times a bunch.

Then go from there, whatever I feel like. We have a pretty solid list of
options for things to work on. There's more than enough here for a release.
What's nice is these big things are mostly orthogonal.

---

Tracking my current stack of work:

Improve performance.
=> Improve profiling.
=> Write an http server in fble.
=> Improve OS IO handling in fble.
=> Implement proper modular compilation support.

---

The content for the release is shaping up nicely. I think we can declare the
scope of release clearly now:
* [fbld] fbld in C
* [lang] modular compilation
* [lib] improved OS IO handling
* [lib] TCP sockets library
* [app] network test protocols
* [app] experimental profile viewer

We'll punt the following to a later release:
* Performance improvements
* Debugger
* Fbld core library revision

Cool. So, some more explanation to do to see how far I want to go with the
experimental profile viewer. The rest is cleanup and burndown.

Question: do I want to re-write profiling for this release? How about: give it
a try. If it turns out to be too difficult, we can punt to next release. Try
enough to get decent enough experience writing fble for the experimental
profile viewer. That's the most important part: using the language and
learning from that experience.

---

I hereby consider the release feature complete. Let's punt the profiling
rewrite to the next release. This one is big enough as is. The draft of my
pprof viewer in fble is good enough experience writing fble for this release.

---

* Remove /Core/Map/Tree%.

Who all is still using the original implementation?
* /Invaders/Aliens%, with Alient@ coordinates as the key.
* /Hwdg/Memory%, with Coord@ as the key.
* /App/Drawing/Test%, with Point@ as the key.
* /Games/GameOfLife%, with Coord@ as the key.
* /Games/TicTacToe/AI%, with Board@ as the key.
* /Sat/Id% with Int@ as the key. Provides an InsertWith function.
* (DONE) /SatGame/Generate% with Int@ as the key.
* /Core/Set%, with IsEmpty function.

Note: we have a Union function implemented for Tree Map, but apparently nobody
is using it?

I would say there's value to keeping a /Core/Map/Tree% implementation around,
because it's presumably easier to implement Ord@ for your custom type than it
is to implement Map@. If you don't care about performance, then TreeMap is
good enough. Maybe we also want ListMap and HashMap libraries you can choose
from, all if you don't want to implement your own custom map.

It seems a shame we would have to implement two identical versions of map for
*(Int@ x, Int@ y) and *(Int@ row, Int@ col).

---

* Rename /Debug/Native% to /Debug/Builtin%?

There's no point in having the gdb based trace anymore, now that we can use
builtin based trace. I think best to have people continue to use the
/Core/Debug% interface rather than access the raw underlying implementation.
Builtin is a better name than Native.

My biggest concern here is we don't give any choice over where the debugging
output goes. Changing the name doesn't make that better or worse. Before trace
was only implemented explicitly via gdb though. This change would make it
always on.

Who is using /Core/Debug today?

Nobody. Nobody is using it.

Let's do this: ditch the gdb part. Update the debugging guide. Add a test
case that things don't crash?

---

* Add helper macros for defining static FbleString and FbleModulePath?

Specific to static strings, so we set refcount to 1. The user needs to provide
the name of the thing and the value of the string. I can think of two
approaches.

What we have today:

  static FbleString Filename = { .refcount = 1, .magic = FBLE_STRING_MAGIC, .str = __FILE__, };
  static FbleString StrCore = { .refcount = 1, .magic = FBLE_STRING_MAGIC, .str = "Core", };
  static FbleString StrDebug = { .refcount = 1, .magic = FBLE_STRING_MAGIC, .str = "Debug", };

Option 1:

  static FbleString Filename = FBLE_STATIC_STRING(__FILE__);
  static FbleString StrCore = FBLE_STATIC_STRING("Core");
  static FbleString StrDebug = FBLE_STATIC_STRING("Debug");

Option 2:

  FBLE_STATIC_STRING(Filename, __FILE__);
  FBLE_STATIC_STRING(StrCore, "Core");
  FBLE_STATIC_STRING(StrDebug, "Debug");


Honestly I prefer option 1. You don't have to know the implementation of
FBLE_STATIC_STRING to understand what its doing.

How about FbleModulePath?

static FbleModulePath Path = {
  .refcount = 1,
  .magic = FBLE_MODULE_PATH_MAGIC,
  .loc = { .source = &Filename, .line = __LINE__, .col = 1 },
  .path = { .size = 3, .xs = PathEntries},
};

Ideally I would like something like:

static FbleModulePath Path = FBLE_STATIC_MODULE_PATH("/Debug/Core/Builtin%");

That's not going to happen in practice. We can't deal with the variable length
arguments, and it doesn't let us define the intermediate things we need.

So much of these builtin module implementations is boiler plate. How nice
would it be if the compiler generated all that for us? And if we did that, no
need to make static strings easier to define, right?

I'm not sure what I want to do for this right now.

---

* Reorder /Core/Stdio%.Main@ function args to: Stdio, List, Monad@?
  Seems more natural to compose by adding extra things to the front.
  See /Network/Apps/Client% for example.

<<@>@>@ Main@ = <<@>@ M@>(Monad@<M@>, Stdio@<M@>, List@<String@>) { M@<Bool@>; };

Main@ Main = <<@>@ M@>(Sockets@<M@> sockets, Monad@<M@> m, Stdio@<M@> stdio, List@<String@> argv) { ... }

The idea is, Stdio@<M@> is an extra interface, just like Sockets@<M@> is an
extra interface. If you think about it, List@<String@> args is an extra
interface. And returning Bool@ is an interface. So we are combining 4 things:

* Return status
* Command line args
* stdio
* sockets

The monad is just a way to glue all those things together. It seems like the
status code being part of the return type is difficult to move, but command
line, stdio, and sockets can all easily be made optional.

Right now, Stdio and sockets are provided as builtin modules. The real top
level type is:

@ Main@ = (List@<String@>) { IO@<Bool@>; };

Notice there is no Monad@ there, it's implicit. So, if we were to start there,
I would say:

1.  @ Main@ = (List@<String@>) { IO@<Bool@>; };
The actual top level interface.

2.  <<@>@>@ Main@ = <<@>@ M@>(Monad@<M@>, List@<String@>) { M@<Bool@>; };
Generalizing (1) to abstract monadic type.

3.  <<@>@>@ Main@ = <<@>@ M@>(Stdio@<M@>, Monad@<M@>, List@<String@>) { M@<Bool@>; };
Adding optional stdio interface.

4.  <<@>@>@ Main@ = <<@>@ M@>(Sockets@<M@>, Stdio@<M@>, Monad@<M@>, List@<String@>) { M@<Bool@>; };
Adding optional sockets interface.

Sounds reasonable to me. This suggests: Stdio, then Monad, then List. Shall I
give it a try?

While I'm at it, I think I should change the return type to Int@ to match
status code?

Here's what's part of C99:

  int main(void)
  int main(int argc, char* argv[])

That suggests Int@.

Returning int is equivalent to ending your program call with exit();
EXIT_SUCCESS and EXIT_FAILURE are options, otherwise it's all undefined. You
can't assume 0 / non-zero, etc.

In that case, honestly, I think Bool@ makes more sense. True for EXIT_SUCCESS,
False for EXIT_FAILURE. If nothing else is portable, why give more options?

An alternative approach I could take is make an exit builtin.

Exit@<M@>:
  (Bool@) { M@<Unit@>; }

That way we could remove it from the return value. Call it from within fble
code. I'm not sure how I feel about that. Is it better? It's certainly more
modular. What happens if you don't return anything though? Yeah, you need to
return something. This forces you to do that. Makes sense.

Anyway, proposal then is to switch to:

<<@>@>@ Main@ = <<@>@ M@>(Stdio@<M@>, Monad@<M@>, List@<String@>) { M@<Bool@>; };

The only real practical impact, besides having to reorder arguments in a bunch
of places, is ... nothing.

Based on all that, I don't think it's worth the churn at this point.

It would only really matter if I were to provide an option to run a program as
<<@>@ M@>(Monad@<M@>, List@<String@>) { M@<Bool@>; }

Then it would simplify the implementation of Run for the Stdio@ type.

Well, I have reason to believe it's better this way, let's try it. If it's too
painful, ditch the attempt. If it isn't, we've made things a little bit nicer.
Don't forget to update tutorials!

Another way to think about it: are we more likely to change the stdio
interface or the monad interface? Like how with Map@ we are more likely to
change the value type than the key type.

I can't really change the implementation of Monad@ without changing the
implementation of Stdio@. But you could imagine different implementations of
Stdio@ with the same implementation of Monad@. That's reason to suggest Stdio
comes first too I think.

Turned out to be not too difficult. Done.

---

* Install the C version of fbld, not the fble version.

C implementation:
* $::b/fbld/fbld.

Fble implementation:
* $::b/pkgs/fbld/bin/fbld
* $bindir/fbld
* $mandir/man1/fbld.1

I need a man page for the C version. Is it the same interface?

Well, it doesn't have any usage info at all. It doesn't accept --help. It
takes a list of input files is all.

It is the same interface though. Where should the man page live? Probably in
the fbld directory.

Neither of them accept help arguments. I should fix that eventually.

---

* Add tests for /Core/String/Map%.

We already have some tests for /Core/Int/Map/Tests%.
We already have some tests for /Core/Map/Tree/Tests%.

It feels like there is a lot of similarities between all these tests. Can we
implement a generic test to run over a Map@ implementation?

What I need:
* Three distinct key values in ForEach iteration order that can be compared
  for equality and shown.

That's pretty easy. Let's write that abstraction to start, reuse it for the
existing test cases. Then it should be real easy to add tests for
/Core/String/Map%.

Nice, but this quickly revealed that I haven't finished implementing
/Core/String/Map%. That's something that needs working on.

---

* export builtin modules in a header file somewhere?

Specifically I'm talking about

extern FblePreloadedModule _Fble_2f_Core_2f_Debug_2f_Builtin_25_;
extern FblePreloadedModule _Fble_2f_Core_2f_Stdio_2f_IO_2f_Builtin_25_;

The natural place to it would be:

debug.fble.h.
stdio.fble.h

Sure, why not. Let's try it. Honestly I don't think it matters much.

---

* EXIT_SUCCESS and EXIT_FAILURE with /Core/Stdio%.Main@ True/False rather than
  zero and non-zero? Is that more portable?
* Fix exit status in fble-stdio.fbld
  And maybe others since changing to FbleMain?

If I could get away with a single exit success and exit failure, I could use
EXiT_SuCCESS, EXiT_FAILURE. But I don't think that's enough for my use cases?
How can I say that, though, when you literally only have two options for
return: True and False?

FbleMain returns:
 - FBLE_MAIN_SUCCESS
 - FBLE_MAIN_USAGE_ERROR
 - FBLE_MAIN_OTHER_ERROR
 - FBLE_MAIN_COMPILE_ERROR

I have an enum today to list those options. If I don't assume that
EXIT_SUCCESS is 0 and EXIT_FAILURE is 1, I can't return anything else that
won't possibly conflict with those.

FbleMain doesn't exit itself. FbleStdioMain, for example, returns the FbleMain
exit status directly, or 0/1 depending on the returned result of the program.

Spec tests make use of the error status to tell if it's a compile error or a
runtime error. I need more than one kind of error. I also need to know the
values of compile and runtime error codes.

Here's what I think I should do:

typedef enum {
  FBLE_MAIN_SUCCESS = 0,
  FBLE_MAIN_FAILURE = 1
  FBLE_MAIN_COMPILE_ERROR = 2,
  FBLE_MAIN_RUNTIME_ERROR = 3,
  FBLE_MAIN_USAGE_ERROR = 4,
  FBLE_MAIN_OTHER_ERROR = 5,
} FbleMainStatus;

Use 0 / 1, assuming those match to EXIT_SUCCESS and EXIT_FAILURE, to interpret
the return value of Stdio main. Have special values for all the other errors
from FbleMain.

That way we don't have to worry about confusing between COMPILE_ERROR and a
Stdio program returning False.

I can update the code, update the documentation, update the spec test suite,
and everything should be happy.
 
---

Porting /Core/Map/Tree% over to the /Core/Map% interface is turning out to be
more complicated than I had hoped. We have things like Show, Eq, Set built on
top of /Core/Map/Tree%. Now I can't easily refer to the Set@ type without
first providing a Map@ implementation. Seems silly. If you have to know its
implemented with a Map@ underneath, why not just use that Map@ directly?

Anyway, I'll keep slogging through the code changes and see where we end up,
but a couple of things don't feel right about this. In particular, those cases
where I have no easy way to give an explicit type for a function.

---

* Get rid of fble-deps, in favor of a generic --make-deps option to fble
  binaries?
  Remove use of fbledeps in spec tests?
* Add --compile option to fble-deps?

Three things to check here:
1. Does fble-deps duplicate code or share? If it duplicates, that's a bit more
code maintenance burden.
2. Why do I still have fble-deps? Remind me. I'm sure there's some reason.
3. Assuming we keep fble-deps, it makes sense to have a --compile option, but
don't use that by default.

(1). There is a little bit of duplication, but not much. Mostly just in
parsing and handling the arguments. We already duplicate between FbleMain and
fble-compile as well. This duplication is not a significant reason to remove
fble-deps.

(2).
The spec tests use it, because it's more convenient than passing through a
depfile option in the build than via the testsuite for spec-test.run.tcl, and
because spec-test.run.tcl uses the generated dependency file to know which
modules to compile for a test.

fble-deps is also more convenient for things like the tutorials, just
generating the list of dependencies, ignoring compile errors, etc.

My vote: keep fble-deps, add a --compile option, support the same standard
arguments we support for fble-compile and FbleMain.

Specifically, we want:
  --deps-file (can default to stdout)
  --deps-target

Note currently we use:
  -t, --target

Maybe --deps- prefix is unnecessary since the binary is fble-deps? So we can
keep the current command line interface? That sounds not so unreasonable.
  
What to call the option for switching modes? It's based on:
  FbleLoadForExecution
  FbleLoadForModuleCompilation

Brainstorm:
  --for "execution" | "module-compilation"
  -c, --compilation
  --for "execution" | "compilation"
  -c, --compile
  --for "program" | "module"

---
 
* Test FbleCompileModule where typecheck of module fails?
  Why isn't that covered already by basically every compile-error test?

So, we call FbleCompileModule, but have FbleTypeCheckModule return NULL.
Apparently that never happens. What should cause it to happen?

We are certainly calling FbleCompileModule.

There's one place we call FbleCompileModule: fble-disassemble.c.

We do not call fble-disassemble for compile-error cases. So it makes sense
that this case is not covered. We would need to add a compile-module-error
case, or run fble-disassemble as part of compile-error.

---

* Test fble-disassemble with type dependencies?

Remind me again what leads to there being module->type_deps?
It's when we have a .fble.@ file for a module that depends on other modules.
So, the test case should be:

Foo.fble, has Foo.fble.@, and Foo.fble.@, for example, imports something from
SpecTests/Nat@.

---

* Add --help option to fbld programs to output usage.

Yes, we need this. At least for the C implementation. We have the man page.
Maybe just refer users to that?

The annoying thing is adding support for --version, because I rather not have
it depend on any of the fble library.

Options:
* Don't add --help.
* Don't add --version.
* Depend on fble library.
* Create a separate fbld config file like we do for fble.
* Refer people to the man page.

None if it is great. Best I can think is to duplicate logic for config.h.
Let's try that, see how I feel about it after I'm done coding it up.

Hmm... version is not part of the config info. It's hard coded in
fble-version.h. That makes this more awkward.

How about, for now, I just say: see man page for usage info? Or, see man page
for more info? Or just have --help?

It's nice to have a buildstamp though... Is buildstamp enough for the version?
I think so. Let's try that instead then.

It's not the most pretty thing, but hopefully it's one and done.

---

* Understand why type inference doesn't work on /Core/Set/Eq%.Eq, for example.

pkgs/games/Games/GameOfLife.fble|56 col 30| error: expected type Map@<M@, K@>, but found Map@<<@ V@> { +(Unit@ empty, *(Coord@ key, V@ value, Balance@ balance, M@ left, M@ right) map); }, Coord@>
|| Inferred types:
||   M@: <@ V@> { +(Unit@ empty, *(Coord@ key, V@ value, Balance@ balance, M@ left, M@ right) map); }
||   K@: ???

There are two type argument to derive, M@ and K@. It's able to derive M@.
That's easy enough. But it's not able to derive K@. Makes sense, because we
don't include K@ as part of the interface.

I bet if I add a field to Map@ which is Key@, then it could derive the type
here. Should I do it? No harm, right? Possibly useful?

For the fun of it, let's try it.

Okay, it's able to infer the type of K@ now. But it's still unhappy.

Maybe something to do with the recursion in the type of the map?

expected type Map@<M@, K@>,
||   M@: <@ V@> { +(Unit@ empty, *(Coord@ key, V@ value, Balance@ balance, M@ left, M@ right) map); }
||   K@: Coord@

expected: Map@<<@ V@> { +(Unit@ empty, *(Coord@ key, V@ value, Balance@ balance, M@ left, M@ right) map); }, Coord@>
found     Map@<<@ V@> { +(Unit@ empty, *(Coord@ key, V@ value, Balance@ balance, M@ left, M@ right) map); }, Coord@>

It looks right, unless it can't figure out the recursive M@.

I should try to minimize the test case.

Hmm... first attempt to try to minimize the test case failed. It works okay on
the smaller test case. How can I figure out what's going wrong here?

From gdb, in field 3 of Map@, it's failing due to the following differences:

(gdb) print(FblePrintType(dta->fields.xs[i].type))
<@ V@> { (M@<V@>) { Bool@; }; }$6 = void
(gdb) print(FblePrintType(dtb->fields.xs[i].type))
<@ V@> { (<@ V@> { +(Unit@ empty, *(Coord@ key, V@ value, Balance@ balance, M@
left, M@ right) map); }<V@>) { Bool@; }; }$7 = void

Okay, I can reproduce it now. Now I have a minimal test case, I just need to
walk through the equality check to see what's going wrong.

Walking through:
* Record S@<M@, K@> = typeof(S)
* Set M@ = S.M@
* Set K@ = S.K@
* Set V@ = V@
* Set V@ = V@
* Set (M@<V@>) { Bool@; } = (M@<V@>) { Bool@; }
* Set M@<V@> = M@<V@>

But now we get a mismatch in tag.
Left hand side is FBLE_POLY_APPLY_TYPE
Right hand side is FBLE_DATA_TYPE.

So, in one case we see M@ as abstract, in the other case we have applied the
real M@ and get a data type through it. We don't see those as equal.

Let me see if I can update the test case to make things more clear type name
wise. Otherwise I think I have the information to make sense of what's
happening here.

The argument to the IsEmpty function, M@<V@>, is in one case being treated as
an abstract poly apply, and in the other case as the substituted value
resulting from the actual application.
