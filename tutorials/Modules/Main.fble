
% True = /Core/Bool%.True;
@ Char@ = /Core/Char%.Char@;
<@>@ List@ = /Core/List%.List@;
<@>% Concat = /Core/List%.Concat;
<<@>@>@ Monad@ = /Core/Monad%.Monad@;
<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;
@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Unit@ = /Unit%.Unit@;

% 0 = /Bit%.0;
% 1 = /Bit%.1;

@ Bit4@ = /Bit4%.Bit4@;
% And = /Bit4%.And;
% Show = /Bit4/Show%.Show;

Bit4@ X = Bit4@(0, 0, 1, 1);
Bit4@ Y = Bit4@(1, 0, 1, 0);
Bit4@ Z = And(X, Y);

# Main
Main@ Test = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio)(List@<String@> _args) {
  % O = /Core/Stream/OStream%(m);

  (List@<String@>) { M@<Unit@>; } Puts = (List@<String@> strs) {
    O.PutLine(stdio.out, Concat<Char@>(strs));
  };
  
  Unit@ _ <- m.do(Puts[
    Show(X), Str|' AND ', Show(Y), Str|' = ', Show(Z)]);
  m.return(True);
};

/Core/Stdio/IO%.Run(Test);
