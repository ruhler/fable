
data Bit {
  Zero();
  One();
}

struct FullAdderOut(Bit z, Bit cout);

funct FullAdder(Bit a, Bit b, Bit cin; FullAdderOut) {
  FullAdderOut out = FullAdderOut(@Zero(), @Zero());
  case (a) {
    Zero _ {
      case (b) {
        Zero _ {
          case (cin) {
            Zero _ { out = FullAdderOut(@Zero(), @Zero()); }
            One _ { out = FullAdderOut(@One(), @Zero()); }
          }
        }
        One _ {
          case (cin) {
            Zero _ { out = FullAdderOut(@One(), @Zero()); }
            One _ { out = FullAdderOut(@Zero(), @One()); }
          }
        }
      }
    }

    One _ {
      case (b) {
        Zero _ {
          case (cin) {
            Zero _ { out = FullAdderOut(@One(), @Zero()); }
            One _ { out = FullAdderOut(@Zero(), @One()); }
          }
        }
        One _ {
          case (cin) {
            Zero _ { out = FullAdderOut(@Zero(), @One()); }
            One _ { out = FullAdderOut(@One(), @One()); }
          }
        }
      }
    }
  }
  return out;
}

struct AdderOut(Bit[4] z, Bit cout);

funct Adder(Bit[4] a, Bit[4] b, Bit cin ; AdderOut) {
  FullAdderOut(Bit z0, Bit c0) = FullAdder(a[0], b[0], cin);
  FullAdderOut(Bit z1, Bit c1) = FullAdder(a[1], b[1], c0);
  FullAdderOut(Bit z2, Bit c2) = FullAdder(a[2], b[2], c1);
  FullAdderOut(Bit z3, Bit c3) = FullAdder(a[3], b[3], c2);
  return AdderOut([z0, z1, z2, z3], c3);
}

