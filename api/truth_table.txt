Truth Table
===========
A truth table is a total mapping of an input sequence of bits to an output
sequence of bits. Both the number of bits in the input sequence and the number
of bits in the output sequence are fixed statically. Typically the number of
bits in the input sequence is small, not more than half a dozen bits, because
the size of the truth table grows exponentially in the number of input bits.

For example, consider the boolean AND operation. The AND operation takes two
inputs, A and B, and produces a single output Z. The output Z is 1 if and only
if both of the inputs A and B are 1. The AND operation can be described using
a truth table:

  A B | Z
  ----|--
  0 0 | 0
  0 1 | 0
  1 0 | 0
  1 1 | 1

Syntax
------
Here we define a syntax for interpreting a sequence of characters as a truth
table. 

As a sample of the syntax, the AND operation described above is represented
using the following sequence of characters:

  TruthTable(A, B; Z) {
    00: 0;
    01: 0;
    10: 0;
    11: 1;
  }

More precisely, the syntax for a truth table is as follows:

A sequence of characters is broken up into a sequence of tokens of the
following forms:
1. Punctuation: Each of the characters '(', ',', ';', ')', '{', '}', ':',
and ';' form their own tokens.
2. Words: A sequence of adjacent word characters group together to form a
single word token. A word character is an alpha numeric character (a digit '0'
through '9', a lowercase letter 'a' through 'z', or an upper case letter 'A'
through 'Z') or underscore '_'. Words are case sensitive.

Space, form-feed, newline, carriage return, horizontal tab and vertical tab
are all whitespace. Any amount of whitespace between tokens is allowed and
otherwise ignored for the purposes of parsing. There need not be any
whitespace separating the tokens.

The sequence of tokens after whitespace has been removed is then parsed as
follows:

A truth table consists of a list of input names, a list of output names, and
the table entries using the syntax:

  truth_table ::= 'TruthTable' '(' <inputs> ';' <outputs> ')' '{' <entries> '}'

The inputs are specified either with no tokens, which means the truth table
has no inputs, or as a sequence of words separated by commas that name the
inputs:

  inputs ::= (* empty *)
          | word
          | <inputs> ',' word

The outputs are a sequence of words separated by commas that name the outputs.
There must be at least one output specified:

  outputs ::= word
           |  <outputs> ',' word

Each input name and each output name must be distinct from all the other input
and output names.

The entries are specified using as a sequence of key value pairs, where the
key specifies the sequences of bits on the input, and the value species the
sequence of output bits corresponding to that input.

  entries ::= entry
           | entries entry

  entry ::= word ':' word ';'


The first word in an entry is the key and the second word in an entry is the
value. The words used for keys and values should consist solely of the
characters '0', '1', and '_'.  The '_' characters are ignored. The remaining
characters specify the values of the input or output bits. The order of the
bits in the key and value words correspond to the order of the input and
output names respectively. The number of input bits should match the number of
input names given, and the number of output bits should match the number of
output names given. If there are no input names, there must be exactly one
entry. The key of that entry must contain at least one '_' character to
satisfy the syntax of the key word without specifying any bits.
In general, given 'N' inputs, there should be 2^N^ entries listed. The entries
may be listed in any order, and each input sequence should appear exactly
once in the list of entries.

TODO:
* How to encode words with spaces in them? Should that be allowed?
* Why so limited a character set? Should we support Unicode characters in words?
* It might be nice to have some examples of key and value words with
  underscore characters in them.
* It might be nice to have an example of a truth table with no inputs.
* Syntax description is inconsistent. When do I use angle braces <...> around
  non-terminals?

