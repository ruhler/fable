
<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;
<@>% Append = /Core/List%.Append;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ PureState@ = *(
  List@<String@> in,
  List@<String@> out,
  List@<String@> err
);

# PureResult@ -- The result of running a pure Stdio computation.
<@>@ PureResult@ = <@ A@> { *(PureState@ state, A@ result); };

# Pure@ -- A monad for pure Stdio computation.
<@>@ Pure@ = <@ A@>(PureState@) { PureResult@<A@>; };

<@ A@>(A@) { Pure@<A@>; }
Return = <@ A@>(A@ x)(PureState@ s) {
  PureResult@<A@>(s, x);
};

<@ A@>(Pure@<A@>)<@ B@>((A@) { Pure@<B@>; }) { Pure@<B@>; }
Do = <@ A@>(Pure@<A@> ma)<@ B@>((A@) { Pure@<B@>; } f)(PureState@ s) {
  PureResult@<A@> ra = ma(s);
  f(ra.result)(ra.state);
};

Pure@<Maybe@<String@>> In = (PureState@ s) {
  s.in.?(nil: PureResult@<Maybe@<String@>>(s, Nothing<String@>));
  PureResult@<Maybe@<String@>>(
    PureState@(s.in.cons.tail, s.out, s.err),
    Just(s.in.cons.head));
};

(String@) { Pure@<Unit@>; } Out = (String@ str)(PureState@ s) {
  # TODO: Prepend instead of append string, and fix up later for improved
  # performance?
  PureResult@<Unit@>(PureState@(s.in, Append(s.out, List<String@>[str]), s.err), Unit);
};

(String@) { Pure@<Unit@>; } Err = (String@ str)(PureState@ s) {
  # TODO: Prepend instead of append string, and fix up later for improved
  # performance?
  PureResult@<Unit@>(PureState@(s.in, s.out, Append(s.err, List<String@>[str])), Unit);
};

Monad@<Pure@> Monad = Monad@<Pure@>(Return, Do);
Stdio@<Pure@> Stdio = Stdio@<Pure@>(In, Out, Err);

# Run --
#   Run a pure stdio computation.
#
# Inputs:
#   m - The computation to run.
#   in - The list of input strings.
<@ A@>(Pure@<A@>, List@<String@>) { PureResult@<A@>; }
Run = <@ A@>(Pure@<A@> m, List@<String@> in) {
  m(PureState@(in, Nil<String@>, Nil<String@>));
};

@(Pure@, PureState@, PureResult@, Monad, Stdio, Run);

