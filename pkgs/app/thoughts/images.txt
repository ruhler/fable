Images
======
For the set game use case, I have drawn some icons in inkscape, exported to
png. How can we make use of these images in an fble App?

In this particular instance, the images are described using vector paths, with
stroke widths, end marker, and curved joins. In general you could imagine
someone has some fancy editor they use to create an svg or png or other bitmap
image. For example, you could consider fonts as a collection of images
rendered with a specific technique we may not want to build into fble.

Any way you look at it, we'll need some representation of the image in fble.
We could use 'Drawing' with a bunch of rectangles, or something more specific.
We could introduce the option to define a drawing that we can refer to later
in the AppIO API. Somehow we'll need to specify an image, either in code, or
using a routine that can load one from an input stream. Then there is question
of filesystem support for loading these kinds of assets.

Questions are:
* Filesystem support for loading images?
* Some sort of caching mechanism to improve performance?
* Library in fble for drawing fancy vector graphics?
* Special representation for drawings, or something built on top of what we
  already have?
* Library support for different image formats?

---

We can separate concerns.

1. Concern that passing data back and forth from fble to C and rerendering the
image will be costly, so we should have a way to 'define' an image and later
reference it by id. This is solely performance. Worry about it later.

2. Special representation for drawings: we can already represent raster
drawings with a bunch of rectangles. No need for a special representation
except for performance. So this is solely performance. Worry about it later.

That leaves us with some code in fble to convert whatever external image
format we have into a Drawing@. We want to be able to use external editors
directly on our assets, which suggests we save them in whatever format the
external editor wants.

How do we go from some standard image format on the filesystem to something
fble understands in the running application?

Brainstorm:
* Add filesystem support to fble.
  - Define some notion of a File@ as a sequence of bytes.
  - Have some API for fetching files by file path.
* Write a tool to convert an image into an fble module.
  - Again, we'll want some notion of a File@ as a sequence of bytes.
  - Maybe we can compile the File@ to a literal in fble and import it as a
    module. Needs a separate (but generic) tool to convert a posix file to a
    File@ via literal.

The second choice hard codes the file in the application. Which is useful for
things like image assets, but not for things like a generic image viewer or
md5sum.

The File@ API can be separate from a way to access a filesystem. We could
provide static and dynamic filesystem APIs. Maybe we can even write a program
to compile a directory into a single module FileSystem@ interface, to have
better access controls over what the program can read and to allow us to embed
the contents in a compiled execuable for the program.

So, I'm thinking we'll want the following kinds of things:

* Png@ - internal abstract representation of a Png@ best suited for fble.
* File@ - abstract API for a sequence of bytes.
* FileSystem@ - abstract API for accessing File@ via named paths.
* Png@ -> Drawing@ - method to render a Png@.

And the order to try these things out in:

1. Start with File@, change Md5 to use that abstraction.
2. Add FileSystem@, change Md5 to use that abstraction.
3. Define Png@. Implement logic to go File@ -> Png@ -> Drawing@.

At some point we'll want to figure out how to standardize / incorporate access
to the filesystem with Stdio@ and App@.

---

The abstraction we are using for File in Md5 now is:

  <<@>@ M@>(Monad@<M@> m, M@<Maybe@<Bit8@>> get)

To make it feel more like a File, we could introduce a type:

<<@>@>@ File@ = <<@>@ M@> { *(M@<Maybe@<Bit8@>> get); };

More general would be a stream of values of some type T@. Maybe we say "File@"
is a Stream@ of Bit8@?

The issue is, I don't like the general file abstraction from linux. Too
complicated. With permissions, and truncation, and rewriting, and all that.
But in practice, to communicate and compose with other existing applications,
we need a way to work with files and filesystems.

Perhaps we can minimize where we deal with linux specific filesystem stuff,
and hold off on adding features until we need them.

The features I need now?

* Open a file for reading, and read it a byte at a time until reaching the
  end.

How do we know which file to read? Either the file is given as input, in which
case it's the C code that converts whatever the user specifies to a file, or
we take a filesystem and a string name of the file as input. May as well take
the filename as input as a string.

Let's look at filesystem then. In this case a filesystem for reading files.
Unless we want to take advantage of bash to do redirections from file names to
file descriptors. That sounds like a pain though.

If general approach to passing args is by string, we need ways to convert
things from strings to actual args. In this case, from string to file. That
means naming the file on the command line.

How do we deal with access controls? Wouldn't it be nice to say a program can
only even see a subset of available files? Wouldn't you want the caller to
control what files a program can access, not the program itself? In which
case, wouldn't you want to pass the file as a file explicitly, without names
and such?

We could do that with stdin, if we treat it as a sequence of bytes instead of
a sequence of strings.

Another thing you can do with file names is list them in the output. For
example, md5sum can take multiple files and list the md5sum of each by name.

Maybe what we want is a way to provide an extra argument to the 'filesystem'
component which is the list of files the program is allowed to access.

---

This is tricky. Let me break it down again into pieces:
* Standard Byte and File library that we can use.
  - reuse it for md5 and for images.
* Filesystem support.

For filesystem, the concern is about security. Specifically:
* Instead of letting a program do whatever it wants to any files the user it
  has access to, have the user specify what the program can do when the user
  runs the program.

There's another concern about format:
* Is sequence of bytes the thing we want to use in fble? Couldn't we come up
  with some better typed thing?

If you think about it, filesystem is really about:
* Having a way to persist storage across instances of a program.
* Having a way to share data between different programs whose lifetimes don't
  overlap.
* As a corollary: being able to share data between different revisions of the
  same program.

For example:
* I want to use inkscape to periodically edit a .png file.
* I want to access that .png file from my program, across many versions of the
  program.

In general you'll want to be able to add and remove entries from this
persistence/share store. We need some way to be able to identify items. Seems
like a string of some sort. For content, we maybe want typed things. But
serialization is tricky. May as well use a common type for everything.

What I'm saying is, if you look at what a filesystem provides, it sort of may
as well end up with the way we do filesystems on unix today in terms of
hierarchical paths and files as sequences of bytes.

The way bash command line expansions and completion works today, it's really
only convenient to refer to files as raw paths. For example, it would be
annoying as a user to adorn files with extra info to say if a program can read
or write or do other things with them, because how would you apply that to a
wildcard list of files or a directory of files?

Things to think about:
* How would I make the Byte standard library better than what we use for md5
  today?
* How would I add support for linux filesystem access as an fble library?
* Is there anything creative I can do to give programs access to persistence
  storage in fble in a way that's better than direct filesystem access?

Filesystems, in a way, are like composing together different programs across
time. Like, you compose together inkscape and multiple revisions of an fble
png viewer with a .png file as part of the connection between them.

As a contrast to filesystems, you could imagine a data structure that a
program takes as input and returns as output. Think like Android apps. It
could take a Maybe data structure as input and output a version of that at the
end. The next time you run it, we arrange for it to get the output of the
previous thing you ran.

