
@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Nil = /Core/List%.Nil;
<@>% Append = /Core/List%.Append;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;

@ PureState@ = *(
  List@<Int@> in,
  List@<Int@> out,
  List@<Int@> err
);

% State = /Core/Monad/State%<PureState@>;

# Pure@ -- A monad for pure Stdio computation.
<@>@ Pure@ = State.State@;
<@>@ PureResult@ = State.R@;

Monad@<Pure@> Monad = State.Monad;

Pure@<Maybe@<Int@>> In = {
  PureState@ s <- Monad.do(State.Get);
  s.in.?(nil: Monad.return(Nothing<Int@>));
  Unit@ _ <- Monad.do(State.Set(PureState@(s.in.cons.tail, s.out, s.err)));
  Monad.return(Just(s.in.cons.head));
};

(Int@) { Pure@<Unit@>; } Out = (Int@ b) {
  # TODO: Prepend instead of append string, and fix up later for improved
  # performance?
  PureState@ s <- Monad.do(State.Get);
  State.Set(PureState@(s.in, Append(s.out, List[b]), s.err));
};

(Int@) { Pure@<Unit@>; } Err = (Int@ b) {
  # TODO: Prepend instead of append string, and fix up later for improved
  # performance?
  PureState@ s <- Monad.do(State.Get);
  State.Set(PureState@(s.in, s.out, Append(s.err, List[b])));
};

(String@) { Pure@<Maybe@<IStream@<Pure@>>>; } Read = (String@ _filename) {
  # TODO: Add a map from file name to List@<Int@> to allow modeling of the
  # filesystem.
  Monad.return(Nothing<IStream@<Pure@>>);
};

Stdio@<Pure@> Stdio = Stdio@<Pure@>(In, Out, Err, Read);

# Run --
#   Run a pure stdio computation.
#
# Inputs:
#   m - The computation to run.
#   in - List of bytes to use for stdin.
<@ A@>(Pure@<A@>, List@<Int@>) { PureResult@<A@>; }
Run = <@ A@>(Pure@<A@> m, List@<Int@> in) {
  State.Run(m, PureState@(in, Nil<Int@>, Nil<Int@>));
};

@(Pure@, PureState@, PureResult@, Monad, Stdio, Run);

