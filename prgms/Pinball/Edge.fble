
@ Num@ = /Pinball/Num%.Num@;

@ Vec@ = /Pinball/Vec%.Vec@;
% SubV = /Pinball/Vec%.SubV;
% Magnitude = /Pinball/Vec%.Magnitude;

<@>@ Show@ = /Show%.Show@;

% Strs = /String%.Strs;
% Str = /String%.Str;

# Edge@ --
#   Internal representation for a stationary edge.
@ Edge@ = *(
  Vec@ start,       # The start point of the edge.
  Vec@ end,         # The end point of the edge.
  Num@ restitution  # Fraction of energy preserved during a collision.
);

# Edge --
#   Specify an edge using start and end position.
(Vec@, Vec@, Num@) { Edge@; }
Edge = (Vec@ start, Vec@ end, Num@ restitution) {
  Edge@(start, end, restitution);
};

# Dir --
#   The direction of an edge.
(Edge@) { Vec@; } Dir = (Edge@ e) {
  SubV(e.end, e.start);
};

# Length --
#   The length of an edge.
(Edge@) { Num@; } Length = (Edge@ e) {
  Magnitude(Dir(e));
};

Show@<Edge@> Show = (Edge@ e) {
  Strs[
    Str|'(start: ', /Pinball/Vec%.Show(e.start),
    Str|', end: ', /Pinball/Vec%.Show(e.end),
    Str|', restitution: ', /Pinball/Num%.Show(e.restitution),
    Str|')'];
};

@(Edge@, Edge, Dir, Length, Show);

