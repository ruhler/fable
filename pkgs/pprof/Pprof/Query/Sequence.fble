

@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;
<@>% List = /Core/List%.List;
<@>% Last = /Core/List%.Last;
<@>% Init = /Core/List%.Init;

<@>% StartsWith = /Core/List/Eq%.StartsWith;

% Drop = /Core/List/Length%.Drop;
<@>% Length = /Core/List/Length%.Length;

@ BlockId@ = /Pprof/Profile%.BlockId@;
@ Sequence@ = /Pprof/Profile%.Sequence@;
@ Profile@ = /Pprof/Profile%.Profile@;

@ Entry@ = /Pprof/Query%.Entry@;
@ Table@ = /Pprof/Query%.Table@;
@ Query@ = /Pprof/Query%.Query@;

% Total = /Pprof/Query/Total%;

% Eq = /Pprof/Profile/Eq%.BlockId;


(Sequence@) { Query@; }
Sequence = (Sequence@ target, Profile@ profile) {
  (Sequence@, Table@) { Table@; }
  Helper = (Sequence@ seq, Table@ tail) {
    seq.?(nil: tail);

    BlockId@ last = Last(seq);
    Int@ value = Total.Contains(profile, seq);
    Helper(Init(seq), Cons(Entry@(List[last], value), tail));
  };

  Helper(target, Nil<Entry@>);
};

(Sequence@) { Query@; } Incoming = (Sequence@ target) {
  (Sequence@) { List@<BlockId@>; }
  Frames = (Sequence@ seq) {
    seq.?(nil: Nil<BlockId@>);
    StartsWith(Eq, seq.cons.tail, target).?(false: Frames(seq.cons.tail));
    Cons(seq.cons.head, Frames(seq.cons.tail));
  };

  /Pprof/Query/ByFrame%.Query(Frames);
};

(Sequence@) { Query@; } Outgoing = (Sequence@ target) {
  Int@ length = Length(target);

  (Sequence@) { List@<BlockId@>; }
  Frames = (Sequence@ seq) {
    seq.?(nil: Nil<BlockId@>);
    StartsWith(Eq, seq, target).?(false: Frames(seq.cons.tail));

    Sequence@ suffix = Drop(length, seq);
    suffix.?(nil: Nil<BlockId@>);

    Cons(suffix.cons.head, Frames(seq.cons.tail));
  };

  /Pprof/Query/ByFrame%.Query(Frames);
};

@(Sequence, Incoming, Outgoing);
