

@ Bool@ = /Core/Bool%.Bool@;

<@>% List = /Core/List%.List;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ Stdio@ = /Core/Stdio%.Stdio@;
@ IO@ = /Core/Stdio%.IO@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Test@ = /Core/Test%.Test@;
<@>% AssertEquals = /Core/Test%.AssertEquals;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

(String@, Stdio@, String@, String@) { Test@; }
Test = (String@ name, Stdio@ game, String@ n, String@ expected) {
  /Core/Test%.Test(name, {
    Maybe@<String@> ~ get, put;

    IO@ io = @(
      stdin: !(Nothing<String@>),
      stdout: (String@ s) { put(Just<String@>(s)); },
      stderr: (String@ _) { !(Unit); });

    (String@) { String@!; } ReadOutput = (String@ output) { 
      Maybe@<String@> ms := get;
      ms.?(nothing: !(output));
      ReadOutput(Strs[output, ms.just]);
    };

    Unit@! RunGame = {
      Bool@ _ := game(io, List<String@>[n]);
      put(Nothing<String@>);
    };
    Unit@ _ := RunGame, String@ got := ReadOutput(Str|'');
    !(AssertEquals<String@>(/Core/String/Eq%.Eq, /Core/String/Show%.Show, expected, got));
  });
};

@(Test);
