
@ Drawing@ = /Drawing%.Drawing@;
% Blank = /Drawing%.Blank;
% Drawings = /Drawing%.Drawings;
% Translate = /Drawing%.Translate;

@ Int@ = /Int/Int%.Int@;
% Div = /Int/Int/Div%.Div;
% Mod = /Int/Int/Div%.Mod;

% I = /Int/Int/Lit%.I;
% D = /Int/Int/Lit%.D;

% Graphics = /Invaders/Graphics%;

% Aliens = /Invaders/Aliens%;
@ Aliens@ = Aliens.Aliens@;

% Ship = /Invaders/Ship%;
@ Dir@ = Ship.Dir@;
@ Ship@ = Ship.Ship@;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;


@ Lives@ = +(Unit@ 0, Unit@ 1, Unit@ 2, Unit@ 3);

@ Game@ = *(
  Int@ score,
  Lives@ lives,
  Ship@ ship,
  Aliens@ aliens
);

Game@ Initial = @(
  score: I(D|920),
  lives: Lives@(3: Unit),
  ship: Ship.Initial,
  aliens: Aliens.Initial
);

(Game@) { Game@; } Tick = (Game@ g) {
  Game@(g.score, g.lives, Ship.Tick(g.ship), Aliens.Tick(g.aliens));
};

(Game@, Dir@) { Game@; } Input = (Game@ g, Dir@ d) {
  Game@(g.score, g.lives, Ship.Input(g.ship, d), g.aliens);
};

(Int@) { Drawing@; } DrawScore = {
  # Digit -- Get the drawing associated with the digit corresponding to d.
  # Returns a blank drawing if d is not in [0-9].
  (Int@) { Drawing@; } Digit = (Int@ d) {
    d.?(n: Blank, 0: Graphics.Digits.0, p: d.p.?(
        1: Graphics.Digits.1,
        2p0: d.p.2p0.?( 
          1: Graphics.Digits.2,
          2p0: d.p.2p0.2p0.?(
            1: Graphics.Digits.4,
            2p0: d.p.2p0.2p0.2p0.?(
              1: Graphics.Digits.8,
              : Blank),
            : Blank),
          2p1: d.p.2p0.2p1.?(
            1: Graphics.Digits.6,
            : Blank)),
        2p1: d.p.2p1.?( 
          1: Graphics.Digits.3,
          2p0: d.p.2p1.2p0.?(
            1: Graphics.Digits.5,
            2p0: d.p.2p1.2p0.2p0.?(
              1: Graphics.Digits.9,
              : Blank),
            : Blank),
          2p1: d.p.2p1.2p1.?(
            1: Graphics.Digits.7,
            : Blank))));
  };

  Int@ 10 = I(D|10);

  (Int@ score) {
    # We only print 4 digits for the score.
    Int@ s1000 = score;
    Int@ s100 = Div(s1000, 10);
    Int@ s10 = Div(s100, 10);
    Int@ s1 = Div(s10, 10);
    Drawing@ d0 = Digit(Mod(s1000, 10));
    Drawing@ d1 = Digit(Mod(s100, 10));
    Drawing@ d2 = Digit(Mod(s10, 10));
    Drawing@ d3 = Digit(Mod(s1, 10));
    Drawings(List<Drawing@>[
      Translate(I(D|80), I(D|440), d3),
      Translate(I(D|96), I(D|440), d2),
      Translate(I(D|112), I(D|440), d1),
      Translate(I(D|128), I(D|440), d0)
    ]);
  };
};

(Lives@) { Drawing@; } DrawLives = {
  Drawing@ l1 = Translate(I(D|320), I(D|440), Graphics.Ship);
  Drawing@ l2 = Translate(I(D|360), I(D|440), Graphics.Ship);
  Drawing@ l3 = Translate(I(D|400), I(D|440), Graphics.Ship);
  (Lives@ l) {
    l.?(
      0: Blank,
      1: Drawings(List<Drawing@>[l1]),
      2: Drawings(List<Drawing@>[l1, l2]),
      3: Drawings(List<Drawing@>[l1, l2, l3]));
  };
};

(Game@) { Drawing@; } Draw = (Game@ g) {
  Drawings(List<Drawing@>[
    DrawScore(g.score),
    DrawLives(g.lives),
    Graphics.Background,
    Ship.Draw(g.ship),
    Aliens.Draw(g.aliens)
  ]);
};

@(Game@, Initial, Input, Tick, Draw);

