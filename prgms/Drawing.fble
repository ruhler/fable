{ /Unit%; @(Unit@, Unit); };
{ /Int/Int%; @(Int@, Add, Sub); };
{ /Int/Int/Eq%; @(Min, Abs); };

@ Color@ = +(
    Unit@ black,
    Unit@ red,
    Unit@ green,
    Unit@ yellow,
    Unit@ blue,
    Unit@ magenta,
    Unit@ cyan,
    Unit@ white
    );

@ Point@ = *(Int@ x, Int@ y);

@ Drawing@ = +(
  # A blank (transparent) drawing.
  Unit@ blank,
  
  # A filled quadrangle.
  *(Point@ a, Point@ b, Point@ c, Point@ d, Color@ color) quad,

  # Draw one drawing over another.
  *(Drawing@ below, Drawing@ above) over
);

Drawing@ Blank = Drawing@(blank: Unit);

# Draw a rectangle filled solid with the given color.
(Int@, Int@, Int@, Int@, Color@) { Drawing@; }
Rect = (Int@ x, Int@ y, Int@ w, Int@ h, Color@ color) {
  Drawing@(quad: @(
    a: Point@(x, y),
    b: Point@(Add(x, w), y),
    c: Point@(Add(x, w), Add(y, h)),
    d: Point@(x, Add(y, h)), color));
};

# Compose two drawings together by drawing one over another.
(Drawing@, Drawing@) { Drawing@; } Over = (Drawing@ below, Drawing@ above) {
  Drawing@(over: @(below, above));
};

# Transform all of the coordinates in the given drawing.
((Point@) { Point@; }, Drawing@) { Drawing@; }
Transform = ((Point@) { Point@; } f, Drawing@ d) {
  ?(d; blank: d,
       quad: Drawing@(quad: @(
           a: f(d.quad.a),
           b: f(d.quad.b),
           c: f(d.quad.c),
           d: f(d.quad.d),
           color: d.quad.color)),
       over: {
         d.over;
         Over(Transform(f, below), Transform(f, above));
       });
};

@(Color@, Drawing@, Point@, Blank, Rect, Over, Transform);
