
% Chars = /Char%.Chars;

@ Int@ = /Int/Int%.Int@;
% 0 = /Int/Int%.0;
% 1 = /Int/Int%.1;
% 2 = /Int/Int%.2;
% 3 = /Int/Int%.3;
% 4 = /Int/Int%.4;
% 5 = /Int/Int%.5;
% 6 = /Int/Int%.6;

% Str = /String%.Str;

@ Test@ = /Test%.Test@;
@ TestResult@ = /Test%.TestResult@;
% Test = /Test%.Test;
% TestSuite = /Test%.TestSuite;

% Unit = /Unit%.Unit;

@ Coord@ = /GameOfLife%.Coord@;
@ World@ = /GameOfLife%.World@;
% World = /GameOfLife%.World;
% EqWorld = /GameOfLife%.EqWorld;
% Step = /GameOfLife%.Step;

# Imports to test compilation.
% _ = /GameOfLife/App%;
% _ = /GameOfLife/Bench%;

# Do a sigle step of the acorn configuration.
# Generation 0:
#   .O.....
#   ...O...
#   OO..OOO 
#   .......
#
# Generation 1:
#   .......
#   OOO.OO.
#   ....OO.
#   .....O.
TestResult@! AcornStep = !({
  (Int@, Int@) { Coord@; } C = (Int@ x, Int@ y) { Coord@(x, y); };

  World@ g0 = World([
    C(0, 1),
    C(1, 3),
    C(2, 0), C(2, 1), C(2, 4), C(2, 5), C(2, 6)
  ]);

  World@ g1 = World([
    C(1, 0), C(1, 1), C(1, 2), C(1, 4), C(1, 5),
    C(2, 4), C(2, 5),
    C(3, 5)
  ]);

  EqWorld(g1, Step(g0)).?(
    true: TestResult@(pass: Unit),
    false: TestResult@(fail: Str(Chars|failed))
  );
});

Test@ Tests = TestSuite(Chars|GameOfLife, [
  Test(Chars|AcornStep, AcornStep)
  ]);

@(Tests);
