
% Chars = /Char%.Chars;

@ Bit@ = /Digits%.Bit@;
% B = /Digits%.Bit;

@ Addr@ = /Fblf/Program%.Addr@;
@ Program@ = /Fblf/Program%.Program@;
% Assign = /Fblf/Program%.Assign;
% Const = /Fblf/Program%.Const;
% Seq = /Fblf/Program%.Seq;

<@>% AllocM = /Fblf/Module%.AllocM;
<@>% PureM = /Fblf/Module%.PureM;
<@,@>% InstM = /Fblf/Module%.InstM;

% I = /Int/Int/Lit%.I;
% D = /Int/Int/Lit%.D;

<@>% List = /List%.List;

% AndM = /Fblf/Lib/Bitwise%.AndM;
% OrM = /Fblf/Lib/Bitwise%.OrM;
% XorM = /Fblf/Lib/Bitwise%.XorM;
% NotM = /Fblf/Lib/Bitwise%.NotM;
% ClsM = /Fblf/Lib/Bitwise%.ClsM;

@ Test@ = /Fblf/Test%.Test@;
@ TestInstance@ = /Fblf/Test%.TestInstance@;
% Test = /Fblf/Test%.Test;
% TestSuite = /Fblf/Test%.TestSuite;

Test@ Tests = TestSuite(Chars|'Bitwise', [
  Test(Chars|AndM, {
    Addr@ a <- AllocM<TestInstance@>(I(D|4));
    Addr@ b <- AllocM<TestInstance@>(I(D|4));
    Addr@ z <- AllocM<TestInstance@>(I(D|4));
    Program@ and <- InstM<Program@, TestInstance@>(AndM(I(D|4), a, b, z));

    Program@ test = Seq([
      Assign(a, Const(B|0011), I(D|4)),
      Assign(b, Const(B|0110), I(D|4)),
      Assign(z, Const(B|0000), I(D|4)),
      and
    ]);

    PureM<TestInstance@>(TestInstance@(test, I(D|0), List<Bit@>(B|001101100010)));
  }),

  Test(Chars|OrM, {
    Addr@ a <- AllocM<TestInstance@>(I(D|4));
    Addr@ b <- AllocM<TestInstance@>(I(D|4));
    Addr@ z <- AllocM<TestInstance@>(I(D|4));
    Program@ or <- InstM<Program@, TestInstance@>(OrM(I(D|4), a, b, z));

    Program@ test = Seq([
      Assign(a, Const(B|0011), I(D|4)),
      Assign(b, Const(B|0110), I(D|4)),
      Assign(z, Const(B|0000), I(D|4)),
      or
    ]);

    PureM<TestInstance@>(TestInstance@(test, I(D|0), List<Bit@>(B|001101100111)));
  }),

  Test(Chars|XorM, {
    Addr@ a <- AllocM<TestInstance@>(I(D|4));
    Addr@ b <- AllocM<TestInstance@>(I(D|4));
    Addr@ z <- AllocM<TestInstance@>(I(D|4));
    Program@ xor <- InstM<Program@, TestInstance@>(XorM(I(D|4), a, b, z));

    Program@ test = Seq([
      Assign(a, Const(B|0011), I(D|4)),
      Assign(b, Const(B|0110), I(D|4)),
      Assign(z, Const(B|0000), I(D|4)),
      xor
    ]);

    PureM<TestInstance@>(TestInstance@(test, I(D|0), List<Bit@>(B|001101100101)));
  }),

  Test(Chars|NotM, {
    Addr@ a <- AllocM<TestInstance@>(I(D|4));
    Addr@ z <- AllocM<TestInstance@>(I(D|4));
    Program@ not <- InstM<Program@, TestInstance@>(NotM(I(D|4), a, z));

    Program@ test = Seq([
      Assign(a, Const(B|0011), I(D|4)),
      Assign(z, Const(B|0000), I(D|4)),
      not
    ]);

    PureM<TestInstance@>(TestInstance@(test, I(D|0), List<Bit@>(B|00111100)));
  }),

  Test(Chars|ClsM, {
    Addr@ a <- AllocM<TestInstance@>(I(D|5));
    Addr@ z <- AllocM<TestInstance@>(I(D|5));
    Program@ cls <- InstM<Program@, TestInstance@>(ClsM(I(D|5), I(D|3), a, z));

    Program@ test = Seq([
      Assign(a, Const(B|10011), I(D|5)),
      Assign(z, Const(B|00000), I(D|5)),
      cls
    ]);

    PureM<TestInstance@>(TestInstance@(test, I(D|0), List<Bit@>(B|1001111100)));
  })
]);

@(Tests);
