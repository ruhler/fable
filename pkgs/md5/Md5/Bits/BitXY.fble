
@ Bool@ = /Core/Bool%.Bool@;

<@>@ Bits@ = /Md5/Bits/Bits%.Bits@;
<@>@ Overflow@ = /Md5/Bits/Bits%.Overflow@;


<@ X@>(Bits@<X@> X)<@ Y@>(Bits@<Y@> Y) {

  @ BitXY@ = *(X@ hi, Y@ lo);

  (BitXY@) { BitXY@; } Not = (BitXY@ a) {
    BitXY@(X.Not(a.hi), Y.Not(a.lo));
  };

  (BitXY@, BitXY@) { BitXY@; } And = (BitXY@ a, BitXY@ b) {
    BitXY@(X.And(a.hi, b.hi), Y.And(a.lo, b.lo));
  };

  (BitXY@, BitXY@) { BitXY@; } Or = (BitXY@ a, BitXY@ b) {
    BitXY@(X.Or(a.hi, b.hi), Y.Or(a.lo, b.lo));
  };

  (BitXY@, BitXY@) { BitXY@; } Xor = (BitXY@ a, BitXY@ b) {
    BitXY@(X.Xor(a.hi, b.hi), Y.Xor(a.lo, b.lo));
  };

  (BitXY@, BitXY@, /Md5/Bits/Bit1%.Bit1@) { Overflow@<BitXY@>; }
  Addx = (BitXY@ a, BitXY@ b, /Md5/Bits/Bit1%.Bit1@ cin) {
    Overflow@<Y@> rlo = Y.Addx(a.lo, b.lo, cin);
    Overflow@<X@> rhi = X.Addx(a.hi, b.hi, rlo.out);
    Overflow@(BitXY@(rhi.x, rlo.x), rhi.out);
  };

  (BitXY@, BitXY@) { BitXY@; } Add = (BitXY@ a, BitXY@ b) {
    Addx(a, b, /Md5/Bits/Bit1%.Bits.0).x;
  };

  (BitXY@) { Overflow@<BitXY@>; } Incx = (BitXY@ a) {
    Overflow@<Y@> rlo = Y.Incx(a.lo);
    rlo.out.?(0: Overflow@(BitXY@(a.hi, rlo.x), /Md5/Bits/Bit1%.Bits.0));

    Overflow@<X@> rhi = X.Incx(a.hi);
    Overflow@(BitXY@(rhi.x, rlo.x), rhi.out);
  };

  (BitXY@) { BitXY@; } Inc = (BitXY@ a) {
    Incx(a).x;
  };

  BitXY@ 0 = BitXY@(X.0, Y.0);

  (BitXY@) { Bool@; } IsZero = (BitXY@ a) {
    /Core/Bool%.And(X.IsZero(a.hi), Y.IsZero(a.lo));
  };

  (BitXY@, BitXY@) { Bool@; } Eq = (BitXY@ a, BitXY@ b) {
    /Core/Bool%.And(X.Eq(a.hi, b.hi), Y.Eq(a.lo, b.lo));
  };

  (BitXY@) { /Md5/Bits/Bit1%.Bit1@; } Msb = (BitXY@ a) {
    X.Msb(a.hi);
  };

  (BitXY@, /Md5/Bits/Bit1%.Bit1@) { Overflow@<BitXY@>; }
  Shlx = (BitXY@ a, /Md5/Bits/Bit1%.Bit1@ cin) {
    Overflow@<Y@> rlo = Y.Shlx (a.lo, cin);
    Overflow@<X@> rhi = X.Shlx (a.hi, rlo.out);
    Overflow@(BitXY@(rhi.x, rlo.x), rhi.out);
  };

  Bits@<BitXY@> Bits = Bits@<BitXY@>(
    Not, And, Or, Xor, Add, Inc, 0, IsZero, Eq, Msb,
    Addx, Incx, Shlx
  );

  @(BitXY@, Bits);
};
