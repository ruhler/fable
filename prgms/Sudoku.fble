{ Bool%; @(Bool@, True); };
{ Char%; @(Char@, newline); };
{ List%; @(S@, S0, S, ConsS, Append, Concat); };
{ Maybe%; @(Maybe@, Just, Nothing, For); };
{ String%; @(Str@, Str); };
{ Unit%; @(Unit@, Unit); };

# The 9 symbols used in sudoku: 1 through 9.
@ Symbol@ = +(
  Unit@ 1, Unit@ 2, Unit@ 3,
  Unit@ 4, Unit@ 5, Unit@ 6,
  Unit@ 7, Unit@ 8, Unit@ 9);

Symbol@ 1 = Symbol@(1: Unit);
Symbol@ 2 = Symbol@(2: Unit);
Symbol@ 3 = Symbol@(3: Unit);
Symbol@ 4 = Symbol@(4: Unit);
Symbol@ 5 = Symbol@(5: Unit);
Symbol@ 6 = Symbol@(6: Unit);
Symbol@ 7 = Symbol@(7: Unit);
Symbol@ 8 = Symbol@(8: Unit);
Symbol@ 9 = Symbol@(9: Unit);

# Iterate over the symbols in order.
(Symbol@){ Maybe@<Symbol@>; } IterateSymbol = (Symbol@ s) {
  (Symbol@){ Maybe@<Symbol@>; } J = Just<Symbol@>;
  ?(s;
    1: J(2), 2: J(3), 3: J(4),
    4: J(5), 5: J(6), 6: J(7),
    7: J(8), 8: J(9), 9: Nothing<Symbol@>);
};

# An array of elements of type T@, indexed by symbol.
<@>@ Array@ = <@ T@>(Symbol@){ T@; };

# Set the value of a single element of an array.
#   a[s] = x
<@ T@>(Symbol@, T@, Array@<T@>){ Array@<T@>; }
Set = <@ T@>(Symbol@ s, T@ x, Array@<T@> a) {
  T@ a1 = ?(s; 1: x, : a(1));
  T@ a2 = ?(s; 2: x, : a(2));
  T@ a3 = ?(s; 3: x, : a(3));
  T@ a4 = ?(s; 4: x, : a(4));
  T@ a5 = ?(s; 5: x, : a(5));
  T@ a6 = ?(s; 6: x, : a(6));
  T@ a7 = ?(s; 7: x, : a(7));
  T@ a8 = ?(s; 8: x, : a(8));
  T@ a9 = ?(s; 9: x, : a(9));
  (Symbol@ k) {
    ?(k;
      1: a1, 2: a2, 3: a3,
      4: a4, 5: a5, 6: a6,
      7: a7, 8: a8, 9: a9);
  };
};

# A cell is identified by its row and column.
@ CellId@ = *(Symbol@ row, Symbol@ col);

# A group is identified by whether it is a row, column, or box, and which row,
# column, or box it is. Rows are numbered top to bottom. Columns are numbered
# left to right. Boxes are numbered left to right, top to bottom.
@ GroupId@ = +(Symbol@ row, Symbol@ col, Symbol@ box);

# A set of symbols.
@ Set@ = Array@<Bool@>;

# The set of all possible symbols.
Set@ FullSet = (Symbol@ s) { True; };

# Return the singleton value of a set, if it is a singleton set. Return
# Nothing if it is not a singleton set.
(Set@){ Maybe@<Symbol@>; } Singleton = (Set@ set) {
  @ State@ = +(Unit@ empty, Symbol@ single, Unit@ multi);

  State@ state = For<Symbol@, State@>(1, State@(empty: Unit), IterateSymbol,
    (Symbol@ symbol, State@ state) {
       ?(set(symbol);
          true: ?(state;
            empty: State@(single: symbol),
            single: State@(multi: Unit),
            multi: state),
          false: state);
  });
  ?(state; empty: Nothing<Symbol@>,
           single: Just<Symbol@>(state.single),
           multi: Nothing<Symbol@>);
};

# For each Cell, we keep track of the set of possible symbols the cell may
# take on.
@ Cell@ = Set@;
Cell@ InitialCell = FullSet;

# 2D array of cells. The first index is the row, the second index is the
# column.
@ Cells@ = Array@<Array@<Cell@>>;
Cells@ InitialCells = (Symbol@ r, Symbol@ c) { InitialCell; };

# For each symbol of each group, we keep track of the set of possible cells
# that could take on that symbol value. The cells are identified relative to
# their position in the group.
@ Group@ = Array@<Set@>;
Group@ InitialGroup = (Symbol@ s) { FullSet; };

# The set of 3*9 groups in the board.
@ Groups@ = *(Group@ row, Group@ col, Group@ box);
Groups@ InitialGroups = Groups@(InitialGroup, InitialGroup, InitialGroup);

# A board keeps track of possible values for cells and symbols of each group.
@ Board@ = *(Cells@ cells, Groups@ groups);
Board@ InitialBoard = Board@(InitialCells, InitialGroups);

# An assignment of a symbol value to a particular cell.
@ Assign@ = *(CellId@ cell, Symbol@ symbol);

# The result of assigning a value to a particular cell.
# You get a new board and you get a set of new possible constraints.
@ AssignResult@ = *(Board@ board, S@<Assign@> assigns);

# Set the value of a cell on the board.
# Results in an updated board and a set of new assignments to make.
(Board@, Assign@) { AssignResult@; } Assign = (Board@ b, Assign@ x) {
   # TODO Me.
   AssignResult@(b, S0<Assign@>);
};

# Make all the given assignments to the board, and all resulting assignments,
# until there is nothing left to do.
(Board@, S@<Assign@>) { Board@; } AssignAll = (Board@ b, S@<Assign@> l) {
  ?(l;
    cons: {
      AssignResult@ ar = Assign(b, l.cons.head);
      AssignAll(ar.board, Append<Assign@>(l.cons.tail, ar.assigns));
    },
    nil: b);
};

# Print a board.
# If spaced is true, insert whitespace to make it more legible.
# Otherwise, don't include any whitespace in the output.
(Bool@, Board@) { Str@; } ShowBoard = (Bool@ spaced) {
  (Symbol@) { Str@; } ShowSymbol = (Symbol@ s) {
    ?(s; 1: Str(Char@|1), 2: Str(Char@|2), 3: Str(Char@|3),
         4: Str(Char@|4), 5: Str(Char@|5), 6: Str(Char@|6),
         7: Str(Char@|7), 8: Str(Char@|8), 9: Str(Char@|9));
  };

  (Maybe@<Symbol@>) { Str@; } ShowMaybeSymbol = (Maybe@<Symbol@> m) {
    ?(m; just: ShowSymbol(m.just), nothing: Str(Char@|'.'));
  };

  (Cell@) { Str@; } ShowCell = (Cell@ cell) {
    ShowMaybeSymbol(Singleton(cell));
  };

  Str@ space = ?(spaced; true: Str(Char@|' '), false: S0<Char@>);
  Str@ nl = ?(spaced; true: S<Char@>([newline]), false: S0<Char@>);

  (Array@<Cell@>) { Str@; } ShowRow = (Array@<Cell@> row) {
    Concat<Char@>(S<Str@>([
      ShowCell(row(1)), ShowCell(row(2)), ShowCell(row(3)), space,
      ShowCell(row(4)), ShowCell(row(5)), ShowCell(row(6)), space,
      ShowCell(row(7)), ShowCell(row(8)), ShowCell(row(9)), nl
    ]));
  };

  (Board@ board) {
    Cells@ cells = board.cells;
    Concat<Char@>(S<Str@>([
      ShowRow(cells(1)), ShowRow(cells(2)), ShowRow(cells(3)), nl,
      ShowRow(cells(4)), ShowRow(cells(5)), ShowRow(cells(6)), nl,
      ShowRow(cells(7)), ShowRow(cells(8)), ShowRow(cells(9))
    ]));
  };
};

# Parse a set of assignments specified as a string of 89 characters specifying
# cell values. digits '1' through '9' are considered cell assignments. Any
# other character is interpreted as no assignment to that cell.
#
# For example, the initial board:
#
#   8.. .9. ..2
#   72. ... .49
#   ... 3.6 ...
#              
#   .5. .8. .16
#   ..9 ... 3..
#   67. .5. .9.
#              
#   ... 9.1 ...
#   96. ... .54
#   1.. .4. ..7
# 
# Is described using the string:
#
# 8...9...272.....49...3.6....5..8..16..9...3..67..5..9....9.1...96.....541...4...7
(Str@) { S@<Assign@>; } ParseAssigns = {
  (Symbol@){ Maybe@<Symbol@>; } J = Just<Symbol@>;

  (Str@, CellId@) { S@<Assign@>; } f = (Str@ str, CellId@ cell) {
    ?(str;
      cons: {
        Maybe@<Symbol@> mncol = IterateSymbol(cell.col);
        Symbol@ ncol = ?(mncol; just: mncol.just, nothing: 1);

        Maybe@<Symbol@> mnrow = ?(mncol;
          just: Just<Symbol@>(cell.row),
          nothing: IterateSymbol(cell.row));
        Symbol@ nrow = ?(mnrow; just: mnrow.just, nothing: 1);

        S@<Assign@> tail = f(str.cons.tail, CellId@(nrow, ncol));
        Maybe@<Symbol@> this = ?(str.cons.head;
          '1': J(1), '2': J(2), '3': J(3),
          '4': J(4), '5': J(5), '6': J(6),
          '7': J(7), '8': J(8), '9': J(9),
             : Nothing<Symbol@>);
        ?(this; just: ConsS<Assign@>(Assign@(cell, this.just), tail),
                nothing: tail);
      },
      nil: S0<Assign@>);
  };

  (Str@ str) { f(str, CellId@(1, 1)); };
};

# Solve a board as much as possible.
(Str@) { Str@; } Solve = (Str@ board) {
  ShowBoard(True, AssignAll(InitialBoard, ParseAssigns(board)));
};

# 8.. .9. ..2     816 497 532 
# 72. ... .49     723 518 649 
# ... 3.6 ...     495 326 781 
#                             
# .5. .8. .16     354 789 216 
# ..9 ... 3..     289 164 375 
# 67. .5. .9.     671 253 498 
#                             
# ... 9.1 ...     542 971 863 
# 96. ... .54     967 832 154 
# 1.. .4. ..7     138 645 927 

@(Solve);
