
@ Bool@ = /Core/Bool%.Bool@;

@ Drawing@ = /App/Drawing%.Drawing@;

@ Int@ = /Core/Int%.Int@;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<@>@ List@ = /Core/List%.List@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;

@ Key@ = +(
  Unit@ a, Unit@ d, Unit@ h, Unit@ j, Unit@ k, Unit@ l,
  Unit@ q, Unit@ s, Unit@ w,
  Unit@ left, Unit@ right, Unit@ up, Unit@ down,
  Unit@ space, Unit@ lshift, Unit@ rshift
);

@ Resize@ = *(
  Int@ width,
  Int@ height
);

@ Button@ = +(Unit@ left, Unit@ right);
@ MouseButton@ = *(Button@ button, Int@ x, Int@ y);

@ MouseMotion@ = *(
  Int@ x,     # Final x position of mouse in screen coordinates.
  Int@ y,     # Final y position of mouse in screen coordinates.
  Int@ dx,    # Change in x position since previous mouse motion event.
  Int@ dy     # Change in y position since previous mouse motion event.
);

@ Event@ = +(
  Unit@ tick,      # A tick event has occured in response to a tick request
  Key@ key_down,   # A key was pressed down.
  Key@ key_up,     # A key was released.
  MouseButton@ mouse_down,  # A mouse button was pressed.
  MouseButton@ mouse_up,    # A mouse button was released.
  Resize@ resize,  # The window was resized.
  MouseMotion@ mouse_motion   # The mouse has moved.
);

@ Effect@ = +(
  # Request for a tick Event@ to occur after the given number of milliseconds.
  # Time is relative to the time of delivery of the last requested tick event.
  # The tick will be delivered immediately if its delivery time is in the past
  # according to wall clock time.
  Int@ tick,

  # Draw to the screen.
  #
  # Coordinate (0, 0) is the upper left of the screen, with the positive x
  # access going towards the right edge of the screen and the positive y
  # access going towards the bottom edge of the screen.
  # 
  # The drawing is clipped to fit in the screen area.
  #
  # It is undefined how pixels not specified in the drawing will be displayed.
  Drawing@ draw
);

# App@ --
#   Interface for application input and output operations.
<<@>@>@ App@ = <<@>@ M@> { *(
  M@<Event@> event,
  (Effect@) { M@<Unit@>; } effect);
};

# Main@ --
#   Interface for an App.
#
# Inputs:
#   M@ - An abstract computation type.
#   monad - The monad interface for M@.
#   stdio - A Stdio@ interface for M@.
#   app - The app interface for M@.
#   width - The initial width of the screen.
#   height - The initial height of the screen.
#   args - The list of arguments to the application.
#
# Results:
#   True if the program ran successfully and should exit zero. False if the
#   program failed and should exit non-zero.
<<@>@>@ Main@ = <<@>@ M@>(
  Monad@<M@>, Stdio@<M@>,
  App@<M@>, Int@, Int@)(List@<String@>) { M@<Bool@>; };

@(App@, Main@, Key@, Resize@, Event@, Effect@);
