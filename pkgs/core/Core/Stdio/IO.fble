@ Bool@ = /Core/Bool%.Bool@;

@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Nothing = /Core/Maybe%.Nothing;
<@>% Just = /Core/Maybe%.Just;

<@>@ IO@ = /Core/Monad/IO%.IO@;
@ World@ = /Core/Monad/IO%.World@;
<@>@ R@ = /Core/Monad/IO%.R@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;
<<@>@>@ OStream@ = /Core/Stream%.OStream@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;

% Builtin = /Core/Stdio/IO/Builtin%;

@ StdioIO@ = *(
  IO@<Maybe@<Int@>> stdin,
  (Int@, World@) { R@<Unit@>; } stdout,
  (Int@, World@) { R@<Unit@>; } stderr,
  (String@, World@) { R@<Maybe@<IStream@<IO@>>>; } read,
  (String@, World@) { R@<Maybe@<(Int@, World@) { R@<Unit@>; }>>; } write,
  (String@, World@) { R@<Maybe@<String@>>; } getenv
);

(StdioIO@) { Stdio@<IO@>; } StdioIO = (StdioIO@ _unused) {
  @(
    in: Builtin.Stdin,
    out: (Int@ s, World@ w) { Builtin.Stdout(s, w); },
    err: (Int@ s, World@ w) { Builtin.Stderr(s, w); },
    read: (String@ s, World@ w) { Builtin.Read(s, w); },
    write: (String@ s, World@ w) {
      R@<Maybe@<(Int@, World@) { R@<Unit@>; }>> r = Builtin.Write(s, w);
      r.x.?(nothing: @(s: r.s, x: Nothing<OStream@<IO@>>));
      @(s: r.s, x: Just((Int@ s, World@ w) { r.x.just(s, w); }));
    },
    getenv: (String@ s, World@ w) { Builtin.GetEnv(s, w); }
   );
};

@ Main@ = (StdioIO@, List@<String@>) { IO@<Bool@>; };

# Run --
#   A top-level IO implementation for running a Stdio Main@ program.
(/Core/Stdio%.Main@) { Main@; }
Run = (/Core/Stdio%.Main@ main, StdioIO@ stdio, List@<String@> args) {
  main<IO@>(/Core/Monad/IO%.Monad, StdioIO(stdio), args);
};

@(StdioIO@, Main@, StdioIO, Run);
