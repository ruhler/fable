

@ IntP@ = /Int/IntP%.IntP@;
% 1 = /Int/IntP%.1;
% 3 = /Int/IntP%.3;
% 10 = /Int/IntP%.10;
% Lit2 = /Int/IntP%.Lit2;

% Eq = /Int/IntP/Eq%.Eq;

@ IntS@ = /Int/IntS%.IntS@;

<@>% List = /List%.List;

% NthPrime = /Primes%.NthPrime;

@ String@ = /String%.String@;
% Str = /String%.Str;

@ Test@ = /Test%.Test@;
@ TestResult@ = /Test%.TestResult@;
% Test = /Test%.Test;
% TestSuite = /Test%.TestSuite;

% Unit = /Unit%.Unit;

(String@, IntP@, IntP@){ Test@; } TEq = (String@ name, IntP@ a, IntP@ b) {
  Test(name, !({
    # TODO: Better error message in case of failure.
    Eq(a, b).?(
        true: TestResult@(pass: Unit),
        false: TestResult@(fail: Str|failed));
  }));
};

Test@ NthPrime_1_10 = TEq(Str|'NthPrime_1_10', Lit2(3, 1), NthPrime(1, IntS@(p: 10)));

Test@ Tests = TestSuite(Str|Primes, List<Test@>[NthPrime_1_10]);

@(Tests);
