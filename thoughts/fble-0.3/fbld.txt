Fbld Improvements
=================
The big issue with fbld right now is lack of modularity. We have to know or
assume what order .fbld files are concatenated together, which is hard to
manage.

What feature or builtin or syntax can we add to fix this?

Practically speaking, what do I want?
* A way to 'include' another .fbld file, to bring into the environment all the
  commands it defines.
* A way to 'require' an interface, to bring into the environment a bunch of
  known commands, where we don't know at run time which implement set of those
  commands we get?
* Maybe a way to define a set of expected 'free' commands that are not to be
  processed this pass?
* If the same module is included multiple times, ideally we can do some
  sharing to improve memory use and performance.

Ideally this gives us namespace management, so we can tell (statically?) if we
are referring to an undefined command or using the wrong number of arguments.
And we don't have to worry about polluting the namespace of other modules.
So... we would want some sort of namespace control of explicit import/export
or a struct like field access operation?

Structs could be useful elsewhere too.

---

Question that's come up:

How to start a paragraph with inline text after a literal @code[...] @ block?
Adding a space at the start of the line makes it become part of the @code
block.

So, using space at the start of the line is not a good choice to distinguish
between inline and block command, because it's ambiguous. Maybe best to come
up with a better syntax.

Brainstorm, on an example:

  Hello there.

  @l{Foo} is a word.


Today we use:

  Hello there.

   @l{Foo} is a word.

Some alternative brainstorm:

  Hello there.

  @@l{Foo} is a word.

  Hello there.

  \@l{Foo} is a word.

The @@ seems reasonable to me actually. The important thing is to have
something there. Why not make this change? It's a rare case, no?

Any ambiguity in the syntax using @@? It would be with '@@\n.' But we always
check for \n, so that should be fine.

Okay, let's make this change. Should be simple enough. The hard part will be
tracking down where we use the ' @'. Maybe add a temporary error in that case
we can use to fix it up.

