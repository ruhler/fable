@(Unit_, Bool_, Char_, List_) {
  Unit_ { @(Unit@, Unit); };
  Bool_ { @(Bool@, True, False, AndMonoid); };
  Char_ { @(Char@, Chars); };
  List_ { @(S@, P@, S0, S1, S2, S3, S4, S5, S6, Append, Concat, MapS, SeqS,
            AndS); };

  @ TestName@ = S@<Char@>;
  @ TestResult@ = +(Unit@ pass, S@<Char@> fail);
  @ Test@ = *(TestName@ name, TestResult@! test);

  S@<Char@> failed = { Chars; S6<Char@>(F, A, I, L, E, D); };

  # Print a string to the given output stream.
  (S@<Char@>+, S@<Char@>){ Unit@!; } Print = (S@<Char@>+ out, S@<Char@> str) {
    S@<Char@> _ := out(str);
    $(Unit);
  };

  # Print a string and newline to the given output stream.
  (S@<Char@>+, S@<Char@>){ Unit@!; } PrintLn = (S@<Char@>+ out, S@<Char@> str) {
    S@<Char@> _ := out(Append<Char@>(str, S1<Char@>(Chars.nl)));
    $(Unit);
  };

  # Returns True if the tests all pass, false otherwise.
  (S@<Char@>+, S@<Test@>){Bool@!;} RunTests = (S@<Char@>+ out, S@<Test@> tests) {
    SeqS<Bool@>(AndMonoid, {
      Test@ test <- MapS<Test@, Bool@!>(tests);
      Unit@ _ := Print(out, test.name);
      TestResult@ tr := test.test;
      ?(tr; pass: {
              Unit@ _ := PrintLn(out, S0<Char@>);
              $(True);
            },
            fail: {
              Unit@ _ := PrintLn(out, Concat<Char@>(S4<S@<Char@>>(
                S2<Char@>(Chars.colon, Chars.space),
                failed,
                S2<Char@>(Chars.colon, Chars.space),
                tr.fail)));
              $(False);
            });
    });
  };

  S@<Test@> Tests = {
    TestName@ prefix = { Chars; S5<Char@>(T, e, s, t, period); };
    (TestName@){TestName@;} name = (TestName@ nm) {
      Append<Char@>(prefix, nm);
    };

    Test@ pass = Test@(
      name({ Chars; S4<Char@>(p, a, s, s); }),
      $(TestResult@(pass: Unit)));

    Test@ fail = Test@(
      name({ Chars; S4<Char@>(f, a, i, l); }),
      $(TestResult@(fail: failed)));

    S1<Test@>(pass);
  };

  @(TestName@, TestResult@, Test@, RunTests, Tests);
};
