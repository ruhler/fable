
@ Point@ = /App/Drawing%.Point@;

@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;
% Sub = /Core/Int%.Sub;
% Mul = /Core/Int%.Mul;
% Neg = /Core/Int%.Neg;
% Lt = /Core/Int/Eq%.Lt;
% Ge = /Core/Int/Eq%.Ge;
% Div = /Core/Int/Div%.Div;
% Int = /Core/Int/Lit%.Int;

@ Mat@ = /Graphics/3D%.Mat@;
@ Vec@ = /Graphics/3D%.Vec@;
% AddV = /Graphics/3D%.AddV;
% SubV = /Graphics/3D%.SubV;
% MulMV = /Graphics/3D%.MulMV;
% DivVS = /Graphics/3D%.DivVS;
% Transpose = /Graphics/3D%.Transpose;

@ SinCos@ = /Graphics/Camera/SinCos%.SinCos@;
% SinCos = /Graphics/Camera/SinCos%.SinCos;

# Rect@ --
#   Describes a rectangle with the lower left corner at (x, y), of width w and
#   height h.
@ Rect@ = *(Int@ x, Int@ y, Int@ w, Int@ h);

# Camera@ --
#   Describes the position and direction of the camera.
#
# Fields:
#   pos - The position of the camera, scaled by the factor RotF.
#   angle -
#     Describes the rotation of the camera as an angle of rotation about the Y
#     axis in the direction given by the right hand rule, scaled by RotF/2π.
#     An angle of 0 has the camera pointed in the z direction of a left handed
#     coordinate system:
#       +x is drawn to the right of the screen.
#       +y is drawn to the top of the screen.
#       +z is drawn going into the screen.
#   rot -
#     Rotation matrix transformation that transforms a point into the view of
#     the camera. rot is an orthnormal matrix scaled by the factor RotF,
#     derived from the 'angle' field and kept around for convenience.
#   focus -
#     The distance from the camera to the focus plane. That is, the distance
#     from the camera at which points are not scaled at all. An object halfway
#     between the camera and focus plane will appear twice the object's actual
#     size. An object twice as far from the camera as the focus plane will
#     appear half the object's actual size.
#   clip -
#     The clipping rectangle. Any points on the focus plane outside the
#     clip rectangle will not be drawn.
@ Camera@ = *(Vec@ pos, Int@ angle, Mat@ rot, Int@ focus, Rect@ clip);

# RotF --
#   The scale factor used for the camera rotation.
Int@ RotF = Int|256;

# Angle --
#   Canonicalize the value for an angle by putting it in the range [0, RotF).
(Int@) { Int@; } Angle = (Int@ a) {
  Lt(a, Int|0).?(true: Angle(Add(a, RotF)));
  Ge(a, RotF).?(true: Angle(Sub(a, RotF)));
  a;
};

# Rotation --
#   Computation the rotation matrix for the given angle rotation around the Y
#   axis.
#
# The angle is assumed to be in the range [0, RotF).
(Int@) { Mat@; } Rotation = (Int@ angle) {
  SinCos@ sc = SinCos(angle);
  Int@ c = sc.cos;
  Int@ s = sc.sin;

  # Imagine we are rotated 90 degrees: sin = 1, cos = 0, and we are now facing
  # in the -x direction instead of the +z direction. We expect the rotation
  # matrix to map absolute ==> camera coordinates:
  #   (1, 0, 0) ==> ( 0,  0, -1 )  (+x looks like -z to the camera)
  #   (0, 1, 0) ==> ( 0,  1,  0 )  (+y looks like +y to the camera)
  #   (0, 0, 1) ==> ( 1,  0,  0 )  (+z looks like +x to the camera)
  Mat@(
    Vec@(c, Int|0, Neg(s)),
    Vec@(Int|0, RotF, Int|0),
    Vec@(s, Int|0, c));
};

# Camera --
#   A camera at the origin facing towards the +z axis, with +x to the right of
#   the screen, +y to the top of the screen, and +z going into the screen,
#   with the given distance between camera and focus plane and clipping
#   rectangle.
(Int@, Rect@) { Camera@; } Camera = (Int@ focus, Rect@ clip) {
  Camera@(Vec@(Int|0, Int|0, Int|0), Int|0, Rotation(Int|0), focus, clip);
};

# Translate --
#   Move the camera by the given x, y, and z coordinates, relative to the
#   camera's current orientation.
(Int@, Int@, Int@, Camera@) { Camera@; }
Translate = (Int@ x, Int@ y, Int@ z, Camera@ camera) {
  # rot maps from points in the absolute reference frame to the camera
  # reference frame. To determine how far to move the camera in the absolute
  # reference frame, we want to map the given (x, y, z) from the camera
  # reference to the absolute reference frame, so we take the inverse of the
  # rotation matrix, which is the same as the transpose for an orthonormal
  # matrix.
  #
  # Note: v_cam is in units of 1, v_abs is in units of 256, with the scaling
  # introduced by the camera rotation matrix.
  Vec@ v_cam = Vec@(x, y, z);
  Vec@ v_abs = MulMV(Transpose(camera.rot), v_cam);
  Camera@(AddV(camera.pos, v_abs), camera.angle, camera.rot, camera.focus,
    camera.clip);
};

# RotateY --
#   Rotate the camera about the Y axis by the given amount, in units of
#   2π/RotF.
(Int@, Camera@) { Camera@; } RotateY = (Int@ angle, Camera@ camera) {
  Int@ a = Angle(Add(angle, camera.angle));
  Camera@(camera.pos, a, Rotation(a), camera.focus, camera.clip);
};

# Focus --
#   Increase the distance to the focus plane by the given amount.
(Int@, Camera@) { Camera@; } Focus = (Int@ focus, Camera@ camera) {
  Camera@(camera.pos, camera.angle, camera.rot, Add(camera.focus, focus),
    camera.clip);
};

# Vertex --
#   Create a vertex out of a 3D point given the current camera.
#
# Maps from world coordinates to camera coordinates before projection to the
# screen.
(Camera@, Vec@) { Vec@; }
Vertex = (Camera@ camera, Vec@ p) {
  # Put the camera at the origin.
  Vec@ p_translated = SubV(p, DivVS(camera.pos, RotF));

  # Rotate the point around the origin/camera.
  DivVS(MulMV(camera.rot, p_translated), RotF);
};

# Perspective --
#   Apply perspective to a 3D point to convert it to a 2D point as seen by the
#   given camera.
(Camera@, Vec@) { Point@; } Perspective = (Camera@ camera, Vec@ p) {
  Point@(
    Div(Mul(camera.focus, p.x), p.z).q,
    Div(Mul(camera.focus, p.y), p.z).q);
};

@(Camera@, Rect@, RotF, Camera, Translate, RotateY, Focus, Vertex, Perspective);

