
<<@>@>@ Monad@ = /Core/Monad%.Monad@;

@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>% Length = /Core/List/Length%.Length;

% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Unit@ = /Core/Unit%.Unit@;

@ Command@ = /Fbld/Command%.Command@;

<@>% Err = /Fbld/Result%.Err;

@ StringL@ = /Fbld/StringL%.StringL@;


(StringL@) { StringL@; } Unescape = (StringL@ s) {
  StringL@(/Fbld/Unescape%.Unescape(s.str), s.loc);
};

<<@>@ M@>(Monad@<M@> m) {
  % Run = /Fbld/Run%(m);

  @ MRU@ = M@</Fbld/Result%.Result@<Unit@>>;
  @ Invoke@ = /Fbld/Invoke%<M@>.Invoke@;
  @ Env@ = /Fbld/Invoke%<M@>.Env@;

  % MarkupModule = /Fbld/Markup%(m);
  @ Markup@ = MarkupModule.Markup@;
  % Markup = MarkupModule.Markup;
  % Entry = MarkupModule.Entry;

  # Core document interface.
  @ Core@ = *(
    # @text[ESCAPED text]
    # An explicit tag for default inline text.
    # @param text  The text to unescape.
    (StringL@) { MRU@; } text,

    # @l[ESCAPED text]
    # A literal string.
    # The text is highlighted as bold or monospace font, for example.
    # @param text  The text to highlith.
    (StringL@) { MRU@; } l,

    # @a[ESCAPED text]
    # An argument.
    # The text is highlighted using italics, for example.
    # @param text  The text to highlight.
    (StringL@) { MRU@; } a,

    # @label[ESCAPED id][INLINE text]
    # Give a label to a point in the text.
    # For use as a target of local or external references.
    # @param id  The id to use for the lable.
    # @param text  The text to display for the label target.
    (StringL@, MRU@) { MRU@; } label,

    # @ref[ESCAPED id][INLINE caption]
    # Refer to a locally defined label.
    # @param id  The id of a @label to link to.
    # @param caption  Text to display.
    (StringL@, MRU@) { MRU@; } ref,

    # @url[ESCAPED url][? INLINE text]
    # Reference a url.
    # @param url  The target url.
    # @param text  Optional text to display. Defaults to the url.
    (StringL@, MRU@) { MRU@; } url,

    # @file[ESCAPED file][? INLINE text]
    # Reference a file on disk.
    # @param file  The path to the file.
    # @param text  Optional text to display. Defaults to the file.
    (StringL@, MRU@) { MRU@; } file,

    # @fbld[ESCAPED file][? INLINE text]
    # Reference to another fbld based document.
    # @param file  The path to the fbld file, optionally followed by #<id>.
    # @param text  Optional text to display. Defaults to the file.
    (StringL@, MRU@) { MRU@; } fbld,

    # @par[INLINE text]
    # A paragraph of text.
    # @param text  The body of the paragraph.
    (MRU@) { MRU@; } par,

    # @item[BLOCK text]
    # A list item.
    # @param text  The text of the item.
    (MRU@) { MRU@; } item,

    # @code[ESCAPED language][ESCAPED text]
    # A source code listing.
    # @param language  The lanuage, e.g. c, python, sh, fble, vim, etc.
    # @param text  The source code text.
    (StringL@, StringL@) { MRU@; } code,

    # @def[INLINE name][INLINE value]
    # A short form definition of a term.
    # @param name  The term to define.
    # @param value  The definition of the term.
    (MRU@, MRU@) { MRU@; } def,

    # @definition[INLINE name][BLOCK value]
    # A long form definition of a term.
    # @param name  The term to define.
    # @param value  The definition of the term.
    (MRU@, MRU@) { MRU@; } definition,

    # @section[INLINE title][BLOCK body]
    #  A top level section.
    #  @arg[title] The tile of the section.
    #  @arg[body] The contents of the section.
    (MRU@, MRU@) { MRU@; } section,

    # @subsection[INLINE title][BLOCK body]
    # A second level section.
    # @param title  The tile of the section.
    # @param body  The contents of the section.
    (MRU@, MRU@) { MRU@; } subsection,

    # @subsubsection[INLINE title][BLOCK body]
    # A third level section.
    # @param title  The tile of the section.
    # @param body  The contents of the section.
    (MRU@, MRU@) { MRU@; } subsubsection,

    # @doc[INLINE title][BLOCK body]
    # Top level entry point for a generic document.
    # @param title  The title of the document.
    # @param body  The contents of the document.
    (MRU@, MRU@) { MRU@; } doc
  );

  # Single argument helper function
  ((Env@, StringL@) { MRU@; }) { Invoke@; }
  A1 = ((Env@, StringL@) { MRU@; } f) {
    (Env@ env, Command@ command) {
      Int@ num_args = Length(command.args);
      /Core/Int/Eq%.Eq(Int|1, num_args ).?(false: {
        m.return(Err<Unit@>(StringL@(Strs[
              Str|'expected 1 arg, but got ',
              /Core/Int/Show%.Show(num_args)], command.name.loc)));
      });

      StringL@ arg = command.args.cons.head;
      f(env, arg);
    };
  };

  # Two argument helper function
  ((Env@, StringL@, StringL@) { MRU@; }) { Invoke@; }
  A2 = ((Env@, StringL@, StringL@) { MRU@; } f) {
    (Env@ env, Command@ command) {
      Int@ num_args = Length(command.args);
      /Core/Int/Eq%.Eq(Int|2, num_args ).?(false: {
        m.return(Err<Unit@>(StringL@(Strs[
              Str|'expected 2 args, but got ',
              /Core/Int/Show%.Show(num_args)], command.name.loc)));
      });

      StringL@ a1 = command.args.cons.head;
      StringL@ a2 = command.args.cons.tail.cons.head;
      f(env, a1, a2);
    };
  };

  # @<tag>[ESCAPED][? INLINE] helper function, where the optional argument
  # defaults to the first argument value.
  ((StringL@, MRU@) { MRU@; }) { Invoke@; }
  EmI = ((StringL@, MRU@) { MRU@; } f) {
    (Env@ env, Command@ command) {
      Int@ num_args = Length(command.args);
      /Core/Int/Eq%.Eq(Int|1, num_args).?(true: {
        StringL@ a1 = command.args.cons.head;
        f(Unescape(a1), Run.Inline(env, a1));
      });

      /Core/Int/Eq%.Eq(Int|2, num_args).?(true: {
        StringL@ a1 = command.args.cons.head;
        StringL@ a2 = command.args.cons.tail.cons.head;
        f(Unescape(a1), Run.Inline(env, a2));
      });

      m.return(Err<Unit@>(StringL@(Strs[
              Str|'expected 1 or 2 args, but got ',
              /Core/Int/Show%.Show(num_args)], command.name.loc)));
    };
  };

  # @<tag>[ESCAPED] helper function
  ((StringL@) { MRU@; }) { Invoke@; } E = ((StringL@) { MRU@; } f) {
    Env@ env, StringL@ arg <- A1;
    f(Unescape(arg));
  };

  # @<tag>[INLINE] helper function
  ((MRU@) { MRU@; }) { Invoke@; } I = ((MRU@) { MRU@; } f) {
    Env@ env, StringL@ arg <- A1;
    f(Run.Inline(env, arg));
  };

  # @<tag>[BLOCK] helper function
  ((MRU@) { MRU@; }) { Invoke@; } B = ((MRU@) { MRU@; } f) {
    Env@ env, StringL@ arg <- A1;
    f(Run.Block(env, arg));
  };

  # @<tag>[ESCAPED][ESCAPED] helper function
  ((StringL@, StringL@) { MRU@; }) { Invoke@; } EE = ((StringL@, StringL@) { MRU@; } f) {
    Env@ env, StringL@ a1, StringL@ a2 <- A2;
    f(Unescape(a1), Unescape(a2));
  };

  # @<tag>[ESCAPED][INLINE] helper function
  ((StringL@, MRU@) { MRU@; }) { Invoke@; } EI = ((StringL@, MRU@) { MRU@; } f) {
    Env@ env, StringL@ a1, StringL@ a2 <- A2;
    f(Unescape(a1), Run.Inline(env, a2));
  };

  # @<tag>[INLINE][INLINE] helper function
  ((MRU@, MRU@) { MRU@; }) { Invoke@; } II = ((MRU@, MRU@) { MRU@; } f) {
    Env@ env, StringL@ a1, StringL@ a2 <- A2;
    f(Run.Inline(env, a1), Run.Inline(env, a2));
  };

  # @<tag>[INLINE][BLOCK] helper function
  ((MRU@, MRU@) { MRU@; }) { Invoke@; } IB = ((MRU@, MRU@) { MRU@; } f) {
    Env@ env, StringL@ a1, StringL@ a2 <- A2;
    f(Run.Inline(env, a1), Run.Block(env, a2));
  };

  (Core@) { Markup@; } InlineMarkup = (Core@ core) {
    Markup[
      Entry(Str|'', E(core.text)),
      Entry(Str|'text', E(core.text)),
      Entry(Str|'l', E(core.l)),
      Entry(Str|'a', E(core.a)),
      Entry(Str|'label', EI(core.label)),
      Entry(Str|'ref', EI(core.ref)),
      Entry(Str|'url', EmI(core.url)),
      Entry(Str|'file', EmI(core.file)),
      Entry(Str|'fbld', EmI(core.fbld))
    ];
  };

  (Core@) { Markup@; } BlockMarkup = (Core@ core) {
    Markup[
      Entry(Str|'', I(core.par)),
      Entry(Str|'par', I(core.par)),
      Entry(Str|'item', B(core.item)),
      Entry(Str|'code', EE(core.code)),
      Entry(Str|'def', II(core.def)),
      Entry(Str|'definition', IB(core.definition)),
      Entry(Str|'section', IB(core.section)),
      Entry(Str|'subsection', IB(core.subsection)),
      Entry(Str|'subsubsection', IB(core.subsubsection)),
      Entry(Str|'doc', IB(core.doc))
    ];
  };

  @(Core@, InlineMarkup, BlockMarkup);
};
