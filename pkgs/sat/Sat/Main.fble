
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

% Chars = /Core/Char%.Chars;

@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Nothing = /Core/Maybe%.Nothing;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Unit@ = /Core/Unit%.Unit@;

@ Formula@ = /Sat/Sat%.Formula@;
@ Result@ = /Sat/Sat%.Result@;
% Solve = /Sat/Sat%.Solve;

<@>@ Parse@ = /Sat/Dimacs%.Parse@;
% ParseLines = /Sat/Dimacs%.ParseLines;
% ShowResult = /Sat/Show%.ShowResult;

<<@>@ M@>(Monad@<M@>, M@<Maybe@<String@>>) { M@<List@<String@>>; }
GetLines = <<@>@ M@>(Monad@<M@> m, M@<Maybe@<String@>> get) {
  Maybe@<String@> next <- m.do(get);
  next.?(nothing: m.return(Nil<String@>));

  List@<String@> tail <- m.do(GetLines(m, get));
  m.return(Cons<String@>(next.just, tail));
};

Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio, List@<String@> args) {
  List@<String@> lines <- m.do(GetLines(m, stdio.in));
  Parse@<Formula@> parsed = ParseLines(lines);
  parsed.?(error: {
    Unit@ _ <- m.do(stdio.err(parsed.error));
    m.return(False);
  });

  Result@ result = Solve(parsed.parsed, Nothing<Int@>);
  Unit@ _ <- m.do(stdio.out(ShowResult(result)));
  Unit@ _ <- m.do(stdio.out(Str[Chars.nl]));
  m.return(True);
};

/Core/Stdio/IO%.Run(Main);
