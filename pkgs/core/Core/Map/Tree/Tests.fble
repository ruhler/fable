
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% And = /Core/Bool%.And;

@ Char@ = /Core/Char%.Char@;

<@>@ Eq@ = /Core/Eq%.Eq@;

<@>% List = /Core/List%.List;
<@>% Append = /Core/List%.Append;

<@>@ Ord@ = /Core/Ord%.Ord@;
@ Ordering@ = /Core/Ord%.Ordering@;
% Lt = /Core/Ord%.Lt;
% Eq = /Core/Ord%.Eq;
% Gt = /Core/Ord%.Gt;

<@>@ Show@ = /Core/Show%.Show@;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Bit1@ = +(Unit@ 0, Unit@ 1);
@ Bit2@ = *(Bit1@ h, Bit1@ l);

Bit2@ A = Bit2@(Bit1@(0: Unit), Bit1@(0: Unit));
Bit2@ B = Bit2@(Bit1@(0: Unit), Bit1@(1: Unit));
Bit2@ C = Bit2@(Bit1@(1: Unit), Bit1@(0: Unit));

Eq@<Bit1@> EqBit1 = (Bit1@ a, Bit1@ b) {
  a.?(
    0: b.?(0: True, 1: False),
    1: b.?(0: False, 1: True));
};

Ord@<Bit1@> OrdBit1 = (Bit1@ a, Bit1@ b) {
  a.?(
    0: b.?(0: Eq, 1: Lt),
    1: b.?(0: Gt, 1: Eq));
};

Show@<Bit1@> ShowBit1 = (Bit1@ x) {
  x.?(0: Str|0, 1: Str|1);
};

Eq@<Bit2@> EqBit2 = (Bit2@ a, Bit2@ b) {
  And(EqBit1(a.h, b.h), EqBit1(a.l, b.l));
};

Ord@<Bit2@> OrdBit2 = (Bit2@ a, Bit2@ b) {
  Ordering@ oh = OrdBit1(a.h, b.h);
  oh.?(eq: OrdBit1(a.l, b.l), : oh);
};

Show@<Bit2@> ShowBit2 = (Bit2@ x) {
  Append<Char@>(ShowBit1(x.h), ShowBit1(x.l));
};

% Map = /Core/Map/Tree%.Map<Bit2@>(OrdBit2);
<@>@ Map@ = Map.Map@;

Test@ Tests = TestSuite(Str|Tree, List[
  /Core/Map/Test%.Test<Map@, Bit2@>(Map, EqBit2, ShowBit2, A, B, C)
]);

@(Tests);
