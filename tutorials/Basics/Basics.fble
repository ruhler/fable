
# Imports
@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

# Types
@ Unit@ = *();
@ Bit@ = +(Unit@ 0, Unit@ 1);
@ Bit4@ = *(Bit@ 3, Bit@ 2, Bit@ 1, Bit@ 0);

# Values
Unit@ Unit = Unit@();

Bit@ 0 = Bit@(0: Unit);
Bit@ 1 = Bit@(1: Unit);

Bit4@ X = Bit4@(0, 0, 1, 1);
Bit4@ Y = Bit4@(1, 0, 1, 0);

# Functions
(Bit@, Bit@) { Bit@; } And = (Bit@ a, Bit@ b) {
  a.?(0: 0, 1: b);
};

(Bit4@, Bit4@) { Bit4@; } And4 = (Bit4@ a, Bit4@ b) {
  Bit4@(And(a.3, b.3), And(a.2, b.2), And(a.1, b.1), And(a.0, b.0));
};

Bit4@ Z = And4(X, Y);

# String Conversions
(Bit@) { String@; } ShowBit = (Bit@ a) {
  a.?(0: Str|0, 1: Str|1);
};

(Bit4@) { String@; } ShowBit4 = (Bit4@ a) {
  Strs[ShowBit(a.3), ShowBit(a.2), ShowBit(a.1), ShowBit(a.0)];
};

String@ output = Strs[
  ShowBit4(X), Str|' AND ', ShowBit4(Y), Str|' = ', ShowBit4(Z)];

/Core/Stdio/StringO%.Run(output);
