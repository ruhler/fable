
% IsSpace = /Core/Char/Type%.IsSpace;

% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% Split = /Core/List/Eq%.Split;
<@>% Length = /Core/List/Length%.Length;
<@>% Get = /Core/List/Length%.Get;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;


@ Impl@ = /Fbld/Eval%.Impl@;
@ Env@ = /Fbld/Eval%.Env@;
% InsertEnv = /Fbld/Eval%.InsertEnv;
% Eval = /Fbld/Eval%.Eval;
% Evals = /Fbld/Eval%.Evals;
% AssertArgCount = /Fbld/Eval%.AssertArgCount;

@ Markup@ = /Fbld/Markup%.Markup@;
@ Command@ = /Fbld/Markup%.Command@;
% ToString = /Fbld/Markup%.ToString;

% r = /Fbld/Result%.Monad;

(Markup@) { Impl@; } VarImpl = (Markup@ markup)(Env@ _, Command@ cmd) {
  Unit@ _ <- r.do(AssertArgCount(Int|0, cmd));
  r.return(markup);
};

(Env@, List@<String@>, List@<Markup@>) { Env@; }
DefArgs = (Env@ env, List@<String@> params, List@<Markup@> args) {
  params.?(nil: env);
  DefArgs(InsertEnv(env, params.cons.head, VarImpl(args.cons.head)),
    params.cons.tail, args.cons.tail);
};

Impl@ Define = (Env@ env, Command@ cmd) {
  Unit@ _ <- r.do(AssertArgCount(Int|4, cmd));

  String@ name <- r.do({
    Markup@ arg = Get(cmd.args, Int|0);
    Markup@ evaled <- r.do(Eval(env, arg));
    ToString(evaled);
  });

  List@<String@> params <- r.do({
    Markup@ arg = Get(cmd.args, Int|1);
    Markup@ evaled <- r.do(Eval(env, arg));
    String@ list <- r.do(ToString(evaled));
    r.return(Split(list, IsSpace));
  });

  Markup@ def = Get(cmd.args, Int|2);

  Impl@ impl = (Env@ e, Command@ c) {
    Unit@ _ <- r.do(AssertArgCount(Length(params), c));

    List@<Markup@> args <- r.do(Evals(e, c.args));
    Eval(DefArgs(nenv, params, args), def);
  },
  Env@ nenv = InsertEnv(env, name, impl);

  Markup@ body = Get(cmd.args, Int|3);
  Eval(nenv, body);
};

@(Define);
