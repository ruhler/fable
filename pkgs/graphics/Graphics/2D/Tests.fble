
@ Drawing@ = /App/Drawing%.Drawing@;
@ Point@ = /App/Drawing%.Point@;
% Color = /App/Drawing%.Color;
% Drawings = /App/Drawing%.Drawings;

@ Drawn@ = /App/Drawing/Test%.Drawn@;
@ Pixel@ = /App/Drawing/Test%.Pixel@;
% Drawn = /App/Drawing/Test%.Drawn;
% Draw = /App/Drawing/Test%.Draw;

% Triangle = /Graphics/2D/Triangle%.Triangle;

% Int = /Core/Int/Lit%.Int;

<@>% List = /Core/List%.List;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;

Test@ Tests = TestSuite(Str|'Graphics.2D', List<Test@>[
  Test(Str|'Lower Left Right Triangle', (Unit@ _) {
    Drawing@ drawing = Triangle(
      Point@(Int|0, Int|0),
      Point@(Int|0, Int|3),
      Point@(Int|3, Int|0), Color.Green);

    # Points on the diagonal are included, because of the negative slope.
    Drawn@ wnt = Drawn[
      Pixel@(Int|0, Int|0, Color.Green),
      Pixel@(Int|0, Int|1, Color.Green),
      Pixel@(Int|0, Int|2, Color.Green),
      Pixel@(Int|1, Int|0, Color.Green),
      Pixel@(Int|1, Int|1, Color.Green),
      Pixel@(Int|2, Int|0, Color.Green)
    ];
    Drawn@ got = Draw(drawing);
      
    /App/Drawing/Test%.AssertEquals(wnt, got);
  }),

  Test(Str|'Upper Left Right Triangle', (Unit@ _) {
    Drawing@ drawing = Triangle(
      Point@(Int|0, Int|0),
      Point@(Int|0, Int|3),
      Point@(Int|3, Int|3), Color.Green);

    # Points on the diagonal are excluded because of the positive slope.
    Drawn@ wnt = Drawn[
      Pixel@(Int|0, Int|1, Color.Green),
      Pixel@(Int|0, Int|2, Color.Green),
      Pixel@(Int|1, Int|2, Color.Green)
    ];
    Drawn@ got = Draw(drawing);
      
    /App/Drawing/Test%.AssertEquals(wnt, got);
  }),

  Test(Str|'Adjacent Gap', (Unit@ _) {
    # Regression test for an issue with rounding we had in the past where two
    # adjacent triangles could have a gap between them because we were using
    # inconsistent rounding.
    Drawing@ drawing = Drawings[
      Triangle(
        Point@(Int|0, Int|0),
        Point@(Int|0, Int|2),
        Point@(Int|1, Int|0), Color.Green),
      Triangle(
        Point@(Int|1, Int|0),
        Point@(Int|0, Int|2),
        Point@(Int|1, Int|2), Color.Red)
    ];

    # Verify there is no gap between the two triangles.
    Drawn@ wnt = Drawn[
      Pixel@(Int|0, Int|0, Color.Green),
      Pixel@(Int|0, Int|1, Color.Red)
    ];
    Drawn@ got = Draw(drawing);
      
    /App/Drawing/Test%.AssertEquals(wnt, got);
  })
]);

@(Tests);
