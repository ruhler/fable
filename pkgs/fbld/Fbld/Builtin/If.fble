
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Char@ = /Core/Char%.Char@;

% Int = /Core/Int/Lit%.Int;

<@>% Get = /Core/List/Length%.Get;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

@ Unit@ = /Core/Unit%.Unit@;

% HeadOf = /Fbld/Builtin/String%.HeadOf;
% TailOf = /Fbld/Builtin/String%.TailOf;

@ Impl@ = /Fbld/Markup%.Impl@;
@ Markup@ = /Fbld/Markup%.Markup@;
@ Command@ = /Fbld/Markup%.Command@;

@ Env@ = /Fbld/Env%.Env@<Impl@>;

% Eval = /Fbld/Eval%.Eval;
% AssertArgCount = /Fbld/Eval%.AssertArgCount;

<@>@ Result@ = /Fbld/Result%.Result@;
% r = /Fbld/Result%.Monad;

% EqMaybeChar = /Core/Maybe/Eq%.Eq(/Core/Char/Eq%.Eq);

(Markup@, Markup@) { Result@<Bool@>; }
Equals = (Markup@ a, Markup@ b) {
  Maybe@<Char@> ac <- r.do(HeadOf(a));
  Maybe@<Char@> bc <- r.do(HeadOf(b));

  EqMaybeChar(ac, bc).?(false: {
    r.return(False);
  });
  ac.?(nothing: r.return(True));

  Markup@ at <- r.do(TailOf(a));
  Markup@ bt <- r.do(TailOf(b));
  Equals(at, bt);
};

Impl@ IfEq = (Env@ env, Command@ cmd) {
  Unit@ _ <- r.do(AssertArgCount(Int|4, cmd));

  Markup@ a <- r.do(Eval(env, Get(cmd.args, Int|0)));
  Markup@ b <- r.do(Eval(env, Get(cmd.args, Int|1)));
  Bool@ eq <- r.do(Equals(a, b));
  Markup@ body = eq.?(
    true: Get(cmd.args, Int|2),
    false: Get(cmd.args, Int|3));

  Eval(env, body);
};

Impl@ IfNEq = (Env@ env, Command@ cmd) {
  Unit@ _ <- r.do(AssertArgCount(Int|4, cmd));

  Markup@ a <- r.do(Eval(env, Get(cmd.args, Int|0)));
  Markup@ b <- r.do(Eval(env, Get(cmd.args, Int|1)));
  Bool@ eq <- r.do(Equals(a, b));
  Markup@ body = eq.?(
    true: Get(cmd.args, Int|3),
    false: Get(cmd.args, Int|2));

  Eval(env, body);
};

@(IfEq, IfNEq);
