
import @ { BoolM=Bool@StdLib; UBNat@UBNat; };
import BoolM { Bool; True; False; };
import UBNat { Nat; 2; IsZero; Eq@EqNat; Lt; Gt; Inc; Dec; Mul; Mod; };

func IsPrime(Nat x ; Bool) {
  ?(Lt(x, 2()) ; true: False(), false: IsPrimeHelper(x, 2()));
};


func NthPrime(Nat x, Nat n; Nat) {
  ?(IsPrime(x) ;
      true: ?(IsZero(n) ; true: x, false: NthPrime(Inc(x), Dec(n))),
      false: NthPrime(Inc(x), n));
};

# Returns true if f evenly divides x.
priv func Divides(Nat x, Nat f; Bool) {
  IsZero(Mod(x, f));
};

# Helper function for IsPrime.
#   Computes whether x is prime given that there are no factors of x other
#   than 1 that are less than f.
priv func IsPrimeHelper(Nat x, Nat f ; Bool) {
  ?(Gt(Mul(f, f), x); true: True(), false:
      ?(Divides(x, f); true: False(), false:
          IsPrimeHelper(x, Inc(f))));
};
