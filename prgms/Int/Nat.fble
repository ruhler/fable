
{ /Bool%; @(Bool@, True, False); };
{ /Maybe%; @(Maybe@, Just, Nothing); };
{ /Unit%; @(Unit@, Unit); };

# Natural numbers, not including zero.
@ Nat@ = +(
  Unit@ 1, 
  Nat@ 2p0,
  Nat@ 2p1
);

# 2P0(x) = 2 * x
(Nat@) { Nat@; } 2P0 = (Nat@ x) {
  Nat@(2p0: x);
};

# 2P1(x) = 2 * x + 1
(Nat@) { Nat@; } 2P1 = (Nat@ x) {
  Nat@(2p1: x);
};

(Nat@, Nat@) { Bool@; } Eq = (Nat@ a, Nat@ b) {
  ?(a; 1: ?(b; 1: True, 2p0: False, 2p1: False),
       2p0: ?(b; 1: False, 2p0: Eq(a.2p0, b.2p0), 2p1: False),
       2p1: ?(b; 1: False, 2p0: False, 2p1: Eq(a.2p1, b.2p1)));
};

Nat@ 1 = Nat@(1: Unit);
Nat@ 2 = 2P0(1);
Nat@ 3 = 2P1(1);
Nat@ 4 = 2P0(2);
Nat@ 5 = 2P1(2);
Nat@ 6 = 2P0(3);
Nat@ 7 = 2P1(3);
Nat@ 8 = 2P0(4);
Nat@ 9 = 2P1(4);
Nat@ 10 = 2P0(5);

# Add1(x) = x + 1
(Nat@) { Nat@; } Add1 = (Nat@ x) {
  ?(x; 1: 2, 2p0: 2P1(x.2p0), 2p1: 2P0(Add1(x.2p1)));
};

(Nat@, Nat@) { Nat@; } Add = (Nat@ a, Nat@ b) {
  ?(a;
    1: Add1(b),
    2p0: ?(b;
      1: 2P1(a.2p0), 
      2p0: 2P0(Add(a.2p0, b.2p0)),
      2p1: 2P1(Add(a.2p0, b.2p1))),
    2p1: ?(b;
      1: 2P0(Add1(a.2p1)),
      2p0: 2P1(Add(a.2p1, b.2p0)),
      2p1: 2P0(Add1(Add(a.2p1, b.2p1)))));
};

# Sub1(1) = Nothing
# Sub1(x) = Just(x - 1)
(Nat@) { Maybe@<Nat@>; } Sub1 = (Nat@ x) {
  ?(x; 1: Nothing<Nat@>,
       2p0: {
         Maybe@<Nat@> ms = Sub1(x.2p0);
         ?(ms; just: Just<Nat@>(2P1(ms.just)),
               nothing: Just<Nat@>(1));
       },
       2p1: Just<Nat@>(2P0(x.2p1)));
};

# Mul(a, b) = a * b
(Nat@, Nat@) { Nat@; } Mul = (Nat@ a, Nat@ b) {
  ?(a; 1: b,
       2p0: Mul(a.2p0, 2P0(b)),
       2p1: Add(Mul(a.2p1, 2P0(b)), b));
};

@(Nat@, 2P0, 2P1, Eq, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, Add, Add1, Sub1, Mul);
