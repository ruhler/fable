
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;

@ Formula@ = /Sat/Cnf%.Formula@;
@ Result@ = /Sat/Cnf%.Result@;
% Solve = /Sat/Cnf%.Solve;

<@>@ Parse@ = /Sat/Dimacs%.Parse@;
% ParseLines = /Sat/Dimacs%.ParseLines;
% ShowResult = /Sat/Show%.ShowResult;

Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio) {
  % I = /Core/Stream/IStream%(m);
  % O = /Core/Stream/OStream%(m);

  M@<List@<String@>> GetLines = {
    String@ next <- m.do(I.GetLine(stdio.in));
    next.?(nil: m.return(Nil<String@>));

    List@<String@> tail <- m.do(GetLines);
    m.return(Cons<String@>(next, tail));
  };

  (List@<String@> args) {
    List@<String@> lines <- m.do(GetLines);
    Parse@<Formula@> parsed = ParseLines(lines);
    parsed.?(error: {
      Unit@ _ <- m.do(O.PutStr(stdio.err, parsed.error));
      m.return(False);
      });

    Result@ result = Solve(parsed.parsed);
    Unit@ _ <- m.do(O.PutLine(stdio.out, ShowResult(result)));
    m.return(True);
  };
};

/Core/Stdio/IO%.Run(Main);
