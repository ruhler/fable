
@ Int@ = /Core/Int%.Int@;
% 0 = /Core/Int%.0;
% 1 = /Core/Int%.1;
% 2 = /Core/Int%.2;
% 3 = /Core/Int%.3;
% 4 = /Core/Int%.4;
% Inc = /Core/Int%.Inc;
% Add = /Core/Int%.Add;
% Sub = /Core/Int%.Sub;
% Mul = /Core/Int%.Mul;
% Lt = /Core/Int/Eq%.Lt;

# QR@ --
#   Square root and remainder from integer square root.
#
# This type is the same as used for division, because why not?
@ QR@ = *(Int@ q, Int@ r);

% Imaginary = /Undef%.Undef<QR@>;

# Sqrt --
#   a = q*q + r, r < 2q + 1
(Int@) { QR@; } Sqrt = (Int@ a) {
  a.?(n: Imaginary.undefined, 0: @(q: 0, r: 0));
  QR@ qr = a.p.?(
    1: @(q: 1, r: 0),
    2p0: {
      a.p.2p0.?(
        1: {
          # 2 = 1^2 + 1
          @(q: 1, r: 1);
        },
        2p0: {
          # a = q^2 + r  ==>  4a = (2q)^2 + 4r
          QR@ s = Sqrt(Int@(p: a.p.2p0.2p0));
          @(q: Mul(s.q, 2), r: Mul(s.r, 4));
        },
        2p1: {
          # a = q^2 + r  ==>  4a + 2 = (2q)^2 + 4r + 2
          QR@ s = Sqrt(Int@(p: a.p.2p0.2p1));
          @(q: Mul(s.q, 2), r: Add(Mul(s.r, 4), 2));
        });
    },
    2p1: {
      a.p.2p1.?(
        1: {
          # 3 = 1^2 + 2 
          @(q: 1, r: 2);
        },
        2p0: {
          # a = q^2 + r  ==>  4a + 1 = (2q)^2 + 4r + 1
          QR@ s = Sqrt(Int@(p: a.p.2p1.2p0));
          @(q: Mul(s.q, 2), r: Add(Mul(s.r, 4), 1));
        },
        2p1: {
          # a = q^2 + r  ==>  4a + 3 = (2q)^2 + 4r + 3
          QR@ s = Sqrt(Int@(p: a.p.2p1.2p1));
          @(q: Mul(s.q, 2), r: Add(Mul(s.r, 4), 3));
        });
    });
  Int@ 2qp1 = Add(Mul(2, qr.q), 1);
  Lt(qr.r, 2qp1).?(true: qr);
  @(q: Inc(qr.q), r: Sub(qr.r, 2qp1));
};

@(QR@, Sqrt);
