module AllTestsM(AllTestsI) {
  import @ { UnitM; ListM; UBNatTestM; PrimesTestM; FunctionI; };

  import UnitM { Unit; };
  import ListM { S; P; Append; MapS; };
  import UBNatTestM { UBNatTestFailure = TestFailure; };
  import PrimesTestM { PrimesTestFailure = TestFailure; };

  union TestFailure(
      UBNatTestFailure UBNatTest,
      PrimesTestFailure PrimesTest
  );
  
  module UBNatTestFailureF(FunctionI<UBNatTestFailure, TestFailure>) {
    import @ { UBNatTestFailure; TestFailure; };

    func f(UBNatTestFailure a ; TestFailure) {
      TestFailure:UBNatTest(a);
    };
  };

  module PrimesTestFailureF(FunctionI<PrimesTestFailure, TestFailure>) {
    import @ { PrimesTestFailure; TestFailure; };

    func f(PrimesTestFailure a ; TestFailure) {
      TestFailure:PrimesTest(a);
    };
  };

  func Test( ; S<TestFailure>) {
    Append<TestFailure>(
        MapS<UBNatTestFailure, TestFailure; UBNatTestFailureF>(Test@UBNatTestM()),
        MapS<PrimesTestFailure, TestFailure; PrimesTestFailureF>(Test@PrimesTestM()));
  };
};
