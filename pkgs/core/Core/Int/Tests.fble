
@ Bool@ = /Core/Bool%.Bool@;
% Not = /Core/Bool%.Not;

<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

<@>% List = /Core/List%.List;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;
% Pass = /Core/Test%.Pass;
% Fail = /Core/Test%.Fail;

@ Unit@ = /Core/Unit%.Unit@;

@ Int@ = /Core/Int%.Int@;
% 0 = /Core/Int%.0;
% 1 = /Core/Int%.1;
% 2 = /Core/Int%.2;
% 3 = /Core/Int%.3;
% 4 = /Core/Int%.4;
% 5 = /Core/Int%.5;
% 6 = /Core/Int%.6;
% 7 = /Core/Int%.7;
% 8 = /Core/Int%.8;
% Neg = /Core/Int%.Neg;
% Incr = /Core/Int%.Incr;
% Decr = /Core/Int%.Decr;
% Add = /Core/Int%.Add;
% Sub = /Core/Int%.Sub;
% Mul = /Core/Int%.Mul;
% Exp2 = /Core/Int%.Exp2;
% Abs = /Core/Int%.Abs;

% Div = /Core/Int/Div%.Div;
% Sqrt = /Core/Int/Sqrt%.Sqrt;

% Eq = /Core/Int/Eq%.Eq;
% Lt = /Core/Int/Eq%.Lt;
% Le = /Core/Int/Eq%.Le;
% Gt = /Core/Int/Eq%.Gt;
% Ge = /Core/Int/Eq%.Ge;
% IsZero = /Core/Int/Eq%.IsZero;
% Min = /Core/Int/Eq%.Min;
% Max = /Core/Int/Eq%.Max;

% Int = /Core/Int/Lit%.Int;

(String@, (Unit@) { Bool@; }) { Test@; }
T = (String@ name, (Unit@) { Bool@; } p) {
  Test(name, (Unit@ u) {
    p(u).?(true: Pass, false: Fail|failed);
  });
};

(String@, Int@, (Unit@) { Int@; }) { Test@; }
TEq = (String@ name, Int@ a, (Unit@) { Int@; } b) {
  Test(name, (Unit@ u) {
    AssertEquals(/Core/Int/Eq%.Eq, /Core/Int/Show%.Show, a, b(u));
  });
};

Test@ Tests = TestSuite(Str|Int, List[
  T(Str|Eq_0_0, (Unit@ _ ) { Eq(0, 0); }),
  T(Str|Eq_0_1, (Unit@ _ ) { Not(Eq(0, 1)); }),
  T(Str|Eq_4_4, (Unit@ _ ) { Eq(4, 4); }),
  T(Str|Eq_5_5, (Unit@ _ ) { Eq(5, 5); }),
  T(Str|Eq_4_5, (Unit@ _ ) { Not(Eq(4, 5)); }),
  T(Str|Eq_5_m5, (Unit@ _) { Not(Eq(5, Neg(5))); }),
  T(Str|Eq_m1_m1, (Unit@ _) { Eq(Neg(5), Neg(5)); }),

  T(Str|IsZero_0, (Unit@ _) { IsZero(0); }),
  T(Str|IsZero_3, (Unit@ _) { Not(IsZero(3)); }),

  T(Str|Lt_4_2, (Unit@ _) { Not(Lt(4, 2)); }),
  T(Str|Lt_4_3, (Unit@ _) { Not(Lt(4, 3)); }),
  T(Str|Lt_4_4, (Unit@ _) { Not(Lt(4, 4)); }),
  T(Str|Lt_4_5, (Unit@ _) { Lt(4, 5); }),
  T(Str|Lt_4_6, (Unit@ _) { Lt(4, 6); }),

  T(Str|Lt_5_3, (Unit@ _) { Not(Lt(5, 3)); }),
  T(Str|Lt_5_4, (Unit@ _) { Not(Lt(5, 4)); }),
  T(Str|Lt_5_5, (Unit@ _) { Not(Lt(5, 5)); }),
  T(Str|Lt_5_6, (Unit@ _) { Lt(5, 6); }),
  T(Str|Lt_5_7, (Unit@ _) { Lt(5, 7); }),

  T(Str|Lt_m5_m7, (Unit@ _) { Not(Lt(Neg(5), Neg(7))); }),
  T(Str|Lt_m7_m5, (Unit@ _) { Lt(Neg(7), Neg(5)); }),

  T(Str|Lt_0_7, (Unit@ _) { Lt(0, 7); }),
  T(Str|Lt_7_0, (Unit@ _) { Not(Lt(7, 0)); }),
  T(Str|Lt_0_m7, (Unit@ _) { Not(Lt(0, Neg(7))); }),
  T(Str|Lt_m7_0, (Unit@ _) { Lt(Neg(7), 0); }),

  T(Str|Le_4_2, (Unit@ _) { Not(Le(4, 2)); }),
  T(Str|Le_4_3, (Unit@ _) { Not(Le(4, 3)); }),
  T(Str|Le_4_4, (Unit@ _) { Le(4, 4); }),
  T(Str|Le_4_5, (Unit@ _) { Le(4, 5); }),
  T(Str|Le_4_6, (Unit@ _) { Le(4, 6); }),

  T(Str|Le_5_3, (Unit@ _) { Not(Le(5, 3)); }),
  T(Str|Le_5_4, (Unit@ _) { Not(Le(5, 4)); }),
  T(Str|Le_5_5, (Unit@ _) { Le(5, 5); }),
  T(Str|Le_5_6, (Unit@ _) { Le(5, 6); }),
  T(Str|Le_5_7, (Unit@ _) { Le(5, 7); }),

  T(Str|Gt_4_2, (Unit@ _) { Gt(4, 2); }),
  T(Str|Gt_4_3, (Unit@ _) { Gt(4, 3); }),
  T(Str|Gt_4_4, (Unit@ _) { Not(Gt(4, 4)); }),
  T(Str|Gt_4_5, (Unit@ _) { Not(Gt(4, 5)); }),
  T(Str|Gt_4_6, (Unit@ _) { Not(Gt(4, 6)); }),

  T(Str|Gt_5_3, (Unit@ _) { Gt(5, 3); }),
  T(Str|Gt_5_4, (Unit@ _) { Gt(5, 4); }),
  T(Str|Gt_5_5, (Unit@ _) { Not(Gt(5, 5)); }),
  T(Str|Gt_5_6, (Unit@ _) { Not(Gt(5, 6)); }),
  T(Str|Gt_5_7, (Unit@ _) { Not(Gt(5, 7)); }),

  T(Str|Gt_m5_m7, (Unit@ _) { Gt(Neg(5), Neg(7)); }),
  T(Str|Gt_m7_m5, (Unit@ _) { Not(Gt(Neg(7), Neg(5))); }),

  T(Str|Ge_4_2, (Unit@ _) { Ge(4, 2); }),
  T(Str|Ge_4_3, (Unit@ _) { Ge(4, 3); }),
  T(Str|Ge_4_4, (Unit@ _) { Ge(4, 4); }),
  T(Str|Ge_4_5, (Unit@ _) { Not(Ge(4, 5)); }),
  T(Str|Ge_4_6, (Unit@ _) { Not(Ge(4, 6)); }),

  T(Str|Ge_5_3, (Unit@ _) { Ge(5, 3); }),
  T(Str|Ge_5_4, (Unit@ _) { Ge(5, 4); }),
  T(Str|Ge_5_5, (Unit@ _) { Ge(5, 5); }),
  T(Str|Ge_5_6, (Unit@ _) { Not(Ge(5, 6)); }),
  T(Str|Ge_5_7, (Unit@ _) { Not(Ge(5, 7)); }),

  T(Str|Ge_m5_0, (Unit@ _) { Not(Ge(Neg(5), 0)); }),
  T(Str|Ge_m5_1, (Unit@ _) { Not(Ge(Neg(5), 1)); }),

  TEq(Str|Incr_3, 4, (Unit@ _) { Incr(3); }),
  TEq(Str|Incr_3, 2, (Unit@ _) { Decr(3); }),
  TEq(Str|Add_2_3, 5, (Unit@ _) { Add(2, 3); }),
  TEq(Str|Add_3_m5, Neg(2), (Unit@ _) { Add(3, Neg(5)); }),
  TEq(Str|Sub_5_3, 2, (Unit@ _) { Sub(5, 3); }),
  TEq(Str|Sub_3_5, Neg(2), (Unit@ _) { Sub(3, 5); }),
  TEq(Str|Neg_m2, 2, (Unit@ _) { Neg(Neg(2)); }),
  TEq(Str|Neg_0, 0, (Unit@ _) { Neg(0); }),

  TEq(Str|Min_0_5, Int|0, (Unit@ _) { Min(0, 5); }),
  TEq(Str|Min_3_0, Int|0, (Unit@ _) { Min(3, 0); }),
  TEq(Str|Max_0_5, Int|5, (Unit@ _) { Max(0, 5); }),
  TEq(Str|Max_3_0, Int|3, (Unit@ _) { Max(3, 0); }),

  TEq(Str|Abs_0, Int|0, (Unit@ _) { Abs(0); }),
  TEq(Str|Abs_3, Int|3, (Unit@ _) { Abs(3); }),
  TEq(Str|Abs_m3, Int|3, (Unit@ _) { Abs(Neg(3)); }),

  TEq(Str|Mul_3_5, Int|15, (Unit@ _) { Mul(3, 5); }),
  TEq(Str|Mul_m3_5, Neg(Int|15), (Unit@ _) { Mul(Neg(3), 5); }),
  TEq(Str|Mul_3_m5, Neg(Int|15), (Unit@ _) { Mul(3, Neg(5)); }),
  TEq(Str|Mul_m3_m5, Int|15, (Unit@ _) { Mul(Neg(3), Neg(5)); }),
  TEq(Str|Mul_0_5, Int|0, (Unit@ _) { Mul(0, 5); }),
  TEq(Str|Mul_3_0, Int|0, (Unit@ _) { Mul(3, 0); }),

  TEq(Str|Div_11_4, Int|2, (Unit@ _) { Div(Int|11, Int|4).q; }),
  TEq(Str|Mod_11_4, Int|3, (Unit@ _) { Div(Int|11, Int|4).r; }),
  TEq(Str|Div_m11_4, Neg(Int|3), (Unit@ _) { Div(Neg(Int|11), Int|4).q; }),
  TEq(Str|Mod_m11_4, Int|1, (Unit@ _) { Div(Neg(Int|11), Int|4).r; }),
  TEq(Str|Div_11_m4, Neg(Int|3), (Unit@ _) { Div(Int|11, Neg(Int|4)).q; }),
  TEq(Str|Mod_11_m4, Neg(Int|1), (Unit@ _) { Div(Int|11, Neg(Int|4)).r; }),
  TEq(Str|Div_m11_m4, Int|2, (Unit@ _) { Div(Neg(Int|11), Neg(Int|4)).q; }),
  TEq(Str|Mod_m11_m4, Neg(Int|3), (Unit@ _) { Div(Neg(Int|11), Neg(Int|4)).r; }),

  TEq(Str|Sqrt_0_q, Int|0, (Unit@ _) { Sqrt(Int|0).q; }),
  TEq(Str|Sqrt_0_r, Int|0, (Unit@ _) { Sqrt(Int|0).r; }),
  TEq(Str|Sqrt_29_q, Int|5, (Unit@ _) { Sqrt(Int|29).q; }),
  TEq(Str|Sqrt_29_r, Int|4, (Unit@ _) { Sqrt(Int|29).r; }),
  TEq(Str|Sqrt_12345_q, Int|111, (Unit@ _) { Sqrt(Int|12345).q; }),
  TEq(Str|Sqrt_12345_r, Int|24, (Unit@ _) { Sqrt(Int|12345).r; }),

  TEq(Str|Exp2_0, Int|1, (Unit@ _) { Exp2(0); }),
  TEq(Str|Exp2_8, Int|256, (Unit@ _) { Exp2(8); }),
  TEq(Str|Exp2_7, Int|128, (Unit@ _) { Exp2(7); }),

  Test(Str|Read_Positive, (Unit@ _) {
    Int@ wnt = Int|49113;
    Int@ got = /Core/Int/Show%.Read(Str|49113);
    AssertEquals(/Core/Int/Eq%.Eq, /Core/Int/Show%.Show, wnt, got);
  }),

  Test(Str|Read_Negative, (Unit@ _) {
    Int@ wnt = Neg(Int|49113);
    Int@ got = /Core/Int/Show%.Read(Str|'-49113');
    AssertEquals(/Core/Int/Eq%.Eq, /Core/Int/Show%.Show, wnt, got);
  }),

  Test(Str|Read_AllDigits, (Unit@ _) {
    Int@ wnt = Int|1234567890;
    Int@ got = /Core/Int/Show%.Read(Str|1234567890);
    AssertEquals(/Core/Int/Eq%.Eq, /Core/Int/Show%.Show, wnt, got);
  }),

  Test(Str|Read_empty, (Unit@ _) {
    Int@ wnt = Int|0;
    Int@ got = /Core/Int/Show%.Read(Str|'');
    AssertEquals(/Core/Int/Eq%.Eq, /Core/Int/Show%.Show, wnt, got);
  }),

  Test(Str|Show_Positive, (Unit@ _) {
    String@ wnt = Str|'10325487960';
    String@ got = /Core/Int/Show%.Show(Int|10325487960);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|Show_Zero, (Unit@ _) {
    String@ wnt = Str|'0';
    String@ got = /Core/Int/Show%.Show(Int|0);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|Show_Negative, (Unit@ _) {
    String@ wnt = Str|'-42';
    String@ got = /Core/Int/Show%.Show(Neg(Int|42));
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|Show_AllDigits, (Unit@ _) {
    String@ wnt = Str|'1234567890';
    String@ got = /Core/Int/Show%.Show(Int|1234567890);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  })
]);

@(Tests);
