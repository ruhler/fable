* switch to MALLOC and FREE instead of GC_MALLOC and GC_FREE.
  To make it clear we no longer depend on gc for reclaiming memory.
* Encapsulate access to link values
  In other words - have all allocation and deallocation of Values in one
  place.
* Make FblcNewStructValue and FblcNewUnionValue functions.
  So that allocation and freeing of values is all in FblcValue.c,
  not inlined in FblcEvaluator.c
* Design command line interface to fblc
  - How should the main func/proc be specified?
    Answer: by name
  - How should arguments be specified? Text/Binary Files? Text/Binary String
    values?
    Answer: For now: filenames of text files for port args, text string for
    regular args.
* Test that tail recursive functions and procedures don't smash the stack.
* Test process call port arguments are valid
* Test process call expr arguments are valid
* Test that a link's type is valid.
* Test that a link action's ports can't shadow ports already in scope.
* Test that a link can't use the same name for the get and put ports.
* Test that a proc can't have multiple ports of the same name, with or without
  the same polarity.
* Should FblcExecute take a const FblcActn*?
  Should we use const FblcActn* instead of FblcActn* everywhere there?
* Test that process port types are valid.
* It would be nice if 'Wrong number of arguments to ...' reported the opening
  '(' as the location of the error.
* Test what happens when we try to access the wrong field of a union.
  And check if we can easily show the location in the runtime error message.
* Clean up the error messages.
   - Put names in single quotes always.
   - Say 'expecting expression of type X' instead of 'expecting type X' when
     we are expecting an expression.
* Be able to parse from a string as well as a file.
  - Then add a '-e' option to fblc to specify an arbitrary expression to
    evaluate in the context of the given program.
* Be able to parse from a list of files instead of just one?
  This will help for tests or other programs that share some common functions.
* Write a man page for fblc?
* Write tests to get 100% code coverage, or reasonably close.
  - Manually review reported errors for 'e' test cases to make sure the test
    case works and the error reported is correct.
    (any better way to automate this kind of testing?)

