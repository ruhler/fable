@(StdLib, Bits, Md5) {
  StdLib { @(Unit@, Maybe@); };
  StdLib.List{ @(P@, S@, ConsS, S0); };
  Bits.Bit8 { @(Bit8@, H2); };
  Bits.Hex { @(Hex@, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f); };
  Md5 { @(Md5Hash@, Eq); };

  @ TestName@ = +(
      Unit@ Md5_empty,
      Unit@ Md5_a,
      Unit@ Md5_abc,
      Unit@ Md5_message,
      Unit@ Md5_a_to_z,
      Unit@ Md5_A_to_9,
      Unit@ Md5_1_to_0
  );

  @ TestFailure@ = *(TestName@ name, Md5Hash@ wnt, Md5Hash@ got);

  # Put all the bytes onto the output port, followed by nothing.
  \(Maybe@<Bit8@>+, S@<Bit8@>; Unit@!) PutAll =
    \(Maybe@<Bit8@>+ out, S@<Bit8@> bytes) {
      ?(bytes; cons: {
          Maybe@<Bit8@> x := out(Maybe@<Bit8@>(just: bytes.cons.head));
          PutAll(out, bytes.cons.tail);
        }, nil: {
          Maybe@<Bit8@> x := out(Maybe@<Bit8@>(nothing: Unit@()));
          $(Unit@());
      });
    };


  # Compute the md5 hash for a string of bytes.
  \(S@<Bit8@>; Md5Hash@!) Md5Str = \(S@<Bit8@> bytes) {
    Maybe@<Bit8@> ~ get, put;
    Md5Hash@ md5 := Md5.Md5(get), Unit@ x := PutAll(put, bytes);
    $(md5);
  };

  \(TestName@, Md5Hash@, S@<Bit8@>; TestFailure@!) TestStr =
    \(TestName@ name, Md5Hash@ wnt, S@<Bit8@> bytes) {
      Md5Hash@ got := Md5Str(bytes);
      $(TestFailure@(name, wnt, got));
    };

  \(Hex@, Hex@, S@<Bit8@>; S@<Bit8@>) L =
    \(Hex@ hi, Hex@ lo, S@<Bit8@> l) {
      ConsS<Bit8@>(H2(hi, lo), l);
    };

  \(TestFailure@, S@<TestFailure@>; S@<TestFailure@>) T =
    \(TestFailure@ x, S@<TestFailure@> l) {
      ?(Eq(x.wnt, x.got); true: l, false: ConsS<TestFailure@>(x, l));
    };

  \( ; S@<TestFailure@>!) Test = \() {
    TestFailure@ empty := TestStr(
      TestName@(Md5_empty: Unit@()),
      Md5Hash@(
        d, 4, 1, d, 8, c, d, 9,
        8, f, 0, 0, b, 2, 0, 4,
        e, 9, 8, 0, 0, 9, 9, 8,
        e, c, f, 8, 4, 2, 7, e),
      S0<Bit8@>
    );

    TestFailure@ _a := TestStr(
      TestName@(Md5_a: Unit@()),
      Md5Hash@(
        0, c, c, 1, 7, 5, b, 9,
        c, 0, f, 1, b, 6, a, 8,
        3, 1, c, 3, 9, 9, e, 2,
        6, 9, 7, 7, 2, 6, 6, 1),
      L(6, 1, # 'a'
        S0<Bit8@>)
    );

    TestFailure@ abc := TestStr(
      TestName@(Md5_abc: Unit@()),
      Md5Hash@(
        9, 0, 0, 1, 5, 0, 9, 8,
        3, c, d, 2, 4, f, b, 0,
        d, 6, 9, 6, 3, f, 7, d,
        2, 8, e, 1, 7, f, 7, 2),
        # "abc"
      L(6, 1, L(6, 2, L(6, 3,
        S0<Bit8@>)))
    );

    TestFailure@ message := TestStr(
      TestName@(Md5_message: Unit@()),
      Md5Hash@(
        f, 9, 6, b, 6, 9, 7, d,
        7, c, b, 7, 9, 3, 8, d,
        5, 2, 5, a, 2, f, 3, 1,
        a, a, f, 1, 6, 1, d, 0), 
        # "message digest"
      L(6, d, L(6, 5, L(7, 3, L(7, 3,
      L(6, 1, L(6, 7, L(6, 5, L(2, 0,
      L(6, 4, L(6, 9, L(6, 7, L(6, 5,
      L(7, 3, L(7, 4,
        S0<Bit8@>))))))))))))))
    );

    TestFailure@ a_to_z := TestStr(
      TestName@(Md5_a_to_z: Unit@()),
      Md5Hash@(
        c, 3, f, c, d, 3, d, 7,
        6, 1, 9, 2, e, 4, 0, 0,
        7, d, f, b, 4, 9, 6, c,
        c, a, 6, 7, e, 1, 3, b),
        # "abcdefghijklmnopqrstuvwxyz"
      L(6, 1, L(6, 2, L(6, 3, L(6, 4,
      L(6, 5, L(6, 6, L(6, 7, L(6, 8,
      L(6, 9, L(6, a, L(6, b, L(6, c,
      L(6, d, L(6, e, L(6, f, L(7, 0,
      L(7, 1, L(7, 2, L(7, 3, L(7, 4,
      L(7, 5, L(7, 6, L(7, 7, L(7, 8,
      L(7, 9, L(7, a,
        S0<Bit8@>))))))))))))))))))))))))))
    );

    TestFailure@ A_to_9 := TestStr(
      TestName@(Md5_A_to_9: Unit@()),
      Md5Hash@(
        d, 1, 7, 4, a, b, 9, 8,
        d, 2, 7, 7, d, 9, f, 5,
        a, 5, 6, 1, 1, c, 2, c,
        9, f, 4, 1, 9, d, 9, f),
        # "ABCDEFGHIJKLMNOPQRS0TUVWXYZabcdefghijklmnopqrstuvwxyz012345678@9"
      L(4, 1, L(4, 2, L(4, 3, L(4, 4,
      L(4, 5, L(4, 6, L(4, 7, L(4, 8,
      L(4, 9, L(4, a, L(4, b, L(4, c,
      L(4, d, L(4, e, L(4, f, L(5, 0,
      L(5, 1, L(5, 2, L(5, 3, L(5, 4,
      L(5, 5, L(5, 6, L(5, 7, L(5, 8,
      L(5, 9, L(5, a,
      L(6, 1, L(6, 2, L(6, 3, L(6, 4,
      L(6, 5, L(6, 6, L(6, 7, L(6, 8,
      L(6, 9, L(6, a, L(6, b, L(6, c,
      L(6, d, L(6, e, L(6, f, L(7, 0,
      L(7, 1, L(7, 2, L(7, 3, L(7, 4,
      L(7, 5, L(7, 6, L(7, 7, L(7, 8,
      L(7, 9, L(7, a,
      L(3, 0, L(3, 1, L(3, 2, L(3, 3,
      L(3, 4, L(3, 5, L(3, 6, L(3, 7,
      L(3, 8, L(3, 9,
        S0<Bit8@>))))))))))
    )))))))))))))))))))))))))))))))))))))))))))))))))))));

    TestFailure@ 1_to_0 := TestStr(
      TestName@(Md5_1_to_0: Unit@()),
      Md5Hash@(
        5, 7, e, d, f, 4, a, 2,
        2, b, e, 3, c, 9, 5, 5,
        a, c, 4, 9, d, a, 2, e,
        2, 1, 0, 7, b, 6, 7, a),
        # "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
      L(3, 1, L(3, 2, L(3, 3, L(3, 4,
      L(3, 5, L(3, 6, L(3, 7, L(3, 8,
      L(3, 9, L(3, 0,
      L(3, 1, L(3, 2, L(3, 3, L(3, 4,
      L(3, 5, L(3, 6, L(3, 7, L(3, 8,
      L(3, 9, L(3, 0,
      L(3, 1, L(3, 2, L(3, 3, L(3, 4,
      L(3, 5, L(3, 6, L(3, 7, L(3, 8,
      L(3, 9, L(3, 0,
      L(3, 1, L(3, 2, L(3, 3, L(3, 4,
      L(3, 5, L(3, 6, L(3, 7, L(3, 8,
      L(3, 9, L(3, 0,
      L(3, 1, L(3, 2, L(3, 3, L(3, 4,
      L(3, 5, L(3, 6, L(3, 7, L(3, 8,
      L(3, 9, L(3, 0,
      L(3, 1, L(3, 2, L(3, 3, L(3, 4,
      L(3, 5, L(3, 6, L(3, 7, L(3, 8,
      L(3, 9, L(3, 0,
      L(3, 1, L(3, 2, L(3, 3, L(3, 4,
      L(3, 5, L(3, 6, L(3, 7, L(3, 8,
      L(3, 9, L(3, 0,
      L(3, 1, L(3, 2, L(3, 3, L(3, 4,
      L(3, 5, L(3, 6, L(3, 7, L(3, 8,
      L(3, 9, L(3, 0,
        S0<Bit8@>))))))))))))))
          )))))))))))))))))))))))))))))))
    ))))))))))))))))))))))))))))))))))));

    $(T(empty, T(_a, T(abc, T(message, T(a_to_z, T(A_to_9, T(1_to_0,
        S0<TestFailure@>))))))));
  };

  @(TestName@, TestFailure@, Test);
};
