
* It would be nice if 'Wrong number of arguments to ...' reported the opening
  '(' as the location of the error.
* Test what happens when we try to access the wrong field of a union.
  And check if we can easily show the location in the runtime error message.
* Clean up the error messages.
   - Put names in single quotes always.
   - Say 'expecting expression of type X' instead of 'expecting type X' when
     we are expecting an expression.
* Be able to parse from a string as well as a file.
  - Then add a '-e' option to fblc to specify an arbitrary expression to
    evaluate in the context of the given program.
* Be able to parse from a list of files instead of just one?
  This will help for tests or other programs that share some common functions.
* Implement support for processes.
* Write a man page for fblc?
* Write a vim syntax for fblc?
* Add code coverage to the build?
* Write tests to get 100% code coverage, or reasonably close.
  - Call a function in non-tail form.
  - Use a nested let expression
  - Perform a (valid) field access on a union value.

  - have an error in the object expression for an access expression.
  - have an error in the value expression for a union literal.
  - have a struct field refer to a non-existant type.
  - have a function argument refer to a non-existant type.
  - have a function result refer to a non-existant type.
  - define a union type with no fields.
  - syntax errors:
    +  missing field name in struct declaration or function call.
    +  Missing '(' after the '?' in a conditional
    +  Missing ')' after an argument list.
    +  Parse error in conditional args list.
    +  Missing field in access expression.
* Organize and rename malformed tests based on the specification?
* Start work on a calculator program as a basic test for processes.

