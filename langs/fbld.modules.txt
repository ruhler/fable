FBLD Modules
============
Damocrates adds support for modules on top of the Calvisus language. The
purpose of modules is to facilitate reuse of code across multiple programs,
expanding the scale of programs that can be developed.

The fundamental concept behind modules is that programs can be broken down
into reusable bits of code that can be developed independent of their use and
can be reused independent of their development. These reusable bits of code
can be understood and developed in isolation then combined to form large
programs that would otherwise be too complex and costly to develop.

For example, many programs make use of some form of integer arithmetic. Rather
than re-implement and re-test integer arithmetic for each program, a single
integer arithmetic module can be developed and reused.

With proper support for modules, a user should be able to reuse a module
solely given an interface specification for the module, without any additional
knowledge of the implementation. Some mechanism must also be provided to avoid
name conflicts between modules. Damocrates modules achieve these by having
separate interface and implementations for modules, and giving each module
its own namespace.

Module Interfaces
-----------------
The following is a slightly contrived example of the interface definition for
an integer arithmetic module that illustrates the features of module
interfaces.

  mdecl Int(Bool) {
    import Bool(Bool);

    type Int;
    struct DivModResult(Int quotient, Int remainder);

    func Zero( ; Int);
    func One( ; Int);
    func Add(Int a, Int b; Int);
    func Mul(Int a, Int b; Int);
    func DivMod(Int a, Int b; DivModResult);
    func Equals(Int a, Int b; Bool@Bool);
    func LessThan(Int a, Int b; Bool);
  };

Module interfaces are introduce using the 'mdecl' keyword, which is short for
"module declaration". The 'mdecl' keyword is followed by the name of the
module, in this case 'Int'. Each module is uniquely identified with a name
from a global namespace of modules. In the future we expect additional
mechanisms will need to be put in place to address module name conflicts, but
for now we assume there is no desire to have two modules with the same name.

Following the module's name is a comma separated list of names of modules that
this module depends on. In this example, Int module depends on one other
module, the 'Bool' module. In order to fully understand the Int module
interface, a user must also be familiar with the Bool module interface,
because the Int module interface references the Bool module interface.

A module is not allowed to depend on itself recursively. There is no
significance or prescription of the order of modules in the dependency list.
The same module dependency must not be listed more than once in the list. A
module should be listed as a dependency if and only if this module declaration
imports type names from the module interface using an import declaration or
refers to types from the module interface using a qualified type name.

After the list of module dependencies comes the module interface declarations.
These can be in any order. There are a handful of different kinds of
declarations that can be used.

Import
^^^^^^
The import declaration is used to import entities from another module. The
import declaration consists of the name of a module to import types from,
followed by a list of entities to import that belong to that module's interface.
In this case, the 'Bool' type is being imported from the Bool module.
Importing the entity means it can be referred to without qualification in the
module interface, and that the entity is now considered to belong to the
module's interface.

Importing from some module 'Foo' requires that the module 'Foo' be listed as
an explicit dependency of this module. Entities that are imported from other
modules must not conflict by name with any other entities imported or declared
in the module interface.

Both types and function declarations can be imported. When importing a
function declaration, any types used in the declaration must belong to a
module that this module depends on.

Abstract Types
^^^^^^^^^^^^^^
The 'type' keyword is used to introduce an abstract type. In this case, the
abstract type 'Int' is declared. A user of the module can store and pass
around values of the abstract type, but they cannot construct values of the
type, access fields of the type, or use the type as the condition in a
conditional expression.

Concrete Types
^^^^^^^^^^^^^^
A concrete struct or union type can be declared as in Calvisus. A user of the
module can use the type constructors, field access, and use the type as the
condition in a conditional if it is a union type.

Function or Process
^^^^^^^^^^^^^^^^^^^
A function or process is declared using the 'func' or 'proc' keyword, as in
Calvisus but without any body. A user of the module can call the function or
the process.

Qualified Names
^^^^^^^^^^^^^^^
Entities from other modules can be referred to without importing them by using
qualified names. Qualified names consist of a module name, followed by the '@'
symbol, followed by the name of an entity within the module. If a qualified
name is used to refer to some module Foo, then Foo must be listed as a module
dependency. In this example, Bool@Bool is used to refer to the Bool type in
the declaration of the Equals function. In this case, no qualification is
needed for the Bool type because it has already been imported, but if the Bool
type was not imported into the Int module interface, the qualified form
"Bool@Bool" would need to be used.

Module Implementations
----------------------
The following is a slightly contrived exaple of the odule definition
corresponding to the interface definition in the previous section for an
integer arithmetic module. In this example, the integers are unbounded natural
numbers starting from 0.

mdefn Int(Unit, Bool) {
  import Unit(Unit);
  import Bool(True);

  union Int(Unit 0, Int S);

  func Zero( ; Int) {
    Int:0();
  };

  ...

  func Equals(Int a, Int b; Bool) {
    ?(a; ?(b; True(),           # 0 == 0
              Bool@False()),    # 0 != 1+s
         ?(b; Bool@False(),     # 1 + s != 0
              Equals(a.S, b.S)));
  };
};

The module implementation is introduced with the 'mdefn' keyword, which is
short for "module definition". Following the 'mdefn' keyword is the module
name, which must match the name provided for the corresponding 'mdecl'
interface definition.

As with interface definitions, module definitions have a list of module
dependencies. These are other modules that the implementation depends on,
which may be different from the modules the interface depends on. For example,
in this case, the implementation reuses the 'Unit' module to define the Int
type, so it depends on the 'Unit' module even though the interface does not.
The module definition also depends on the 'Bool' module, because it uses the
functions 'True' and 'False'.

Any names explicitly imported into a module's interface definition are
implicitly available in the module's definition. For example, because the Bool
type from the Bool module was imported in the Int module declaration, it is
available to use in the module definition.

Aside from the implicit availabilty of names declared and imported into the
module declaration, the same rules apply for what to list as a module
dependency for the module definition as for the module declaration.

The body of the 'mdefn' consists of a sequence of declarations including
imports, type declarations, function declarations, and process declarations in
any order.

The import statement for 'mdefn' behaves exactly as it does for 'mdecl'. For
example, because the 'True' function from Bool is imported, it can be used
unqualified in the implementation of Equals. In constrast, for illustration
purposes, the 'False' function was not imported, so it the qualified form
'Bool@False' must be used instead.

Type, function, and process declarations are the same as in Calvisus, except
that they may refer to qualified names for modules listed as dependencies in
addition to the usual unqualified names.

For a module definition to be valid, it must include a struct or union type
declaration for every abstract 'type' declared in module declaration. It must
also provide an implementation of every function and process declared in the
module declaration, and the types of those functions and process must match
the types listed in the declaration. The module may include additional types,
functions, or processes that are not visible outside of the module
implementation.

