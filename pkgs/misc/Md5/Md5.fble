
@ Bool@ = /Core/Bool%.Bool@;
% And = /Core/Bool%.And;
% False = /Core/Bool%.False;
% True = /Core/Bool%.True;

@ Hex@ = /Core/Digits%.Hex@;
% Hex = /Core/Digits%.Hex;
% 0 = Hex.0; % 1 = Hex.1; % 2 = Hex.2; % 3 = Hex.3;
% 4 = Hex.4; % 5 = Hex.5; % 6 = Hex.6; % 7 = Hex.7;
% 8 = Hex.8; % 9 = Hex.9; % A = Hex.A; % B = Hex.B;
% C = Hex.C; % D = Hex.D; % E = Hex.E;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@,@>% ForEach = /Core/List%.ForEach;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Bit@ = /Md5/Bits%.Bit.Bit@;
@ Bit2@ = /Md5/Bits%.Bit2.Bit2@;
@ Bit4@ = /Md5/Bits%.Bit4.Bit4@;
@ Bit8@ = /Md5/Bits%.Bit8.Bit8@;
@ Bit16@ = /Md5/Bits%.Bit16.Bit16@;
@ Bit32@ = /Md5/Bits%.Bit32.Bit32@;
@ Bit64@ = /Md5/Bits%.Bit64.Bit64@;

% H2 = /Md5/Bits%.Bit8.H2;

% and = /Md5/Bits%.Bit32.BitN.and;
% or = /Md5/Bits%.Bit32.BitN.or;
% not = /Md5/Bits%.Bit32.BitN.not;
% xor = /Md5/Bits%.Bit32.BitN.xor;
% add = /Md5/Bits%.Bit32.BitN.add;

<@>@ Get@ = /Core/Process%.Get@;
<@>@ Put@ = /Core/Process%.Put@;

# Construct a Bit32 in hex, with high-order byte first.
(List@<Hex@>) { Bit32@; } H8 = (List@<Hex@> s) {
  Hex@ 7 = s.cons.head;
  Hex@ 6 = s.cons.tail.cons.head;
  Hex@ 5 = s.cons.tail.cons.tail.cons.head;
  Hex@ 4 = s.cons.tail.cons.tail.cons.tail.cons.head;
  Hex@ 3 = s.cons.tail.cons.tail.cons.tail.cons.tail.cons.head;
  Hex@ 2 = s.cons.tail.cons.tail.cons.tail.cons.tail.cons.tail.cons.head;
  Hex@ 1 = s.cons.tail.cons.tail.cons.tail.cons.tail.cons.tail.cons.tail.cons.head;
  Hex@ 0 = s.cons.tail.cons.tail.cons.tail.cons.tail.cons.tail.cons.tail.cons.tail.cons.head;
  Bit32@(Bit16@(H2(7, 6), H2(5, 4)), Bit16@(H2(3, 2), H2(1, 0)));
};

@ Block@ = *(
  Bit32@ 0, Bit32@ 1, Bit32@ 2, Bit32@ 3,
  Bit32@ 4, Bit32@ 5, Bit32@ 6, Bit32@ 7,
  Bit32@ 8, Bit32@ 9, Bit32@ 10, Bit32@ 11,
  Bit32@ 12, Bit32@ 13, Bit32@ 14, Bit32@ 15);

Block@ T1 = Block@(
  H8|D76AA478, H8|E8C7B756, H8|242070DB, H8|C1BDCEEE,
  H8|F57C0FAF, H8|4787C62A, H8|A8304613, H8|FD469501,
  H8|698098D8, H8|8B44F7AF, H8|FFFF5BB1, H8|895CD7BE,
  H8|6B901122, H8|FD987193, H8|A679438E, H8|49B40821
);

Block@ T2 = Block@(
  H8|F61E2562, H8|C040B340, H8|265E5A51, H8|E9B6C7AA,
  H8|D62F105D, H8|02441453, H8|D8A1E681, H8|E7D3FBC8,
  H8|21E1CDE6, H8|C33707D6, H8|F4D50D87, H8|455A14ED,
  H8|A9E3E905, H8|FCEFA3F8, H8|676F02D9, H8|8D2A4C8A
);

Block@ T3 = Block@(
  H8|FFFA3942, H8|8771F681, H8|6D9D6122, H8|FDE5380C,
  H8|A4BEEA44, H8|4BDECFA9, H8|F6BB4B60, H8|BEBFBC70,
  H8|289B7EC6, H8|EAA127FA, H8|D4EF3085, H8|04881D05,
  H8|D9D4D039, H8|E6DB99E5, H8|1FA27CF8, H8|C4AC5665
);

Block@ T4 = Block@(
  H8|F4292244, H8|432AFF97, H8|AB9423A7, H8|FC93A039,
  H8|655B59C3, H8|8F0CCC92, H8|FFEFF47D, H8|85845DD1,
  H8|6FA87E4F, H8|FE2CE6E0, H8|A3014314, H8|4E0811A1,
  H8|F7537E82, H8|BD3AF235, H8|2AD7D2BB, H8|EB86D391
);

@ Md5Hash@ = *(
  Hex@  0, Hex@  1, Hex@  2, Hex@  3, Hex@  4, Hex@  5, Hex@  6, Hex@  7,
  Hex@  8, Hex@  9, Hex@ 10, Hex@ 11, Hex@ 12, Hex@ 13, Hex@ 14, Hex@ 15,
  Hex@ 16, Hex@ 17, Hex@ 18, Hex@ 19, Hex@ 20, Hex@ 21, Hex@ 22, Hex@ 23,
  Hex@ 24, Hex@ 25, Hex@ 26, Hex@ 27, Hex@ 28, Hex@ 29, Hex@ 30, Hex@ 31);

@ ABCD@ = *(Bit32@ a, Bit32@ b, Bit32@ c, Bit32@ d);

@ S@ = +(
  Unit@  0, Unit@  1, Unit@  2, Unit@  3, Unit@  4, Unit@  5, Unit@  6, Unit@  7,
  Unit@  8, Unit@  9, Unit@ 10, Unit@ 11, Unit@ 12, Unit@ 13, Unit@ 14, Unit@ 15,
  Unit@ 16, Unit@ 17, Unit@ 18, Unit@ 19, Unit@ 20, Unit@ 21, Unit@ 22, Unit@ 23);

(Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@,
 Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@,
 Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@,
 Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@, Bit@) { Bit32@; }
B32 =
 (Bit@ 31, Bit@ 30, Bit@ 29, Bit@ 28, Bit@ 27, Bit@ 26, Bit@ 25, Bit@ 24,
  Bit@ 23, Bit@ 22, Bit@ 21, Bit@ 20, Bit@ 19, Bit@ 18, Bit@ 17, Bit@ 16,
  Bit@ 15, Bit@ 14, Bit@ 13, Bit@ 12, Bit@ 11, Bit@ 10, Bit@  9, Bit@  8,
  Bit@  7, Bit@  6, Bit@  5, Bit@  4, Bit@  3, Bit@  2, Bit@  1, Bit@  0) {
    Bit32@(
      Bit16@(
        Bit8@(Bit4@(Bit2@(31, 30), Bit2@(29, 28)), Bit4@(Bit2@(27, 26), Bit2@(25, 24))),
        Bit8@(Bit4@(Bit2@(23, 22), Bit2@(21, 20)), Bit4@(Bit2@(19, 18), Bit2@(17, 16)))),
      Bit16@(
        Bit8@(Bit4@(Bit2@(15, 14), Bit2@(13, 12)), Bit4@(Bit2@(11, 10), Bit2@( 9,  8))),
        Bit8@(Bit4@(Bit2@( 7,  6), Bit2@( 5,  4)), Bit4@(Bit2@( 3,  2), Bit2@( 1,  0)))));
};

# TODO: This is a pretty lame implementation of circular left shift...
(Bit32@, S@){Bit32@;} cls = (Bit32@ a, S@ s) {
  s.?(
    0: B32(
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo,
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo,
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo,
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo,
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo,
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo),
    1: B32(
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi,
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi,
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi,
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi,
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi,
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi),
    2: B32(
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo,
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo,
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo,
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo,
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo,
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo),
    3: B32(
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi,
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi,
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi,
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi,
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi,
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi),
    4: B32(
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo,
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo,
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo,
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo,
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo,
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo),
    5: B32(
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi,
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi,
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi,
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi,
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi,
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi),
    6: B32(
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo,
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo,
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo,
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo,
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo,
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo),
    7: B32(
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi,
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi,
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi,
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi,
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi,
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi),
    8: B32(
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo,
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo,
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo,
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo,
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo,
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo),
    9: B32(
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi,
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi,
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi,
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi,
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi,
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi),
   10: B32(
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo,
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo,
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo,
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo,
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo,
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo),
   11: B32(
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi,
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi,
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi,
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi,
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi,
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi),
   12: B32(
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo,
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo,
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo,
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo,
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo,
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo),
   13: B32(
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi,
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi,
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi,
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi,
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi,
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi),
   14: B32(
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo,
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo,
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo,
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo,
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo,
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo),
   15: B32(
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi,
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi,
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi,
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi,
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi,
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi),
   16: B32(
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo,
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo,
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo,
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo,
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo,
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo),
   17: B32(
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi,
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi,
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi,
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi,
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi,
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi),
   18: B32(
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo,
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo,
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo,
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo,
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo,
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo),
   19: B32(
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi,
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi,
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi,
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi,
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi,
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi),
   20: B32(
      a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo,
      a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo,
      a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo,
      a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo,
      a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo,
      a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo,
      a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo,
      a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo),
   21: B32(
      a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi,
      a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi,
      a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi,
      a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi,
      a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi,
      a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi,
      a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi,
      a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi),
   22: B32(
      a.lo.hi.lo.lo.hi, a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo,
      a.lo.lo.hi.lo.hi, a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo,
      a.lo.lo.lo.lo.hi, a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo,
      a.hi.hi.hi.lo.hi, a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo,
      a.hi.hi.lo.lo.hi, a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo,
      a.hi.lo.hi.lo.hi, a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo,
      a.hi.lo.lo.lo.hi, a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo,
      a.lo.hi.hi.lo.hi, a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo),
   23: B32(
      a.lo.hi.lo.lo.lo, a.lo.lo.hi.hi.hi, a.lo.lo.hi.hi.lo, a.lo.lo.hi.lo.hi,
      a.lo.lo.hi.lo.lo, a.lo.lo.lo.hi.hi, a.lo.lo.lo.hi.lo, a.lo.lo.lo.lo.hi,
      a.lo.lo.lo.lo.lo, a.hi.hi.hi.hi.hi, a.hi.hi.hi.hi.lo, a.hi.hi.hi.lo.hi,
      a.hi.hi.hi.lo.lo, a.hi.hi.lo.hi.hi, a.hi.hi.lo.hi.lo, a.hi.hi.lo.lo.hi,
      a.hi.hi.lo.lo.lo, a.hi.lo.hi.hi.hi, a.hi.lo.hi.hi.lo, a.hi.lo.hi.lo.hi,
      a.hi.lo.hi.lo.lo, a.hi.lo.lo.hi.hi, a.hi.lo.lo.hi.lo, a.hi.lo.lo.lo.hi,
      a.hi.lo.lo.lo.lo, a.lo.hi.hi.hi.hi, a.lo.hi.hi.hi.lo, a.lo.hi.hi.lo.hi,
      a.lo.hi.hi.lo.lo, a.lo.hi.lo.hi.hi, a.lo.hi.lo.hi.lo, a.lo.hi.lo.lo.hi));
};

@ X@ = (Bit32@, Bit32@, Bit32@) { Bit32@; };
@ XX@ = (Bit32@, Bit32@, Bit32@, Bit32@, Bit32@, S@, Bit32@) { Bit32@; };

(X@) { XX@; } XX = (X@ xf)(Bit32@ a, Bit32@ b, Bit32@ c, Bit32@ d, Bit32@ x, S@ s, Bit32@ t) {
  add(b, cls(add(add(a, xf(b, c, d)), add(x, t)), s));
};

@ Round@ = (Bit32@, Bit32@, Bit32@, Bit32@, Block@) { ABCD@; };

(XX@, S@, S@, S@, S@, Block@, (Block@) { Block@; }) { Round@; }
RoundX = (XX@ xx, S@ s0, S@ s1, S@ s2, S@ s3, Block@ t, (Block@) { Block@; } permute)
(Bit32@ a0, Bit32@ b0, Bit32@ c0, Bit32@ d0, Block@ block) {
  Block@ permuted = permute(block);

  Bit32@ a1 = xx(a0, b0, c0, d0, permuted.0, s0, t.0);
  Bit32@ d1 = xx(d0, a1, b0, c0, permuted.1, s1, t.1);
  Bit32@ c1 = xx(c0, d1, a1, b0, permuted.2, s2, t.2);
  Bit32@ b1 = xx(b0, c1, d1, a1, permuted.3, s3, t.3);

  Bit32@ a2 = xx(a1, b1, c1, d1, permuted.4, s0, t.4);
  Bit32@ d2 = xx(d1, a2, b1, c1, permuted.5, s1, t.5);
  Bit32@ c2 = xx(c1, d2, a2, b1, permuted.6, s2, t.6);
  Bit32@ b2 = xx(b1, c2, d2, a2, permuted.7, s3, t.7);

  Bit32@ a3 = xx(a2, b2, c2, d2, permuted.8, s0, t.8);
  Bit32@ d3 = xx(d2, a3, b2, c2, permuted.9, s1, t.9);
  Bit32@ c3 = xx(c2, d3, a3, b2, permuted.10, s2, t.10);
  Bit32@ b3 = xx(b2, c3, d3, a3, permuted.11, s3, t.11);

  Bit32@ a4 = xx(a3, b3, c3, d3, permuted.12, s0, t.12);
  Bit32@ d4 = xx(d3, a4, b3, c3, permuted.13, s1, t.13);
  Bit32@ c4 = xx(c3, d4, a4, b3, permuted.14, s2, t.14);
  Bit32@ b4 = xx(b3, c4, d4, a4, permuted.15, s3, t.15);

  ABCD@(a4, b4, c4, d4);
};

X@ F = (Bit32@ x, Bit32@ y, Bit32@ z) { or(and(x, y), and(not(x), z)); };
X@ G = (Bit32@ x, Bit32@ y, Bit32@ z) { or(and(x, z), and(y, not(z))); };
X@ H = (Bit32@ x, Bit32@ y, Bit32@ z) { xor(x, xor(y, z)); };
X@ I = (Bit32@ x, Bit32@ y, Bit32@ z) { xor(y, or(x, not(z))); };

XX@ FF = XX(F);
XX@ GG = XX(G);
XX@ HH = XX(H);
XX@ II = XX(I);

Round@ Round1 = RoundX(FF, S@(7: Unit), S@(12: Unit), S@(17: Unit), S@(22: Unit), T1, (Block@ b) {
  b;
});

Round@ Round2 = RoundX(GG, S@(5: Unit), S@(9: Unit), S@(14: Unit), S@(20: Unit), T2, (Block@ b) {
  Block@(
    b.1, b.6, b.11, b.0,
    b.5, b.10, b.15, b.4,
    b.9, b.14, b.3, b.8,
    b.13, b.2, b.7, b.12);
});

Round@ Round3 = RoundX(HH, S@(4: Unit), S@(11: Unit), S@(16: Unit), S@(23: Unit), T3, (Block@ b) {
  Block@(
    b.5, b.8, b.11, b.14,
    b.1, b.4, b.7, b.10,
    b.13, b.0, b.3, b.6,
    b.9, b.12, b.15, b.2);
});

Round@ Round4 = RoundX(II, S@(6: Unit), S@(10: Unit), S@(15: Unit), S@(21: Unit), T4, (Block@ b) {
  Block@(
    b.0, b.7, b.14, b.5,
    b.12, b.3, b.10, b.1,
    b.8, b.15, b.6, b.13,
    b.4, b.11, b.2, b.9);
});

(ABCD@, Block@) { ABCD@; } DoBlockImpl = (ABCD@ abcd, Block@ block) {
  ABCD@ r1 = Round1(abcd.a, abcd.b, abcd.c, abcd.d, block);
  ABCD@ r2 = Round2(r1.a, r1.b, r1.c, r1.d, block);
  ABCD@ r3 = Round3(r2.a, r2.b, r2.c, r2.d, block);
  ABCD@ r4 = Round4(r3.a, r3.b, r3.c, r3.d, block);
  ABCD@(add(abcd.a, r4.a), add(abcd.b, r4.b), add(abcd.c, r4.c), add(abcd.d, r4.d));
};

#(ABCD@, Block@) { ABCD@; } DoBlock = $(DoBlockImpl);
(ABCD@, Block@) { ABCD@; } DoBlock = DoBlockImpl;

<@>@ Streamed@ = <@ T@> { *(T@ data, Bool@ last); }; 

# Gets the next word from a pre-padded input
(Streamed@<Bit8@>!) { Streamed@<Bit32@>!; } GetWord = (Streamed@<Bit8@>! padded) {
  Streamed@<Bit8@> a := padded;
  Streamed@<Bit8@> b := padded;
  Streamed@<Bit8@> c := padded;
  Streamed@<Bit8@> d := padded;
  !(Streamed@<Bit32@>(Bit32@(Bit16@(d.data, c.data), Bit16@(b.data, a.data)), d.last));
};

# Gets the next block from a pre-padded input
(Streamed@<Bit8@>!) { Streamed@<Block@>!; } GetBlock = (Streamed@<Bit8@>! padded) {
  Streamed@<Bit32@> 0 := GetWord(padded);
  Streamed@<Bit32@> 1 := GetWord(padded);
  Streamed@<Bit32@> 2 := GetWord(padded);
  Streamed@<Bit32@> 3 := GetWord(padded);
  Streamed@<Bit32@> 4 := GetWord(padded);
  Streamed@<Bit32@> 5 := GetWord(padded);
  Streamed@<Bit32@> 6 := GetWord(padded);
  Streamed@<Bit32@> 7 := GetWord(padded);
  Streamed@<Bit32@> 8 := GetWord(padded);
  Streamed@<Bit32@> 9 := GetWord(padded);
  Streamed@<Bit32@> 10 := GetWord(padded);
  Streamed@<Bit32@> 11 := GetWord(padded);
  Streamed@<Bit32@> 12 := GetWord(padded);
  Streamed@<Bit32@> 13 := GetWord(padded);
  Streamed@<Bit32@> 14 := GetWord(padded);
  Streamed@<Bit32@> 15 := GetWord(padded);
  !(Streamed@<Block@>(
    Block@(
      0.data, 1.data, 2.data, 3.data,
      4.data, 5.data, 6.data, 7.data,
      8.data, 9.data, 10.data, 11.data,
      12.data, 13.data, 14.data, 15.data),
    15.last));
};

# Computes the MD5 checksum of a pre-padded sequence of bytes.
(Streamed@<Bit8@>!, ABCD@) { ABCD@!; } PaddedMd5 = (Streamed@<Bit8@>! padded, ABCD@ abcd) {
  Streamed@<Block@> block := GetBlock(padded);
  ABCD@ md5 = DoBlock(abcd, block.data);
  block.last.?(true: !(md5), false: PaddedMd5(padded, md5));
};

(Bit64@) { Bit64@; } Inc64 = (Bit64@ a) {
  /Md5/Bits%.Bit64.BitN.inc(a);
};

(Hex@, Hex@) { Bit64@; } H2_64 = (Hex@ a, Hex@ b) {
  Bit8@ 0b8 = H2(0, 0);
  Bit64@(Bit32@(Bit16@(0b8, 0b8), Bit16@(0b8, 0b8)), Bit32@(Bit16@(0b8, 0b8), Bit16@(0b8, H2(a, b))));
};

(Bit64@) { Bit64@; } shl64 = (Bit64@ a) {
  /Md5/Bits%.Bit64.BitN.lshift(a, Bit@(0: Unit)).z;
};

# Add zeros as needed, then the final length to the output message.
Bit64@ 3f_64 = H2_64(3, Hex.F);
Bit64@ 08_64 = H2_64(0, 8);
(Put@<Streamed@<Bit8@>>, Bit64@, Bit64@){Unit@!;} PadZ = (Put@<Streamed@<Bit8@>> output, Bit64@ msglen, Bit64@ length) {
  /Md5/Bits%.Bit64.BitN.iszero(
    /Md5/Bits%.Bit64.BitN.and(3f_64, /Md5/Bits%.Bit64.BitN.add(08_64, length))).?(
       true: {
         Bit64@ bits = shl64(shl64(shl64(msglen)));
         Unit@ _ := output(Streamed@<Bit8@>(bits.lo.lo.lo, False));
         Unit@ _ := output(Streamed@<Bit8@>(bits.lo.lo.hi, False));
         Unit@ _ := output(Streamed@<Bit8@>(bits.lo.hi.lo, False));
         Unit@ _ := output(Streamed@<Bit8@>(bits.lo.hi.hi, False));
         Unit@ _ := output(Streamed@<Bit8@>(bits.hi.lo.lo, False));
         Unit@ _ := output(Streamed@<Bit8@>(bits.hi.lo.hi, False));
         Unit@ _ := output(Streamed@<Bit8@>(bits.hi.hi.lo, False));
         Unit@ _ := output(Streamed@<Bit8@>(bits.hi.hi.hi, True));
         !(Unit);
       },
       false: {
         Unit@ _ := output(Streamed@<Bit8@>(H2(0, 0), False));
         PadZ(output, msglen, Inc64(length));
       });
};

# Note: length is in units of bytes
(Get@<Maybe@<Bit8@>>, Put@<Streamed@<Bit8@>>, Bit64@) { Unit@!; }
Pad = (Get@<Maybe@<Bit8@>> input, Put@<Streamed@<Bit8@>> output, Bit64@ length) {
  Maybe@<Bit8@> x := input;
  x.?(
    just: {
      Unit@ _ := output(Streamed@<Bit8@>(x.just, False));
      Pad(input, output, Inc64(length));
    },
    nothing: {
      Unit@ _ := output(Streamed@<Bit8@>(H2(8, 0), False));
      PadZ(output, length, Inc64(length));
    });
};

ABCD@ ABCD0 = ABCD@(
  # Note: the spec lists these low-order byte first, but H8 takes high
  # order byte first.
  H8|67452301,
  H8|EFCDAB89,
  H8|98BADCFE,
  H8|10325476);

(Bit@, Bit@, Bit@, Bit@) { Hex@; }
HexFromBits = (Bit@ b3, Bit@ b2, Bit@ b1, Bit@ b0) {
  b3.?(
    0: b2.?(
      0: b1.?(0: b0.?(0: 0, 1: 1), 1: b0.?(0: 2, 1: 3)),
      1: b1.?(0: b0.?(0: 4, 1: 5), 1: b0.?(0: 6, 1: 7))),
    1: b2.?(
      0: b1.?(0: b0.?(0: 8, 1: 9), 1: b0.?(0: A, 1: B)),
      1: b1.?(0: b0.?(0: C, 1: D), 1: b0.?(0: E, 1: Hex.F))));
};

(Bit4@) { Hex@; } HexFromBit4 = (Bit4@ x) {
  HexFromBits(x.hi.hi, x.hi.lo, x.lo.hi, x.lo.lo);
};

@ HexPair@ = *(Hex@ hi, Hex@ lo);

(Bit8@){HexPair@;} HexFromByte = (Bit8@ byte) {
  HexPair@(HexFromBit4(byte.hi), HexFromBit4(byte.lo));
};

(ABCD@){Md5Hash@;} HexFromABCD = (ABCD@ x) {
  HexPair@ a0 = HexFromByte(x.a.lo.lo); HexPair@ a1 = HexFromByte(x.a.lo.hi);
  HexPair@ a2 = HexFromByte(x.a.hi.lo); HexPair@ a3 = HexFromByte(x.a.hi.hi);
  HexPair@ b0 = HexFromByte(x.b.lo.lo); HexPair@ b1 = HexFromByte(x.b.lo.hi);
  HexPair@ b2 = HexFromByte(x.b.hi.lo); HexPair@ b3 = HexFromByte(x.b.hi.hi);
  HexPair@ c0 = HexFromByte(x.c.lo.lo); HexPair@ c1 = HexFromByte(x.c.lo.hi);
  HexPair@ c2 = HexFromByte(x.c.hi.lo); HexPair@ c3 = HexFromByte(x.c.hi.hi);
  HexPair@ d0 = HexFromByte(x.d.lo.lo); HexPair@ d1 = HexFromByte(x.d.lo.hi);
  HexPair@ d2 = HexFromByte(x.d.hi.lo); HexPair@ d3 = HexFromByte(x.d.hi.hi);
  Md5Hash@(
    a0.hi, a0.lo, a1.hi, a1.lo, a2.hi, a2.lo, a3.hi, a3.lo,
    b0.hi, b0.lo, b1.hi, b1.lo, b2.hi, b2.lo, b3.hi, b3.lo,
    c0.hi, c0.lo, c1.hi, c1.lo, c2.hi, c2.lo, c3.hi, c3.lo,
    d0.hi, d0.lo, d1.hi, d1.lo, d2.hi, d2.lo, d3.hi, d3.lo);
};

(Maybe@<Bit8@>!) { Md5Hash@!; } Md5 = (Maybe@<Bit8@>! input) {
  Streamed@<Bit8@> ~ get_padded, put_padded;
  Unit@ _ := Pad(input, put_padded, /Md5/Bits%.Bit64.BitN.zero),
  ABCD@ md5 := PaddedMd5(get_padded, ABCD0);
  !(HexFromABCD(md5));
};

(Hex@, Hex@) { Bool@; } EqHex = (Hex@ a, Hex@ b) {
  /Md5/Bits%.Bit8.BitN.eq(H2(0, a), H2(0, b));
};

(Md5Hash@, Md5Hash@) { Bool@; } Eq = (Md5Hash@ a, Md5Hash@ b) {
  ForEach<Bool@, Bool@>(
    List<Bool@>[
      EqHex(a.0, b.0), EqHex(a.1, b.1), EqHex(a.2, b.2), EqHex(a.3, b.3),
      EqHex(a.4, b.4), EqHex(a.5, b.5), EqHex(a.6, b.6), EqHex(a.7, b.7),
      EqHex(a.8, b.8), EqHex(a.9, b.9), EqHex(a.10, b.10), EqHex(a.11, b.11),
      EqHex(a.12, b.12), EqHex(a.13, b.13), EqHex(a.14, b.14), EqHex(a.15, b.15),
      EqHex(a.16, b.16), EqHex(a.17, b.17), EqHex(a.18, b.18), EqHex(a.19, b.19),
      EqHex(a.20, b.20), EqHex(a.21, b.21), EqHex(a.22, b.22), EqHex(a.23, b.23),
      EqHex(a.24, b.24), EqHex(a.25, b.25), EqHex(a.26, b.26), EqHex(a.27, b.27),
      EqHex(a.28, b.28), EqHex(a.29, b.29), EqHex(a.30, b.30), EqHex(a.31, b.31)],
    True, And);
};

@(Md5Hash@, Md5, Eq);
