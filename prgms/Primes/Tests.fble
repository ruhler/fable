
% Unit = /Unit%.Unit;

@ Char@ = /Char%.Char@;
% Chars = /Char%.Chars;

<@>@ S@ = /List%.S@;
<@>% S = /List%.S;
<@>% Append = /List%.Append;

@ Str@ = /String%.Str@;
% Str = /String%.Str;

@ IntP@ = /Int/IntP%.IntP@;
% 1 = /Int/IntP%.1;
% 3 = /Int/IntP%.3;
% 10 = /Int/IntP%.10;
% Lit2 = /Int/IntP%.Lit2;

% Eq = /Int/IntP/Eq%.Eq;

@ IntS@ = /Int/IntS%.IntS@;

% NthPrime = /Primes%.NthPrime;

@ Test@ = /Test%.Test@;
@ TestResult@ = /Test%.TestResult@;

(Str@, IntP@, IntP@){Test@;} TEq = (Str@ name, IntP@ a, IntP@ b) {
  Test@(Append<Char@>(Str(Chars|'Primes.'), name), $({
    # TODO: Better error message in case of failure.
    ?(Eq(a, b);
        true: TestResult@(pass: Unit),
        false: TestResult@(fail: Str(Chars|failed)));
  }));
};

Test@ NthPrime_1_10 = TEq(Str(Chars|'NthPrime_1_10'), Lit2(3, 1), NthPrime(1, IntS@(p: 10)));

S@<Test@> Tests = S<Test@>([NthPrime_1_10]);

@(Tests);
