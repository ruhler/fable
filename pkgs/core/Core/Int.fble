
% IntP = /Core/Int/IntP%;
@ IntP@ = IntP.IntP@;
% AddP = IntP.Add;
% MulP = IntP.Mul;
% Exp2P = IntP.Exp2;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Int@ = +(
  IntP@ n,   # Negative integers
  Unit@ 0,
  IntP@ p    # Positive integers
);

Int@ 0 = Int@(0: Unit);

(IntP@) { Int@; } N = (IntP@ x) {
  Int@(n: x);
};

(IntP@) { Int@; } P = (IntP@ x) {
  Int@(p: x);
};

Int@ 1 = P(IntP.1);
Int@ 2 = P(IntP.2);
Int@ 3 = P(IntP.3);
Int@ 4 = P(IntP.4);
Int@ 5 = P(IntP.5);
Int@ 6 = P(IntP.6);
Int@ 7 = P(IntP.7);
Int@ 8 = P(IntP.8);
Int@ 9 = P(IntP.9);
Int@ 10 = P(IntP.10);

# Sub1(x) = x - 1
(IntP@) { Int@; } Sub1 = (IntP@ x) {
  x.?(1: 0,
      2p0: {
        Int@ s = Sub1(x.2p0);
        s.?(0: 1);
        Int@(p: IntP@(2p1: s.p));
      },
      2p1: Int@(p: IntP@(2p0: x.2p1)));
};

# a + 1
(Int@){ Int@; } Incr = (Int@ a) {
  a.?( 
      n: {
        Int@ s = Sub1(a.n);
        s.?(0: 0);
        N(s.p);
      },
      0: P(IntP.1),
      p: P(IntP.Add1(a.p)));
};

# a - 1
(Int@){ Int@; } Decr = (Int@ a) {
  a.?(
      n: N(IntP.Add1(a.n)),
      0: N(IntP.1),
      p: {
        Int@ s = Sub1(a.p);
        s.?(0: 0);
        P(s.p);
      });
};

# 2 * a
(Int@) { Int@; } Mul2 = (Int@ a) {
  a.?(n: N(IntP@(2p0: a.n)), 0: a, p: P(IntP@(2p0: a.p)));
};

(IntP@, IntP@) { Int@; } SubP = (IntP@ a, IntP@ b) {
  a.?(1: {
         Int@ s = Sub1(b);
         s.?(0: 0);
         N(s.p);
       },
       2p0: b.?(1: P(Sub1(a).p),
                2p0: Mul2(SubP(a.2p0, b.2p0)),
                2p1: Decr(Mul2(SubP(a.2p0, b.2p1)))),
       2p1: b.?(1: P(Sub1(a).p),
                2p0: Incr(Mul2(SubP(a.2p1, b.2p0))),
                2p1: Mul2(SubP(a.2p1, b.2p1))));
};

# a + b
(Int@, Int@) { Int@; } Add = (Int@ a, Int@ b) {
  a.?(n: b.?(n: N(AddP(a.n, b.n)),
             0: a,
             p: SubP(b.p, a.n)),
       0: b,
       p: b.?(n: SubP(a.p, b.n),
              0: a,
              p: P(AddP(a.p, b.p))));
};

# -a 
(Int@) { Int@; } Neg = (Int@ a) {
  a.?(n: P(a.n), 0: a, p: N(a.p));
};

# a - b 
(Int@, Int@) { Int@; } Sub = (Int@ a, Int@ b) {
  # a - b = a + (-b)
  Add(a, Neg(b));
};

# a * b
(Int@, Int@) { Int@; } Mul = (Int@ a, Int@ b) {
  a.?(
    n: b.?(n: P(MulP(a.n, b.n)),
           0: 0,
           p: N(MulP(a.n, b.p))),
    0: 0,
    p: b.?(n: N(MulP(a.p, b.n)),
            0: 0,
            p: P(MulP(a.p, b.p))));
};

# 2^a
(Int@) { Int@; } Exp2 = (Int@ a) {
  a.?(n: 0, 0: 1, p: P(Exp2P(a.p)));
};

# |a|
(Int@) { Int@; } Abs = (Int@ a) {
  a.?(n: P(a.n), : a);
};

@(Int@, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
  Incr, Decr, Add, Sub, Neg, Mul, Exp2,
  Abs);
