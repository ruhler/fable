@usage
fble-compile \[@arg[OPTION]...\] -m @arg[MODULE_PATH]

Compile the fble module identified by @arg[MODULE_PATH].

There are three kinds of things that can be included in the generated code:

@ordered
[
@li[@id[1]]
Code generated for executing the given module. This will generate an
@ent[FbleCompiledModuleFunction] for the module under an internal name that
users should not directly reference.

@li
A named @ent[FbleCompiledModuleFunction] function to export the code generated
for a module. Users provide their desired name for this function. The compiler
will re-export the internally named @ent[FbleCompiledModuleFunction] from
@ref[1] under this user specified name.

@li
[
A standard @ent[main] function that invokes a user provided wrapper function.
The wrapper function should have type:

@code
int <name>(int argc, const char** argv, FbleCompiledModuleFunction* module);

It will be called passing @arg[argc] and @arg[argv] from @ent[main] and the
compiled module generated in @ref[1].
]
]

@options
[
@subsection[Generic Program Information]
@opt[-h, --help]      display this help text and exit
@opt[-v, --version]   display version information and exit

@subsection[Input Control]
@opt[-I @arg[DIR]]                   add @arg[DIR] to the module search path
@opt[-m, --module @arg[MODULE_PATH]] the path of the module to compile
]

@exitstatus
@definitions
@def[0] Success.
@def[1] Failure.
@def[2] Usage error.

@examples
[
@ex[fble-compile -c -e CompiledFoo -I foo -m /Foo% > Foo.fble.s]
Compiles /Foo% to an FbleCompiledModuleFunction* called CompiledFoo.

@ex[fble-compile -c --main FbleStdioMain -I foo -m /Foo% > foo.s]
Generates a standalone program that invokes FbleStdioMain on the compiled
code for /Foo% when run.
]
