
@ Bool@ = /Bool%.Bool@;
% True = /Bool%.True;
% False = /Bool%.False;
% AndMonoid = /Bool%.AndMonoid;

@ Char@ = /Char%.Char@;
% Chars = /Char%.Chars;

<@>@ S@ = /List%.S@;
<@>% S0 = /List%.S0;
<@>% S = /List%.S;
<@>% Append = /List%.Append;
<@>% Concat = /List%.Concat;
<@>% ConsS = /List%.ConsS;
<@,@>% ForS = /List%.ForS;
<@,@>% MapS = /List%.MapS;
<@>% SeqS = /List%.SeqS;

<@,@>@ Lit@ = /Literal%.Lit@;

<@>@ Put@ = /Process%.Put@;

@ Str@ = /String%.Str@;
<@>@ CharLit@ = /String%.CharLit@;
% Str = /String%.Str;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

@ TestResult@ = +(Unit@ pass, Str@ fail);
@ Test@ = *(Str@ name, TestResult@! test);
@ TestSuite@ = S@<Test@>;

# TestSuite --
#   Creates a suite of tests.
#
# Inputs:
#   name - the name of the test suite.
#   tests - the list of tests in the test suite.
(CharLit@, Lit@<Test@>) { TestSuite@; }
TestSuite = (CharLit@ name, Lit@<Test@> tests) {
  Str@ prefix = Append<Char@>(Str(name), Str(Chars|'.'));
  MapS<Test@, Test@>(S<Test@>(tests), (Test@ test) {
    Test@(Append<Char@>(prefix, test.name), test.test);
  });
};

<@ T@>((T@, T@) { Bool@; }, (T@) { Str@; }, T@, T@) { TestResult@; }
AssertEquals = <@ T@>((T@, T@) { Bool@; } eq, (T@) { Str@; } print, T@ expected, T@ actual) {
  eq(expected, actual).?(
    true: TestResult@(pass: Unit),
    false: TestResult@(fail: Concat<Char@>(S<Str@>([
          Str(Chars|'expected: '),
          print(expected),
          Str(Chars|', but got: '),
          print(actual)]))));
};

# Print a string to the given output stream.
(Put@<Str@>, Str@) { Unit@!; } Print = (Put@<Str@> out, Str@ str) {
  out(str);
};

# Print a string and newline to the given output stream.
(Put@<Str@>, Str@) { Unit@!; } PrintLn = (Put@<Str@> out, Str@ str) {
  out(Append<Char@>(str, Str([Chars.nl])));
};

# Returns True if the tests all pass, false otherwise.
(Put@<Str@>, TestSuite@) { Bool@!; } RunTests = (Put@<Str@> out, TestSuite@ tests) {
  @ Failure@ = *(Str@ name, Str@ msg);

  # Run all the tests, given a list of tests that failed so far.
  # Returns the list of failing tests.
  (TestSuite@, S@<Failure@>) { S@<Failure@>!; }
  Run = (TestSuite@ ts, S@<Failure@> failed) {
    ts.?(
      cons: {
        Test@ t = ts.cons.head;
        TestResult@ tr := t.test;
        Str@ status = Str(tr.?(pass: Chars|'.', fail: Chars|'F'));
        Unit@ _ := out(status);
        S@<Failure@> nfailed = tr.?(
          pass: failed,
          fail: ConsS<Failure@>(Failure@(t.name, tr.fail), failed));
        Run(ts.cons.tail, nfailed);
      },
      nil: !(failed));
  };

  S@<Failure@> failures := Run(tests, S0<Failure@>);

  Unit@ _ := PrintLn(out, S0<Char@>);
  Unit@ _ := ForS<Failure@, Unit@!>(failures, !(Unit), (Failure@ f, Unit@! p) {
    Unit@ _ := p;
    PrintLn(out, Concat<Char@>(S<Str@>([f.name, Str(Chars|': FAILED: '), f.msg])));
  });

  # TODO: Why do we need this extra output?
  Unit@ _ := PrintLn(out, S0<Char@>);
  Unit@ _ := PrintLn(out, S0<Char@>);

  !(failures.?(cons: False, nil: True));
};

# Returns True if the tests all pass, false otherwise.
(Put@<Str@>, TestSuite@) { Bool@!; } RunTestsVerbose = (Put@<Str@> out, TestSuite@ tests) {
  SeqS<Bool@>(AndMonoid, {
    MapS<Test@, Bool@!>(tests, (Test@ test) {
      Unit@ _ := Print(out, test.name);
      TestResult@ tr := test.test;
      tr.?(
        pass: {
          Unit@ _ := PrintLn(out, S0<Char@>);
          !(True);
        },
        fail: {
          Unit@ _ := PrintLn(
            out,
            Concat<Char@>(S<Str@>([
              Str(Chars|': FAILED: '),
              tr.fail])));
          !(False);
        });
    });
  });
};

TestSuite@ Tests = {
  Test@ pass = Test@(Str(Chars|pass), !(TestResult@(pass: Unit)));
  Test@ _fail = Test@(Str(Chars|fail), !(TestResult@(fail: Str(Chars|FAILED))));

  TestSuite(Chars|'Test', [pass]);
};

@(
  Str@, TestResult@, Test@, TestSuite@,
  AssertEquals, TestSuite, RunTests, RunTestsVerbose, Tests);
