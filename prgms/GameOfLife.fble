
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% And = /Core/Bool%.And;

<@>@ Eq@ = /Core/Eq%.Eq@;

@ Int@ = /Core/Int%.Int@;
% Inc = /Core/Int%.Inc;
% Dec = /Core/Int%.Dec;

% IsZero = /Core/Int/Eq%.IsZero;
% Eq = /Core/Int/Eq%.Eq;
% Lt = /Core/Int/Eq%.Lt;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@,@>% ForEach = /Core/List%.ForEach;

<@>@ Maybe@ = /Maybe%.Maybe@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Coord@ = *(Int@ row, Int@ col);

Eq@<Coord@> EqCoord = (Coord@ a, Coord@ b) {
  And(Eq(a.row, b.row), Eq(a.col, b.col));
};

Eq@<Coord@> LtCoord = (Coord@ a, Coord@ b) {
  Lt(a.row, b.row).?(true: True);
  Eq(a.row, b.row).?(false: False);
  Lt(a.col, b.col);
};

# The world is a set of Coord@ where there are live cells.
@ World@ = /Map%.Map@<Coord@, Unit@>;
% EqWorld = /Map/Eq%.Eq<Coord@, Unit@>(EqCoord, /Core/Unit/Eq%.Eq);
% W = @(
  Empty: /Map%.Empty<Coord@, Unit@>,
  Insert: /Map%.Insert<Coord@>(LtCoord)<Unit@>,
  ForEach: /Map%.ForEach<Coord@, Unit@>
);

# Create a world from a list of coordinates of live cells.
(List@<Coord@>){ World@; } World = (List@<Coord@> mkCells) {
  mkCells.?(
    cons: W.Insert(World(mkCells.cons.tail), mkCells.cons.head, Unit),
    nil: W.Empty);
};

# A count of neighboring cells. 4p stands for anything greater than or equal
# to 4.
@ Count@ = +(Unit@ 0, Unit@ 1, Unit@ 2, Unit@ 3, Unit@ 4p);

(Count@) { Count@; } IncCount = (Count@ c) {
  c.?(0: Count@(1: Unit),
      1: Count@(2: Unit),
      2: Count@(3: Unit),
      3: Count@(4p: Unit),
      4p: Count@(4p: Unit));
};

@ Status@ = *(Bool@ alive, Count@ neighbors);

# Returns true if a cell with the given status should be a live cell in the
# next generation.
(Status@) { Bool@; } Lives = (Status@ status) {
  status.alive.?(
      true: status.neighbors.?(2: True, 3: True, : False),
      false: status.neighbors.?(3: True, : False));
};

# Map from Coord to the status of the cell.
@ Cand@ = /Map%.Map@<Coord@, Status@>;
% C = @(
  Empty: /Map%.Empty<Coord@, Status@>,
  InsertWith: /Map%.InsertWith<Coord@>(LtCoord)<Status@>,
  ForEach: /Map%.ForEach<Coord@, Status@>
);

# Advance the world by one unit of time.
(World@) { World@; } Step = (World@ w) {
  # 1. Create the candidate map.
  #   For each cell in world,
  #     Set this cell alive in candidate
  #     Inc neighbors for each neighbor cell
  Cand@ candidates = W.ForEach<Cand@>(w, C.Empty,
    (Coord@ coord, Unit@ _, Cand@ cand_in) {
      Cand@ cand_alive = C.InsertWith(cand_in, coord, (Maybe@<Status@> ms) {
        ms.?(just: Status@(True, ms.just.neighbors),
             nothing: Status@(True, Count@(0: Unit)));
      });

      List@<Coord@> neighbors = List<Coord@>[
        Coord@(Dec(coord.row), Dec(coord.col)),
        Coord@(Dec(coord.row),     coord.col ),
        Coord@(Dec(coord.row), Inc(coord.col)),
        Coord@(    coord.row , Dec(coord.col)),
        Coord@(    coord.row , Inc(coord.col)),
        Coord@(Inc(coord.row), Dec(coord.col)),
        Coord@(Inc(coord.row),     coord.col ),
        Coord@(Inc(coord.row), Inc(coord.col))];

      ForEach<Coord@, Cand@>(neighbors, cand_alive, (Coord@ n, Cand@ c) {
        C.InsertWith(c, n, (Maybe@<Status@> ms) {
          ms.?(just: Status@(ms.just.alive, IncCount(ms.just.neighbors)),
               nothing: Status@(False, Count@(1: Unit)));
        });
      });
    }
  );

  # 2. Filter live cells from the map.
  C.ForEach<World@>(candidates, W.Empty,
    (Coord@ coord, Status@ status, World@ w_in) {
    Lives(status).?(
       true: W.Insert(w_in, coord, Unit),
       false: w_in);
  });
};

(Int@, World@) { World@; } StepN = (Int@ n, World@ w) {
  IsZero(n).?(true: w, false: StepN(Dec(n), Step(w)));
};

@(Coord@, World@, World, ForWorld: W.ForEach, EqWorld, Step, StepN);
