
@ Char@ = /Char%.Char@;
% Chars = /Char%.Chars;

<@>@ List@ = /List%.List@;
<@>% List = /List%.List;
<@>% Concat = /List%.Concat;

@ Str@ = /String%.Str@;
% Str = /String%.Str;

# PrintTail --
#   Prints the tail part of a list.
#
# For example, the list [1, 2, 3] is printed as ", 1, 2, 3]"
<@ T@>((T@) { Str@; }, List@<T@>) { Str@; }
PrintTail = <@ T@>((T@) { Str@; } print, List@<T@> l) {
  l.?(
    cons:
      Concat<Char@>(List<Str@>([
          Str(Chars|', '),
          print(l.cons.head),
          PrintTail<T@>(print, l.cons.tail)])),
    nil: Str(Chars|']'));
};

<@ T@>((T@) { Str@; }, List@<T@>) { Str@; }
Print = <@ T@>((T@) { Str@; } print, List@<T@> l) {
  l.?(
    cons: Concat<Char@>(List<Str@>([
        Str(Chars|'['),
        print(l.cons.head),
        PrintTail<T@>(print, l.cons.tail)])),
    nil: Str(Chars|'[]'));
};

@(Print);
