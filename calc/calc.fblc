
struct Unit();

// The following type is used to represent (unbounded) integers.
// Note that this representation allows multiple ways of representing each
// integer, because 2*0 = 0 and 2*(-1)+1 = -1.
// Functions that operate on integers should work for all the representations
// of various numbers. They should not assume the smallest representation for
// a number and need not produce the smallest representation for a number.
union Integer(
   Unit 0,
   Unit minus_1,
   Integer double,
   Integer double_plus_1
);

// The integer 0
func Zero( ; Integer) {
  Integer:0(Unit());
};

// The integer (-1)
func Minus1( ; Integer) {
  Integer:minus_1(Unit());
};

// 2 * x
func Double(Integer x; Integer) {
  Integer:double(x);
};

// 2 * x + 1
func DoublePlus1(Integer x; Integer) {
  Integer:double_plus_1(x);
};

// a + 1
func Add1(Integer a; Integer) {
  a ? (
    DoublePlus1(Zero()),            // 0 + 1 = 2*0+1
    Zero(),                         // -1 + 1 = 0
    DoublePlus1(a.double),          // 2*d + 1 = 2d*+1
    Double(Add1(a.double_plus_1))); // 2*d+1 + 1 = 2*(d+1)
};

// a - 1
func Sub1(Integer a; Integer) {
  a ? (
    Minus1(),                     // 0-1 = -1
    Double(Minus1()),             // -1-1 = 2*(-1)
    DoublePlus1(Sub1(a.double)),  // 2*d-1 = 2*(d-1)+1
    Double(a.double_plus_1));     // 2*d+1-1 = 2*d
};

// a + b
func Add(Integer a, Integer b; Integer) {
  a ? (
     b,                                        // 0 + b = b
     b ? (
       a,                                      // a + 0 = a
       Double(Minus1()),                       // -1 + -1 = 2*(-1)
       DoublePlus1(Add(b.double, Minus1())),   // -1 + 2*d = 2*(d-1)+1
       Double(b.double_plus_1)),               // -1 + (2*d+1) = 2*d
     b ? (
       a,                                      // a + 0 = a
       DoublePlus1(Add(a.double, Minus1())),   // 2*d + -1 = 2*(d-1)+1
       Double(Add(a.double, b.double)),        // 2*d + 2*e = 2*(d+e)
       DoublePlus1(Add(a.double, b.double_plus_1))),// 2*d + 2*e+1 = 2*(d+e)+1
     b ? (
       a,                                      // a + 0 = a
       Double(a.double_plus_1),                // 2*d+1 + -1 = 2*d
       DoublePlus1(Add(a.double_plus_1, b.double)), // 2*d+1 +2*e = 2*(d+e)+1
       Double(Add1(Add(a.double_plus_1, b.double_plus_1)))));  // 2*d+1 + 2*e+1 = 2*((d+e)+1)
};

// -a 
func Negate(Integer a; Integer) {
  a ? (
    Zero(),                                   // -0 = 0
    DoublePlus1(Zero()),                      // -(-1) = 2*0+1
    Double(Negate(a.double)),                 // -(2*d) = 2*(-d)
    Sub1(Double(Negate(a.double_plus_1))));   // -(2*d+1) = 2*(-d)-1
};

// a - b 
func Sub(Integer a, Integer b; Integer) {
  // a - b = a + (-b)
  Add(a, Negate(b));
};

// a * b
func Mul(Integer a, Integer b; Integer) {
  a ? (
    Zero(),       // 0 * b = 0
    Negate(b),    // -1 * b = -b
    b ? (
      Zero(),                             // 2*x * 0 = 0
      Double(Negate(a.double)),           // 2*x * -1 = 2*(-x)
      Double(Double(Mul(a.double, b.double))), // 2*x * 2*y = 2*(2*(x*y))
      Add(Double(Double(Mul(a.double, b.double_plus_1))),
          Double(a.double))),             // 2*x * (2*y+1) = 2*2*x*y + 2*x
    b ? (
      Zero(),         // (2*x+1) * 0 = 0
      Sub1(Double(Negate(a.double_plus_1))),  // (2*x+1) * -1 = 2*(-x) - 1
      Add(Double(Double(Mul(a.double_plus_1, b.double))),
          Double(b.double)),        // (2*x+1) * 2*y = 2*2*x*y + 2*y
      Add(    // (2*x+1) * (2*y+1) = 2*2*x*y + 2*x + (2*y +1)
       Add(
        Double(Double(Mul(a.double_plus_1, b.double_plus_1))),
        Double(a.double_plus_1)), b)));
};

func main( ; Integer) {
  Integer three = DoublePlus1(DoublePlus1(Zero()));
  Integer five = DoublePlus1(Double(DoublePlus1(Zero())));
  Integer minus_five = DoublePlus1(DoublePlus1(Double(Minus1())));
  Integer minus_two = Add(three, minus_five);
  Integer two = Negate(minus_two);
  Integer fifteen = Mul(five, three);
  three;
};

