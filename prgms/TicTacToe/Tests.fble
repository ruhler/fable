
{ /Char%; @(Char@, Chars); };
{ /List%; @(S@, S); };
{ /String%; @(Str); };
{ /Test%; @(Test@, TestResult@); };
{ /Unit%; @(Unit@, Unit); };

{ /TicTacToe/AI%; @(AI@, WithAI); };
{ /TicTacToe/Board%;
  @(Board@, Player@, Position@, Square@, Status@,
    BoardStatus, EmptyBoard);
};
{ /TicTacToe/UI%; @(); };  # Import to test compilation.

TestResult@! TestBoardStatus = {
  Unit@ _ := $(Unit); # Delay the test until we execute the process
  Status@ status = BoardStatus(Board@(
        Square@(X: Unit), Square@(O: Unit), Square@(O: Unit),
        Square@(E: Unit), Square@(O: Unit), Square@(X: Unit),
        Square@(O: Unit), Square@(X: Unit), Square@(X: Unit)));
  $(?(status ;
        O: TestResult@(pass: Unit),
        : TestResult@(fail: Str(Chars|failed))));
};

# TODO: Use PositionEquals for test result, and report position when failed?
TestResult@! TestChooseBestMoveWin = {
  AI@ ai <- WithAI<TestResult@>;
  Position@ position := ai(Board@(
        Square@(X: Unit), Square@(X: Unit), Square@(E: Unit),
        Square@(O: Unit), Square@(O: Unit), Square@(E: Unit),
        Square@(E: Unit), Square@(E: Unit), Square@(E: Unit)), Player@(X: Unit));
  $(?(position ;
        UR: TestResult@(pass: Unit),
          : TestResult@(fail: Str(Chars|failed))));
};

TestResult@! TestChooseBestMoveNoLose = {
  AI@ ai <- WithAI<TestResult@>;
  Position@ position := ai(Board@(
        Square@(E: Unit), Square@(E: Unit), Square@(E: Unit),
        Square@(X: Unit), Square@(X: Unit), Square@(O: Unit),
        Square@(E: Unit), Square@(E: Unit), Square@(O: Unit)), Player@(X: Unit));
  $(?(position ;
        UR: TestResult@(pass: Unit),
          : TestResult@(fail: Str(Chars|failed))));
};


S@<Test@> Tests = S<Test@>([
  Test@(Str(Chars|'TicTacToe.TestBoardStatus'), TestBoardStatus),
  Test@(Str(Chars|'TicTacToe.TestChooseBestMoveWin'), TestChooseBestMoveWin),
  Test@(Str(Chars|'TicTacToe.TestChooseBestMoveNoLose'), TestChooseBestMoveNoLose)
  ]);

# Benchmark for TicTacToe AI that takes about 1 minute to run.
Unit@! Bench = {
  AI@ ai <- WithAI<Unit@>;
  Position@ _ := ai(EmptyBoard, Player@(X: Unit));
  $(Unit);
};

@(Tests, Bench);
