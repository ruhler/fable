
<@,@,@,@>@ Literal@ = /Literal%.Literal@;

@ Structure@ = /Structure%.Structure@;
% LeftS = /Structure%.LeftS;
% RightS = /Structure%.RightS;
% UnitS = /Structure%.UnitS;

# Tag@ --
#   Helper type used for describing tags used in the Union function.
@ Tag@ = (Structure@) { Structure@; };

# Tag --
#   Helper for constructing tag literals used in the Union function.
% Tag = @(0: LeftS, 1: RightS);

# Union --
#   Convenience function for defining structure values representing union
#   values.
#
# Inputs:
#   tag - the tag for the value.
#   value - the value being tagged.
#
# Returns:
#   A Structure@ representing the given tagged value.
#
# Example Use:
#   Structure@ x = Union|00(a); // LeftS(LeftS(a))
#   Structure@ y = Union|01(b); // LeftS(RightS(b))
#   Structure@ z = Union|1(c);  // RightS(c)
Literal@<Tag@, Tag@, Tag@, @<Tag>> Union = @(
  '|': (Tag@ x) { x; },
  ',': (Tag@ a, Tag@ b) (Structure@ s) { a(b(s)); },
  '': (Structure@ s) { s; },
  '?': Tag
);

# Enum --
#   Convenience function for defining structure values representing enum
#   values.
#
# Inputs:
#   tag - the tag for the enum.
#
# Returns:
#   A Structure@ representing the given tagged enum.
#
# Example Use:
#   Structure@ x = Enum|00;
#   Structure@ y = Enum|01;
#   Structure@ z = Enum|1;
Literal@<Tag@, Tag@, Structure@, @<Tag>>
Enum = @(
  '|': (Tag@ t) { t(UnitS); },
  ',': Union.',',
  '': Union.'',
  '?': Union.'?'
);

@(Union, Enum);
