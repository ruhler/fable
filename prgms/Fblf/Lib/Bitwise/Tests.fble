
% BitStr = /Digits/String%.BitStr;

@ Var@ = /Fblf/Program%.Var@;
@ Stmt@ = /Fblf/Program%.Stmt@;
% Assign = /Fblf/Program%.Assign;
% Binary = /Fblf/Program%.Binary;
% Seq = /Fblf/Program%.Seq;

@ Method@ = /Fblf/Module%.Method@;
<@>% Module0 = /Fblf/Module%.Module0;
<@>% DoAlloc = /Fblf/Module%.DoAlloc;
<@>% DoMethod = /Fblf/Module%.DoMethod;
<@>% Return = /Fblf/Module%.Return;
<@,@>% Do = /Fblf/Module%.Do;

% Int = /Int/Int/Lit%.Int;

<@>% List = /List%.List;

% And = /Fblf/Lib/Bitwise%.And;
% Or = /Fblf/Lib/Bitwise%.Or;
% Xor = /Fblf/Lib/Bitwise%.Xor;
% Not = /Fblf/Lib/Bitwise%.Not;
% Cls = /Fblf/Lib/Bitwise%.Cls;

@ Test@ = /Fblf/Test%.Test@;
@ TestInstance@ = /Fblf/Test%.TestInstance@;
% Test = /Fblf/Test%.Test;
% TestSuite = /Fblf/Test%.TestSuite;

% Str = /String%.Str;

Test@ Tests = TestSuite(Str|'Bitwise', List<Test@>[
  Test(Str|And, Module0<TestInstance@>(Str|'BitwiseTest.And', {
    Var@ a <- DoAlloc<TestInstance@>(Int|4);
    Var@ b <- DoAlloc<TestInstance@>(Int|4);
    Var@ z <- DoAlloc<TestInstance@>(Int|4);

    Method@ and <- Do<Method@, TestInstance@>(And(Int|4)(a, b, z));

    Method@ test <- DoMethod<TestInstance@>(Str|'test', Seq[
      Assign(a, Binary|0011, Int|4),
      Assign(b, Binary|0110, Int|4),
      Assign(z, Binary|0000, Int|4),
      and
    ]);

    Return<TestInstance@>(TestInstance@(test, a, BitStr|001101100010));
  })),

  Test(Str|Or, Module0<TestInstance@>(Str|'BitwiseTest.Or', {
    Var@ a <- DoAlloc<TestInstance@>(Int|4);
    Var@ b <- DoAlloc<TestInstance@>(Int|4);
    Var@ z <- DoAlloc<TestInstance@>(Int|4);

    Method@ or <- Do<Method@, TestInstance@>(Or(Int|4)(a, b, z));

    Method@ test <- DoMethod<TestInstance@>(Str|'test', Seq[
      Assign(a, Binary|0011, Int|4),
      Assign(b, Binary|0110, Int|4),
      Assign(z, Binary|0000, Int|4),
      or
    ]);

    Return<TestInstance@>(TestInstance@(test, a, BitStr|001101100111));
  })),

  Test(Str|Xor, Module0<TestInstance@>(Str|'BitwiseTest.Xor', {
    Var@ a <- DoAlloc<TestInstance@>(Int|4);
    Var@ b <- DoAlloc<TestInstance@>(Int|4);
    Var@ z <- DoAlloc<TestInstance@>(Int|4);

    Stmt@ xor <- Do<Stmt@, TestInstance@>(Xor(Int|4)(a, b, z));

    Method@ test <- DoMethod<TestInstance@>(Str|'test', Seq[
      Assign(a, Binary|0011, Int|4),
      Assign(b, Binary|0110, Int|4),
      Assign(z, Binary|0000, Int|4),
      xor
    ]);

    Return<TestInstance@>(TestInstance@(test, a, BitStr|001101100101));
  })),

  Test(Str|Not, Module0<TestInstance@>(Str|'BitwiseTest.Not', {
    Var@ a <- DoAlloc<TestInstance@>(Int|4);
    Var@ z <- DoAlloc<TestInstance@>(Int|4);

    Stmt@ not <- Do<Stmt@, TestInstance@>(Not(Int|4)(a, z));

    Method@ test <- DoMethod<TestInstance@>(Str|'test', Seq[
      Assign(a, Binary|0011, Int|4),
      Assign(z, Binary|0000, Int|4),
      not
    ]);

    Return<TestInstance@>(TestInstance@(test, a, BitStr|00111100));
  })),

  Test(Str|Cls, Module0<TestInstance@>(Str|'BitwiseTest.Cls', {
    Var@ a <- DoAlloc<TestInstance@>(Int|5);
    Var@ z <- DoAlloc<TestInstance@>(Int|5);

    Stmt@ cls <- Do<Stmt@, TestInstance@>(Cls(Int|5, Int|3)(a, z));

    Method@ test <- DoMethod<TestInstance@>(Str|'test', Seq[
      Assign(a, Binary|10011, Int|5),
      Assign(z, Binary|00000, Int|5),
      cls
    ]);

    Return<TestInstance@>(TestInstance@(test, a, BitStr|1001111100));
  }))
]);

@(Tests);
