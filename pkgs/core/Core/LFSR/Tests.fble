
@ Bit@ = /Core/Digits%.Bit@;
% BitStr = /Core/Digits/String%.BitStr;

<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

@ Int@ = /Core/Int%.Int@;
% Sub = /Core/Int%.Sub;
% Int = /Core/Int/Lit%.Int;

@ LFSR@ = /Core/LFSR%.LFSR@;
<@>@ Shifted@ = /Core/LFSR%.Shifted@;
% Shift = /Core/LFSR%.Shift;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;

% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% TestSuite = /Core/Test%.TestSuite;
% Test = /Core/Test%.Test;

@ Unit@ = /Core/Unit%.Unit@;

(LFSR@, Int@) { List@<Bit@>; }
ShiftN = (LFSR@ lfsr, Int@ n) {
  n.?(0: Nil<Bit@>);
  Shifted@<Bit@> shifted = Shift(lfsr);
  Cons(shifted.output, ShiftN(shifted.lfsr, Sub(n, Int|1)));
};

Test@ Tests = TestSuite(Str|LFSR, List[
  Test(Str|Basic, (Unit@ _) {
    # A 3 bit LFSR.
    LFSR@ lfsr = LFSR@(BitStr|110, BitStr|000);
    List@<Bit@> got = ShiftN(lfsr, Int|16);
    List@<Bit@> wnt = BitStr|0001101000110100;
    AssertEquals(
      /Core/List/Eq%.Eq(/Core/Digits/Eq%.EqBit),
      /Core/Digits/Show%.ShowBits, wnt, got);
  })
]);

@(Tests);
