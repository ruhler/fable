Pprof
=====
For discussion of the UI that I want.

Here's a concrete use case I feel like I want:
1. View the list of blocks by percent of time the program spent in or under
   that block.
2. Maybe we could merge together similar blocks in the list so there is less
   to look at.
3. Be able to easily 'remove' a block from that list. Which removes any
   samples that have that block anywhere in it.

So I collect together a list of interesting blocks by removing one after the
other. Now I have a high level summary breakdown of where time is going. Then
I want to be able to focus at one of those blocks at a time. Rinse and repeat?

---

I'm concerned that my perf approach is truncating stacks and not including all
the samples. Is it possible for me to write my own perf that does exactly what
I want? Anyway I can review how perf is implemented?

The implementation looks tough. But maybe I can figure out enough to parse the
output of 'perf script' directly. It looks like it is a sequence of traces. We
clearly have the timestamp. I'm just not sure what 'cycles' means. Looks like
it's a timestamp of some sort rather than a sample count. I think it's safe to
ignore for performance purposes.

Yes, so best opportunity at the moment would appear to be to parse each record
from the output of 'perf script'. Read and process the thing however I
prefer. Don't worry about the 128 frame limit for now.

---

Let's figure out the nicest output we can get from perf script.

Today it looks like:

<exe> <pid> <timestamp>.<nanos>:    <n> cycles:u:
              <addr> <name>+<offset> (<so>)
              ...

Any easy way to simplify timestamp perhaps? Or it doesn't matter? We don't
care about the header line anyway, aside from being able to recognize it.

Any way to get rid of the .so? I don't care about that, right?

I don't see any options to turn things off. Let's just parse what we get by
default. That's simplest, right?
