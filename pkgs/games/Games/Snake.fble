
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% And = /Core/Bool%.And;

@ LFSR@ = /Core/LFSR%.LFSR@;
<@>@ Shifted@ = /Core/LFSR%.Shifted@;
% LFSRs = /Core/LFSR%.LFSRs;
% Shift = /Core/LFSR%.Shift;
% ShiftInt = /Core/LFSR/Int%.ShiftInt;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Init = /Core/List%.Init;
<@>% Cons = /Core/List%.Cons;
<@,@>% ForEach = /Core/List%.ForEach;

@ Int@ = /Core/Int%.Int@;
% 0 = /Core/Int%.0;
% 1 = /Core/Int%.1;
% 2 = /Core/Int%.2;
% Incr = /Core/Int%.Incr;
% Decr = /Core/Int%.Decr;
% Add = /Core/Int%.Add;
% Neg = /Core/Int%.Neg;
% Mul = /Core/Int%.Mul;
% Sub = /Core/Int%.Sub;
% Abs = /Core/Int%.Abs;

% Eq = /Core/Int/Eq%.Eq;
% Lt = /Core/Int/Eq%.Lt;
% Gt = /Core/Int/Eq%.Gt;

% Int = /Core/Int/Lit%.Int;

% Div = /Core/Int/Div%.Div;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;

@ String@ = /Core/String%.String@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<<@>@>@ App@ = /App/App%.App@;
<<@>@>@ Main@ = /App/App%.Main@;
@ Event@ = /App/App%.Event@;
@ Effect@ = /App/App%.Effect@;

@ Color@ = /App/Drawing%.Color@;
@ Drawing@ = /App/Drawing%.Drawing@;
@ Point@ = /App/Drawing%.Point@;
% Blank = /App/Drawing%.Blank;
% Color = /App/Drawing%.Color;
% Drawings = /App/Drawing%.Drawings;
% Rect = /App/Drawing%.Rect;
% Over = /App/Drawing%.Over;
% Affine = /App/Drawing%.Affine;


Int@ MinRow = Int|0;    # Inclusive. This is a legal row.
Int@ MaxRow = Int|20;   # Inclusive. This is a legal row.
Int@ MinCol = Int|0;    # Inclusive. This is a legal col.
Int@ MaxCol = Int|60;   # Inclusive. This is a legal col.

@ Pos@ = *(Int@ row, Int@ col);

(Pos@, Pos@) { Bool@; } EqPos = (Pos@ a, Pos@ b) {
  And(Eq(a.row, b.row), Eq(a.col, b.col));
};

@ Dir@ = +(Unit@ up, Unit@ down, Unit@ left, Unit@ right);
@ Input@ = +(Dir@ dir, Unit@ quit, Unit@ tick);

(Dir@, Dir@) { Bool@; } EqDir = (Dir@ a, Dir@ b) {
  a.?(
    up: b.?(up: True, : False),
    down: b.?(down: True, : False),
    left: b.?(left: True, : False),
    right: b.?(right: True, : False));
};


@ Cell@ = +(Unit@ empty, Unit@ snake, Unit@ food);

(Pos@, Cell@) { Drawing@; } DrawCell = (Pos@ pos, Cell@ cell) {
  Color@ c = cell.?(
    empty: Color.Blue,
    snake: Color.Cyan,
    food: Color.Green);
  Rect(pos.col, pos.row, 1, 1, c);
};

# State --
#   The state of the game.
# 
# Fields:
#   dir - The current direction of the snake.
#   food - The current position of the food.
#   rand - Random bits for use in determining the next food position.
#   snake - The positions of the snake, in order from head to tail.
#   speed - The number of milliseconds to wait between each tick.
@ State@ = *(
  Dir@ dir,
  Pos@ food,
  LFSR@ rand,
  List@<Pos@> snake,
  Int@ speed
);

(List@<Pos@>) { Drawing@; } DrawSnake = (List@<Pos@> s) {
  ForEach(s, Blank, (Pos@ p, Drawing@ d) {
    Over(DrawCell(p, Cell@(snake: Unit)), d);
  });
};

(State@) { Drawing@; } Draw = (State@ s) {
  Drawings[
    Rect(0, 0, Incr(MaxCol), Incr(MaxRow), Color.Blue),
    DrawSnake(s.snake),
    DrawCell(s.food, Cell@(food: Unit))
  ];
};

State@ InitialState = {
  Int@ c0 = MinCol;
  Int@ c1 = Incr(c0); Int@ c2 = Incr(c1);
  Int@ c3 = Incr(c2); Int@ c4 = Incr(c3);
  Int@ r0 = MinRow;
  Int@ r1 = Incr(r0); Int@ r2 = Incr(r1);
  Int@ r3 = Incr(r2); Int@ r4 = Incr(r3);
  State@(
    Dir@(right: Unit),
    Pos@(r4, c1),
    LFSRs.8,
    List[Pos@(r1, c4), Pos@(r1, c3), Pos@(r1, c2), Pos@(r1, c1)],
    Int|40);
};

@ MoveResultM@ = +(Unit@ dead, State@ state);
@ PosM@ = +(Unit@ dead, Pos@ pos);

# Return true if the given position is found in the list of positions.
(List@<Pos@>, Pos@) { Bool@; } InPosS = /Core/List/Eq%.Contains(EqPos);

# Update the random number for where the next food will be generate.
# Takes the current direction of the snake to add some randomness to the
# update.
(Dir@, LFSR@) { LFSR@; } StepRand = (Dir@ d, LFSR@ s) {
  LFSR@ s0 = s; d.?(up: s0);
  LFSR@ s1 = Shift(s0).lfsr; d.?(down: s1);
  LFSR@ s2 = Shift(s1).lfsr; d.?(left: s2);
  Shift(s2).lfsr;
};

# Pick the position of the next food randomly, given the random bits and the
# snakes position.
(LFSR@, List@<Pos@>) { Pos@; } GetNextFood = (LFSR@ rand, List@<Pos@> snake) {
  Shifted@<Int@> row = ShiftInt(rand, MaxRow);
  Shifted@<Int@> col = ShiftInt(row.lfsr, MaxCol);
  Pos@ pos = Pos@(row.output, col.output);
  InPosS(snake, pos).?(false: pos);
  GetNextFood(col.lfsr, snake);
};

(State@) { MoveResultM@; } Move = (State@ s) {
  LFSR@ nrand = StepRand(s.dir, s.rand);
  PosM@ pm = s.dir.?(
    up: Eq(s.snake.cons.head.row, MaxRow).?(
      true: PosM@(dead: Unit),
      false: PosM@(pos: Pos@(Incr(s.snake.cons.head.row), s.snake.cons.head.col))),
    down: Eq(s.snake.cons.head.row, MinRow).?(
      true: PosM@(dead: Unit),
      false: PosM@(pos: Pos@(Decr(s.snake.cons.head.row), s.snake.cons.head.col))),
    left: Eq(s.snake.cons.head.col, MinCol).?(
      true: PosM@(dead: Unit),
      false: PosM@(pos: Pos@(s.snake.cons.head.row, Decr(s.snake.cons.head.col)))),
    right: Eq(s.snake.cons.head.col, MaxCol).?(
      true: PosM@(dead: Unit),
      false: PosM@(pos: Pos@(s.snake.cons.head.row, Incr(s.snake.cons.head.col)))));

  pm.?(
    dead: MoveResultM@(dead: Unit),
    pos: EqPos(pm.pos, s.food).?(
      true: {
        # TODO: Properly handle the case where the snake eats food at its
        # tail.
        List@<Pos@> nsnake = Cons(s.food, s.snake);
        Pos@ nfood = GetNextFood(nrand, nsnake);
        Int@ nspeed = s.speed; # s.speed.?(n: 0, 0: 0, p: Sub(s.speed, 4));
        State@ ns = State@(s.dir, nfood, nrand, nsnake, nspeed);
        MoveResultM@(state: ns);
      },
      false: InPosS(s.snake, pm.pos).?(
        true: MoveResultM@(dead: Unit),
        false: {
          # TODO: Combine calls to Init and Last so we only have to
          # iterate over the list of elements once instead of twice?
          List@<Pos@> nsnake = Cons(pm.pos, Init(s.snake));
          State@ ns = State@(s.dir, s.food, nrand, nsnake, s.speed);
          MoveResultM@(state: ns);
         })));
};

# Computer controlled choice of next direction.
(State@) { Dir@; } AI = (State@ s) {
  # There are 4 possible next positions. Pick the one closest to the next food
  # that will not kill us. All else equal, keep going the same direction we
  # were going before.
  @ Choice@ = *(
    Dir@ dir,
    Int@ cost
  );
  
  (Choice@, Choice@) { Choice@; } Best = (Choice@ a, Choice@ b) {
    Lt(a.cost, b.cost).?(true: a, false: b);
  };

  (Dir@) { Choice@; } Choice = (Dir@ dir) {
    Pos@ pos = dir.?(
      up: Pos@(Incr(s.snake.cons.head.row), s.snake.cons.head.col),
      down: Pos@(Decr(s.snake.cons.head.row), s.snake.cons.head.col),
      left: Pos@(s.snake.cons.head.row, Decr(s.snake.cons.head.col)),
      right: Pos@(s.snake.cons.head.row, Incr(s.snake.cons.head.col)));

    Bool@ dead = {
      Lt(pos.row, MinRow).?(true: True);
      Gt(pos.row, MaxRow).?(true: True);
      Lt(pos.col, MinCol).?(true: True);
      Gt(pos.col, MaxCol).?(true: True);
      InPosS(s.snake, pos);
    };

    # The cost of death is very high.
    Int@ death = dead.?(true: Int|100000, false: 0);

    # The further away from the food, the worse we are.
    Int@ food = Mul(2, Add(Abs(Sub(pos.row, s.food.row)),
                           Abs(Sub(pos.col, s.food.col))));

    # We would prefer to go straight, all else equal. That way the human can
    # sort of influence the snakes behavior.
    Int@ turn = EqDir(s.dir, dir).?(true: 0, false: 1);

    Int@ cost = Add(death, Add(food, turn));
    Choice@(dir, cost);
  };

  Choice@ up = Choice(Dir@(up: Unit));
  Choice@ down = Choice(Dir@(down: Unit));
  Choice@ left = Choice(Dir@(left: Unit));
  Choice@ right = Choice(Dir@(right: Unit));
  Best(Best(up, down), Best(left, right)).dir;
};

Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> _stdio, App@<M@> app, Int@ width, Int@ height)(List@<String@> _args) {
  M@<Input@> GetInput = {
    Event@ e <- m.do(app.event);
    e.?(
      tick: m.return(Input@(tick: Unit)),
      key_down: e.key_down.?(
        h: m.return(Input@(dir: Dir@(left: Unit))),
        j: m.return(Input@(dir: Dir@(down: Unit))),
        k: m.return(Input@(dir: Dir@(up: Unit))),
        l: m.return(Input@(dir: Dir@(right: Unit))),
        q: m.return(Input@(quit: Unit)),
        : GetInput),
      : GetInput);
  };

  # Map game coordinates into screen coordinates.
  Point@ a = @(x: Div(width, MaxCol).q,
               y: Neg(Div(height, MaxRow).q));
  Point@ b = @(x: Int|0, y: height);

  (Effect@) { M@<Unit@>; } Output = (Effect@ e) {
    Effect@ transformed = e.?(
      tick: e,
      draw: Effect@(draw: Affine(a, b, e.draw)));
    app.effect(transformed);
  };

  (State@) { M@<Unit@>; } Snake = (State@ s) {
    Input@ x <- m.do(GetInput);
    x.?(
      dir: Snake(State@(x.dir, s.food, s.rand, s.snake, s.speed)),
      quit: m.return(Unit),
      tick: {
        Dir@ dir = AI(s);
        State@ ns = State@(dir, s.food, s.rand, s.snake, s.speed);
        MoveResultM@ mr = Move(ns);
        mr.?(
          dead: m.return(Unit),
          state: {
             Unit@ _ <- m.do(Output(Effect@(draw: Draw(ns))));
             Unit@ _ <- m.do(Output(Effect@(tick: ns.speed)));
             Snake(mr.state);
          });
      });
  };

  State@ s = InitialState;
  
  Unit@ _ <- m.do(Output(Effect@(draw: Rect(0, 0, Incr(MaxCol), Incr(MaxRow), Color.Blue))));
  Unit@ _ <- m.do(Output(Effect@(draw: Draw(s))));
  Unit@ _ <- m.do(app.effect(Effect@(tick: Int|16)));
  Unit@ _ <- m.do(Snake(s));

  M@<Bool@> WaitForKeyPress = {
    Event@ e <- m.do(app.event);
    e.?(key_down: m.return(True), : WaitForKeyPress);
  };
  WaitForKeyPress;
};

Main;
