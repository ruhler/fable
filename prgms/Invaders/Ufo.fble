@ Bool@ = /Bool%.Bool@;
% True = /Bool%.True;
% False = /Bool%.False;

@ Decimal@ = /Digits%.Decimal@;

@ Drawing@ = /Drawing%.Drawing@;
% Blank = /Drawing%.Blank;
% Translate = /Drawing%.Translate;

@ Int@ = /Int/Int%.Int@;
% Add = /Int/Int%.Add;
% Sub = /Int/Int%.Sub;
% Neg = /Int/Int%.Neg;
% Div = /Int/Int/Div%.Div;
% Eq = /Int/Int/Eq%.Eq;
% Lt = /Int/Int/Eq%.Lt;
% Gt = /Int/Int/Eq%.Gt;
% Int = /Int/Int/Lit%.Int;
% LeastSignificantDigit = /Int/Int/Digits%.LeastSignificantDigit;

% Graphics = /Invaders/Graphics%;

<@>@ Maybe@ = /Maybe%.Maybe@;
<@>% Just = /Maybe%.Just;
<@>% Nothing = /Maybe%.Nothing;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

# DirState@ --
#   State keeping track of which direction the ufo will fly in from.
#
# The intention is to repeat the cycle: LLRLRR, which hopefully will make it
# seem random, or at least hard for a player to remember where in the cycle
# we are.
@ DirState@ = +(Unit@ 0, Unit@ 1, Unit@ 2, Unit@ 3, Unit@ 4, Unit@ 5);

DirState@ InitialDirState = DirState@(0: Unit);

(DirState@) { DirState@; } Next = (DirState@ ds) {
  ds.?(0: DirState@(1: Unit), 1: DirState@(2: Unit), 2: DirState@(3: Unit),
    3: DirState@(4: Unit), 4: DirState@(5: Unit), 5: DirState@(0: Unit));
};

(DirState@) { Bool@; } FromLeft = (DirState@ ds) {
  ds.?(0: True, 1: True, 2: False, 3: True, 4: False, 5: False);
};

# Flying@ --
#   State of a flying ufo.
#
# Fields:
#   x - the x coordinate of the UFO.
#   v - the x velocity of the UFO.
@ Flying@ = *(Int@ x, Int@ v);

# Points@ -- 
#   The number of points for hitting the ufo.
@ Points@ = +(Unit@ 50, Unit@ 100, Unit@ 150, Unit@ 300);

# PointsValue --
#   Converts Points@ to Int@.
(Points@) { Int@; } PointsValue = (Points@ points) {
  points.?(50: Int|50, 100: Int|100, 150: Int|150, 300: Int|300);
};

# DrawPoints --
(Points@) { Drawing@; } DrawPoints = (Points@ points) {
  points.?(
    50: Graphics.Digits|50,
    100: Graphics.Digits|100,
    150: Graphics.Digits|150,
    300: Graphics.Digits|300);
};

# Dying@ --
#   State of a dying ufo.
#
# Fields:
#   time - the number of ticks left for the ufo to be dying.
#   x - the position of the ufo when it died.
#   points - the points for killing the ufo.
@ Dying@ = *(Int@ time, Int@ x, Points@ points);

# Hiding@ --
#   State of a hiding ufo.
#
# Fields:
#   time - the number of ticks left for the ufo to be hiding.
@ Hiding@ = *(Int@ time);

# State@ --
#   The state of the ufo.
@ State@ = +(Flying@ flying, Dying@ dying, Hiding@ hiding);

# Ufo@ -- 
# 
# Fields:
#   state - the current state of the ufo (flying, dying, or hiding) 
#   dir - the state tracking the direction to fly in from next.
@ Ufo@ = *(State@ state, DirState@ dir);

Int@ MinX = Int|40;
Int@ MaxX = Int|264;

Int@ UfoY = Int|200;

Int@ Height = Int|8;
Int@ Width = Int|16;

# The number of pixels the ufo travels each tick.
Int@ Velocity = Int|1;

# The number of ticks to spend dying.
Int@ DyingTime = Int|60;

# The number of ticks to spend hiding.
Int@ HidingTime = Int|1600;

Ufo@ Initial = Ufo@(State@(hiding: Hiding@(HidingTime)), InitialDirState);

# Fly --
#   Set the UFO flying from a random direction.
(Ufo@) { Ufo@; } Fly = (Ufo@ ufo) {
  Bool@ from_left = FromLeft(ufo.dir);
  DirState@ dir = Next(ufo.dir);
  Flying@ flying = from_left.?(
    true: Flying@(MinX, Velocity),
    false: Flying@(MaxX, Neg(Velocity)));
  Ufo@(State@(flying: flying), dir);
};

# Hide --
#   Set the UFO to hiding.
(Ufo@) { Ufo@; } Hide = (Ufo@ ufo) {
  Ufo@(State@(hiding: Hiding@(HidingTime)), ufo.dir);
};

(Ufo@) { Ufo@; } Tick = (Ufo@ ufo) {
  ufo.state.?(
    flying: {
      Lt(ufo.state.flying.x, MinX).?(true: Hide(ufo));
      Gt(ufo.state.flying.x, MaxX).?(true: Hide(ufo));
      Ufo@(State@(flying: @(
            x: Add(ufo.state.flying.x, ufo.state.flying.v),
            v: ufo.state.flying.v)), ufo.dir);
    },
    dying: {
      Eq(Int|0, ufo.state.dying.time).?(
        true: Hide(ufo),
        false: Ufo@(State@(dying: @(
              time: Sub(ufo.state.dying.time, Int|1),
              x: ufo.state.dying.x,
              points: ufo.state.dying.points)), ufo.dir));
    },
    hiding: {
      Eq(Int|0, ufo.state.hiding.time).?(
        true: Fly(ufo),
        false: Ufo@(
          State@(hiding: Hiding@(Sub(ufo.state.hiding.time, Int|1))),
          ufo.dir));
    });
};

@ Kill@ = *(Int@ points, Ufo@ ufo);

# Points --
#   Choose the number of points to get for shooting the ufo.
(Int@) { Points@; } Points = (Int@ ufo_x) {
  # We treat the x position of the ufo as effectively random, then draw points
  # from the distrubtion with 10% 300, 20% 150, 30% 100, and 40% 50.
  Decimal@ d = LeastSignificantDigit(Div(ufo_x, Velocity).q);
  d.?(
    0: Points@(100: Unit),
    1: Points@(50: Unit),
    2: Points@(150: Unit),
    3: Points@(100: Unit),
    4: Points@(50: Unit),
    5: Points@(300: Unit),
    6: Points@(50: Unit),
    7: Points@(100: Unit),
    8: Points@(150: Unit),
    9: Points@(50: Unit));
};

(Int@, Int@, Ufo@) { Maybe@<Kill@>; } Shoot = (Int@ x, Int@ y, Ufo@ ufo) {
  ufo.state.?(dying: Nothing<Kill@>);
  ufo.state.?(hiding: Nothing<Kill@>);
  Flying@ flying = ufo.state.flying;

  Lt(y, UfoY).?(true: Nothing<Kill@>);
  Gt(y, Add(UfoY, Height)).?(true: Nothing<Kill@>);
  Lt(x, flying.x).?(true: Nothing<Kill@>);
  Gt(x, Add(flying.x, Width)).?(true: Nothing<Kill@>);

  Points@ points = Points(flying.x);
  Dying@ dying = Dying@(DyingTime, flying.x, points);
  Just<Kill@>(Kill@(PointsValue(points), Ufo@(State@(dying: dying), ufo.dir)));
};

(Ufo@) { Drawing@; } Draw = (Ufo@ ufo) {
  ufo.state.?(
    flying: Translate(ufo.state.flying.x, UfoY, Graphics.Ufo),
    dying: Translate(ufo.state.dying.x, UfoY,
      DrawPoints(ufo.state.dying.points)),
    hiding: Blank);
};

@(Ufo@, Kill@, Initial, Tick, Shoot, Draw);
