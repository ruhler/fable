# Unbounded Binary Natural Number
mtype UBNat<> {
  using Bool<;> { Bool; };

  type Nat;

  func 0( ; Nat);
  func 1( ; Nat);
  func 2( ; Nat);
  func 3( ; Nat);
  func 4( ; Nat);
  func 5( ; Nat);
  func 6( ; Nat);
  func 7( ; Nat);
  func 8( ; Nat);
  func 9( ; Nat);
  func 10( ; Nat);

  func Lit2(Nat a, Nat b; Nat);           # 10 * a + b
  func Lit3(Nat a, Nat b, Nat c; Nat);    # 100 * a + 10 * b + c

  func Inc(Nat a; Nat);          # a + 1
  func Dec(Nat a; Nat);          # max(0, a - 1)
  func Add(Nat a, Nat b; Nat);   # a + b
  func Sub(Nat a, Nat b; Nat);   # max(0, a - b)
  func Mul(Nat a, Nat b; Nat);   # a * b
  func Div(Nat a, Nat b; Nat);   # a / b, 0 if b is 0
  func Mod(Nat a, Nat b; Nat);   # a % b, 0 if b is 0

  struct DivModResult(Nat quotient, Nat remainder);
  func DivMod(Nat a, Nat b; DivModResult);  # (a / b, a % b)

  func IsZero(Nat a; Bool);      # a == 0
  func Eq(Nat a, Nat b; Bool);   # a == b
  func Ne(Nat a, Nat b; Bool);   # a != b
  func Lt(Nat a, Nat b; Bool);   # a < b
  func Le(Nat a, Nat b; Bool);   # a <= b
  func Gt(Nat a, Nat b; Bool);   # a > b
  func Ge(Nat a, Nat b; Bool);   # a > b
};
