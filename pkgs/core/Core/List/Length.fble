
@ Int@ = /Core/Int%.Int@;
% 0 = /Core/Int%.0;
% Incr = /Core/Int%.Incr;
% Decr = /Core/Int%.Decr;
% IsZero = /Core/Int/Eq%.IsZero;
% Le = /Core/Int/Eq%.Le;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;

# Drop --
#   Remove the first n elements from the list.
#
# Returns an empty list if there are less than n elements on the list.
(Int@)<@ T@>(List@<T@>) { List@<T@>; }
Drop = (Int@ n)<@ T@>(List@<T@> l) {
  Le(n, 0).?(true: l);
  l.?(nil: l);
  Drop(Decr(n), l.cons.tail);
};

# Take --
#   Returns the first n elements on the list.
#
# Returns fewer than n elements if there are less than n elements on the list.
(Int@)<@ T@>(List@<T@>) { List@<T@>; }
Take = (Int@ n)<@ T@>(List@<T@> l) {
  Le(n, 0).?(true: Nil<T@>);
  l.?(nil: Nil<T@>);
  Cons(l.cons.head, Take(Decr(n), l.cons.tail));
};

# Length --
#   Returns the length of a list.
#
# Type Parameters:
#   T@ - The type of element on the list.
#
# Arguments:
#   l - the list to get the length of.
#
# Returns:
#   The length of the list.
<@ T@>(List@<T@>) { Int@; } Length = <@ T@>(List@<T@> l) {
  l.?(nil: 0);
  Incr(Length(l.cons.tail));
};

# Gets the element of the list with the given index.
# Behavior is undefined if there is no such elemnet.
<@ T@>(List@<T@>, Int@) { T@; } Get = <@ T@>(List@<T@> l, Int@ n) {
  IsZero(n).?(true: l.cons.head);
  Get(l.cons.tail, Decr(n));
};

@(Take, Drop, Length, Get);
