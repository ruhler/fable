Fble 0.2 TODO
=============
Things to consider doing for the fble-0.2 release.

* html.fbld
 - Figure out how to support \ in html escape strings.
 - add html escaping to @.inline, url link, file link,

* Fbld2:
 - Add test for nesting of [ and ] characters in plain text.
 - Are blank lines allowed inside @[...] inside @.block text?

* Fbld Text@ rewrite:
 - Move implement of Eq and Show internally.
 - Update users to handle changing locations properly.

* fbld vim syntax: set tabstop/shiftwidth to single space?

* Update the rest of the tutorials with regards to smashing the stack. No need
  to write stack smashing safe tutorials anymore.

* Add spec tests for memory use of tail recursion and for "unlimited" stack
  size.

* Fbld:
 - For Parsing, figure out a better way to return head character
   Instead of always having to get the character and the loc.
 - Improve performance.
 - Test that '@ ...' at the start of block structured text is not allowed.
 - Add @error
 - Move backends out of fble into .fbld
 - Add examples of @, @@ to spec for syntax.
 - Add test cases for all builtin tags.
 - Document all new tags in spec.
 - Figure out how to generate c header output.
 - Figure out why it takes so much memory and time to run.
 - Implement source highlighting for @code.
 - Change Env@ to Markup@ so we can insert new commands more reasonably?
 - Figure out how to have subst variables where one variable name is a prefix
   of another variable name.

* Fbld Markdown Backend
 - Reflow paragraphs to 80 columns.
 - How to support labels in markdown?
 - etc.

* Fbld: Specify what happens if block structured text is missing a space on
  the same line arg. For example:
  @foo[a]b
   and then some

* For gdb debug, it would be great to be able to access fields of structs.
  Example: ra.ok.in is a string, ra is a struct value. Right now, if you try
  to print ra.ok, it says 'There is no member named ok.'

* Better type error message in case when two different types have the same
  name? for example:

  <@ A@> {
     Maybe@<A@> NotA1 = Nothing<A@>;
     <@ A@> {
        Maybe@<A@> NotA2 = NotA1;
     }
  }
        
        

* Need an easier way to gdb step through fble code without cluttering it with c
  code in between.

* Add tests for /Core/Set%.

* Add man page for fble-cat

* Sat Solver:
 - Add --help command line option to fble-sat.
 - Pull search logic out of /Sat/Solver%
 - Avoid duplicate definitions of ShowVar.
   By reorganizing code better?
 - Parse dimacs cnf incrementally instead of all at once?
   There should be no need to have the entire text of the file in memory all
   at one time.

* convert lib/* code to fbld doc comments.

* Improve documentation about expectations for strict vs. non strict values
 - e.g. FbleThreadTailCall can take a non-strict value, but FbleFuncValueInfo
   requires a strict value.
   And should it be that way?

* In aarch64.c, change GetFrameVar to take rdst as a reg num instead
  of string?
 - Seems like that would be a little cleaner?

* Struct copy expr
 - Add spec tests.
 - Use it where possible. At least in sat to start.
 - Add to struct tutorial.
 - Test case of no args provided -> syntax error.
 - Test case of more than one arg provided.
 - Test case of args out of order, or not in struct type.
 - Add tests for full code coverage.

* Come up with a nicer way to implement printf debugging?
  - That doesn't depend on gdb, or entering commands, or compiling to aarch64,
    for example.
  - Or just use stdio for that?
  - Or move /Sat/Debug% code to /Core/Debug%?

* Make a decision on struct copy expression before release.

* Feedback from users:
 - Better explanation of "lack of primitives" and why that's a good thing.
 - Explain how features are related to procedural programming
   - Control Flow
   - Loops
   - Interfaces (?)
 - Better explanation of what it means to say a type is a value.
 - Better explanation of mapping from file name to module path early on.
 - Clarify that '%' is needed for module paths in early tutorials.
 - Better explanation of where to find existing and/or generated docs.
 - It's not obvious that 'xfail' means expected failure.

* Anything we can do to help detect stack smashers?
 - Like, limit stack depth in fble and print a nice message before running
   into a segfault? Or detect when we've smashed the stack? Or static analysis
   to detect non-tail recursive functions?

* Big things:
 - smten support.
   And after smten, try doing smten-based mnist classification?
 - high score saved in invaders game.
 - fix composition issues in fbld implementation.
 - write tutorials for C api.
 - write some serious new fble code.
   image viewer? floating point?

* Update install tutorial to reference the release of fble on github, now that
  we'll have published fble-0.1 release there.

* Remove FBLE_PACKAGE_PATH setting from Install tutorial.
  Now that we have the default package path to look in.

* Update book/ docs?
 - Given language changes
 - And migrate to fbld?

* Wrapping for 'Main Function' description in fble-compile.1 is less than
  desired.

* Would be nice to have SEE ALSO section for library man pages.

* Figure out a way so that "T" arguments in generated man pages don't have an
  extra space in the output.
  For example, for FbleAlloc.3.

* For dc generated man pages, put synopsis all on one line if there is only a
  single argument?

* Turn off FPS histogram for fble-app by default.
 - Add a command line argument to enable it if desired.

* Check if all the fble-module-path.h functions really need to be public API.

* How to handle @file doc comments on header files?
  - Should we write documentation for them somewhere?

* Convert internal doc comments to fbld doc comment format?

* Factor out common code for @FbleVersion (@BuildStamp)

* Is there a 'bnf' @code syntax the source highlighter supports that 
  we could use to make the syntax specification in fble.fbld prettier?
  - if not, consider writing one? Or switching to a syntax that does exist?

* Should @l allow inline tags?
  - For example, I want @l[@config[...]], but it's not doing any substitution.
    I guess that makes sense for calling it a 'literal'?

* Figure out whitespace issues with fbld generated roff, man.
  - When are things trimed versus not?
  - How to avoid too many or too few blank lines between items?

* Be able to write doc comments for extern values and types as well as
  functions.

* Write test cases for doc comments extraction and conversion.
  - For example: blank lines in doc comments should be allowed and not cause
    the comment to be truncated.

* Install man pages compressed?

* Add a way to specify package path on the command line?

* Improve exercises for Unions and Functions tutorials, and others.

* Fix timeout with gdb-test
 - Just need to increase it a little in case of heavy CPU load?
 - Next time it happens, try to see where it got stuck?

* How to check errors from stale files in build directory?
  For example, sat/Sat/sat-tests still existed, even though now we're compiling
  to sat/sat-tests, but accidentally referencing the old sat/Sat/sat-tests
  path.
  Perhaps make use of ninja cleandead after generating the build.ninja file?
  Not sure if I want to require ninja 1.10, or if this is a robust solution.
  Maybe depend on full builds from github to catch these issues.

* Review C API for consistency.
  For example: FbleVectorInit inconsistent with FbleFreeVector?

* Optimize the generated build.ninja file to be smaller?
  By introducing rules, and taking advantage of $in, $out, etc?
  The build.ninja file is around 1.1M right now.

* Add smten support to fble.
  see thoughts/fble.smten.txt

* Add way to do inline code syntax highlighting in fbld?
  Because it looks a little funny in the tutorials for things to be
  highlighted in code blocks but not in inline text.

* Fbld Cleanup
 - Come up with a more formal test suite for fbld.
 - Print line and column number on fbld usage errors.
   Instead of 'Index' number.
 - Print line and col number on fbld usage command errors
   Such as wrong number of args.

* Optimize code for generate_c for low gcc memory use:
 - Use shorter labels for function names?
 - Only output labels for pc aborts that are actually jumped to.

* Add test that you can use a unicode character in a literal?

* Do something with .@ module value vs. type?
  - There's currently unexercised code for it.

* Do something with data type instruction?
  - There's currently unexercised code for it.

* [spec] Should empty path be allowed in package type?
 See spec/fble.fbld for more details.

* [modules]
 - Decide about .fble.@ files.
 - Split FbleLoad into FbleLoadProgram and FbleLoadModule.
 - Add support for loading .fble.@ files.
   And presumably some way to test this and something about it in the language
   spec?
 - Test all combinations of .fble/.fble.@, with all combinations of type
   errors in one or the other or both.

* [lib] Move more value conversion functions to separate object files.
 - Color, IO, etc.

* [debugger] Improve support for printing variables
 - Emit lexical scopes where appropriate.
   But what for? What value for printing lexical scopes?

* Consider running some of the tests under valgrind?
 - To catch memory issues that could otherwise go undetected?

* Implement support for packed data values.
 - Change the compiler to allocate FbleDataTypeValue when appropriate.
 - Pass type to struct and union construction and access functions.
 - Implement packing for struct and union values.

* Improve performance with profiling enabled?
 - Now that we removed the optimization for detecting duplicate call entries
   in the stack?
 - see thoughts/fble.profile.txt

* For loaded submodules, should the module profile block be the module file or
  the place where it was imported from?
 - Seems like it should be the module file, because it could be imported from
   multiple places?

* Change FbleProfile functions to accept NULL, and clean up code to take
  advantage of that where it makes sense?

* Use some way other than NULL to disable profiling?
 - To encourage all the apps to support optional profiling, including things
   like fble-md5 and fble-app?
 - Check we are passing meaningful block ids to FbleNewFuncValue.

* Add option for passing .so files to FbleLinkFromCompiledOrSource?

* Print full stack trace on abort instead of just the top stack trace?

* Run fble-test-compile-error tests in compilation mode?

* [compilation] Add support for .fble.@ files and modular compilation.

* [cleanup] For things like FbleValueAddRef, is it okay if dst is NULL?
 - It would be convenient for constructing things in case of error.
 - I'm not sure if there's any performance implications.
 - It would be nice to specify explicitly and be consistent with this kind of
   thing.

* [tests] Any way to improve memory growth tests?
 It feels wrong to me to have to do a full gc for the tests to pass. It feels
 too specific to the implementation of garbage collection. Anything we can do?

* [/*%] Follow style guide in fble.style.txt
  In particular, union field names should be lowercase: just, true, false, not
  Just, True, False.
* [/*%] Clean up fble library
 - Separate modules as appropriate to reduce false dependencies.
 - Document all functions.
 - Add tests for full code coverage of all functions.
 - Rename Str to String? Or to S?
 - Consider pulling ForEach and Map out into their own class?
* [/Int%] Add test coverage for the Int routines.
* [/Fble/Test%] Clean up fble test framework
 - Use AssertEquals for more of the tests.
 - Add an AssertLt or similar methods? Or generalize AssertEquals?
 - Properly test the test infra.
* [/GameOfLife%] Switch to a target 60 FPS?
* [/Map%] Add tests for balancing of /Map%?
* [/Snake%] Switch to a target 60 FPS?
* [/Snake%] Test and fix bug when snake eats its tail.
* [/Snake%] Ignore moves that aren't orthogonal to current snake direction.
* [/Snake%] Keep track of and report score.
* [/Snake%] Figure out why the background box gets lost some times.

* [libfble] Can fble-stdio check that the function has the right type?

* [spec] Add some way to catch or recover from errors at runtime?
* [spec] Clarify in spec: is it okay to retain a local variable until a function
  exits, even if that means retaining it longer than its lexical scope?
* [spec] Clarify spec on when (compile vs runtime) vacuous value error should be
  reported.
* [spec] Document the runtime memory model,
  - Including that tail recursive functions should not smash the stack.

* [typecheck] Be more consistent in FbleTc about use of vector versus FbleTc*[].
* [typecheck] We don't get a warning about an unused self recursive function.
  More generally, we don't get warnings about variables that are referenced
  only by unused variables.
* [typecheck] Better error messages on types that have the same name but different values?
* [typecheck] Quote funny names in types. For example, the field ',' should have
  quotes in type error messages.
* [typecheck] Better error message for importing something from a module that
  is not defined in the module?
* [typecheck] Test and fix error message for type of anonymous type let values.
 - The type should be the computed type for the value, not the introduced
   abstract type?
* [typecheck] Figure out why FbleNormalType is called so often
 - See if we can fix that to reduce the now annoyingly long compile times.
 - Profiling said its all in FbleTypesEqual. Maybe something pathological?

* Add tests that at least the compiled apps don't crash when you run them.
 - Including with --profile enabled.
