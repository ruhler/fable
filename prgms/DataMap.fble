
{ Data%; @(Data@, DUnit: Unit, Left, Right, Product); };
{ Map%; @(Map@); };
{ Unit%; @(Unit@, Unit); };
{ Maybe%; @(Maybe@, Nothing, Just); };

# A map from Data@ to T@.
<@>@ DataMap@ = <@ T@>{ +(Unit@ empty, DataMapP@<T@> map); },
<@>@ DataMapP@ = <@ T@>{ 
  *(Maybe@<T@> unit,
    *(DataMap@<T@> a, DataMap@<T@> b) sum,
    DataMap@<DataMap@<T@>> product);
};

<@ T@>{ DataMap@<T@>; } Empty = <@ T@>{ DataMap@<T@>(empty: Unit); };

<@ T@>(DataMap@<T@>, Data@) { Maybe@<T@>; }
Lookup = <@ T@>(DataMap@<T@> map, Data@ key) {
  ?(map;
     empty: Nothing<T@>,
     map: {
       ?(key;
          unit: map.map.unit,
          sum: ?(key.sum;
                   a: Lookup<T@>(map.map.sum.a, key.sum.a),
                   b: Lookup<T@>(map.map.sum.b, key.sum.b)),
          product: {
            Maybe@<DataMap@<T@>> mm = Lookup<DataMap@<T@>>(map.map.product, key.product.a);
            ?(mm;
                just: Lookup<T@>(mm.just, key.product.b),
                nothing: Nothing<T@>);
          });
     });
};

# Insert that transforms the existing value, if any.
<@ T@>(DataMap@<T@>, Data@, (Maybe@<T@>){ T@; }) { DataMap@<T@>; }
InsertWith = <@ T@>(DataMap@<T@> map, Data@ key, (Maybe@<T@>){ T@; } with) {
  DataMapP@<T@> p =
    ?(map;
       empty: DataMapP@<T@>(Nothing<T@>, @(a: Empty<T@>, b: Empty<T@>), Empty<DataMap@<T@>>),
       map: map.map);
  DataMap@<T@>(map:
   ?(key;
     unit: DataMapP@<T@>(Just<T@>(with(p.unit)), p.sum, p.product),
     sum: ?(key.sum;
              a: DataMapP@<T@>(p.unit, @(a: InsertWith<T@>(p.sum.a, key.sum.a, with), b: p.sum.b), p.product),
              b: DataMapP@<T@>(p.unit, @(a: p.sum.a, b: InsertWith<T@>(p.sum.b, key.sum.b, with)), p.product)),
     product: {
       DataMapP@<T@>(p.unit, p.sum,
         InsertWith<DataMap@<T@>>(p.product, key.product.a, (Maybe@<DataMap@<T@>> mm) {
           InsertWith<T@>(?(mm; just: mm.just, nothing: Empty<T@>), key.product.b, with);
         }));
     }));
};

<@ T@>(DataMap@<T@>, Data@, T@) { DataMap@<T@>; }
Insert = <@ T@>(DataMap@<T@> map, Data@ key, T@ value) {
  InsertWith<T@>(map, key, (Maybe@<T@> _) { value; });
};

<@ A@, @ B@>(DataMap@<A@>, B@, (Data@, A@, B@) { B@;}) { B@; }
For = <@ A@, @ B@>(DataMap@<A@> m, B@ base, (Data@, A@, B@) { B@;} body) {
  ?(m;
    empty: base,
    map: {
      B@ b2 = ?(m.map.unit;
                  just: body(DUnit, m.map.unit.just, base),
                  nothing: base);
      B@ b3 = For<A@, B@>(m.map.sum.a, b2, (Data@ k) { body(Left(k)); });
      B@ b4 = For<A@, B@>(m.map.sum.b, b3, (Data@ k) { body(Right(k)); });
      B@ b5 = For<DataMap@<A@>, B@>(m.map.product, b4,
        (Data@ ka, DataMap@<A@> v, B@ b) {
          For<A@, B@>(v, b, (Data@ kb) { body(Product(ka, kb)); });
      });
      b5;
    });
};
  
# An implementation of the Map interface using a DataMap.
<@ K@, @ V@>((K@) { Data@; }) { Map@<DataMap@<V@>,K@,V@>; }
DataMap = <@ K@, @ V@>((K@) { Data@; } ToData) {
  @ M@ = DataMap@<V@>;
  Map@<M@, K@, V@>(M@,
    Empty<V@>,
    (M@ m, K@ k) {
      Lookup<V@>(m, ToData(k));
    },
    (M@ m, K@ k, (Maybe@<V@>) { V@; } w) {
      InsertWith<V@>(m, ToData(k), w);
    },
    (M@ m, K@ k, V@ v) {
      Insert<V@>(m, ToData(k), v);
    });
};

@(DataMap@, Empty, Lookup, Insert, InsertWith, DataMap);
