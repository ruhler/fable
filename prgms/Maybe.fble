@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

# Maybe@ --
#   Type representing an optional value.
#
# Type Parameters:
#   T@ - The type of value that is optional.
#
# Fields: 
#   just - The value is present.
#   nothing - The value is not present.
<@>@ Maybe@ = <@ T@> { +(T@ just, Unit@ nothing); };

# Just --
#   Construct a Maybe@ with a value that is present.
#
# Type Parameters:
#   T@ - The type of the value that is present.
#
# Arguments:
#   x - The value that is present.
#
# Returns:
#   A Maybe@ with the given present value.
#
# Example Use:
#   Maybe@<Foo@> = Just<Foo@>(MyFoo);
<@ T@>(T@){ Maybe@<T@>; } Just = <@ T@>(T@ x) { Maybe@<T@>(just: x); };

# Nothing --
#   A Maybe@ that does not have a value present.
#
# Type Parameters:
#   T@ - The type of value that the Maybe holds.
#
# Example Use:
#   Maybe@<Foo@> = Nothing<Foo@>;
Maybe@ Nothing = <@ T@> { Maybe@<T@>(nothing: Unit); };

# Map --
#   Apply a function to the value of a Maybe.
#
# Type Parameters:
#   A@ - The type of element of the input maybe.
#   B@ - The type of element of the output maybe.
#
# Arguments:
#   m - The input maybe
#   f - the function to apply
#
# Result:
#   A maybe with f(m.just) as the value if m is has a present value.
<@ A@, @ B@>(Maybe@<A@>, (A@) { B@; }) { Maybe@<B@>; }
Map = <@ A@, @ B@>(Maybe@<A@> m, (A@) { B@; } f) {
  m.?(just: Just<B@>(f(m.just)), nothing: Nothing<B@>);
};

@(Maybe@, Just, Nothing, Map);
