
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ Eq@ = /Core/Eq%.Eq@;
<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;
<@>% AssertNotEquals = /Core/Eq/Assert%.AssertNotEquals;

@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>@ Show@ = /Core/Show%.Show@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;
<@>% Append = /Core/List%.Append;
<@>% Init = /Core/List%.Init;
<@>% Concat = /Core/List%.Concat;
<@>% Map = /Core/List%.Map;
<@>% ForEach = /Core/List%.ForEach;
<@>% Reverse = /Core/List%.Reverse;
<@>% Join = /Core/List%.Join;

<@>% Length = /Core/List/Length%.Length;
<@>% Split = /Core/List/Eq%.Split;
<@>% Sort = /Core/List/Sort%.Sort;

@ Elem@ = +(Unit@ A, Unit@ B, Unit@ C, Unit@ D, Unit@ E);

% Elems = @(
  A: Elem@(A: Unit),
  B: Elem@(B: Unit),
  C: Elem@(C: Unit),
  D: Elem@(D: Unit),
  E: Elem@(E: Unit));

(List@<Elem@>) { List@<Elem@>; } EL = List<Elem@>;

(Elem@) { String@; } ElemShow = (Elem@ e) {
  e.?(A: Str|A, B: Str|B, C: Str|C, D: Str|D, E: Str|E);
};

(Elem@, Elem@) { Bool@; } ElemLe = (Elem@ a, Elem@ b) {
  a.?(A: True,
      B: b.?(A: False, : True),
      C: b.?(A: False, B: False, : True),
      D: b.?(A: False, B: False, C: False, : True),
      E: b.?(A: False, B: False, C: False, D: False, E: True));
};

(Elem@, Elem@) { Bool@; } ElemEq = (Elem@ a, Elem@ b) {
  a.?(A: b.?(A: True, : False),
      B: b.?(B: True, : False),
      C: b.?(C: True, : False),
      D: b.?(D: True, : False),
      E: b.?(E: True, : False));
};

Eq@<List@<Elem@>> Eq = /Core/List/Eq%.Eq<Elem@>(ElemEq);
Show@<List@<Elem@>> Show = /Core/List/Show%.Show<Elem@>(ElemShow);

Test@ Tests = TestSuite(Str|List, List<Test@>[
  Test(Str|'Eq_Same', (Unit@ _) {
    List@<Elem@> a = EL|ABCDE;
    List@<Elem@> b = EL|ABCDE;

    AssertEquals(Eq, Show, a, b);
  }),

  Test(Str|'Eq_DiffElem', (Unit@ _) {
    List@<Elem@> a = EL|ABCDE;
    List@<Elem@> b = EL|ABDDE;

    AssertNotEquals(Eq, Show, a, b);
  }),

  Test(Str|'Eq_DiffSize', (Unit@ _) {
    List@<Elem@> a = EL|ABCDE;
    List@<Elem@> b = EL|ABCD;

    AssertNotEquals(Eq, Show, a, b);
  }),

  Test(Str|'Append', (Unit@ _) {
    List@<Elem@> a = EL|ABC;
    List@<Elem@> b = EL|DEE;
    List@<Elem@> wnt = EL|ABCDEE;
    List@<Elem@> got = Append(a, b);
    AssertEquals(Eq, Show, wnt, got);
  }),

  Test(Str|'Init', (Unit@ _) {
    List@<Elem@> l = EL|ABCDE;
    List@<Elem@> wnt = EL|ABCD;
    List@<Elem@> got = Init(l);
    AssertEquals(Eq, Show, wnt, got);
  }),

  Test(Str|'Concat', (Unit@ _) {
    List@<List@<Elem@>> l = List[
      EL|ABC,
      EL|DEA,
      EL|BB
    ];

    List@<Elem@> wnt = EL|ABCDEABB;
    List@<Elem@> got = Concat<Elem@>(l);
    AssertEquals(Eq, Show, wnt, got);
  }),

  Test(Str|'Map', (Unit@ _) {
    List@<Elem@> l = EL|ABCDE;
    (Elem@) { Elem@; } f = (Elem@ e) {
      e.?(A: Elems.B, B: Elems.C, C: Elems.D, D: Elems.E, E: Elems.A);
    };

    List@<Elem@> wnt = EL|BCDEA;
    List@<Elem@> got = Map(l, f);
    AssertEquals(Eq, Show, wnt, got);
  }),

  Test(Str|'ForEach', (Unit@ _) {
    List@<Elem@> l = EL|ABCDE;
    List@<Elem@> wnt = EL|EDCBA;
    List@<Elem@> got =
      ForEach(l, Nil<Elem@>, (Elem@ e, List@<Elem@> b) {
        Cons(e, b);
      });
    AssertEquals(Eq, Show, wnt, got);
  }),

  Test(Str|'Reverse', (Unit@ _) {
    List@<Elem@> input = EL|ABCDE;
    List@<Elem@> wnt = EL|EDCBA;
    List@<Elem@> got = Reverse(input);
    AssertEquals(Eq, Show, wnt, got);
  }),

  Test(Str|'Sort', (Unit@ _) {
    List@<Elem@> unsorted = EL|DABEC;
    List@<Elem@> wnt = EL|ABCDE;
    List@<Elem@> got = Sort(ElemLe, unsorted);
    AssertEquals(Eq, Show, wnt, got);
  }),

  Test(Str|'Length', (Unit@ _) {
    Int@ wnt = Int|5;
    Int@ got = Length(EL|ABCDE);
    AssertEquals(/Core/Int/Eq%.Eq, /Core/Int/Show%.Show, wnt, got);
  }),

  Test(Str|'Split', (Unit@ _) {
    @ T@ = +(Unit@ ' ', Unit@ X);
    Eq@<T@> eq = (T@ a, T@ b) {
      a.?(' ': b.?(' ': True, 'X': False), 'X': b.?(' ': False, 'X': True));
    };
    Show@<T@> show = (T@ x) { x.?(' ': Str|' ', 'X': Str|'X'); };

    (T@) { Bool@; } sep = (T@ x) { x.?(' ': True, 'X': False); };
    List@<T@> list = List<T@>|'  XXX X  XX ';
    List@<List@<T@>> want = List[List<T@>|XXX, List<T@>|X, List<T@>|XX];
    List@<List@<T@>> got = Split(list, sep);
    AssertEquals(
      /Core/List/Eq%.Eq(/Core/List/Eq%.Eq(eq)),
      /Core/List/Show%.Show(/Core/List/Show%.Show(show)),
      want, got);
  }),

  Test(Str|Join, (Unit@ _) {
    List@<Elem@> wnt = EL|'AABBCBBDE';
    List@<Elem@> got = Join(List[EL|'AA', EL|'C', EL|'DE'], EL|'BB');
    AssertEquals(Eq, Show, wnt, got);
  })
]);

@(Tests);
