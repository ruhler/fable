
@ Int@ = /Int/Int%.Int@;
% D = /Int/Int/Lit%.D;
% I = /Int/Int/Lit%.I;

@ Addr@ = /Fblf/Program%.Addr@;
@ Value@ = /Fblf/Program%.Value@;
% Assign = /Fblf/Program%.Assign;

@ Module@ = /Fblf/Module%.Module@;
% AllocM = /Fblf/Module%.AllocM;
% PureM = /Fblf/Module%.PureM;
% SeqM = /Fblf/Module%.SeqM;

% AddM = /Fblf/Lib/Add%.AddM;
% AndM = /Fblf/Lib/Bitwise%.AndM;
% OrM = /Fblf/Lib/Bitwise%.OrM;
% XorM = /Fblf/Lib/Bitwise%.XorM;
% NotM = /Fblf/Lib/Bitwise%.NotM;
% ClsM = /Fblf/Lib/Bitwise%.ClsM;

Int@ 32 = I(D|32);

# X@ -- 
#   The type of functions F, G, H, I.
#
# Inputs: x, y, z, r
#   Computes r = X(x, y, z)
@ X@ = (Addr@, Addr@, Addr@, Addr@) { Module@; };

# XX@ --
#   The type of functions FF, GG, HH, II.
#
# Inputs: a, b, c, d, x, s, t, r
#
#   Computes r = X(a, b, c, d, x, s, t);
@ XX@ = (Addr@, Addr@, Addr@, Addr@, Addr@, Int@, Value@, Addr@) { Module@; };

(X@) { XX@; }
XX = (X@ xf)(Addr@ a, Addr@ b, Addr@ c, Addr@ d, Addr@ x, Int@ s, Value@ t, Addr@ r) {
  # r = add(b, cls(add(add(a, xf(b, c, d)), add(x, t)), s));
  Addr@ tv <- AllocM(32);
  Addr@ xtv <- AllocM(32);
  Addr@ xfv <- AllocM(32);
  Addr@ axfv <- AllocM(32);
  Addr@ axfxtv <- AllocM(32);
  Addr@ clsv <- AllocM(32);
  SeqM([
    PureM(Assign(tv, t, 32)),
    AddM(32, x, tv, xtv),
    xf(b, c, d, xfv),
    AddM(32, a, xfv, axfv),
    AddM(32, axfv, xtv, axfxtv),
    ClsM(32, s, axfxtv, clsv),
    AddM(32, b, clsv, r)
  ]);
};

XX@ FF = XX((Addr@ x, Addr@ y, Addr@ z, Addr@ r) {
  # r = or(and(x, y), and(not(x), z));
  Addr@ nx <- AllocM(32);
  Addr@ anxz <- AllocM(32);
  Addr@ xy <- AllocM(32);
  SeqM([
    NotM(32, x, nx),
    AddM(32, nx, z, anxz),
    AndM(32, x, y, xy),
    OrM(32, xy, anxz, r)]);
});

XX@ GG = XX((Addr@ x, Addr@ y, Addr@ z, Addr@ r) {
  # r = or(and(x, z), and(y, not(z)));
  Addr@ nz <- AllocM(32);
  Addr@ aynz <- AllocM(32);
  Addr@ xz <- AllocM(32);
  SeqM([
    NotM(32, z, nz),
    AddM(32, y, nz, aynz),
    AndM(32, x, z, xz),
    OrM(32, xz, aynz, r)]);
});

XX@ HH = XX((Addr@ x, Addr@ y, Addr@ z, Addr@ r) {
  # r = xor(x, xor(y, z));
  Addr@ yz <- AllocM(32);
  SeqM([
    XorM(32, y, z, yz),
    XorM(32, x, yz, r)]);
});

XX@ II = XX((Addr@ x, Addr@ y, Addr@ z, Addr@ r) {
  # r = xor(y, or(x, not(z)));
  Addr@ nz <- AllocM(32);
  Addr@ xnz <- AllocM(32);
  SeqM([
    NotM(32, z, nz),
    OrM(32, x, nz, xnz),
    XorM(32, y, xnz, r)]);
});

@(FF, GG, HH, II);
