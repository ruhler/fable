Sat Game
========
Making sure we have enough experience programming in fble this release, let's
implement a sat game.

First step: have a nicer Random@ interface. Because I'd like to reuse code for
things like random integers and shuffling lists.

The current interface for Random is LFSR@. You can shift out a Bit@. I'd like
something monadic. Like:

<<@>@>@ Random@ = <<@>@ M@> { *(
  M@<Bit@> bit
);

Something like that. Build on top of that:

<<@>@ M@> {
  (Random@<M@>) { M@<Bool@>; } Bool;
  (Random@<M@>) { M@<Int@>; } Int;
  (Random@<M@>)<@ A@>(List@<A@>) { M@<List@<A@>>; } Shuffle;
  ...
};

---

The key to start is I don't want to have to reference LFSR@ or Shifted@.

Maybe start by defining Random@ as part of SatGame package. We can move it to
core if it turns out to be useful.

---

Draft of puzzle generation is done. It compiles, but crashes in a bad way at
runtime.

Three issues to investigate:
1. How it's getting tag 2 for a List@ value. This should be impossible. It's
not a bug in the satgame implementation. It must be a bug in the fble
implementation somewhere.

2. Why the stack trace for (1) says undefined function in multiple places.

3. Why number of clauses is 3 when asked for 6 using params 6 6 3 0.

Let's deal with the easy one first.

Clauses added should be:

num_free_vars = num_vars - num_vars_per_clause = 6 - 3 = 3.
clauses_per_variable = (3 + 3 - 1) / 3 = 1.

That's clearly wrong. We didn't even ask how many clauses we wanted here. It
should be: num_clauses / num_free_vars rounded up.

Let's add a test suite and then fix this.

---

(3) is fixed.

Here's the stack trace:

@[SatGame.Generate.Length]: ../pkgs/satgame/SatGame/Random/List.fble:28:7:
error: union field access undefined: wrong tag
../pkgs/satgame/SatGame/Random/List.fble:30:25: error: callee aborted
../pkgs/satgame/SatGame/Random/List.fble:19:22: error: callee aborted
../pkgs/satgame/SatGame/Random/List.fble:29:22: error: callee aborted
../pkgs/satgame/SatGame/Random/List.fble:30:25: error: callee aborted
../lib/value.c:1400:5: error: called undefined function
../pkgs/core/Core/Monad/State.fble:17:19: error: callee aborted
../pkgs/core/Core/Monad/State.fble:17:19: error: callee aborted
../pkgs/core/Core/Monad/State.fble:17:19: error: callee aborted
../pkgs/core/Core/Monad/State.fble:17:19: error: callee aborted
../pkgs/core/Core/Monad/State.fble:17:19: error: callee aborted
../pkgs/core/Core/Monad/State.fble:17:19: error: callee aborted
../pkgs/core/Core/Monad/State.fble:17:19: error: callee aborted
../pkgs/satgame/SatGame/Random/PureLFSR.fble:35:3: error: callee aborted
../pkgs/satgame/SatGame/Tests.fble:31:22: error: callee aborted
../pkgs/core/Core/Test/Run.fble:36:28: error: callee aborted
../lib/value.c:1400:5: error: called undefined function

Does that make any sense at all?

Maybe. We are returning a function, we return NULL when we abort, that creates
an 'undefined' function value. But why would I call that function?

Okay. I bet the case is: we do an overapplication or something to a function
that returns NULL. We should do something smarter there.

Also: why '../' for all the paths. Isn't that strange?

---

Here's the code in question:

  (List@<T@>) { M@<List@<T@>>; } S = (List@<T@> l) {
    l.?(nil: m.return(l));
    l.cons.tail.?(nil: m.return(l));
    Split@ s <- m.do(Split(l));
    List@<T@> a <- m.do(Shuffle(m, r, s.a));
    List@<T@> b <- m.do(Shuffle(m, r, s.b));
    m.return(Append(a, b));
  };

The first time we call Split, it returns
  s.a = 0x3117766445bb3 - same as the initial l.cons.tail
  s.b = 0x318bb33 - must be equivalent to List[l.cons.head],
     where l.cons.head is 0x62ed

Now we call Split again on s.a. It returns:
  0x188bbb33
  That's clearly wrong, because that's a union, and Split@ should be a struct.

So, next step for debug is to trace through the implementation of
Split(0x31177664445bb3) and figure out how it can be returning the wrong type
of object.

---

Based on the symptoms, my guess for what could be happening is a stack
allocated value is being returned and referenced after the stack is popped, we
allocate a new value on top of it, then we access a field. The field contains
the wrong packed value.

Let's debug to see what's really going on.

---

We do a tail call to Split, but instead of it passing the list argument
to split, it passes that list argument to the anonymous function 'S!.:.:!'.

Specifically, the function being called is
  0x533c48 GC allocated RefValue pointing to
  0x7ff7d58ad9 stack allocated FuncValue for 'S!.:.:!'.

In theory the arg should be statics[1] of the Split function, which is
definitely supposed to be 'Split'.

Somehow we get a Gc Value pointing to a stack allocated value. That's not
allowed, right? Because if it is, GcRealloc will not work correctly.

I see. Bug: when we assign a value to a ref value, we need to GcRealloc that
value. Otherwise things go bad.

Can I write a regression test for this? Should be able to.

1. Create a ref value. It's value should be an object allocated on the stack.
2. Return the ref value sufficiently far to pop the from of the stack
allocated value.
3. Do a nested call to clobber the stack with garbage.
4. Try to access the original ref value's value in a meaningful way.

Ugh. I tried reproducing it in a small test case. It's not reproducing.

---

Next step is to implement seed support. I need to think about how to do this.

Should we have an option to introduce randomness into any random number
generator, or should that be something specific to the random number
generator? For example, true random number generators have no need for seeds?
Seeds are pretty important for pseudo random number generators though.

There are two different approaches as well:
1. Set the seed.
2. Add randomness.

(1) sounds more useful, because it would let us 'reset' a random number
generator to produce the same sequence again. (2) sounds more general, because
it makes sense to use for a true random number generator.

If we can reset a random number generator to its initial state, then (2) gives
us (1) as adding randomness to the initial state.

LFSR could support both fairly easily: (1) sets the state bits, (2) shifts
bits into the state bits.

Let's review some APIs for random number generation and see if it suggests a
good API for our random number generation.

Python core random number generation API:
 - Random float in [0, 1), or get k random bits.
 - Mersenne Twister is the underlying pseudo random generator algorithm.
 - seed can be specified as an integer
 - setstate/getstate functions to save and restore state

Go:
 - Random source can be seeded and can give a random 63 bit number.
 
Java:
 - Can set long seed.
 - Get n random bits.

So it's pretty clear. For pseudo random number generation we want two methods:
set seed, get bits of randomness. Presumably getting K bits at once is more
efficient in general than getting a single bit at a time, otherwise we could
ask for one bit of randomness at a time.

There is no notion of adding randomness.

How about hardware random number generator APIs? Looks like you just get
random data. Makes sense.

What's my proposal? How do I want to offer random numbers in the fble standard
library?

Two parts: the API and the implementation. People should be able to provide
their own implementation.

Ideally the API can be reused with both pseudo random and true random number
generators. That suggests splitting it into two parts: seeding (for psuedo
random only) and generation (for both).

For generation:
* Simplest API is get a single random bit. I like Monad approach for
  sequencing. Let's start there and worry about performance later. When we
  start to worry about performance, the new API will be get K bits. The
  problem is it requires us to take a dependency on List@ and Int@.

  For the Bit@... do we want Bit@ or Bool@? I kind of like the idea of Bit@ so
  people use a RandBool@ function analogous to RandInt@.

  Alternatively, we could say: pick between two values of any type. That
  avoids the dependence on Bit@ versus Bool@. Yeah, I like that.

For seeding:
* A separate API from generation. Separate from implementation too I think.

  Now seeding with a single bit doesn't make sense. We really want an
  arbitrary number of bits in general. Or make it implementation specific.

  It all depends what we want to depend on. Int@, String@, List@? We need
  something with sequencing. If generation uses Bit@, then it makes sense to
  pass a binary string. But binary string is a fairly uncommon type. Int@ is a
  much more common type.

If we are willing to depend on the Int@ type, we could have:
  RandInt - select a uniform random Int@ in range [0, max). That allows for
            plenty of efficiency. Scales up quite nicely.
  SeedInt - seed from an int. Presumably there will be two seeds that
            behave the same way. But that's always going to be the case.


This brings up a common language challenge: we have an API we could build on
top of a few different core APIs. Different implementations may want to be
built on different core APIs for efficiency or convenience reasons. We don't
want the user of the API to have to care. Can I come up with a good story for
that in fble? It honestly shows up a lot.

Implementation:
* The implementation may not want to know about the Monad@ type M@. That
  suggests maybe we want even another different API, and layer the monadic API
  on top of that? Yeah.

The raw API would be:

Pseudo Random:
  S@ - state of random number generator.
  <@ A@>(A@, A@, S@) { *(A@ x, S@ s); }  - select between first and second arg.
  (Int@) { S@; } - seed the random number generator, assuming we seed with Int@.

Random:
  May require the Monad@ because it's in IO@?
  S@ - internal state.
  ...

This is surprisingly involved API design.

---

To make practical forward progress, I suggest modifying the LFSR@ API to allow
a bit string seed, and convert Int@ to bit string in the main program of
satgame puzzle generation.

---

For images, I think it would be cool if we say they are all black, and only
draw the parts of the image that are strokes. That way we could change color
programmatically, and we can change background color programmatically. I could
implement some helper functions for drawing lines to make it easier.

I like the idea of 32 by 32. Maybe best to center at the origin instead of at
(16, 16)? That way it's easier to scale the images up and down if we ever want
to.

Realistically, how many image pairs do I need to start? At least 9, I feel
like, for a 3x3x3 Sudoku style grid. Probably 16 is more than enough to start.

---

Note on notation:

Var@ should be 'x', 'y', 'z', ...
Literal@ should be '+x', '-x', etc.

Literals are positive or negative, which is the polarity of the literal.

Let's switch to this terminology.

---

UI layout.

I'm thinking that we should target a fixed aspect ratio and scale the tile
size up or down automatically to be as big as we can while fitting in that
aspect ratio. For the aspect ratio, I think go portrait mode, because that's
more common for reading things (music, books, papers, websites, etc.) than
horizontal.

The aspect ratio for A4 paper is sqrt(2). 4/3 is pretty close to that. My
vote: target a 4/3 aspect ratio, round as needed.

Use the target aspect ratio to determine number of group columns. Draw tile as
32x32, then scale it to fill up as big as we can to fit the display. Center in
the screen.

---

Let's make SatGame release worthy at least.

Pick good default parameters and make it actually random.

To make it actually random, we can store a seed in the users home directory
and update it every time we play.

Proposed options:
  --vars, number of variables. Defaults to 12
  --clauses, number of clauses. Defaults to 18
  --literals-per-clause. Defaults to 3
  --seed. Defaults to $HOME/.fble-satgame value, or 1.

---

Trying to scale the game to fit in the window... uh, affine transformation
isn't very useful for this because it only allows integer multiples.

