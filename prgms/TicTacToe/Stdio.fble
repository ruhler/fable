
% True = /Bool%.True;

@ Char@ = /Char%.Char@;
% Chars = /Char%.Chars;

<@>% List = /List%.List;
<@>% Concat = /List%.Concat;

<@>@ Maybe@ = /Maybe%.Maybe@;
<@>% Just = /Maybe%.Just;
<@>% Nothing = /Maybe%.Nothing;

<@>@ Get@ = /Process%.Get@;
<@>@ Put@ = /Process%.Put@;

@ Stdio@ = /Stdio%.Stdio@;

@ String@ = /String%.String@;
% Str = /String%.Str;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

@ Square@ = /TicTacToe/Board%.Square@;
@ Board@ = /TicTacToe/Board%.Board@;
@ Player@ = /TicTacToe/Board%.Player@;
@ Position@ = /TicTacToe/Board%.Position@;

@ GameStatus@ = /TicTacToe/Game%.GameStatus@;
@ Input@ = /TicTacToe/Game%.Input@;
@ Output@ = /TicTacToe/Game%.Output@;

(Square@) { String@; } ShowSquare = (Square@ s) {
  s.?(X: Str(Chars|X), O: Str(Chars|O), E: Str(Chars|_));
};

(Board@) { String@; } ShowBoard = (Board@ b) {
  String@ _ = Str(Chars|' ');
  Concat<Char@>(List<String@>([
    Str(Chars|'  1 2 3'), List<Char@>([Chars.nl]),
    Str(Chars|'A '), ShowSquare(b.ul), _, ShowSquare(b.uc), _, ShowSquare(b.ur), List<Char@>([Chars.nl]),
    Str(Chars|'B '), ShowSquare(b.ml), _, ShowSquare(b.mc), _, ShowSquare(b.mr), List<Char@>([Chars.nl]),
    Str(Chars|'C '), ShowSquare(b.ll), _, ShowSquare(b.lc), _, ShowSquare(b.lr), List<Char@>([Chars.nl])]));
};

(Player@) { String@; } ShowPlayer = (Player@ p) {
  p.?(X: Str(Chars|X), O: Str(Chars|O));
};

(GameStatus@) { String@; } ShowStatus = (GameStatus@ s) {
  s.?(playing: Concat<Char@>(List<String@>([
        Str(Chars|'Player '),
        ShowPlayer(s.playing),
        Str(Chars|' move:')])),
      ended:
        s.ended.?(
           win: Concat<Char@>(List<String@>([
                Str(Chars|'GAME OVER: Player '),
                ShowPlayer(s.ended.win),
                Str(Chars|' wins.')])),
           draw: Str(Chars|'GAME OVER: Draw.')));
};

(Output@) { String@; } ShowOutput = (Output@ out) {
  Concat<Char@>(List<String@>([
    ShowBoard(out.board),
    List<Char@>([Chars.nl]),
    ShowStatus(out.status),
    List<Char@>([Chars.nl])]));
};

(String@) { Maybe@<Input@>; } ParseInput = (String@ in) {
  in.?(
      cons: in.cons.head.?(
        'A': in.cons.tail.?(cons: in.cons.tail.cons.head.?(
                '1': Just<Input@>(Input@(move: Just<Position@>(Position@(UL: Unit)))),
                '2': Just<Input@>(Input@(move: Just<Position@>(Position@(UC: Unit)))),
                '3': Just<Input@>(Input@(move: Just<Position@>(Position@(UR: Unit)))),
                   : Nothing<Input@>),
                nil: Nothing<Input@>),
        'B': in.cons.tail.?(cons: in.cons.tail.cons.head.?(
                '1': Just<Input@>(Input@(move: Just<Position@>(Position@(ML: Unit)))),
                '2': Just<Input@>(Input@(move: Just<Position@>(Position@(MC: Unit)))),
                '3': Just<Input@>(Input@(move: Just<Position@>(Position@(MR: Unit)))),
                   : Nothing<Input@>),
                nil: Nothing<Input@>),
        'C': in.cons.tail.?(cons: in.cons.tail.cons.head.?(
                '1': Just<Input@>(Input@(move: Just<Position@>(Position@(LL: Unit)))),
                '2': Just<Input@>(Input@(move: Just<Position@>(Position@(LC: Unit)))),
                '3': Just<Input@>(Input@(move: Just<Position@>(Position@(LR: Unit)))),
                   : Nothing<Input@>),
                nil: Nothing<Input@>),
        'P': Just<Input@>(Input@(move: Nothing<Position@>)),
        'R': Just<Input@>(Input@(reset: Unit)),
           : Nothing<Input@>),
      nil: Nothing<Input@>);
};

# Play a game of tic-tac-toe using the stdio interface.
Stdio@ TicTacToe = (Get@<Maybe@<String@>> input, Put@<String@> output) {
  Get@<Input@> in = {
    Maybe@<String@> s := input;
    s.?(just: {
            Maybe@<Input@> mi = ParseInput(s.just);
            mi.?(just: !(mi.just),
                 nothing: {
                    Unit@ _ := output(Concat<Char@>(List<String@>([
                      Str(Chars|'invalid input: '),
                      Str(Chars|'expected {A,B,C}{1,2,3}, P, or R'),
                      Str([Chars.nl])])));
                      in;
                 });
         },
         nothing: !(Input@(quit: Unit)));
  };

  Put@<Output@> out = (Output@ o) { output(ShowOutput(o)); };

  Unit@ _ := /TicTacToe/Game%.TicTacToe(in, out);
  !(True);
};

@(TicTacToe);
