
<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;


# /Core/Map%.Map@ implementation for List@<T@>, parameterized by the element's
# map implementation.
<<@>@ M@, @ T@>(/Core/Map%.Map@<M@, T@> M) {
  # A Map from List@<T@> to V@;
  <@>@ Map@ = <@ V@> {
    @ M@ = +(Unit@ empty, P@ p),
    @ P@ = *(M.Map@<M@> cons, Maybe@<V@> nil);
    M@;
  };

  # A non-empty Map from List@<T@> to V@;
  <@>@ MapP@ = <@ V@> {
    @ M@ = +(Unit@ empty, P@ p),
    @ P@ = *(M.Map@<M@> cons, Maybe@<V@> nil);
    P@;
  };

  Map@ Empty = <@ V@> {
    Map@<V@>(empty: Unit);
  };

  MapP@ EmptyP = <@ V@> {
    MapP@(M.Empty<Map@<V@>>, Nothing<V@>);
  };

  <@ V@>(Map@<V@>, List@<T@>) { Maybe@<V@>; }
  Lookup = <@ V@>(Map@<V@> map, List@<T@> key) {
    map.?(empty: Nothing<V@>);
    key.?(nil: map.p.nil);

    Maybe@<Map@<V@>> cm = M.Lookup(map.p.cons, key.cons.head);
    cm.?(nothing: Nothing<V@>);

    Lookup(cm.just, key.cons.tail);
  };

  <@ V@>(Map@<V@>, List@<T@>, V@) { Map@<V@>; }
  Insert = <@ V@> (Map@<V@> map, List@<T@> key, V@ value) {
    MapP@<V@> p = map.?(empty: EmptyP<V@>, p: map.p);

    Map@(p: {
      key.?(nil: p.@(nil: Just(value)));

      # TODO: Support an insert with modify kind of thing on the map to avoid
      # having to do separate lookup followed by insert here.
      Maybe@<Map@<V@>> mcm = M.Lookup(p.cons, key.cons.head);
      Map@<V@> cm = mcm.?(just: mcm.just, nothing: Empty<V@>);
      Map@<V@> ncm = Insert(cm, key.cons.tail, value);
      p.@(cons: M.Insert(p.cons, key.cons.head, ncm));
    });
  };

  <@ V@>(Map@<V@>, List@<T@>) { Map@<V@>; }
  Delete = <@ V@>(Map@<V@> _map, List@<T@> _key) {
    # TODO: Implement the Delete function.
    Maybe@<Map@<V@>> TODO;
    TODO.just;
  };

  <@ V@>(Map@<V@>)<@ B@>(B@, (List@<T@>, V@, B@) { B@; }) { B@; }
  ForEach = <@ V@>(Map@<V@> _map)<@ B@>(B@ _base, (List@<T@>, V@, B@) { B@; } _body) {
    # TODO: Implement the ForEach function.
    Maybe@<B@> TODO;
    TODO.just;
  };

  /Core/Map%.Map@<Map@, List@<T@>> Map = @(
    Map@, Empty, Insert, Delete, Lookup, ForEach
  );

  Map;
};
