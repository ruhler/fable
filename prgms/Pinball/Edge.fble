
@ Num@ = /Pinball/Num%.Num@;

@ Vec@ = /Pinball/Vec%.Vec@;
% SubV = /Pinball/Vec%.SubV;
% Magnitude = /Pinball/Vec%.Magnitude;
% Normalize = /Pinball/Vec%.Normalize;

<@>@ Show@ = /Show%.Show@;

% Strs = /Core/String%.Strs;
% Str = /Core/String%.Str;

# Edge@ --
#   Internal representation for a stationary edge.
@ Edge@ = *(
  Vec@ start,       # The start point of the edge.
  Vec@ end,         # The end point of the edge.
  Num@ restitution, # Fraction of energy preserved during a collision.

  # The following values are cached as fields to avoid having to recompute.
  Vec@ dir,         # Unit vector pointing from start to end.
  Num@ length       # Length of the edge.
);

# Edge --
#   Specify an edge using start and end position.
(Vec@, Vec@, Num@) { Edge@; }
Edge = (Vec@ start, Vec@ end, Num@ restitution) {
  Vec@ dir = SubV(end, start);
  Edge@(start, end, restitution, Normalize(dir), Magnitude(dir));
};

Show@<Edge@> Show = (Edge@ e) {
  Strs[
    Str|'(start: ', /Pinball/Vec%.Show(e.start),
    Str|', end: ', /Pinball/Vec%.Show(e.end),
    Str|', restitution: ', /Pinball/Num%.Show(e.restitution),
    Str|')'];
};

@(Edge@, Edge, Show);

