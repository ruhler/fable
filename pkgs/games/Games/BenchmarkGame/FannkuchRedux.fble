
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;
% Sub = /Core/Int%.Sub;
% Eq = /Core/Int/Eq%.Eq;
% Max = /Core/Int/Eq%.Max;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;
<@>% Append = /Core/List%.Append;
<@>% Last = /Core/List%.Last;
<@>% Init = /Core/List%.Init;
<@>% ForEach = /Core/List%.ForEach;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

# Reverse the first n elements of the list l.
# @param n  The number of elements remaining to reverse.
# @param pre  Collection of elements reversed so far.
# @param l  The remainder of the list to reverse.
(Int@, List@<Int@>, List@<Int@>) { List@<Int@>; }
Flip = (Int@ n, List@<Int@> pre, List@<Int@> l) {
  Eq(Int|0, n).?(true: Append(pre, l));
  Flip(Sub(n, Int|1), Cons(l.cons.head, pre), l.cons.tail);
};

# Counts the number of flips needed for the given list.
# @param n  The number of flips so far.
# @param l  The list to flip.
(Int@, List@<Int@>) { Int@; } Flips = (Int@ n, List@<Int@> l) {
  Eq(Int|1, l.cons.head).?(true: n);
  Flips(Add(n, Int|1), Flip(l.cons.head, Nil<Int@>, l));
};

# Rotates elements in a list around to the right.
# For example: [1, 2, 3, 4] ==> [4, 1, 2, 3]
(List@<Int@>) { List@<Int@>; } RotateRight = (List@<Int@> l) {
  Cons(Last(l), Init(l));
};

# Calls a function for each permutation of the reverse of a list in
# permutation order.
<<@>@ M@>(Monad@<M@>, List@<Int@>, (List@<Int@>) { M@<Unit@>; }) { M@<Unit@>; }
Permutes = <<@>@ M@>(Monad@<M@> m, List@<Int@> l, (List@<Int@>) { M@<Unit@>; } f) {
  l.cons.tail.?(nil: f(l));
  List@<Int@> _ <- m.do(ForEach(l, m.return(l),
      (Int@ _, M@<List@<Int@>> ml) {
        List@<Int@> rotated <- m.do(ml);
        Int@ head = rotated.cons.head;
        Unit@ _ <- m.do(Permutes(m, rotated.cons.tail, (List@<Int@> permuted) {
          f(Append(permuted, List[head]));
        }));
        m.return(RotateRight(rotated));
      }));
  m.return(Unit);
};

@ Fannkuch@ = *(
  Bool@ even,   # True if the permutation_index is even, false otherwise.
  Int@ checksum,
  Int@ max_flips
);

% P = /Core/Monad/State%<Fannkuch@>;

(List@<Int@>) { P.State@<Unit@>;  } DoPermutation = (List@<Int@> l) {
  Fannkuch@ s <- P.Monad.do(P.Get);
  Int@ flips = Flips(Int|0, l);
  Fannkuch@ ns = s.even.?(
    true: Fannkuch@(False, Add(s.checksum, flips), Max(s.max_flips, flips)),
    false: Fannkuch@(True, Sub(s.checksum, flips), Max(s.max_flips, flips)));
  P.Set(ns);
};

# Returns the list of integers [N, N-1, ..., 1].
(Int@) { List@<Int@>; } CountDown = (Int@ n) {
  n.?(0: Nil<Int@>);
  Cons(n, CountDown(Sub(n, Int|1)));
};

(Int@) { Fannkuch@; } FannkuchRedux = (Int@ n) {
  List@<Int@> p0 = CountDown(n);
  P.State@<Unit@> fannkuch = Permutes<P.State@>(P.Monad, p0, DoPermutation);
  P.Run(fannkuch, Fannkuch@(True, Int|0, Int|0)).s;
};

@(Fannkuch@, Flip, Flips, RotateRight, Permutes, FannkuchRedux);
