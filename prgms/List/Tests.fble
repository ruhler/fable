
@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

@ Bool@ = /Bool%.Bool@;
% True = /Bool%.True;
% False = /Bool%.False;

@ Char@ = /Char%.Char@;
% Chars = /Char%.Chars;

<@>@ List@ = /List%.List@;
<@>% List = /List%.List;
<@>% Concat = /List%.Concat;
<@>% SortS = /List/Sort%.SortS;

<@>% EqList = /List/Eq%.Eq;
<@>% Print = /List/Print%.Print;

@ Str@ = /String%.Str@;
% Str = /String%.Str;

@ Test@ = /Test%.Test@;
@ TestResult@ = /Test%.TestResult@;
@ TestSuite@ = /Test%.TestSuite@;
% TestSuite = /Test%.TestSuite;

@ Elem@ = +(Unit@ A, Unit@ B, Unit@ C, Unit@ D, Unit@ E);

% Elems = @(
  A: Elem@(A: Unit),
  B: Elem@(B: Unit),
  C: Elem@(C: Unit),
  D: Elem@(D: Unit),
  E: Elem@(E: Unit));

(Elem@) { Str@; } ElemPrint = (Elem@ e) {
  Str(e.?(A: Chars|A, B: Chars|B, C: Chars|C, D: Chars|D, E: Chars|E));
};

(Elem@, Elem@) { Bool@; } ElemLe = (Elem@ a, Elem@ b) {
  a.?(A: True,
      B: b.?(A: False, : True),
      C: b.?(A: False, B: False, : True),
      D: b.?(A: False, B: False, C: False, : True),
      E: b.?(A: False, B: False, C: False, D: False, E: True));
};

(Elem@, Elem@){Bool@;} ElemEq = (Elem@ a, Elem@ b) {
  a.?(A: b.?(A: True, : False),
      B: b.?(B: True, : False),
      C: b.?(C: True, : False),
      D: b.?(D: True, : False),
      E: b.?(E: True, : False));
};

TestSuite@ Tests = TestSuite(Chars|List, [
  Test@(Str(Chars|'Eq_Same'), !({
    List@<Elem@> a = List<Elem@>(Elems|ABCDE);
    List@<Elem@> b = List<Elem@>(Elems|ABCDE);

    EqList<Elem@>(ElemEq)(a, b).?(
      true: TestResult@(pass: Unit),
      false: TestResult@(fail: Concat<Char@>(List<Str@>([
        Print<Elem@>(ElemPrint, a),
        Str(Chars|' != '),
        Print<Elem@>(ElemPrint, b)
      ]))));
  })),

  Test@(Str(Chars|'Eq_DiffElem'), !({
    List@<Elem@> a = List<Elem@>(Elems|ABCDE);
    List@<Elem@> b = List<Elem@>(Elems|ABDDE);

    EqList<Elem@>(ElemEq)(a, b).?(
      true: TestResult@(fail: Concat<Char@>(List<Str@>([
          Print<Elem@>(ElemPrint, a),
          Str(Chars|' == '),
          Print<Elem@>(ElemPrint, b)
        ]))),
      false: TestResult@(pass: Unit));
  })),

  Test@(Str(Chars|'Eq_DiffSize'), !({
    List@<Elem@> a = List<Elem@>(Elems|ABCDE);
    List@<Elem@> b = List<Elem@>(Elems|ABCD);

    EqList<Elem@>(ElemEq)(a, b).?(
      true: TestResult@(fail: Concat<Char@>(List<Str@>([
          Print<Elem@>(ElemPrint, a),
          Str(Chars|' == '),
          Print<Elem@>(ElemPrint, b)
        ]))),
      false: TestResult@(pass: Unit));
  })),

  Test@(Str(Chars|'Sort'), !({
    List@<Elem@> unsorted = List<Elem@>(Elems|DABEC);
    List@<Elem@> wnt = List<Elem@>(Elems|ABCDE);

    # TODO: Switch to using AssertEquals here once we've defined Print for
    # lists.
    List@<Elem@> got = SortS<Elem@>(ElemLe, unsorted);
    EqList<Elem@>(ElemEq)(wnt, got).?(
      true: TestResult@(pass: Unit),
      false: TestResult@(fail: Concat<Char@>(List<Str@>([
        Print<Elem@>(ElemPrint, wnt),
        Str(Chars|' != '),
        Print<Elem@>(ElemPrint, got)
      ]))));
  }))
]);

@(Tests);
