
@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

# Positive Integers.
@ IntP@ = +(
  Unit@ 1, 
  IntP@ 2p0,
  IntP@ 2p1
);

IntP@ 1 = IntP@(1: Unit);
IntP@ 2 = IntP@(2p0: 1);
IntP@ 3 = IntP@(2p1: 1);
IntP@ 4 = IntP@(2p0: 2);
IntP@ 5 = IntP@(2p1: 2);
IntP@ 6 = IntP@(2p0: 3);
IntP@ 7 = IntP@(2p1: 3);
IntP@ 8 = IntP@(2p0: 4);
IntP@ 9 = IntP@(2p1: 4);
IntP@ 10 = IntP@(2p0: 5);

# Add1(x) = x + 1
(IntP@) { IntP@; } Add1 = (IntP@ x) {
  x.?(1: 2, 2p0: IntP@(2p1: x.2p0), 2p1: IntP@(2p0: Add1(x.2p1)));
};

(IntP@, IntP@) { IntP@; } Add = (IntP@ a, IntP@ b) {
  a.?(
    1: Add1(b),
    2p0: b.?(
      1: IntP@(2p1: a.2p0), 
      2p0: IntP@(2p0: Add(a.2p0, b.2p0)),
      2p1: IntP@(2p1: Add(a.2p0, b.2p1))),
    2p1: b.?(
      1: IntP@(2p0: Add1(a.2p1)),
      2p0: IntP@(2p1: Add(a.2p1, b.2p0)),
      2p1: IntP@(2p0: Add1(Add(a.2p1, b.2p1)))));
};

# Mul(a, b) = a * b
(IntP@, IntP@) { IntP@; } Mul = (IntP@ a, IntP@ b) {
  a.?(
      1: b,
      2p0: b.?(
        1: a,
        2p0: IntP@(2p0: IntP@(2p0: Mul(a.2p0, b.2p0))),
        2p1: IntP@(2p0: Add(IntP@(2p0: Mul(a.2p0, b.2p1)), a.2p0))),
      2p1: b.?(
        1: a,
        2p0: IntP@(2p0: Add(IntP@(2p0: Mul(a.2p1, b.2p0)), b.2p0)),
        2p1: IntP@(2p1: Add(IntP@(2p0: Mul(a.2p1, b.2p1)), Add(a.2p1, b.2p1)))));
};

# Exp2(a) = 2^a
(IntP@) { IntP@; } Exp2 = (IntP@ a) {
  a.?(
    1: 2,
    2p0: { IntP@ s = Exp2(a.2p0); Mul(s, s); },
    2p1: Mul(2, Exp2(IntP@(2p0: a.2p1))));
};

(IntP@, IntP@){IntP@;} Lit2 = (IntP@ a, IntP@ b) {
  Add(Mul(10, a), b);
};

@(IntP@, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, Add, Add1, Mul, Exp2, Lit2);
