
<@,@,@,@>@ Literal@ = /Literal%.Literal@;
<@,@,@,@>% Literal = /Literal%.Literal;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

# List@ --
#   A singly linked list of elements.
#
# Type Parameters:
#   T@ - The type of element to put on the list.
<@>@ List@ = <@ T@> { +(*(T@ head, List@<T@> tail) cons, Unit@ nil); };

# Cons -- 
#   Prepends an element to a list.
#
# Type Parameters:
#   T@ - The type of element on the list.
#
# Arguments:
#   a - The element to prepend to the list.
#   l - The list to prepend the element to.
#
# Returns:
#   A new list consisting of the element 'a' followed by the elements of 'l'.
<@ T@>(T@, List@<T@>) { List@<T@>; } Cons = <@ T@>(T@ a, List@<T@> l) {
  List@<T@>(cons: @(head: a, tail: l));
};

# Nil --
#   The empty list of elements of type T@.
#
# Example Use:
#   List@<Foo@> empty = Nil<Foo@>;
List@ Nil = <@ T@> {
  List@<T@>(nil: Unit);
};

# ListLiteral --
#   A literal spec that forms a list.
#
# Type Parameters:
#   L@ - The letters of the literal to support.
#   T@ - The type of element on the list.
<@ T@, @ L@>(L@) { Literal@<T@, List@<T@>, List@<T@>, L@>; }
ListLiteral = <@ T@, @ L@>(L@ letters) {
  Literal<T@, List@<T@>, List@<T@>, L@>(
    (List@<T@> l) { l; }, Cons<T@>, Nil<T@>, letters);
};

# List --
#   A literal spec that forms a list.
#
# Type Parameters:
#   T@ - The type of element on the list.
#
# Example Use:
#   List@<ABC@> x = List<ABC@>[A, B, A, C];
<@ T@> { Literal@<T@, List@<T@>, List@<T@>, Unit@>; } List = <@ T@> {
  ListLiteral<T@, Unit@>(Unit);
};

# Append --
#   Appends one list to another.
#
# Type Parameters:
#   T@ - The type of elements in the list.
#
# Arguments:
#   a - the first list
#   b - the second list
#
# Returns:
#   A list that contains the elements of 'a' followed by the elements of 'b'.
<@ T@>(List@<T@>, List@<T@>) { List@<T@>; }
Append = <@ T@>(List@<T@> a, List@<T@> b) {
  a.?(cons: Cons<T@>(a.cons.head, Append<T@>(a.cons.tail, b)), nil: b);
};

# Init --
#   Returns all but the last element in a list.
#
# Type Parameters:
#   T@ - The type of element in the list.
#
# Arguments:
#   list - the list to take the initial elements of.
#
# Returns:
#   A new list with all the elements of 'list' except the last element of
#   list. Returns an empty list if the input list is empty.
<@ T@>(List@<T@>) { List@<T@>; } Init = <@ T@>(List@<T@> list) {
  list.?(
    cons: list.cons.tail.?(
      cons: Cons<T@>(list.cons.head, Init<T@>(list.cons.tail)),
      nil: Nil<T@>),
    nil: Nil<T@>);
};

# Concat --
#   Flattens a list of lists into a single list of all the elements.
#
# Type Parameters:
#   T@ - The type of element in the resulting list.
#
# Arguments:
#   x - The list to flatten.
#
# Returns:
#   A list with all elements from the list of lists x, in order.
<@ T@>(List@<List@<T@>>) { List@<T@>; } Concat = <@ T@>(List@<List@<T@>> x) {
  x.?(cons: Append<T@>(x.cons.head, Concat<T@>(x.cons.tail)), nil: Nil<T@>);
};

# Map --
#   Applies a function to every element of a list.
#
# Type Parameters:
#   A@ - The type of element of the input list.
#   B@ - The type of element of the output list.
#
# Arguments:
#   a - The input list
#   f - the function to apply
#
# Result:
#   A list of elements f(a_i) for each a_i in the input list.
<@ A@, @ B@>(List@<A@>, (A@) { B@; }) { List@<B@>; }
Map = <@ A@, @ B@>(List@<A@> a, (A@) { B@; } f) {
  a.?(
    cons: Cons<B@>(f(a.cons.head), Map<A@, B@>(a.cons.tail, f)),
    nil: Nil<B@>);
};

# ForEach --
#   Iterate over elements of a list.
#
# Type Parameters:
#   A@ - The type of element on the list.
#   B@ - The type of value updated and returned by the foreach loop.
#
# Arguments:
#   list - The list to iterate over.
#   base - The initial value to update and return from the loop.
#   body - The body of the loop.
#
# Returns:
#   The result of applying the body consecutively to the base value, once for
#   each element in the list in list order.
#
# Conceptually:
#   B@ b = base
#   foreach x in list:
#     b = body(x, b)
#   return b
<@ A@, @ B@>(List@<A@>, B@, (A@, B@) { B@; }) { B@; }
ForEach = <@ A@, @ B@>(List@<A@> list, B@ base, (A@, B@) { B@; } body) {
  list.?(
    cons: ForEach<A@, B@>(list.cons.tail, body(list.cons.head, base), body),
    nil: base);
};

# ProcessEach
#  A process version of ForEach.
#
# Type Parameters:
#   A@ - The type of element on the list.
#   B@ - The type of value updated and returned by the loop.
#
# Arguments:
#   l - The list to iterate over.
#   base - The initial value to update and return from the list.
#   body - The body of the list.
#
# Returns:
#   The result of processing the body consecutively to the base value, once for
#   each element in the list in list order.
#
# Conceptually:
#   B@ b = base
#   foreach x in l:
#     b := body(x, b)
#   return b
<@ A@, @ B@>(List@<A@>, B@, (A@, B@) { B@!; }) { B@!; }
ProcessEach = <@ A@, @ B@>(List@<A@> l, B@ base, (A@, B@) { B@!; } body) {
  l.?(
    cons: {
      B@ nbase := body(l.cons.head, base);
      ProcessEach<A@, B@>(l.cons.tail, nbase, body);
    },
    nil: !(base));
};

@(List@, ListLiteral, List, Cons, Nil, Append, Init, Concat, Map, ForEach, ProcessEach);
