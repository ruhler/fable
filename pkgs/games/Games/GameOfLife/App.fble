
<<@>@>@ App@ = /App/App%.App@;
<<@>@>@ Main@ = /App/App%.Main@;
@ Event@ = /App/App%.Event@;
@ Effect@ = /App/App%.Effect@;
@ Resize@ = /App/App%.Resize@;

@ Drawing@ = /App/Drawing%.Drawing@;
@ Point@ = /App/Drawing%.Point@;
% Color = /App/Drawing%.Color;
% Rect = /App/Drawing%.Rect;
% Over = /App/Drawing%.Over;
% Affine = /App/Drawing%.Affine;

% And = /Core/Bool%.And;

@ Int@ = /Core/Int%.Int@;
% 1 = /Core/Int%.1;
% 2 = /Core/Int%.2;
% Dec = /Core/Int%.Dec;
% Neg = /Core/Int%.Neg;
% Add = /Core/Int%.Add;
% Sub = /Core/Int%.Sub;

% Div = /Core/Int/Div%.Div;

% IsZero = /Core/Int/Eq%.IsZero;
% Lt = /Core/Int/Eq%.Lt;

% Int = /Core/Int/Lit%.Int;

<@>% List = /Core/List%.List;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ World@ = /Games/GameOfLife%.World@;
@ Coord@ = /Games/GameOfLife%.Coord@;
% World = /Games/GameOfLife%.World;
<@>% ForWorld = /Games/GameOfLife%.ForWorld;
% Step = /Games/GameOfLife%.Step;


(Int@, Int@) { Coord@; } C = (Int@ x, Int@ y) { Coord@(x, y); };

Int@ XMin = Neg(Int|40);
Int@ XMax = Int|40;
Int@ YMin = Neg(Int|40);
Int@ YMax = Int|40;
Int@ Width = Sub(XMax, XMin);
Int@ Height = Sub(YMax, YMin);

World@ acorn = World(List<Coord@>[
  C(Int|0, Int|1),

  C(Int|1, Int|3),

  C(Int|2, Int|0),
  C(Int|2, Int|1),
  C(Int|2, Int|4),
  C(Int|2, Int|5),
  C(Int|2, Int|6)
]);

(World@) { Drawing@; } DrawWorld = (World@ w) {
  Drawing@ clear = Over(
    Rect(XMin, YMin, Width, Height, Color.Red),
    Rect(Add(Int|1, XMin), Add(Int|1, YMin),
         Sub(Width, Int|2), Sub(Height, Int|2), Color.Black));
    
  # 2. For each live cell in range, draw a green unit square.
  ForWorld<Drawing@>(w, clear, (Coord@ coord, Unit@ _, Drawing@ d) {
    Int@ r = coord.row;
    Int@ c = coord.col;
    And(And(Lt(YMin, r), Lt(XMin, c)),
        And(Lt(r, YMax), Lt(c, XMax))).?(
       true: Over(d, Rect(c, r, 1, 1, Color.Green)),
       false: d);
  });
};

@ Input@ = +(Unit@ quit, Unit@ step, Resize@ resize);

@ State@ = *(
  Int@ n,     # number of steps taken so far.
  Point@ a,   # 'a' coefficient for affine scaling.
  Point@ b,   # 'b' coefficient for affine scaling.
  World@ w    # The game world.
);

Main@ Main = <<@>@ M@>(Monad@<M@> m, App@<M@> app, Int@ width, Int@ height) {

  M@<Input@> GetInput = {
    Event@ e <- m.do(app.event);
    e.?(tick: m.return(Input@(step: Unit)),
        key_down: e.key_down.?(q: m.return(Input@(quit: Unit)), : GetInput),
        resize: m.return(Input@(resize: e.resize)),
        : GetInput);
  };

  (Effect@) { M@<Unit@>; } Output = app.effect;

  (State@) { M@<Unit@>; } StepUI = (State@ s) {
    Unit@ _ <- m.do(Output(Effect@(draw: Affine(s.a, s.b, DrawWorld(s.w)))));
    Unit@ _ <- m.do(Output(Effect@(tick: Int|200)));
    Input@ x <- m.do(GetInput);
    x.?(quit: m.return(Unit),
        step: IsZero(s.n).?(
                true: m.return(Unit),
                false: StepUI(State@(Dec(s.n), s.a, s.b, Step(s.w)))),
        resize: {
          Point@ a = @(x: Div(x.resize.width, Width).q, y: Div(x.resize.height, Height).q);
          Point@ b = @(x: Div(x.resize.width, 2).q,     y: Div(x.resize.height, 2).q);
          StepUI(State@(s.n, a, b, s.w));
        });
  };

  # Map game coordinates into screen coordinate.
  Point@ a = @(x: Div(width, Width).q, y: Div(height, Height).q);
  Point@ b = @(x: Div(width, 2).q, y: Div(height, 2).q);
  State@ s = State@(Int|200, a, b, acorn);
  Unit@ _ <- m.do(StepUI(s));

  M@<Unit@> WaitForKeyPress = {
    Event@ e <- m.do(app.event);
    e.?(key_down: m.return(Unit), : WaitForKeyPress);
  };
  WaitForKeyPress;
};

Main;
