
<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<@>@ List@ = /Core/List%.List@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Command@ = /Fbld/Command%.Command@;

@ Invoke@ = /Fbld/Fbld%.Invoke@;
@ Env@ = /Fbld/Fbld%.Env@;
<@>% Error = /Fbld/Fbld%.Error;

@ Text@ = /Fbld/Text%.Text@;
% LocOf = /Fbld/Text%.LocOf;
% StringOf = /Fbld/Text%.StringOf;


@ Markup@ = /Core/Map%.Map@<String@, Invoke@>;

@ Entry@ = /Core/Map%.Entry@<String@, Invoke@>;

(String@, Invoke@) { Entry@; } Entry = (String@ s, Invoke@ i) {
  Entry@(s, i);
};

Markup@ Empty = /Core/Map%.Empty<String@, Invoke@>;

(Markup@, String@, Invoke@) { Markup@; }
Insert = /Core/Map%.Insert<String@>(/Core/String/Ord%.Ord)<Invoke@>;

(Markup@, String@) { Maybe@<Invoke@>; }
Lookup = /Core/Map%.Lookup<String@>(/Core/String/Ord%.Ord)<Invoke@>;

(Markup@, Markup@) { Markup@; }
Union = /Core/Map%.Union<String@>(/Core/String/Ord%.Ord)<Invoke@>;

(List@<Entry@>) { Markup@; } Entries = (List@<Entry@> entries) {
  /Core/List%.ForEach(entries, Empty, (Entry@ entry, Markup@ m) {
    Insert(m, entry.key, entry.value);
  });
};

(Markup@) { Invoke@; } Invoke = (Markup@ tags)(Command@ cmd) {
  String@ name = StringOf(cmd.name);
  Maybe@<Invoke@> f = Lookup(tags, name);
  f.?(nothing: {
    String@ msg = Strs[Str|'unsupported tag: ''', name, Str|''''];
    Error<Text@>(LocOf(cmd.name), msg);
  });
  f.just(cmd);
};

(Markup@) { Env@; } Env = Invoke;

(List@<Markup@>) { Markup@; } Markups = (List@<Markup@> markups) {
  /Core/List%.ForEach(markups, Empty, (Markup@ x, Markup@ m) {
    Union(m, x);
  });
};

@(Markup@, Entry@, Entries, Markups, Empty, Entry, Env);
