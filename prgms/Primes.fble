
@ Bool@ = /Bool%.Bool@;
% True = /Bool%.True;
% False = /Bool%.False;

@ IntP@ = /Int/IntP%.IntP@;
% 2 = /Int/IntP%.2;
% Add1 = /Int/IntP%.Add1;
% Mul = /Int/IntP%.Mul;

% Mod = /Int/IntP/Div%.Mod;

% Lt = /Int/IntP/Eq%.Lt;
% Gt = /Int/IntP/Eq%.Gt;

% Sub1 = /Int/IntP/Sub%.Sub1;

@ IntS@ = /Int/IntS%.IntS@;

% IsZero = /Int/IntS/Eq%.IsZero;

# Returns true if f evenly divides x.
(IntP@, IntP@){Bool@;} Divides = (IntP@ x, IntP@ f) {
  IsZero(Mod(x, f));
};

# Helper function for IsPrime.
#   Computes whether x is prime given that there are no factors of x other
#   than 1 that are less than f.
(IntP@, IntP@){Bool@;} IsPrimeHelper = (IntP@ x, IntP@ f) {
  Gt(Mul(f, f), x).?(true: True, false:
      Divides(x, f).?(true: False, false:
          IsPrimeHelper(x, Add1(f))));
};

(IntP@){Bool@;} IsPrime = (IntP@ x) {
  Lt(x, 2).?(true: False, false: IsPrimeHelper(x, 2));
};

(IntP@, IntS@){IntP@;} NthPrime = (IntP@ x, IntS@ n) {
  IsPrime(x).?(
      true: n.?(0: x, p: NthPrime(Add1(x), Sub1(n.p))),
      false: NthPrime(Add1(x), n));
};

@(IsPrime, NthPrime);
