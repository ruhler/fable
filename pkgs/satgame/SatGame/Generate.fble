
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Int@ = /Core/Int%.Int@;
% Add = /Core/Int%.Add;
% Sub = /Core/Int%.Sub;
% Incr = /Core/Int%.Incr;
% Decr = /Core/Int%.Decr;
% IsZero = /Core/Int/Eq%.IsZero;
% Le = /Core/Int/Eq%.Le;
% Div = /Core/Int/Div%.Div;
% Range = /Core/Int/Iter%.Range;
% CountUpTo = /Core/Int/Iter%.CountUpTo;
% Int = /Core/Int/Lit%.Int;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;
<@>% List = /Core/List%.List;
% Take = /Core/List/Length%.Take;

@ Literal@ = /SatGame/Puzzle%.Literal@;
@ Clause@ = /SatGame/Puzzle%.Clause@;
@ Params@ = /SatGame/Puzzle%.Params@;
@ Puzzle@ = /SatGame/Puzzle%.Puzzle@;
@ Var@ = /SatGame/Var%.Var@;

<<@>@>@ Random@ = /SatGame/Random%.Random@;

@ Map@ = /Core/Int/Map%.Map.Map@<Var@>;
% Empty = /Core/Int/Map%.Map.Empty<Var@>;
% Lookup = /Core/Int/Map%.Map.Lookup<Var@>;
% Insert = /Core/Int/Map%.Map.Insert<Var@>;

# @func[Generate] Generates a random satgame puzzle.
#  @arg[<@>@][M@] Type of monad to use for random number generation.
#  @arg[Monad@<M@>][m] Monad to use for random number generation.
#  @arg[Random@<M@>][rand] Random number generator.
#  @arg[Params@][params] Parameters for the puzzle to generate.
#  @returns[M@<Puzzle@>] The generated puzzle.
<<@>@ M@>(Monad@<M@> m, Random@<M@> rand, Params@ params) {
  % RandInt = /SatGame/Random/Int%.RandInt(m, rand);
  <@>% Shuffle = /SatGame/Random/List%.Shuffle(m, rand);

  Le(params.num_vars, params.num_literals_per_clause).?(true: {
    # We can't generate a puzzle unless we have more vars to work with than
    # literals per clause.
    % TooFewVars = /Core/Undef%.Undef<M@<Puzzle@>>;
    TooFewVars.undefined;
  });

  Map@ vars <- m.do({
    List@<Var@> list <- m.do(/SatGame/Var/Rand%.Vars(m, rand, params.num_vars));
    @ S@ = *(Int@ i, Map@ map);
    Map@ map = /Core/List%.ForEach(list, S@(Int|0, Empty),
      (Var@ vid, S@ s) {
        S@(Incr(s.i), Insert(s.map, s.i, vid));
      }).map;
    m.return(map);
  });

  (Int@) { M@<Var@>; } RandVar = (Int@ max) {
    Int@ index <- m.do(RandInt(max));
    m.return(Lookup(vars, index).just);
  };

  (Int@) { M@<Literal@>; } RandLiteral = (Int@ max) {
    Bool@ pos <- m.do(rand.bool);
    Var@ var <- m.do(RandVar(max));
    m.return(Literal@(var, pos));
  };

  (Clause@, Var@) { Bool@; }
  ContainsVar = (Clause@ c, Var@ var) {
    c.?(nil: False);
    /SatGame/Var/Eq%.Eq(c.cons.head.var, var).?(true: True);
    ContainsVar(c.cons.tail, var);
  };

  # Generates a random clause with variable v and other variables with index
  # less than max.
  (Params@, Int@, Literal@) { M@<Clause@>; } GenClause = (Params@ params, Int@ max, Literal@ v) {
    # Adds N random literals with var id less than max to the given clause.
    (Int@, Clause@) { M@<Clause@>; } AddLiterals = (Int@ n, Clause@ c) {
      IsZero(n).?(true: m.return(c));

      Literal@ literal <- m.do(RandLiteral(max));
      ContainsVar(c, literal.var).?(true: AddLiterals(n, c));
      AddLiterals(Decr(n), Cons(literal, c));
    };

    Clause@ clause <- m.do(AddLiterals(Decr(params.num_literals_per_clause), List[v]));
    Shuffle(clause);
  };
    
  Int@ num_free_vars = Sub(params.num_vars, params.num_literals_per_clause);
  Int@ clauses_per_variable = Div(Decr(Add(params.num_clauses, num_free_vars)), num_free_vars).q;

  Puzzle@ puzzle <- m.do(/Core/Iter%.For(
    Range(params.num_literals_per_clause, params.num_vars), m.return(Nil<Clause@>),
    (Int@ i, M@<Puzzle@> mp) {
      Bool@ pos <- m.do(rand.bool);
      Literal@ var = Literal@(Lookup(vars, i).just, pos);
      /Core/Iter%.For(CountUpTo(clauses_per_variable), mp,
        (Int@ _, M@<Puzzle@> mp) {
          Puzzle@ tail <- m.do(mp);
          Clause@ clause <- m.do(GenClause(params, i, var));
          m.return(Cons(clause, tail));
        });
    }));
  Puzzle@ shuffled <- m.do(Shuffle(puzzle));
  m.return(Take(params.num_clauses, shuffled));
};
