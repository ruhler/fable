
@ Char@ = /Core/Char%.Char@;
% IsSpace = /Core/Char/Type%.IsSpace;
% IsNewline = /Core/Char/Type%.IsNewline;

@ Int@ = /Core/Int%.Int@;
% Incr = /Core/Int%.Incr;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ IStream@ = /Core/Stream%.IStream@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;


@ Profile@ = /Pprof/Profile%.Profile@;
@ Location@ = /Pprof/Profile%.Location@;
@ LocId@ = /Pprof/Profile%.LocId@;
@ Sample@ = /Pprof/Profile%.Sample@;

% M = /Core/String/Map%;
@ Map@ = M.Map@<LocId@>;
% Empty = M.Empty<LocId@>;
% Lookup = M.Lookup<LocId@>;
% Insert = M.Insert<LocId@>;

# Parse a profile from the output of running:
#   perf report -q -g folded,count,0 
#
# For use with linux perf profiles.
<<@>@ M@>(Monad@<M@>, IStream@<M@>) { M@<Maybe@<Profile@>>; }
Parse = <<@>@ M@>(Monad@<M@> m, IStream@<M@> in) {
  % I = /Core/Stream/IStream%(m);

  # Gets the next word of input, single space delimited, skipping past the
  # space character.
  M@<String@> GetWord = {
    Maybe@<Char@> mc <- m.do(I.GetChar(in));
    mc.?(nothing: m.return(Str|''));
    IsSpace(mc.just).?(true: m.return(Str|''));

    String@ tail <- m.do(GetWord);
    m.return(Cons(mc.just, tail));
  };

  # Gets next locations from input, in format "a;b;c;...;d\n"
  M@<List@<String@>> GetLocs = {
    Maybe@<Char@> mc <- m.do(I.GetChar(in));
    mc.?(nothing: m.return(List[Str|'']));
    IsNewline(mc.just).?(true: m.return(List[Str|'']));

    List@<String@> tail <- m.do(GetLocs);
    mc.just.?(';': m.return(Cons(Str|'', tail)));
    m.return(Cons(Cons(mc.just, tail.cons.head), tail.cons.tail));
  };

  @ S@ = *(
    Int@ next_id,
    Map@ locations,
    Profile@ profile
  );

  @ PathS@ = *(List@<LocId@> path, S@ s);
  (List@<String@>, S@) { PathS@; }
  Path = (List@<String@> path, S@ s) {
    path.?(nil: @(path: Nil<LocId@>, s));

    PathS@ tail = Path(path.cons.tail, s);
    String@ loc = path.cons.head;
    Maybe@<LocId@> mid = Lookup(tail.s.locations, loc);
    mid.?(just: @(path: Cons(mid.just, tail.path), s: tail.s));

    Int@ id = tail.s.next_id;
    Location@ location = @(
      id: id, name: loc,
      file: Str|'???', line: Int|0, col: Int|0
    );

    @(path: Cons(id, tail.path),
      s: tail.s.@(
        next_id: Incr(id),
        locations: Insert(tail.s.locations, loc, id),
        profile: tail.s.profile.@(
          locations: Cons(location, tail.s.profile.locations))));
  };

  # Adds a sample to the profile.
  # Fabricates locations on the fly as needed.
  (Int@, List@<String@>, S@) { S@; }
  AddSample = (Int@ value, List@<String@> path, S@ s) {
    PathS@ ps = Path(path, s);
    ps.s.@(profile: ps.s.profile.@(
        samples: Cons(Sample@(List[value], ps.path), ps.s.profile.samples)));
  };

  (S@) { M@<Maybe@<Profile@>>; } ParseS = (S@ s) {
    String@ word <- m.do(GetWord);

    # We're done once we reach the next line of the form:
    #    100.00%     0.00%  <cmd>  <ex>      [.] __libc_start_main
    word.?(nil: m.return(Just(s.profile)));
    word.cons.head.?(' ': m.return(Just(s.profile)));

    # Otherwise we expect a line of the form:
    # 3694 foo;bar;sludge\n
    Int@ value = /Core/Int/Show%.Read(word);
    List@<String@> path <- m.do(GetLocs);
    ParseS(AddSample(value, path, s));
  };

  # Skip the first line of the form:
  #   100.00%     0.00%  <cmd>  <exe>        [.] _start
  String@ _ <- m.do(I.GetLine(in));

  ParseS(@(
      next_id: Int|0,
      locations: Empty,
      profile: @(
        metrics: List[Str|'samples'],
        samples: Nil<Sample@>,
        locations: Nil<Location@>)));
};

@(Parse);
