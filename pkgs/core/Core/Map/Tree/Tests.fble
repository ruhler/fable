
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% And = /Core/Bool%.And;

@ Char@ = /Core/Char%.Char@;

<@>@ Eq@ = /Core/Eq%.Eq@;
<@>% AssertEquals = /Core/Eq/Assert%.AssertEquals;

<@>% List = /Core/List%.List;
<@>% Append = /Core/List%.Append;

<@>@ Ord@ = /Core/Ord%.Ord@;
@ Ordering@ = /Core/Ord%.Ordering@;
% Lt = /Core/Ord%.Lt;
% Eq = /Core/Ord%.Eq;
% Gt = /Core/Ord%.Gt;

<@>@ Show@ = /Core/Show%.Show@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Test@ = /Core/Test%.Test@;
% Test = /Core/Test%.Test;
% TestSuite = /Core/Test%.TestSuite;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Bit1@ = +(Unit@ 0, Unit@ 1);
@ Bit2@ = *(Bit1@ h, Bit1@ l);

Bit2@ A = Bit2@(Bit1@(0: Unit), Bit1@(0: Unit));
Bit2@ B = Bit2@(Bit1@(0: Unit), Bit1@(1: Unit));
Bit2@ C = Bit2@(Bit1@(1: Unit), Bit1@(0: Unit));

Eq@<Bit1@> EqBit1 = (Bit1@ a, Bit1@ b) {
  a.?(
    0: b.?(0: True, 1: False),
    1: b.?(0: False, 1: True));
};

Ord@<Bit1@> OrdBit1 = (Bit1@ a, Bit1@ b) {
  a.?(
    0: b.?(0: Eq, 1: Lt),
    1: b.?(0: Gt, 1: Eq));
};

Show@<Bit1@> ShowBit1 = (Bit1@ x) {
  x.?(0: Str|0, 1: Str|1);
};

Eq@<Bit2@> EqBit2 = (Bit2@ a, Bit2@ b) {
  And(EqBit1(a.h, b.h), EqBit1(a.l, b.l));
};

Ord@<Bit2@> OrdBit2 = (Bit2@ a, Bit2@ b) {
  Ordering@ oh = OrdBit1(a.h, b.h);
  oh.?(eq: OrdBit1(a.l, b.l), : oh);
};

Show@<Bit2@> ShowBit2 = (Bit2@ x) {
  Append<Char@>(ShowBit1(x.h), ShowBit1(x.l));
};

% Map = /Core/Map/Tree%.Map<Bit2@>(OrdBit2);
<@>@ Map@ = Map.Map@;
<@>% Empty = Map.Empty;
<@>% Insert = Map.Insert;
<@>% Delete = Map.Delete;

<@>% Show = /Core/Map/Show%.Show<Map@, Bit2@>(Map, ShowBit2);
<@>% Eq = /Core/Map/Eq%.Eq<Map@, Bit2@>(Map, EqBit2);

Test@ Tests = TestSuite(Str|Tree, List[
  /Core/Map/Test%.Test<Map@, Bit2@>(Map, EqBit2, ShowBit2, A, B, C),

  Test(Str|'eq: equal', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);
    Map@<Bool@> b = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: value mismatch', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, True), C, False);
    Map@<Bool@> b = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);

    Bool@ wnt = False;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: different number of elements', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);
    Map@<Bool@> b = Insert(Insert(Empty<Bool@>, A, True), B, False);

    Bool@ wnt = False;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: deleted to empty', (Unit@ _) {
    Map@<Bool@> a = Delete(Insert(Empty<Bool@>, A, True), A);
    Map@<Bool@> b = Empty<Bool@>;

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: empty from deleted', (Unit@ _) {
    Map@<Bool@> a = Empty<Bool@>;
    Map@<Bool@> b = Delete(Insert(Empty<Bool@>, A, True), A);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: empty from deleted pair second', (Unit@ _) {
    Map@<Bool@> a = Insert(Empty<Bool@>, A, True);
    Map@<Bool@> b = Delete(Insert(a, B, True), B);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: empty from deleted pair first', (Unit@ _) {
    Map@<Bool@> a = Insert(Empty<Bool@>, A, True);
    Map@<Bool@> b = Delete(Insert(a, C, True), C);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'eq: equal any order', (Unit@ _) {
    Map@<Bool@> a = Insert(Insert(Insert(
          Empty<Bool@>, B, False), C, False), A, True);
    Map@<Bool@> b = Insert(Insert(Insert(
          Empty<Bool@>, A, True), B, False), C, False);

    Bool@ wnt = True;
    Bool@ got = Eq(/Core/Bool/Eq%.Eq, a, b);
    AssertEquals(/Core/Bool/Eq%.Eq, /Core/Bool/Show%.Show, wnt, got);
  }),

  Test(Str|'Show empty', (Unit@ _) {
    Map@<Bool@> map = Empty<Bool@>;
    String@ wnt = Str|'{ }';
    String@ got = Show(/Core/Bool/Show%.Show, map);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|'Show single', (Unit@ _) {
    Map@<Bool@> map = Insert(Empty<Bool@>, B, False);
    String@ wnt = Str|'{ 01 => False; }';
    String@ got = Show(/Core/Bool/Show%.Show, map);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  }),

  Test(Str|'Show multi', (Unit@ _) {
    Map@<Bool@> map = Insert(Insert(Empty<Bool@>, B, False), C, True);
    String@ wnt = Str|'{ 01 => False; 10 => True; }';
    String@ got = Show(/Core/Bool/Show%.Show, map);
    AssertEquals(/Core/String/Eq%.Eq, /Core/String/Show%.Show, wnt, got);
  })
]);

@(Tests);
