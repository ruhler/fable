Fble Release 0.2
================

Too early days to think about a release, but we can think about what to work
on. Priority should be writing some serious fble apps. I propose the
following:

* fbld - implement it in fble. I bet some interesting things come out of this.
* sat - improve the sat solver. Maybe from what we learn we could implement a
  decent enough sat solver in C for smten?
* png viewer.
* floating point benchmark game.
* Hardware language something or other.

That is plenty to keep me busy. It won't stress the language too much. Once we
are done with those we can think about stressing the language with things like
persistent storage and other OS related functionality.

Next question is: which of these to focus on first? Because I'll have trouble
if I try to do them all at once.

My vote is: get some work in on sat, and think about fbld in the background.
Worry about png, floating point, and hardware language something or other
later.

---

We've come far enough now I think it's time to focus on getting the next
release out. In particular, this release has a lot of work done on the sat
solver and fbld applications in fble. The main fble language improvements are
performance, struct copy, and stack size.

There's a long way to go to clean up loose ends to get the release out. All
the more reason to switch focus on release instead of thinking about new
topics.

Documentation is the biggest thing. Getting parity with what we had before we
replaced the fbld implementation:

* Rewrite the fbld spec.
* Fix issues with generated documentation.
* Support for syntax highlighting.
 - Which may want improvements to html escaping.

---

Question on how to set tabstop/shiftwidth for .fbld files:
* I want shiftwidth=1 so that '>>' indents by one space.
* I want tabstop or softtabstop=1 so that tab is one space?

But you can always use space for that. And what if I want to go over faster
than one space at a time? I think better for tab to do whatever the user
prefers. Maybe they want it for traversing into the document, not for
indenting level by level.

It sounds like 'smarttab' is an option to have tab at the beginning of a line
behave like shiftwidth. That suggests tabstop really should be user
preference, but we may want to define shiftwidth.

README.txt for ftplugin says it should not set shiftwidth, which is a
personal preference. I think fbld is slightly difference in that it assumes
single space indent. Most other languages let users pick their own indent. So
I think it's okay to ignore the 'personal preference' part of that.

"The default filetype plugin files contain settings that 95% of the users will
want to use.".

shiftwidth is clearly not syntax. So it shouldn't go into the syntax file.

Is shiftwidth part of indent? It sounds like no. The job of 'indent' is to
figure out number of spaces to indent a new line given the setting of
shiftwidth.

So, proposal is: set shiftwidth=1 in ftplugin.

---

Should we compress man pages on install?
* Does that add a dependence on gzip we wouldn't otherwise need?
* How much space does it save?
  Without compression today: 582K for all man pages.
  With compression today: 528K for all man pages.
  So not really much improvement. I have a lot of short man pages.
* Is there anything about it being standard to be compressed or not?
  There's nothing in GNU standard about compressing them. The author of the
  gnu coding standards clearly doesn't like man pages.

I don't think the 54K savings is worth taking a dependency on gzip. Let's skip
the idea of compressing man pages until some decent motivation comes along.

---

Decision on empty path for package types:
* Have a special syntax %() for 'any module' package type.
* Continue to require / WORD ... / %  for module path.

Because you can imagine for testing purposes or uniformity, we want to have a
package path that doesn't restrict who can access it. But it doesn't make
sense to have module paths like /% or /foo//bar%.

---

Todo burndown item: 
* Warn about unused arguments in function values?

It should be trivial to implement. I'm just not sure if it makes sense to do.
Does it provide any value to the user? Or is it just tedious having to add _
for every function value that's not used?

Let's try it out and see what it reports and how onerous it is.

The one case I can think where it would be useful is if you are refactoring
and no longer need to pass an argument to a function. But if the function is
self recursive, it wouldn't be able to detect that.

Some observations:
* It's really easy just to add '_' in front of the argument to silence the
  warning.
* In one case for spec tests, I had to think about why the argument was
  unused. Which is probably a good thing.
* This catches unused monadic do results, which is kind of cool.
* It's nice having the documentation of '_' that an argument is (potentially)
  unused I think. It conveys more info to the reader of the code.
* I found two real unused arguments this way I would have never found otherwise.

Given the low cost of this to the user, the consistent benefit to
documentation, and the potential benefit to identifying real unused arguments,
I vote we take this change.

---

Todo burndown item:
* For loaded submodules, should the module profile block be the module file or
  the place where it was imported from?

Currently it's the module file. There's no indication of what caused it to be
loaded in the first place.

Technically the cause for the module to be loaded could be multiple blocks.

Another option would be pick one of the references that loaded a module. Maybe
the first? Because there could also be multiple references to the same module.
It seems kind of arbitrary to pick one out of all of them.

For compiled code, there's not much we can do. We generate the profiling info
at compile time of the module before knowing what caused it to be linked in.

Let's compare compiled and interpreted profiles and see.

Compiled code shows the first line of a module file as the location for a
module. Interpreted code shows where the module file was loaded from.

Honestly I think it's more useful to show where it was loaded from, the way
the interpreter does. The question is: is it worth going out of the way to
support that? And how would that look?

We would need to change FbleLoadFromCompiled to take an FbleLoc saying who was
loading it. Then add FbleLoc to FbleCompiledModuleFunction...

We would need to add FbleLoc for each FbleCompiledModuleFunction deps passed
to FbleLoadFromCompiled. Currently the module path is hard coded into to the
static FbleExecutable value we generate. It would be tedious to allocate
separate FbleExecutable instances every time we load the module and update the
location.

So the question is: is it worth it?

Right now compiled code doesn't say who brings in a module. But you can grep
for it easily enough in the source code. You can use fble-deps. And I would
argue it's unfair to pick an arbitrary module reference as being the cause of
a module being loaded.

And you can always run profiling with the interpreter if you want.

In summary, I don't think it's worth making any changes here. Fine to keep as
is.

---

Todo burndown item:
* [typecheck] Quote funny names in types. For example, the field ',' should
  have quotes in type error messages.

There are a few different use cases for printing names:
* error messages, where we want single quotes around them regardless to make
  the name stand out.
* types, where we don't want single quotes around them unless needed.
* Debug info, where we want to use the raw characters of the name without any
  quoting.

It's awkward, because I want to print names like 'Foo@'. But technically in
fble the syntax for this should be 'Foo'@. That just looks awkward to me.

What syntax do I want to use for printing names then?

What if I have a name 'hello there', with the space. Then say it's a type.
Would I want to print it as: 'hello there@', or 'hello there'@? And what if
the name has an @ sign in it? Like: variable 'Foo@' instead of type 'Foo'@?

General approaches possible:
* Use fble syntax. Can handle all kinds of names. Consistent and general. Not
  as intuitive as I would like it, especially when we want to make clear in
  the context it is a name we are showing.
* Something else...

Here's what I suggest:
* For debug info, use the raw string, no quoting or escaping of any kind.
* For error messages involving names, we already use single quotes around
  everything, so nothing needs to change. Print using the form 'Foo@'.
* For names in types, only if some quoting is needed, quote using fble syntax.

Make that minor improvement and call this done.

Here's what I decided to do in the end:
* Debug info uses raw string, no quoting.
* FblePrintName adds quotes only if needed.
* Type errors add single quotes around all names.

This means we'll get double single quotes around funny names. I'm fine with
that.

---

Todo burndown item: Can 
* [libfble] Can fble-stdio check that the function has the right type?

With the info available to us at runtime, in theory we could verify the
argument is a function with the right number of args. But we don't currently
have an API to test if an FbleValue is a function value to know if it's safe
to get the func value info.

I feel like it's too much of a hack right now to add this check.

One idea is to add an option when loading a module like -t /...%, where you
specify the path to a module which is a type value. The type checker could
verify the module has the right type. We could do a similar thing in
fble-compile. But the user has to remember that. It's just as likely for them
to mess up that as it is to pass the wrong type value today.

Maybe things will be different after we change how we pack values, because
we'll have more API for describing types at the C level. Maybe things will be
different after we do modular compilation, because we'll want a way to enforce
a pre-compiled type of a module. Or maybe it's C, things crash if you don't
handle types right yourself.

Where does it currently crash if you pass the wrong type? I suppose it would
depend if you are passing a function and what args that function takes.

FbleApply ==> FbleEval ==> FbleThreadCall ==> FbleFuncInfo returns a bogus
FbleExecutable.

What we really want here is:
* FbleStdioMain knows what type it wants internally and checks that when
  loading code from source.
* At compile time, somehow FbleStdioMain can give type info to fble-compile to
  check against the expected type.

I vote we wait on this until next release, when we have a better picture for
modular compilation.

---

TODO burndown item: Null/NonNull.

There are a number of functions in the implementation that may or may not
allow NULL arguments: FbleThreadCall, FbleFuncValueInfo, FbleProfile*,
FbleValueAddRef, etc.

When should we allow arguments to be NULL or not?

Factors:
* Performance? Is an extra NULL check meaningfully costly?
* Does accepting NULL hide bugs that you would otherwise find?
* Accepting NULL makes it easier to not bother programming something like
  profile blocks that you otherwise ought to?

I don't think performance is a problem in practice. We should do things on a
case by case basis, because accepting NULL could find bugs. Better to be
explicit about when you are hiding bugs than not.

Proposal:
* By default, assume things should not be null.
* On case-by-case basis, can choose to support null arguments. Document as
  'May be NULL' in doc comments.

FbleThreadCall, FbleFuncValueInfo should not accept NULL because there isn't
compelling motivation yet. Turns out FbleValueAddRef need not be public. I
made that internal and then allow it to take NULL because half the time we use
it we check for NULL anyway.

FbleProfileThread* wants to use NULL to say if profiling is enabled or not. I
like the idea of saying FbleProfile* should not be null. Instead it should
have a flag to enable or disable. That encourages users to create an
FbleProfile* always and supply block information.

---

TODO burndown item:
* Add tests that at least the compiled apps don't crash when you run them.
 - Including with --profile enabled.

We can make a test app that displays for a second, then exits. The challenge
is do we want to assume users have a DISPLAY available during testing? Could
we use a fake display? xvfb? Do I want to add that dependency?

I think this is worth doing eventually, but I don't want to worry about it
now. This isn't to test the fble code, mind you. You can do that all inside
fble. It's specifically to test fble-app.c code.

---

TODO burndown item:
* Consider running some of the tests under valgrind?

This would be good to do, but I don't think it's worth the added dependency on
valgrind. This would catch memory allocations done outside of FbleAlloc, which
are pretty rare. We have good enough coverage of memory allocations otherwise.

Let me toss this TODO item. If we run into memory bugs in the future that
valgrind would have caught, we can consider adding this back.

