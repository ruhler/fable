
% True = /Core/Bool%.True;

@ Char@ = /Core/Char%.Char@;
% Chars = /Core/Char%.Chars;

<@>@ List@ = /Core/List%.List@;
<@>% List = /Core/List%.List;
<@>% Concat = /Core/List%.Concat;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

<@>@ Get@ = /Core/IO/Process%.Get@;
<@>@ Put@ = /Core/IO/Process%.Put@;

@ Stdio@ = /Core/IO/Stdio%.Stdio@;
@ IO@ = /Core/IO/Stdio%.IO@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;

@ Square@ = /Games/TicTacToe/Board%.Square@;
@ Board@ = /Games/TicTacToe/Board%.Board@;
@ Player@ = /Games/TicTacToe/Board%.Player@;
@ Position@ = /Games/TicTacToe/Board%.Position@;

@ GameStatus@ = /Games/TicTacToe/Game%.GameStatus@;
@ Input@ = /Games/TicTacToe/Game%.Input@;
@ Output@ = /Games/TicTacToe/Game%.Output@;

(Square@) { String@; } ShowSquare = (Square@ s) {
  s.?(X: Str|X, O: Str|O, E: Str|_);
};

(Board@) { String@; } ShowBoard = (Board@ b) {
  String@ _ = Str|' ';
  Concat<Char@>(List<String@>[
    Str|'  1 2 3', Str[Chars.nl],
    Str|'A ', ShowSquare(b.ul), _, ShowSquare(b.uc), _, ShowSquare(b.ur), Str[Chars.nl],
    Str|'B ', ShowSquare(b.ml), _, ShowSquare(b.mc), _, ShowSquare(b.mr), Str[Chars.nl],
    Str|'C ', ShowSquare(b.ll), _, ShowSquare(b.lc), _, ShowSquare(b.lr), Str[Chars.nl]]);
};

(Player@) { String@; } ShowPlayer = (Player@ p) {
  p.?(X: Str|X, O: Str|O);
};

(GameStatus@) { String@; } ShowStatus = (GameStatus@ s) {
  s.?(
    playing: Concat<Char@>(List<String@>[Str|'Player ', ShowPlayer(s.playing), Str|' move:']),
    ended: s.ended.?(
      win: Concat<Char@>(List<String@>[
        Str|'GAME OVER: Player ',
        ShowPlayer(s.ended.win),
        Str|' wins.']),
      draw: Str|'GAME OVER: Draw.'));
};

(Output@) { String@; } ShowOutput = (Output@ out) {
  Concat<Char@>(List<String@>[
    ShowBoard(out.board),
    Str[Chars.nl],
    ShowStatus(out.status),
    Str[Chars.nl]]);
};

(String@) { Maybe@<Input@>; } ParseInput = (String@ in) {
  in.?(
      cons: in.cons.head.?(
        'A': in.cons.tail.?(cons: in.cons.tail.cons.head.?(
                '1': Just<Input@>(Input@(move: Just<Position@>(Position@(UL: Unit)))),
                '2': Just<Input@>(Input@(move: Just<Position@>(Position@(UC: Unit)))),
                '3': Just<Input@>(Input@(move: Just<Position@>(Position@(UR: Unit)))),
                   : Nothing<Input@>),
                nil: Nothing<Input@>),
        'B': in.cons.tail.?(cons: in.cons.tail.cons.head.?(
                '1': Just<Input@>(Input@(move: Just<Position@>(Position@(ML: Unit)))),
                '2': Just<Input@>(Input@(move: Just<Position@>(Position@(MC: Unit)))),
                '3': Just<Input@>(Input@(move: Just<Position@>(Position@(MR: Unit)))),
                   : Nothing<Input@>),
                nil: Nothing<Input@>),
        'C': in.cons.tail.?(cons: in.cons.tail.cons.head.?(
                '1': Just<Input@>(Input@(move: Just<Position@>(Position@(LL: Unit)))),
                '2': Just<Input@>(Input@(move: Just<Position@>(Position@(LC: Unit)))),
                '3': Just<Input@>(Input@(move: Just<Position@>(Position@(LR: Unit)))),
                   : Nothing<Input@>),
                nil: Nothing<Input@>),
        'P': Just<Input@>(Input@(move: Nothing<Position@>)),
        'R': Just<Input@>(Input@(reset: Unit)),
           : Nothing<Input@>),
      nil: Nothing<Input@>);
};

# Play a game of tic-tac-toe using the stdio interface.
Stdio@ TicTacToe = (IO@ io, List@<String@> args) {
  Get@<Input@> in = {
    Maybe@<String@> s := io.stdin;
    s.?(just: {
            Maybe@<Input@> mi = ParseInput(s.just);
            mi.?(just: !(mi.just),
                 nothing: {
                    Unit@ _ := io.stdout(Concat<Char@>(List<String@>[
                      Str|'invalid input: ',
                      Str|'expected {A,B,C}{1,2,3}, P, or R',
                      Str[Chars.nl]]));
                      in;
                 });
         },
         nothing: !(Input@(quit: Unit)));
  };

  Put@<Output@> out = (Output@ o) { io.stdout(ShowOutput(o)); };

  Unit@ _ := /Games/TicTacToe/Game%.TicTacToe(in, out);
  !(True);
};

TicTacToe;
