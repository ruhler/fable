
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ Unit@ = /Core/Unit%.Unit@;
% Unit = /Core/Unit%.Unit;


# /Core/Map%.Map@ implementation for List@<T@>, parameterized by the element's
# map implementation.
<<@>@, @>% Map = <<@>@ M@, @ T@>(/Core/Map%.Map@<M@, T@> M) {
  @ Key@ = List@<T@>;

  # A Map from List@<T@> to V@;
  <@>@ Map@ = <@ V@> {
    @ M@ = +(Unit@ empty, P@ p),
    @ P@ = *(M.Map@<M@> cons, Maybe@<V@> nil);
    M@;
  };

  # A non-empty Map from List@<T@> to V@;
  <@>@ MapP@ = <@ V@> {
    @ M@ = +(Unit@ empty, P@ p),
    @ P@ = *(M.Map@<M@> cons, Maybe@<V@> nil);
    P@;
  };

  Map@ Empty = <@ V@> {
    Map@<V@>(empty: Unit);
  };

  <@ V@>(Map@<V@>) { Bool@; }
  IsEmpty = <@ V@>(Map@<V@> map) {
    map.?(empty: True);
    False;
  };

  MapP@ EmptyP = <@ V@> {
    MapP@(M.Empty<Map@<V@>>, Nothing<V@>);
  };

  <@ V@>(MapP@<V@>) { Bool@; }
  IsEmptyP = <@ V@>(MapP@<V@> map) {
    M.IsEmpty(map.cons).?(false: False);
    map.nil.?(just: False);
    True;
  };

  <@ V@>(Map@<V@>, List@<T@>) { Maybe@<V@>; }
  Lookup = <@ V@>(Map@<V@> map, List@<T@> key) {
    map.?(empty: Nothing<V@>);
    key.?(nil: map.p.nil);

    Maybe@<Map@<V@>> cm = M.Lookup(map.p.cons, key.cons.head);
    cm.?(nothing: Nothing<V@>);

    Lookup(cm.just, key.cons.tail);
  };

  <@ V@>(Map@<V@>, List@<T@>, V@) { Map@<V@>; }
  Insert = <@ V@> (Map@<V@> map, List@<T@> key, V@ value) {
    MapP@<V@> p = map.?(empty: EmptyP<V@>, p: map.p);

    Map@(p: {
      key.?(nil: p.@(nil: Just(value)));

      p.@(cons: M.InsertWith(p.cons, key.cons.head, (Maybe@<Map@<V@>> mcm) {
          Map@<V@> cm = mcm.?(just: mcm.just, nothing: Empty<V@>);
          Insert(cm, key.cons.tail, value);
      }));
    });
  };

  <@ V@>(Map@<V@>, List@<T@>, (Maybe@<V@>) { V@; }) { Map@<V@>; }
  InsertWith = <@ V@> (Map@<V@> map, List@<T@> key, (Maybe@<V@>) { V@; } with) {
    MapP@<V@> p = map.?(empty: EmptyP<V@>, p: map.p);

    Map@(p: {
      key.?(nil: p.@(nil: Just(with(p.nil))));

      p.@(cons: M.InsertWith(p.cons, key.cons.head, (Maybe@<Map@<V@>> mcm) {
          Map@<V@> cm = mcm.?(just: mcm.just, nothing: Empty<V@>);
          InsertWith(cm, key.cons.tail, with);
      }));
    });
  };

  <@ V@>(Map@<V@>, List@<T@>) { Map@<V@>; }
  Delete = <@ V@>(Map@<V@> map, List@<T@> key) {
    map.?(empty: map);

    MapP@<V@> p = {
      key.?(nil: map.p.@(nil: Nothing<V@>));

      Maybe@<Map@<V@>> mcons = M.Lookup(map.p.cons, key.cons.head);
      mcons.?(nothing: map.p);

      Map@<V@> ncons = Delete(mcons.just, key.cons.tail);
      map.p.@(cons: M.Insert(map.p.cons, key.cons.head, ncons));
    };
    IsEmptyP(p).?(true: Empty<V@>, false: Map@(p: p));
  };

  <@ V@>(Map@<V@>)<@ B@>(B@, (List@<T@>, V@, B@) { B@; }) { B@; }
  ForEach = <@ V@>(Map@<V@> map)<@ B@>(B@ base, (List@<T@>, V@, B@) { B@; } body) {
    map.?(empty: base);

    MapP@<V@> p = map.p;
    B@ b1 = base;
    B@ b2 = p.nil.?(just: body(Nil<T@>, p.nil.just, b1), nothing: b1);

    M.ForEach(p.cons, b2, (T@ x, Map@<V@> m, B@ b) {
      ForEach(m, b, (List@<T@> l, V@ v, B@ bb) {
        body(Cons(x, l), v, bb);
      });
    });
  };

  /Core/Map%.Map@<Map@, List@<T@>> Map = @(
    Map@, Key@, Empty, IsEmpty, Insert, InsertWith, Delete, Lookup, ForEach
  );
  Map;
};

@(Map);
