
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% Not = /Core/Bool%.Not;
% Or = /Core/Bool%.Or;
% And = /Core/Bool%.And;

@ Int@ = /Core/Int%.Int@;
% Decr = /Core/Int%.Decr;
% IsZero = /Core/Int/Eq%.IsZero;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;
<@>% Contains = /Core/List/Eq%.Contains;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;
<<@>@>@ Random@ = /SatGame/Random%.Random@;

@ Var@ = /SatGame/Var%.Var@;

# In some cases two variables may look similar. Prefer to use the canonical
# variable in that case.
(Var@) { Bool@; }
IsCanonical = (Var@ v) {
  # Non-canonical cases:
  # * The middle row/column should not be empty.
  #    Prefer to move things towards the middle/center.
  Bool@ mid_empty = Not(Or(v.ml, Or(v.mc, v.mr)));
  Bool@ center_empty = Not(Or(v.uc, Or(v.mc, v.lc)));
  Or(mid_empty, center_empty).?(true: False);

  # * Bottom row empty but top row not empty.
  #   Prefer to move it down a row.
  Bool@ top_empty = Not(Or(v.ul, Or(v.uc, v.ur)));
  Bool@ bottom_empty = Not(Or(v.ll, Or(v.lc, v.lr)));
  And(bottom_empty, Not(top_empty)).?(true: False);

  # * Left column empty but right column not empty.
  #   Prefer to move it left a column.
  Bool@ left_empty = Not(Or(v.ul, Or(v.ml, v.ll)));
  Bool@ right_empty = Not(Or(v.ur, Or(v.mr, v.lr)));
  And(left_empty, Not(right_empty)).?(true: False);

  True;
};

# Generate a random variable.
<<@>@ M@>(Monad@<M@>, Random@<M@>) { M@<Var@>; }
Var = <<@>@ M@>(Monad@<M@> m, Random@<M@> rand) {
  Bool@ ul <- m.do(rand.bool);
  Bool@ uc <- m.do(rand.bool);
  Bool@ ur <- m.do(rand.bool);
  Bool@ ml <- m.do(rand.bool);
  Bool@ mc <- m.do(rand.bool);
  Bool@ mr <- m.do(rand.bool);
  Bool@ ll <- m.do(rand.bool);
  Bool@ lc <- m.do(rand.bool);
  Bool@ lr <- m.do(rand.bool);
  Var@ var = @(ul, uc, ur, ml, mc, mr, ll, lc, lr);
  IsCanonical(var).?(true: m.return(var));
  Var(m, rand);
};

# Generates a random variable distinct from the given list of variables.
<<@>@ M@>(Monad@<M@>, Random@<M@>, List@<Var@>) { M@<Var@>; }
DistinctVar = <<@>@ M@>(Monad@<M@> m, Random@<M@> rand, List@<Var@> vars) {
  Var@ x <- m.do(Var(m, rand));
  Contains(/SatGame/Var/Eq%.Eq, vars, x).?(false: m.return(x));
  DistinctVar(m, rand, vars);
};

# Generate N distinct random variables.
<<@>@ M@>(Monad@<M@>, Random@<M@>, Int@) { M@<List@<Var@>>; }
Vars = <<@>@ M@>(Monad@<M@> m, Random@<M@> rand, Int@ n) {
  IsZero(n).?(true: m.return(Nil<Var@>));
  List@<Var@> tail <- m.do(Vars(m, rand, Decr(n)));
  Var@ head <- m.do(DistinctVar(m, rand, tail));
  m.return(Cons(head, tail));
};

@(Var, Vars);
