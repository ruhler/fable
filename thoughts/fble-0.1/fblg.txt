Fblg
----
Early language exploration for what it would look like to combine the best of
fble and fblf into a single coherent language, rather than a fblf embedded in
fble.

I think the key idea of fblf is that there is no notion of returning values.
The only thing we can do is have side effects. That is a fundamentally
different way of thinking about things than fble. Fble is all about
expressions that return values. Fblg should be all about statements that have
side effects.

To the extent fblg has a kind of expression, it will be an expression that
returns references to values, and, if we are true to the current version of
fblf, it will be an expression whose value does not depend on runtime data. In
other words, it's like a pointer whose value can be computed as a compile time
constant offset from some input pointer.

Sketch:
* We have struct and union types as in fble. But let's say they are finite in
  size. So, non-recursive. Or, when you first construct the value you can
  initialize it to a finite depth, hard coding some union tag such that you
  can pack everything into a finite number of bits.

* We have expressions for references. It could be:
 - var - refers to an allocated value or an argument to a procedure.
 - access - refers to an offset from a given reference, as computed based on
            the type of the reference.

* Question: should union tags be explicit or implicit? If explicit, maybe we
  have struct, enum, and untagged unions.

* We have statements that have side effects.
  assignment: ref = value
  condition: union .? (tag: ..., tag: ..., ...)
  call: func(ref, ref, ...), where func is statically defined in scope.

* Question: do we use loops or recursive procedure calls? Loops are a special
  case, and they would want some form of special casing of type with two tags:
  true and false. Could we generalize while loops somehow? Maybe:

  while: union .?* (tag: ..., tag: ...)

  Say it repeatedly executes until it gets a tag that's not present in the
  body of the while? Like:
    Le(i, n).?*(
      true: {
      });

  Maybe conditional statements could have the same idea: by default do
  nothing.

  Of course, in practice it would have to be more like:
  Bool@ condition;
  Le(i, n, condition);
  condition.?*( 
    true: ... Le(i, n, condition)
  );

  Because remember, we can't return boolean values. We only have side effects.

* Define variables like automatic variables in C. Their lifetime is the
  lifetime of the scope they are defined in.

* We can define and use constant values.

Maybe expressions could be side effecting things that return references? The
reference returned is guaranteed to be in scope because you can't declare new
variables in expressions?

---

Proposed addition to fble for fblg. Take the concrete syntax with a huge grain
of salt.

Packed Types
------------
Abstract Syntax:
  Type ::= packed (type :: Type)

Concrete Syntax:
  type ::= type '$'

Example:
  Bool@$

A packed version of an fble type. The argument type must be non-recursive
structs and unions only. The packed version is guaranteed to be packed into a
well determined sequence of bits of a fixed size. There is no sharing of
subfields within a packed type. Fblg computations will operate on values of
packed type.

You can convert between normal and packed fble types:

Abstract Syntax:
  Expr ::= pack (expr :: Expr)
        |  unpack (expr :: Expr)

Concrete Syntax:
  expr ::= expr '.$'

Example:
  Bool@ b = True;
  Bool@$ bp = b.$;
  Bool@ b2 = bp.$;

If expr is a packed type, you get the unpacked version. If expr is unpacked,
you get the packed version. Converting to and from a packed type will cause
any sharing of subfields to be discarded.

There's no way to interact with packed types aside from packing, unpacking,
and passing them to and from fblg computations.

Pointer Types
-------------
Abstract Syntax:
  Type :: pointer (type :: Type)

Concrete syntax:
  type ::= type '*'

Example:
  Bool@*

Represents a pointer to a value of the given (packed) type. As with packed
types, the type is limited to non-recursive struct/union types.

Statements
----------
Abstract Syntax:
  Type :: statement

Concrete syntax:
  type ::= '$$'

There is a primitive type of value called a statement, which represents an
fblg program. A statement can be run, which will cause the statement's side
effects to take place.

Abstract Syntax:
  Expr :: copy (dst :: Expr) (src :: Expr)
        | set (dst :: Expr) (src :: Expr)

Copy takes dst of type T@* and src of type T@*. It copies the full contents of
src into dst. It has type Statement.

Set takes dst of type T@* and src of type T@&. It copies the full contents of
src into dst. It has type Statement.

Conditional expressions can be used with object of type T@*, for union type
T@. Similar to normal condition expressions, except not all tags need to be
present, and the body of the condition must be of type Statement. Behaves like
a condition on the value of the type pointed to by obj. For tags left out of
the list of tags, it is treated as if the branch has no action.

We introduce a while expression, with syntax foo.?*(tag1: ..., tag2: ...).
Here, 'foo' has union type T@*. Not all fields need tags present. The behavior
is to repeatedly execute the associated body of the while until foo takes on
one of the tag values not mentioned in the body of the while.

We have an fblg let expression: letg <name> <type> <stmt>. The behavior is to
allocate a packed value on the stack for the given type T@ and set name to be
a pointer to that value. The initial contents of the value are undefined (or
maybe you have to initialize it?). The value stays alive for as long as the
statement is executing, then the value goes out of scope.

You can define a procedure. Given fble function of type
  A@* -> B@* -> ... -> Statement, gives you back an fble function of identical
type that refers to the same shared value every time it is called. Think of it
like a synthesis boundary for fblg procedures.

You can convert fble function to fblg, and fblg function to fble:

call_fble: (T@& -> T@&) -> (T@* -> Stmt)
  Calls the fble function, gets the new value, and updates the original
  pointer to have that new value.

call_fblg: (T@* -> Stmt) -> (T@& -> T@&)
  Runs the fblg computation on the given value and returns the result of the
  value after the computation has finished.

For C API, let's say you can pass things of type Stmt as arguments to an fble
function, where the value is an arbitrary C function call. That should give us
a nice API that gives everything we need to replace procs.

Maybe a decent next step would be to start sketching an implementation of md5
in fblg.
