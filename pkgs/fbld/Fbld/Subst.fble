
@ Bool@ = /Core/Bool%.Bool@;
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;
% And = /Core/Bool%.And;

@ Char@ = /Core/Char%.Char@;
% IsNewline = /Core/Char/Type%.IsNewline;
% IsSpace = /Core/Char/Type%.IsSpace;

<@>@ List@ = /Core/List%.List@;
<@>% Length = /Core/List/Length%.Length;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;
<@>% Just = /Core/Maybe%.Just;
<@>% Nothing = /Core/Maybe%.Nothing;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Text@ = /Fbld/Text%.Text@;
% Text = /Fbld/Text%.Text;
% LocOf = /Fbld/Text%.LocOf;
% IsEmpty = /Fbld/Text%.IsEmpty;
% Head = /Fbld/Text%.Head;
% Tail = /Fbld/Text%.Tail;
% Append = /Fbld/Text%.Append;

@ Map@ = /Core/Map%.Map@<String@, Text@>;
% Empty = /Core/Map%.Empty<String@, Text@>;
% Insert = /Core/Map%.Insert<String@>(/Core/String/Ord%.Ord)<Text@>;
% Lookup = /Core/Map%.Lookup<String@>(/Core/String/Ord%.Ord)<Text@>;

# Indent all but first line with prefix.
(Text@, Text@) { Text@; } Indent = (Text@ prefix, Text@ text) {
  (Bool@, Text@, Text@) { Text@; }
  indent = (Bool@ nl, Text@ str, Text@ result) {
    IsEmpty(str).?(true: result);
    nl.?(true: indent(False, str, Append(result, prefix)));
    Char@ c = Head(str);
    indent(IsNewline(c), Tail(str), Append(result, Text(Str[c], LocOf(str))));
  };

  indent(False, text, /Fbld/Text%.Empty(LocOf(text)));
};

(Map@, Text@) { Text@; }
Subst = (Map@ map, Text@ body) {
  (Bool@, Text@, Text@, Text@) { Text@; }
  subst = (Bool@ indenting, Text@ indent, Text@ body, Text@ r) {
    IsEmpty(body).?(true: r);

    Char@ head = Head(body);
    Text@ head_text = Text(Str[head], LocOf(body));
    Text@ tail = Tail(body);
    IsNewline(head).?(true: {
      subst(True, Text(Str|'', LocOf(body)), tail, Append(r, head_text));
    });
    Text@ nindent = {
      indenting.?(false: indent);
      IsSpace(head).?(false: indent);
      Append(indent, head_text);
    };
    Bool@ nindenting = And(indenting, IsSpace(head));

    head.?('$': {
      Maybe@<String@> mv = /Core/Map%.ForEach(map, Nothing<String@>,
        (String@ key, Text@ _, Maybe@<String@> mv) {
          mv.?(just: mv);
          /Fbld/Text%.StartsWith(tail, key).?(true: Just(key));
          Nothing<String@>;
        });
      mv.?(nothing: {
        subst(nindenting, nindent, tail, Append(r, head_text));
      });
      Text@ ntail = /Fbld/Text%.Drop(Length(mv.just), tail);
      Text@ value = Lookup(map, mv.just).just;
      Text@ indented = Indent(indent, value);
      subst(nindenting, nindent, ntail, Append(r, indented));
    });
    subst(nindenting, nindent, tail, Append(r, head_text));
  };

  Text@ empty = /Fbld/Text%.Empty(LocOf(body));
  subst(True, empty, body, empty);
};

(List@<String@>, List@<Text@>) { Map@; }
MakeMap = {
  (List@<String@>, List@<Text@>, Map@) { Map@; }
  make_map = (List@<String@> keys, List@<Text@> values, Map@ m) {
    keys.?(nil: m);
    make_map(keys.cons.tail, values.cons.tail,
      Insert(m, keys.cons.head, values.cons.head));
  };

  (List@<String@> keys, List@<Text@> values) {
    make_map(keys, values, Empty);
  };
};

@(Map@, MakeMap, Empty, Insert, Subst);
