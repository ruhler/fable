
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

@ Int@ = /Core/Int%.Int@;
% Int = /Core/Int/Lit%.Int;

<@>@ List@ = /Core/List%.List@;
<@>% Cons = /Core/List%.Cons;
<@>% Nil = /Core/List%.Nil;
<@>% Reverse = /Core/List%.Reverse;

<<@>@>@ Monad@ = /Core/Monad%.Monad@;

<<@>@>@ Stdio@ = /Core/Stdio%.Stdio@;
<<@>@>@ Main@ = /Core/Stdio%.Main@;

@ String@ = /Core/String%.String@;
% Str = /Core/String%.Str;

@ Unit@ = /Core/Unit%.Unit@;

<<@>@>% Debug = /Sat/Debug%.Debug;

@ Solver@ = /Sat/Solver%.Solver@;
@ Result@ = /Sat/Solver%.Result@;
@ Algo@ = /Sat/Solver%.Algo@;
% NewSolver = /Sat/Solver%.NewSolver;
% AddClauses = /Sat/Solver%.AddClauses;
% CDCL = /Sat/Solver%.CDCL;
% DPLL = /Sat/Solver%.DPLL;

<<@>@>% Solve = /Sat/Solver%.Solve;

@ Formula@ = /Sat/Dimacs%.Formula@;
<@>@ Parse@ = /Sat/Dimacs%.Parse@;
% ParseLines = /Sat/Dimacs%.ParseLines;
% ShowResult = /Sat/Show%.ShowResult;

Main@ Main = <<@>@ M@>(Monad@<M@> m, Stdio@<M@> stdio) {
  % I = /Core/Stream/IStream%(m);
  % O = /Core/Stream/OStream%(m);

  (List@<String@>) { M@<List@<String@>>; }
  PrependReversedLines = (List@<String@> lines) {
    String@ next <- m.do(I.GetLine(stdio.in));
    next.?(nil: m.return(lines));
    PrependReversedLines(Cons(next, lines));
  };

  M@<List@<String@>> GetLines = {
    List@<String@> reversed <- m.do(PrependReversedLines(Nil<String@>));
    m.return(Reverse(reversed));
  };

  (List@<String@>) { Int@; } GetDebugArg = (List@<String@> args) {
    args.?(nil: Int|0);
    /Core/String/Eq%.Eq(args.cons.head, Str|'--debug').?(false: {
      GetDebugArg(args.cons.tail);
    });
    /Core/Int/Show%.Read(args.cons.tail.cons.head);
  };

  (List@<String@>) { Algo@; } GetAlgoArg = (List@<String@> args) {
    args.?(nil: CDCL);
    /Core/String/Eq%.Eq(args.cons.head, Str|'--algo').?(false: {
      GetAlgoArg(args.cons.tail);
    });
    String@ algo = args.cons.tail.cons.head;
    /Core/String/Eq%.Eq(algo, Str|'cdcl').?(true: CDCL);
    /Core/String/Eq%.Eq(algo, Str|'dpll').?(true: DPLL);
    CDCL;
  };

  (List@<String@> args) {
    List@<String@> lines <- m.do(GetLines);
    Parse@<Formula@> parsed = ParseLines(lines);
    parsed.?(error: {
      Unit@ _ <- m.do(O.PutStr(stdio.err, parsed.error));
      m.return(False);
    });

    Int@ debug = GetDebugArg(args);
    Algo@ algo = GetAlgoArg(args);
    Solver@ solver = AddClauses(NewSolver, parsed.parsed); 
    Result@ result <- m.do(Solve(m, Debug(m, debug, stdio.out), algo)(solver));
    Unit@ _ <- m.do(O.PutLine(stdio.out, ShowResult(result)));
    m.return(True);
  };
};

/Core/Stdio/IO%.Run(Main);
