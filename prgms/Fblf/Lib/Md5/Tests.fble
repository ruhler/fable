

% Chars = /Char%.Chars;

@ Hex@ = /Digits%.Hex@;
% Hex = /Digits%.Hex;

% I = /Int/Int/Lit%.I;
% D = /Int/Int/Lit%.D;

<@>@ List@ = /List%.List@;
<@>% Cons = /List%.Cons;
<@>% Nil = /List%.Nil;
<@>% List = /List%.List;
<@,@>% Map = /List%.Map;

<@,@>@ Lit@ = /Literal%.Lit@;

<@>@ CharLit@ = /String%.CharLit@;

@ Test@ = /Test%.Test@;
@ TestResult@ = /Test%.TestResult@;
% Test = /Test%.Test;
% TestSuite = /Test%.TestSuite;
<@>% AssertEquals = /Test%.AssertEquals;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

@ Addr@ = /Fblf/Program%.Addr@;
@ Program@ = /Fblf/Program%.Program@;
@ Value@ = /Fblf/Program%.Value@;
% Assign = /Fblf/Program%.Assign;
% ConstHex = /Fblf/Program%.ConstHex;
% Seq = /Fblf/Program%.Seq;
% SeqL = /Fblf/Program%.SeqL;

<@>@ Instance@ = /Fblf/Module%.Instance@;
<@>% Instantiate = /Fblf/Module%.Instantiate;

@ Md5@ = /Fblf/Lib/Md5%.Md5@;
% Md5 = /Fblf/Lib/Md5%.Md5;

@ Heap@ = /Fblf/Heap%.Heap@;
@ Ptr@ = /Fblf/Heap%.Ptr@;
% Heap = /Fblf/Heap%.Heap;
% HeapFromHexStr = /Fblf/Heap%.HeapFromHexStr;
% HeapFromPtr = /Fblf/Heap%.HeapFromPtr;

% Exec = /Fblf/Exec%.Exec;

(CharLit@, Lit@<Hex@>, Lit@<Hex@>) { Test@; }
TestStr = (CharLit@ name, Lit@<Hex@> wnt, Lit@<Hex@> bytes) {
  (List@<Hex@>) { List@<Value@>; } Bytes = (List@<Hex@> hl) {
    hl.?(
      cons: {
        Cons<Value@>(
          ConstHex([hl.cons.head, hl.cons.tail.cons.head]),
          Bytes(hl.cons.tail.cons.tail));
      },
      nil: Nil<Value@>);
  };

  Test(name, !({
    Addr@ input = I(D|0);
    Addr@ hash = I(D|8);
    Addr@ free = I(D|136);

    Instance@<Md5@> md5I = Instantiate<Md5@>(Md5(input, hash), free);
    Md5@ md5 = md5I.instance;

    Program@ feed = SeqL(Map<Value@, Program@>(
      Bytes(List<Hex@>(bytes)), (Value@ b) {
        Seq([Assign(input, b, I(D|8)), md5.feed]);
    }));

    Program@ prgm = Seq([md5.reset, feed, md5.finish]);

    Heap@ heap = Heap(md5I.heap);
    Heap@ got = Exec(prgm, heap);

    Heap@ wnt_ = HeapFromHexStr(wnt);
    Heap@ got_ = HeapFromPtr(Ptr@(got, hash), I(D|128));
    AssertEquals<Heap@>(/Fblf/Heap/Eq%.Eq, /Fblf/Heap/Show%.Show, wnt_, got_);
  }));
};

Test@ Tests = TestSuite(Chars|Md5, [
# Unfortunately it takes too long to run all of these tests.
  
#  TestStr(
#    Chars|empty,
#    Hex|D41D8CD98F00B204E9800998ECF8427E,
#    /Literal%.Empty<Hex@>),
#
#  # "a"
#  TestStr(
#    Chars|a,
#    Hex|0CC175B9C0F1B6A831C399E269772661,
#    Hex|61),
#
#  # "abc"
#  TestStr(
#    Chars|abc,
#    Hex|900150983CD24FB0D6963F7D28E17F72,
#    Hex|616263),
#
#  # "message digest"
#  TestStr(
#    Chars|message,
#    Hex|F96B697D7CB7938D525A2F31AAF161D0,
#    Hex|6D65737361676520646967657374),
#
#  # "abcdefghijklmnopqrstuvwxyz"
#  TestStr(
#    Chars|a_to_z,
#    Hex|C3FCD3D76192E4007DFB496CCA67E13B,
#    Hex|6162636465666768696A6B6C6D6E6F707172737475767778797A),
#
#  # "ABCDEFGHIJKLMNOPQRS0TUVWXYZabcdefghijklmnopqrstuvwxyz012345678@9"
#  TestStr(
#    Chars|A_to_9,
#    Hex|D174AB98D277D9F5A5611C2C9F419D9F,
#    Hex|4142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A30313233343536373839),
#
  # "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
  TestStr(
    Chars|1_to_0,
    Hex|57EDF4A22BE3C955AC49DA2E2107B67A,
    Hex|3132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930)
]);

Unit@! Bench = {
  TestResult@ _ := TestStr(
    Chars|1_to_0,
    Hex|57EDF4A22BE3C955AC49DA2E2107B67A,
    Hex|3132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930)
    .case.test;
  !(Unit);
};

@(Tests, Bench);
