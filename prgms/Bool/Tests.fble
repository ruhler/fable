
@ Bool@ = /Bool%.Bool@;
% True = /Bool%.True;
% False = /Bool%.False;
% Not = /Bool%.Not;
% And = /Bool%.And;
% Or = /Bool%.Or;
% Eq = /Bool/Eq%.Eq;

% Chars = /Char%.Chars;

<@>@ CharLit@ = /String%.CharLit@;
@ String@ = /String%.String@;
% Str = /String%.Str;

@ Test@ = /Test%.Test@;
% Test = /Test%.Test;
% TestSuite = /Test%.TestSuite;
<@>% AssertEquals = /Test%.AssertEquals;

# T --
#  Tests that a boolean expression evaluates to True.
#
# Inputs:
#  name - the name of the test.
#  p - a process that evaluates and returns the result of the boolean
#      expression to test.
#
# Results:
#  A test case that tests the result of evaluating the boolean expression is
#  True.
#
# Example Use:
#  T(Chars|Test_True_Is_True, !(True));
(CharLit@, Bool@!) { Test@; } T = (CharLit@ name, Bool@! p) {
  Test(name, {
    Bool@ x := p;
    !(AssertEquals<Bool@>(Eq, /Bool/Show%.Show, True, x));
  });
};

# F --
#  Tests that a boolean expression evaluates to False.
#
# Inputs:
#  name - the name of the test.
#  p - a process that evaluates and returns the result of the boolean
#      expression to test.
#
# Results:
#  A test case that tests the result of evaluating the boolean expression is
#  False.
#
# Example Use:
#  F(Chars|Test_False_Is_False, !(False));
(CharLit@, Bool@!) { Test@; } F = (CharLit@ name, Bool@! p) {
  Test(name, {
    Bool@ x := p;
    !(AssertEquals<Bool@>(Eq, /Bool/Show%.Show, False, x));
  });
};

# Tests --
#  A test suite to test the /Bool% module.
Test@ Tests = TestSuite(Str|Bool, List<Test@>[
  T(Str|True, !(True)),
  F(Str|False, !(False)),

  F(Str|Not_True, !(Not(True))),
  T(Str|Not_False, !(Not(False))),

  T(Str|And_True_True, !(And(True, True))),
  F(Str|And_True_False, !(And(True, False))),
  F(Str|And_False_True, !(And(False, True))),
  F(Str|And_False_False, !(And(False, False))),

  T(Str|Or_True_True, !(Or(True, True))),
  T(Str|Or_True_False, !(Or(True, False))),
  T(Str|Or_False_True, !(Or(False, True))),
  F(Str|Or_False_False, !(Or(False, False))),

  T(Str|Eq_True_True, !(Eq(True, True))),
  F(Str|Eq_True_False, !(Eq(True, False))),
  F(Str|Eq_False_True, !(Eq(False, True))),
  T(Str|Eq_False_False, !(Eq(False, False))),

  Test(Str|Show_True, !({
    String@ wnt = Str|'True';
    String@ got = /Bool/Show%.Show(True);
    AssertEquals<String@>(/String/Eq%.Eq, /String/Show%.Show, wnt, got);
  })),

  Test(Str|Show_False, !({
    String@ wnt = Str|'False';
    String@ got = /Bool/Show%.Show(False);
    AssertEquals<String@>(/String/Eq%.Eq, /String/Show%.Show, wnt, got);
  }))
]);

@(Tests);
