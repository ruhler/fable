
% BitStr = /Digits/String%.BitStr;

@ Addr@ = /Fblf/Program%.Addr@;
@ Program@ = /Fblf/Program%.Program@;
% Assign = /Fblf/Program%.Assign;
% Const = /Fblf/Program%.Const;
% Seq = /Fblf/Program%.Seq;

<@>% AllocM = /Fblf/Module%.AllocM;
<@>% PureM = /Fblf/Module%.PureM;
<@,@>% InstM = /Fblf/Module%.InstM;

% Int = /Int/Int/Lit%.Int;

<@>% List = /List%.List;

% AndM = /Fblf/Lib/Bitwise%.AndM;
% OrM = /Fblf/Lib/Bitwise%.OrM;
% XorM = /Fblf/Lib/Bitwise%.XorM;
% NotM = /Fblf/Lib/Bitwise%.NotM;
% ClsM = /Fblf/Lib/Bitwise%.ClsM;

@ Test@ = /Fblf/Test%.Test@;
@ TestInstance@ = /Fblf/Test%.TestInstance@;
% Test = /Fblf/Test%.Test;
% TestSuite = /Fblf/Test%.TestSuite;

% Str = /String%.Str;

Test@ Tests = TestSuite(Str|'Bitwise', List<Test@>[
  Test(Str|AndM, {
    Addr@ a <- AllocM<TestInstance@>(Int|4);
    Addr@ b <- AllocM<TestInstance@>(Int|4);
    Addr@ z <- AllocM<TestInstance@>(Int|4);
    Program@ and <- InstM<Program@, TestInstance@>(AndM(Int|4, a, b, z));

    Program@ test = Seq(List<Program@>[
      Assign(a, Const(BitStr|0011), Int|4),
      Assign(b, Const(BitStr|0110), Int|4),
      Assign(z, Const(BitStr|0000), Int|4),
      and
    ]);

    PureM<TestInstance@>(TestInstance@(test, Int|0, BitStr|001101100010));
  }),

  Test(Str|OrM, {
    Addr@ a <- AllocM<TestInstance@>(Int|4);
    Addr@ b <- AllocM<TestInstance@>(Int|4);
    Addr@ z <- AllocM<TestInstance@>(Int|4);
    Program@ or <- InstM<Program@, TestInstance@>(OrM(Int|4, a, b, z));

    Program@ test = Seq(List<Program@>[
      Assign(a, Const(BitStr|0011), Int|4),
      Assign(b, Const(BitStr|0110), Int|4),
      Assign(z, Const(BitStr|0000), Int|4),
      or
    ]);

    PureM<TestInstance@>(TestInstance@(test, Int|0, BitStr|001101100111));
  }),

  Test(Str|XorM, {
    Addr@ a <- AllocM<TestInstance@>(Int|4);
    Addr@ b <- AllocM<TestInstance@>(Int|4);
    Addr@ z <- AllocM<TestInstance@>(Int|4);
    Program@ xor <- InstM<Program@, TestInstance@>(XorM(Int|4, a, b, z));

    Program@ test = Seq(List<Program@>[
      Assign(a, Const(BitStr|0011), Int|4),
      Assign(b, Const(BitStr|0110), Int|4),
      Assign(z, Const(BitStr|0000), Int|4),
      xor
    ]);

    PureM<TestInstance@>(TestInstance@(test, Int|0, BitStr|001101100101));
  }),

  Test(Str|NotM, {
    Addr@ a <- AllocM<TestInstance@>(Int|4);
    Addr@ z <- AllocM<TestInstance@>(Int|4);
    Program@ not <- InstM<Program@, TestInstance@>(NotM(Int|4, a, z));

    Program@ test = Seq(List<Program@>[
      Assign(a, Const(BitStr|0011), Int|4),
      Assign(z, Const(BitStr|0000), Int|4),
      not
    ]);

    PureM<TestInstance@>(TestInstance@(test, Int|0, BitStr|00111100));
  }),

  Test(Str|ClsM, {
    Addr@ a <- AllocM<TestInstance@>(Int|5);
    Addr@ z <- AllocM<TestInstance@>(Int|5);
    Program@ cls <- InstM<Program@, TestInstance@>(ClsM(Int|5, Int|3, a, z));

    Program@ test = Seq(List<Program@>[
      Assign(a, Const(BitStr|10011), Int|5),
      Assign(z, Const(BitStr|00000), Int|5),
      cls
    ]);

    PureM<TestInstance@>(TestInstance@(test, Int|0, BitStr|1001111100));
  })
]);

@(Tests);
