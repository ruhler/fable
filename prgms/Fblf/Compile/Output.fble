
@ Char@ = /Char%.Char@;
% Chars = /Char%.Chars;

<@>% Append = /List%.Append;

<@>@ Put@ = /Process%.Put@;

@ String@ = /String%.String@;
% Str = /String%.Str;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

# Output@ -- 
#   Abstract data type for outputting a sequence of lines of text from
#   compilation.
@ Output@ = (Put@<String@>) { Unit@!; };

# Line --
#   Output the given line of text.
(String@) { Output@; } Line = (String@ line)(Put@<String@> put) {
  put(Append<Char@>(line, Str[Chars.nl]));
};

(Output@)((Unit@) { Output@; }) { Output@; }
Do = (Output@ m)((Unit@) { Output@; } f)(Put@<String@> put) {
  Unit@ _ := m(put);
  f(Unit)(put);
};

# Return --
#   Output nothing.
Output@ Return = (Put@<String@> _) { !(Unit); };

# Output --
#   Output the output to the given port.
(Put@<String@>, Output@) { Unit@!; } Output = (Put@<String@> put, Output@ output) {
  output(put);
};

@(Output@, Line, Do, Return, Output);
