Flaky Memory Tests
==================
Seems like memory tests are flaky. I see failures sometimes on windows laptop
and ubuntu.

Review of how memory tests work:

* We parse and evaluate the program to get the function value for test.
* We get peak memory use.
* For each of two sizes N 10,000 and 20,000:
 - We allocate an int value of size N large enough to represent 20,000.
 - We call the function.
 - We get peak memory use.

Peak memory use comes from:
* On windows: GetProcessMemoryInfo.PeakWorkingSetSize
* On linux: getrusage.ru_maxrss

It tends to be memory-constant tests that fail.

Windows laptop, 5.3-FuncApply/Regression/MemoryLeak.fble:
  memory growth of 68KB (3212KB + 24KB -> +92KB)
  This error went away on the next run.

Windows laptop, 5.3-FuncApply/Eval/TailRecursionMemory.fble:
  memory growth of 68KB (3200KB +24KB -> +92KB)
  This error went away on the next run.

Windows laptop, 5.3-FuncApply/Regression/MemoryLeak2.fble:
  memory growth of 72KB (3216KB +28KB -> +100KB)
  memory growth of 8KB (3216KB +28KB -> +36KB)
  memory growth of 8KB (3220KB +24KB -> +32KB)
  Seems to hit the last one consistently now.

Ubuntu, 5.3-FuncApply/Eval/TailRecursionMemory.fble
  memory growth of 128KB (1792KB +0KB -> +128KB)
  This error went away on the next run.

---

I assume the current memory measurement is subject to memory pressure. That's
always potentially going to be flaky. For example, imagine there is sudden
memory pressure just before the small run sample. Then the small run sample
will be artificially deflated, making it look like there's memory growth in
the large run sample.

Idea: go back to measuring total allocations from the application's point of
view rather than the OS's point of view. But this time, include stack size in
the count.

Sources of memory use in fble:
* FbleAlloc - we know how to track total size of that.
* Stack - we can sample current stack value in FbleCall and use that to track
  max stack size relatively closely I bet.

If we switch to a metric of FbleAlloc plus Stack, it should be deterministic,
reliable, not subject to memory pressure, and not requiring any OS-specific
code. All good things.

I should add a StackGrowth memory test to make sure we can catch stack memory
use without corresponding FbleAlloc in memory tests.

Otherwise, easy. Let's give it a try.

---

There are still a couple places we could run into trouble:
1. GC. Depending on how/when GC goes, we might use more or less memory in a
certain case than expected?
2. Stack chunks. Since we allocate in chunks, maybe that causes us issue?

Let's not worry about those for now. Implement things first.

Steps:
1. Add back FbleAlloc size tracking.
2. Add spec test for memory growth via stack.
3. Switch mem test back to FbleAlloc size tracking
 - Verify memory growth via stack test fails.
4. Add stack size tracking.
5. Add stack size tracking into memory test.
 - Verify memory growth via stack test passes.
6. Remove OS specific code in memory.c.
7. Reduce size N of mem test, which need not be so large anymore.

---

Another case for OS memory use instead of our trackers was to try and catch
when large FbleAlloc buffers are only being partially used. I don't know about
that. Let's see how things go switching back to FbleAlloc.

---

Good news and bad news. Some of the memory tests are failing now. The good
news is, it looks like we actually are leaking memory, and switching to
FbleAlloc tracking captures that memory use. The bad news, it looks like we
actually are leaking memory?
