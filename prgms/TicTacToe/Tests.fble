
<@>% List = /List%.List;

% Str = /String%.Str;

@ Test@ = /Test%.Test@;
@ TestResult@ = /Test%.TestResult@;
% TestSuite = /Test%.TestSuite;
% Test = /Test%.Test;

@ Unit@ = /Unit%.Unit@;
% Unit = /Unit%.Unit;

@ AI@ = /TicTacToe/AI%.AI@;
<@>% WithAI = /TicTacToe/AI%.WithAI;

@ Board@ = /TicTacToe/Board%.Board@;
@ Player@ = /TicTacToe/Board%.Player@;
@ Position@ = /TicTacToe/Board%.Position@;
@ Square@ = /TicTacToe/Board%.Square@;
@ Status@ = /TicTacToe/Board%.Status@;
% BoardStatus = /TicTacToe/Board%.BoardStatus;
% EmptyBoard = /TicTacToe/Board%.EmptyBoard;

# Import to test compilation.
% _ = /TicTacToe/Stdio%;

TestResult@! TestBoardStatus = {
  Unit@ _ := !(Unit); # Delay the test until we execute the process
  Status@ status = BoardStatus(Board@(
        Square@(X: Unit), Square@(O: Unit), Square@(O: Unit),
        Square@(E: Unit), Square@(O: Unit), Square@(X: Unit),
        Square@(O: Unit), Square@(X: Unit), Square@(X: Unit)));
  !(status.?(
      O: TestResult@(pass: Unit),
      : TestResult@(fail: Str|failed)));
};

# TODO: Use PositionEquals for test result, and report position when failed?
TestResult@! TestChooseBestMoveWin = {
  WithAI<TestResult@>((AI@ ai) {
    Position@ position := ai(Board@(
          Square@(X: Unit), Square@(X: Unit), Square@(E: Unit),
          Square@(O: Unit), Square@(O: Unit), Square@(E: Unit),
          Square@(E: Unit), Square@(E: Unit), Square@(E: Unit)), Player@(X: Unit));
    !(position.?(
        UR: TestResult@(pass: Unit),
          : TestResult@(fail: Str|failed)));
  });
};

TestResult@! TestChooseBestMoveNoLose = {
  WithAI<TestResult@>((AI@ ai) {
    Position@ position := ai(Board@(
          Square@(E: Unit), Square@(E: Unit), Square@(E: Unit),
          Square@(X: Unit), Square@(X: Unit), Square@(O: Unit),
          Square@(E: Unit), Square@(E: Unit), Square@(O: Unit)), Player@(X: Unit));
    !(position.?(
        UR: TestResult@(pass: Unit),
          : TestResult@(fail: Str|failed)));
  });
};


Test@ Tests = TestSuite(Str|TicTacToe, List<Test@>[
  Test(Str|TestBoardStatus, TestBoardStatus),
  Test(Str|TestChooseBestMoveWin, TestChooseBestMoveWin),
  Test(Str|TestChooseBestMoveNoLose, TestChooseBestMoveNoLose)
]);

# Benchmark for TicTacToe AI that takes about 1 minute to run.
Unit@! Bench = {
  WithAI<Unit@>((AI@ ai) {
    Position@ _ := ai(EmptyBoard, Player@(X: Unit));
    !(Unit);
  });
};

@(Tests, Bench);
