
import @ { Bit@Bit; StdLib; };
import StdLib { Unit; BoolM=Bool; };
import BoolM { Bool; True; False; };

func not(Bit a ; Bit) ?(a; 0: Bit:1(Unit()), 1: Bit:0(Unit()));
func and(Bit a, Bit b; Bit) ?(a; 0: a, 1: ?(b; 0: b, 1: a));
func or(Bit a, Bit b; Bit) ?(a; 0: ?(b; 0: a, 1: b), 1: a);
func xor(Bit a, Bit b; Bit) ?(a; 0: b, 1: not(b));
func add(Bit a, Bit b; Bit) fulladd(a, b, Bit:0(Unit())).z;
func zero(; Bit) Bit:0(Unit());
func iszero(Bit a; Bool) ?(a; 0: True(), 1: False());
func eq(Bit a, Bit b; Bool) {
  ?(a; 0: ?(b; 0: True(), 1: False()),
       1: ?(b; 0: False(), 1: True()));
};
func msb(Bit a; Bit) a;
func clshift(Bit a; Bit) a;

struct Result(Bit z, Bit cout);
func lshift(Bit a, Bit cin; Result) Result(cin, a);

func fulladd(Bit a, Bit b, Bit cin; Result) {
  ?(xor(a, b); 0: Result(cin, a), 1: Result(not(cin), cin));
};
