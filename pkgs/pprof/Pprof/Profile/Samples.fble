
% True = /Core/Bool%.True;
% False = /Core/Bool%.False;

<@>@ Eq@ = /Core/Eq%.Eq@;

@ Int@ = /Core/Int%.Int@;

<@>@ List@ = /Core/List%.List@;

<@>@ Maybe@ = /Core/Maybe%.Maybe@;

<@>@ Show@ = /Core/Show%.Show@;

% Str = /Core/String%.Str;
% Strs = /Core/String%.Strs;

@ Value@ = /Pprof/Profile/Value%.Value@;
% 0 = /Pprof/Profile/Value%.0;
% Add = /Pprof/Profile/Value%.Add;
% Sub = /Pprof/Profile/Value%.Sub;

% M = /Pprof/Profile/LocationMap%;

@ LocId@ = Int@;
@ Sequence@ = List@<LocId@>;

@ Samples@ = *(
  Value@ self,
  Value@ total,   # SUM of self of all nodes in the tree, for convenience.
  M.Map@<Samples@> children
);

Samples@ Empty = @(self: 0, total: 0, children: M.Empty<Samples@>);

# Inserts a sample into the given set of samples.
(Samples@, Sequence@, Value@) { Samples@; }
Insert = (Samples@ samples, Sequence@ seq, Value@ value) {
  Value@ total = Add(samples.total, value);
  seq.?(nil: {
    Value@ self = Add(samples.self, value);
    samples.@(self, total);
  });

  LocId@ key = seq.cons.head;
  Maybe@<Samples@> mchild = M.Lookup(samples.children, key);
  Samples@ child = mchild.?(just: mchild.just, nothing: Empty);
  Samples@ nchild = Insert(child, seq.cons.tail, value);
  M.Map@<Samples@> children = M.Insert(samples.children, key, nchild);
  samples.@(total, children);
};

# Returns the set of samples starting with the given prefix.
# The prefix itself is not included in the returned set.
(Samples@, Sequence@) { Samples@; }
Lookup = (Samples@ samples, Sequence@ seq) {
  seq.?(nil: samples);

  Maybe@<Samples@> mchild = M.Lookup(samples.children, seq.cons.head);
  mchild.?(nothing: Empty);

  Lookup(mchild.just, seq.cons.tail);
};

# Removes all samples from the given set that start with the given sequence.
(Samples@, Sequence@) { Samples@; }
RemoveSamples = (Samples@ samples, Sequence@ seq) {
  seq.?(nil: Empty);

  Maybe@<Samples@> mchild = M.Lookup(samples.children, seq.cons.head);
  mchild.?(nothing: samples);

  Samples@ child = RemoveSamples(mchild.just, seq.cons.tail);
  Value@ removed = Sub(mchild.just.total, child.total);

  Value@ total = Sub(samples.total, removed);
  M.Map@<Samples@> children = M.Insert(samples.children, seq.cons.head, child);
  samples.@(total, children);
};

# The sum of the values for all samples with seq as a suffix.
(Samples@, Sequence@) { Value@; }
CountSelf = (Samples@ samples, Sequence@ seq) {
  Value@ here = Lookup(samples, seq).self;
  M.ForEach(samples.children, here, (LocId@ _, Samples@ child, Value@ s) {
    Add(CountSelf(child, seq), s);
  });
};

# The sum of the values for all samples with seq as a subsequence.
(Samples@, Sequence@) { Value@; }
CountTotal = (Samples@ samples, Sequence@ seq) {
  Value@ here = Lookup(samples, seq).total;
  Samples@ removed = RemoveSamples(samples, seq);

  M.ForEach(removed.children, here, (LocId@ _, Samples@ child, Value@ s) {
    Add(CountTotal(child, seq), s);
  });
};

Show@<Samples@> Show = (Samples@ x) {
  Strs[
    Str|'@(self: ', /Core/List/Show%.Show(/Core/Int/Show%.Show, x.self),
    Str|', total: ', /Core/List/Show%.Show(/Core/Int/Show%.Show, x.total),
    Str|', children: ', /Core/Map/Show%.Show<M.Map@, Int@>(M, /Core/Int/Show%.Show, Show, x.children),
    Str|')'];
};

Eq@<Samples@> Eq = (Samples@ a, Samples@ b) {
  /Pprof/Profile/Value%.Eq(a.self, b.self).?(false: False);
  /Pprof/Profile/Value%.Eq(a.total, b.total).?(false: False);
  /Core/Int/Map/Eq%.Eq(Eq, a.children, b.children).?(false: False);
  True;
};

@(Samples@, Empty, Insert, CountSelf, CountTotal, Show, Eq);
